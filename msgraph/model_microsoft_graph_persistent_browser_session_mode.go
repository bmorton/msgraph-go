/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphPersistentBrowserSessionMode the model 'MicrosoftGraphPersistentBrowserSessionMode'
type MicrosoftGraphPersistentBrowserSessionMode string

// List of microsoft.graph.persistentBrowserSessionMode
const (
	ALWAYS MicrosoftGraphPersistentBrowserSessionMode = "always"
	NEVER MicrosoftGraphPersistentBrowserSessionMode = "never"
)

// All allowed values of MicrosoftGraphPersistentBrowserSessionMode enum
var AllowedMicrosoftGraphPersistentBrowserSessionModeEnumValues = []MicrosoftGraphPersistentBrowserSessionMode{
	"always",
	"never",
}

func (v *MicrosoftGraphPersistentBrowserSessionMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphPersistentBrowserSessionMode(value)
	for _, existing := range AllowedMicrosoftGraphPersistentBrowserSessionModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphPersistentBrowserSessionMode", value)
}

// NewMicrosoftGraphPersistentBrowserSessionModeFromValue returns a pointer to a valid MicrosoftGraphPersistentBrowserSessionMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphPersistentBrowserSessionModeFromValue(v string) (*MicrosoftGraphPersistentBrowserSessionMode, error) {
	ev := MicrosoftGraphPersistentBrowserSessionMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphPersistentBrowserSessionMode: valid values are %v", v, AllowedMicrosoftGraphPersistentBrowserSessionModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphPersistentBrowserSessionMode) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphPersistentBrowserSessionModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.persistentBrowserSessionMode value
func (v MicrosoftGraphPersistentBrowserSessionMode) Ptr() *MicrosoftGraphPersistentBrowserSessionMode {
	return &v
}

type NullableMicrosoftGraphPersistentBrowserSessionMode struct {
	value *MicrosoftGraphPersistentBrowserSessionMode
	isSet bool
}

func (v NullableMicrosoftGraphPersistentBrowserSessionMode) Get() *MicrosoftGraphPersistentBrowserSessionMode {
	return v.value
}

func (v *NullableMicrosoftGraphPersistentBrowserSessionMode) Set(val *MicrosoftGraphPersistentBrowserSessionMode) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPersistentBrowserSessionMode) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPersistentBrowserSessionMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPersistentBrowserSessionMode(val *MicrosoftGraphPersistentBrowserSessionMode) *NullableMicrosoftGraphPersistentBrowserSessionMode {
	return &NullableMicrosoftGraphPersistentBrowserSessionMode{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPersistentBrowserSessionMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPersistentBrowserSessionMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

