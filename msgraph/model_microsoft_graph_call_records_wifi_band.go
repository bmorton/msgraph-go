/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphCallRecordsWifiBand the model 'MicrosoftGraphCallRecordsWifiBand'
type MicrosoftGraphCallRecordsWifiBand string

// List of microsoft.graph.callRecords.wifiBand
const (
	UNKNOWN MicrosoftGraphCallRecordsWifiBand = "unknown"
	FREQUENCY24_GHZ MicrosoftGraphCallRecordsWifiBand = "frequency24GHz"
	FREQUENCY50_GHZ MicrosoftGraphCallRecordsWifiBand = "frequency50GHz"
	FREQUENCY60_GHZ MicrosoftGraphCallRecordsWifiBand = "frequency60GHz"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphCallRecordsWifiBand = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphCallRecordsWifiBand enum
var AllowedMicrosoftGraphCallRecordsWifiBandEnumValues = []MicrosoftGraphCallRecordsWifiBand{
	"unknown",
	"frequency24GHz",
	"frequency50GHz",
	"frequency60GHz",
	"unknownFutureValue",
}

func (v *MicrosoftGraphCallRecordsWifiBand) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphCallRecordsWifiBand(value)
	for _, existing := range AllowedMicrosoftGraphCallRecordsWifiBandEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphCallRecordsWifiBand", value)
}

// NewMicrosoftGraphCallRecordsWifiBandFromValue returns a pointer to a valid MicrosoftGraphCallRecordsWifiBand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphCallRecordsWifiBandFromValue(v string) (*MicrosoftGraphCallRecordsWifiBand, error) {
	ev := MicrosoftGraphCallRecordsWifiBand(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphCallRecordsWifiBand: valid values are %v", v, AllowedMicrosoftGraphCallRecordsWifiBandEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphCallRecordsWifiBand) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphCallRecordsWifiBandEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.callRecords.wifiBand value
func (v MicrosoftGraphCallRecordsWifiBand) Ptr() *MicrosoftGraphCallRecordsWifiBand {
	return &v
}

type NullableMicrosoftGraphCallRecordsWifiBand struct {
	value *MicrosoftGraphCallRecordsWifiBand
	isSet bool
}

func (v NullableMicrosoftGraphCallRecordsWifiBand) Get() *MicrosoftGraphCallRecordsWifiBand {
	return v.value
}

func (v *NullableMicrosoftGraphCallRecordsWifiBand) Set(val *MicrosoftGraphCallRecordsWifiBand) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphCallRecordsWifiBand) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphCallRecordsWifiBand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphCallRecordsWifiBand(val *MicrosoftGraphCallRecordsWifiBand) *NullableMicrosoftGraphCallRecordsWifiBand {
	return &NullableMicrosoftGraphCallRecordsWifiBand{value: val, isSet: true}
}

func (v NullableMicrosoftGraphCallRecordsWifiBand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphCallRecordsWifiBand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

