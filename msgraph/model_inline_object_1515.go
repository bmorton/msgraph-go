/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// InlineObject1515 struct for InlineObject1515
type InlineObject1515 struct {
	Text AnyOfobject `json:"text,omitempty"`
	OldText AnyOfobject `json:"oldText,omitempty"`
	NewText AnyOfobject `json:"newText,omitempty"`
	InstanceNum AnyOfobject `json:"instanceNum,omitempty"`
}

// NewInlineObject1515 instantiates a new InlineObject1515 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1515() *InlineObject1515 {
	this := InlineObject1515{}
	return &this
}

// NewInlineObject1515WithDefaults instantiates a new InlineObject1515 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1515WithDefaults() *InlineObject1515 {
	this := InlineObject1515{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1515) GetText() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1515) GetTextOk() (*AnyOfobject, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return &o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *InlineObject1515) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given AnyOfobject and assigns it to the Text field.
func (o *InlineObject1515) SetText(v AnyOfobject) {
	o.Text = v
}

// GetOldText returns the OldText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1515) GetOldText() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.OldText
}

// GetOldTextOk returns a tuple with the OldText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1515) GetOldTextOk() (*AnyOfobject, bool) {
	if o == nil || o.OldText == nil {
		return nil, false
	}
	return &o.OldText, true
}

// HasOldText returns a boolean if a field has been set.
func (o *InlineObject1515) HasOldText() bool {
	if o != nil && o.OldText != nil {
		return true
	}

	return false
}

// SetOldText gets a reference to the given AnyOfobject and assigns it to the OldText field.
func (o *InlineObject1515) SetOldText(v AnyOfobject) {
	o.OldText = v
}

// GetNewText returns the NewText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1515) GetNewText() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.NewText
}

// GetNewTextOk returns a tuple with the NewText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1515) GetNewTextOk() (*AnyOfobject, bool) {
	if o == nil || o.NewText == nil {
		return nil, false
	}
	return &o.NewText, true
}

// HasNewText returns a boolean if a field has been set.
func (o *InlineObject1515) HasNewText() bool {
	if o != nil && o.NewText != nil {
		return true
	}

	return false
}

// SetNewText gets a reference to the given AnyOfobject and assigns it to the NewText field.
func (o *InlineObject1515) SetNewText(v AnyOfobject) {
	o.NewText = v
}

// GetInstanceNum returns the InstanceNum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1515) GetInstanceNum() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.InstanceNum
}

// GetInstanceNumOk returns a tuple with the InstanceNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1515) GetInstanceNumOk() (*AnyOfobject, bool) {
	if o == nil || o.InstanceNum == nil {
		return nil, false
	}
	return &o.InstanceNum, true
}

// HasInstanceNum returns a boolean if a field has been set.
func (o *InlineObject1515) HasInstanceNum() bool {
	if o != nil && o.InstanceNum != nil {
		return true
	}

	return false
}

// SetInstanceNum gets a reference to the given AnyOfobject and assigns it to the InstanceNum field.
func (o *InlineObject1515) SetInstanceNum(v AnyOfobject) {
	o.InstanceNum = v
}

func (o InlineObject1515) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.OldText != nil {
		toSerialize["oldText"] = o.OldText
	}
	if o.NewText != nil {
		toSerialize["newText"] = o.NewText
	}
	if o.InstanceNum != nil {
		toSerialize["instanceNum"] = o.InstanceNum
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1515 struct {
	value *InlineObject1515
	isSet bool
}

func (v NullableInlineObject1515) Get() *InlineObject1515 {
	return v.value
}

func (v *NullableInlineObject1515) Set(val *InlineObject1515) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1515) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1515) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1515(val *InlineObject1515) *NullableInlineObject1515 {
	return &NullableInlineObject1515{value: val, isSet: true}
}

func (v NullableInlineObject1515) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1515) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


