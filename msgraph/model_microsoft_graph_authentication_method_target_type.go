/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphAuthenticationMethodTargetType the model 'MicrosoftGraphAuthenticationMethodTargetType'
type MicrosoftGraphAuthenticationMethodTargetType string

// List of microsoft.graph.authenticationMethodTargetType
const (
	USER MicrosoftGraphAuthenticationMethodTargetType = "user"
	GROUP MicrosoftGraphAuthenticationMethodTargetType = "group"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphAuthenticationMethodTargetType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphAuthenticationMethodTargetType enum
var AllowedMicrosoftGraphAuthenticationMethodTargetTypeEnumValues = []MicrosoftGraphAuthenticationMethodTargetType{
	"user",
	"group",
	"unknownFutureValue",
}

func (v *MicrosoftGraphAuthenticationMethodTargetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphAuthenticationMethodTargetType(value)
	for _, existing := range AllowedMicrosoftGraphAuthenticationMethodTargetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphAuthenticationMethodTargetType", value)
}

// NewMicrosoftGraphAuthenticationMethodTargetTypeFromValue returns a pointer to a valid MicrosoftGraphAuthenticationMethodTargetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphAuthenticationMethodTargetTypeFromValue(v string) (*MicrosoftGraphAuthenticationMethodTargetType, error) {
	ev := MicrosoftGraphAuthenticationMethodTargetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphAuthenticationMethodTargetType: valid values are %v", v, AllowedMicrosoftGraphAuthenticationMethodTargetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphAuthenticationMethodTargetType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphAuthenticationMethodTargetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.authenticationMethodTargetType value
func (v MicrosoftGraphAuthenticationMethodTargetType) Ptr() *MicrosoftGraphAuthenticationMethodTargetType {
	return &v
}

type NullableMicrosoftGraphAuthenticationMethodTargetType struct {
	value *MicrosoftGraphAuthenticationMethodTargetType
	isSet bool
}

func (v NullableMicrosoftGraphAuthenticationMethodTargetType) Get() *MicrosoftGraphAuthenticationMethodTargetType {
	return v.value
}

func (v *NullableMicrosoftGraphAuthenticationMethodTargetType) Set(val *MicrosoftGraphAuthenticationMethodTargetType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAuthenticationMethodTargetType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAuthenticationMethodTargetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAuthenticationMethodTargetType(val *MicrosoftGraphAuthenticationMethodTargetType) *NullableMicrosoftGraphAuthenticationMethodTargetType {
	return &NullableMicrosoftGraphAuthenticationMethodTargetType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAuthenticationMethodTargetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAuthenticationMethodTargetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

