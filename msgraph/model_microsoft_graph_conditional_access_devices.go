/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphConditionalAccessDevices struct for MicrosoftGraphConditionalAccessDevices
type MicrosoftGraphConditionalAccessDevices struct {
	// Filter that defines the dynamic-device-syntax rule to include/exclude devices. A filter can use device properties (such as extension attributes) to include/exclude them.
	DeviceFilter AnyOfmicrosoftGraphConditionalAccessFilter `json:"deviceFilter,omitempty"`
}

// NewMicrosoftGraphConditionalAccessDevices instantiates a new MicrosoftGraphConditionalAccessDevices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphConditionalAccessDevices() *MicrosoftGraphConditionalAccessDevices {
	this := MicrosoftGraphConditionalAccessDevices{}
	return &this
}

// NewMicrosoftGraphConditionalAccessDevicesWithDefaults instantiates a new MicrosoftGraphConditionalAccessDevices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphConditionalAccessDevicesWithDefaults() *MicrosoftGraphConditionalAccessDevices {
	this := MicrosoftGraphConditionalAccessDevices{}
	return &this
}

// GetDeviceFilter returns the DeviceFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphConditionalAccessDevices) GetDeviceFilter() AnyOfmicrosoftGraphConditionalAccessFilter {
	if o == nil  {
		var ret AnyOfmicrosoftGraphConditionalAccessFilter
		return ret
	}
	return o.DeviceFilter
}

// GetDeviceFilterOk returns a tuple with the DeviceFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphConditionalAccessDevices) GetDeviceFilterOk() (*AnyOfmicrosoftGraphConditionalAccessFilter, bool) {
	if o == nil || o.DeviceFilter == nil {
		return nil, false
	}
	return &o.DeviceFilter, true
}

// HasDeviceFilter returns a boolean if a field has been set.
func (o *MicrosoftGraphConditionalAccessDevices) HasDeviceFilter() bool {
	if o != nil && o.DeviceFilter != nil {
		return true
	}

	return false
}

// SetDeviceFilter gets a reference to the given AnyOfmicrosoftGraphConditionalAccessFilter and assigns it to the DeviceFilter field.
func (o *MicrosoftGraphConditionalAccessDevices) SetDeviceFilter(v AnyOfmicrosoftGraphConditionalAccessFilter) {
	o.DeviceFilter = v
}

func (o MicrosoftGraphConditionalAccessDevices) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceFilter != nil {
		toSerialize["deviceFilter"] = o.DeviceFilter
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphConditionalAccessDevices struct {
	value *MicrosoftGraphConditionalAccessDevices
	isSet bool
}

func (v NullableMicrosoftGraphConditionalAccessDevices) Get() *MicrosoftGraphConditionalAccessDevices {
	return v.value
}

func (v *NullableMicrosoftGraphConditionalAccessDevices) Set(val *MicrosoftGraphConditionalAccessDevices) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphConditionalAccessDevices) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphConditionalAccessDevices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphConditionalAccessDevices(val *MicrosoftGraphConditionalAccessDevices) *NullableMicrosoftGraphConditionalAccessDevices {
	return &NullableMicrosoftGraphConditionalAccessDevices{value: val, isSet: true}
}

func (v NullableMicrosoftGraphConditionalAccessDevices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphConditionalAccessDevices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


