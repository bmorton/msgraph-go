/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphEducationAddedStudentAction the model 'MicrosoftGraphEducationAddedStudentAction'
type MicrosoftGraphEducationAddedStudentAction string

// List of microsoft.graph.educationAddedStudentAction
const (
	NONE MicrosoftGraphEducationAddedStudentAction = "none"
	ASSIGN_IF_OPEN MicrosoftGraphEducationAddedStudentAction = "assignIfOpen"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphEducationAddedStudentAction = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphEducationAddedStudentAction enum
var AllowedMicrosoftGraphEducationAddedStudentActionEnumValues = []MicrosoftGraphEducationAddedStudentAction{
	"none",
	"assignIfOpen",
	"unknownFutureValue",
}

func (v *MicrosoftGraphEducationAddedStudentAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphEducationAddedStudentAction(value)
	for _, existing := range AllowedMicrosoftGraphEducationAddedStudentActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphEducationAddedStudentAction", value)
}

// NewMicrosoftGraphEducationAddedStudentActionFromValue returns a pointer to a valid MicrosoftGraphEducationAddedStudentAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphEducationAddedStudentActionFromValue(v string) (*MicrosoftGraphEducationAddedStudentAction, error) {
	ev := MicrosoftGraphEducationAddedStudentAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphEducationAddedStudentAction: valid values are %v", v, AllowedMicrosoftGraphEducationAddedStudentActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphEducationAddedStudentAction) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphEducationAddedStudentActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.educationAddedStudentAction value
func (v MicrosoftGraphEducationAddedStudentAction) Ptr() *MicrosoftGraphEducationAddedStudentAction {
	return &v
}

type NullableMicrosoftGraphEducationAddedStudentAction struct {
	value *MicrosoftGraphEducationAddedStudentAction
	isSet bool
}

func (v NullableMicrosoftGraphEducationAddedStudentAction) Get() *MicrosoftGraphEducationAddedStudentAction {
	return v.value
}

func (v *NullableMicrosoftGraphEducationAddedStudentAction) Set(val *MicrosoftGraphEducationAddedStudentAction) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphEducationAddedStudentAction) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphEducationAddedStudentAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphEducationAddedStudentAction(val *MicrosoftGraphEducationAddedStudentAction) *NullableMicrosoftGraphEducationAddedStudentAction {
	return &NullableMicrosoftGraphEducationAddedStudentAction{value: val, isSet: true}
}

func (v NullableMicrosoftGraphEducationAddedStudentAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphEducationAddedStudentAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

