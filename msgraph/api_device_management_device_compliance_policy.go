/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementDeviceCompliancePolicyApiService DeviceManagementDeviceCompliancePolicyApi service
type DeviceManagementDeviceCompliancePolicyApiService service

type ApiDeviceManagementCreateDeviceCompliancePoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	microsoftGraphDeviceCompliancePolicy *MicrosoftGraphDeviceCompliancePolicy
}

// New navigation property
func (r ApiDeviceManagementCreateDeviceCompliancePoliciesRequest) MicrosoftGraphDeviceCompliancePolicy(microsoftGraphDeviceCompliancePolicy MicrosoftGraphDeviceCompliancePolicy) ApiDeviceManagementCreateDeviceCompliancePoliciesRequest {
	r.microsoftGraphDeviceCompliancePolicy = &microsoftGraphDeviceCompliancePolicy
	return r
}

func (r ApiDeviceManagementCreateDeviceCompliancePoliciesRequest) Execute() (MicrosoftGraphDeviceCompliancePolicy, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementCreateDeviceCompliancePoliciesExecute(r)
}

/*
DeviceManagementCreateDeviceCompliancePolicies Create new navigation property to deviceCompliancePolicies for deviceManagement

The device compliance policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementCreateDeviceCompliancePoliciesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementCreateDeviceCompliancePolicies(ctx _context.Context) ApiDeviceManagementCreateDeviceCompliancePoliciesRequest {
	return ApiDeviceManagementCreateDeviceCompliancePoliciesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCompliancePolicy
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementCreateDeviceCompliancePoliciesExecute(r ApiDeviceManagementCreateDeviceCompliancePoliciesRequest) (MicrosoftGraphDeviceCompliancePolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCompliancePolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementCreateDeviceCompliancePolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCompliancePolicy == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceCompliancePolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCompliancePolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeleteDeviceCompliancePoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeleteDeviceCompliancePoliciesRequest) IfMatch(ifMatch string) ApiDeviceManagementDeleteDeviceCompliancePoliciesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeleteDeviceCompliancePoliciesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeleteDeviceCompliancePoliciesExecute(r)
}

/*
DeviceManagementDeleteDeviceCompliancePolicies Delete navigation property deviceCompliancePolicies for deviceManagement

The device compliance policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeleteDeviceCompliancePoliciesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeleteDeviceCompliancePolicies(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeleteDeviceCompliancePoliciesRequest {
	return ApiDeviceManagementDeleteDeviceCompliancePoliciesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeleteDeviceCompliancePoliciesExecute(r ApiDeviceManagementDeleteDeviceCompliancePoliciesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeleteDeviceCompliancePolicies")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesCreateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	microsoftGraphDeviceCompliancePolicyAssignment *MicrosoftGraphDeviceCompliancePolicyAssignment
}

// New navigation property
func (r ApiDeviceManagementDeviceCompliancePoliciesCreateAssignmentsRequest) MicrosoftGraphDeviceCompliancePolicyAssignment(microsoftGraphDeviceCompliancePolicyAssignment MicrosoftGraphDeviceCompliancePolicyAssignment) ApiDeviceManagementDeviceCompliancePoliciesCreateAssignmentsRequest {
	r.microsoftGraphDeviceCompliancePolicyAssignment = &microsoftGraphDeviceCompliancePolicyAssignment
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesCreateAssignmentsRequest) Execute() (MicrosoftGraphDeviceCompliancePolicyAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesCreateAssignmentsExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesCreateAssignments Create new navigation property to assignments for deviceManagement

The collection of assignments for this compliance policy.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesCreateAssignmentsRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesCreateAssignments(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesCreateAssignmentsRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesCreateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCompliancePolicyAssignment
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesCreateAssignmentsExecute(r ApiDeviceManagementDeviceCompliancePoliciesCreateAssignmentsRequest) (MicrosoftGraphDeviceCompliancePolicyAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCompliancePolicyAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesCreateAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCompliancePolicyAssignment == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceCompliancePolicyAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCompliancePolicyAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceSettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	microsoftGraphSettingStateDeviceSummary *MicrosoftGraphSettingStateDeviceSummary
}

// New navigation property
func (r ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceSettingStateSummariesRequest) MicrosoftGraphSettingStateDeviceSummary(microsoftGraphSettingStateDeviceSummary MicrosoftGraphSettingStateDeviceSummary) ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceSettingStateSummariesRequest {
	r.microsoftGraphSettingStateDeviceSummary = &microsoftGraphSettingStateDeviceSummary
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceSettingStateSummariesRequest) Execute() (MicrosoftGraphSettingStateDeviceSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesCreateDeviceSettingStateSummariesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesCreateDeviceSettingStateSummaries Create new navigation property to deviceSettingStateSummaries for deviceManagement

Compliance Setting State Device Summary

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceSettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesCreateDeviceSettingStateSummaries(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceSettingStateSummariesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceSettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSettingStateDeviceSummary
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesCreateDeviceSettingStateSummariesExecute(r ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceSettingStateSummariesRequest) (MicrosoftGraphSettingStateDeviceSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSettingStateDeviceSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesCreateDeviceSettingStateSummaries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/deviceSettingStateSummaries"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSettingStateDeviceSummary == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSettingStateDeviceSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSettingStateDeviceSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	microsoftGraphDeviceComplianceDeviceStatus *MicrosoftGraphDeviceComplianceDeviceStatus
}

// New navigation property
func (r ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceStatusesRequest) MicrosoftGraphDeviceComplianceDeviceStatus(microsoftGraphDeviceComplianceDeviceStatus MicrosoftGraphDeviceComplianceDeviceStatus) ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceStatusesRequest {
	r.microsoftGraphDeviceComplianceDeviceStatus = &microsoftGraphDeviceComplianceDeviceStatus
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceStatusesRequest) Execute() (MicrosoftGraphDeviceComplianceDeviceStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesCreateDeviceStatusesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesCreateDeviceStatuses Create new navigation property to deviceStatuses for deviceManagement

List of DeviceComplianceDeviceStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceStatusesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesCreateDeviceStatuses(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceStatusesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceComplianceDeviceStatus
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesCreateDeviceStatusesExecute(r ApiDeviceManagementDeviceCompliancePoliciesCreateDeviceStatusesRequest) (MicrosoftGraphDeviceComplianceDeviceStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceComplianceDeviceStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesCreateDeviceStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/deviceStatuses"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceComplianceDeviceStatus == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceComplianceDeviceStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceComplianceDeviceStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesCreateScheduledActionsForRuleRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	microsoftGraphDeviceComplianceScheduledActionForRule *MicrosoftGraphDeviceComplianceScheduledActionForRule
}

// New navigation property
func (r ApiDeviceManagementDeviceCompliancePoliciesCreateScheduledActionsForRuleRequest) MicrosoftGraphDeviceComplianceScheduledActionForRule(microsoftGraphDeviceComplianceScheduledActionForRule MicrosoftGraphDeviceComplianceScheduledActionForRule) ApiDeviceManagementDeviceCompliancePoliciesCreateScheduledActionsForRuleRequest {
	r.microsoftGraphDeviceComplianceScheduledActionForRule = &microsoftGraphDeviceComplianceScheduledActionForRule
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesCreateScheduledActionsForRuleRequest) Execute() (MicrosoftGraphDeviceComplianceScheduledActionForRule, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesCreateScheduledActionsForRuleExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesCreateScheduledActionsForRule Create new navigation property to scheduledActionsForRule for deviceManagement

The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesCreateScheduledActionsForRuleRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesCreateScheduledActionsForRule(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesCreateScheduledActionsForRuleRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesCreateScheduledActionsForRuleRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceComplianceScheduledActionForRule
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesCreateScheduledActionsForRuleExecute(r ApiDeviceManagementDeviceCompliancePoliciesCreateScheduledActionsForRuleRequest) (MicrosoftGraphDeviceComplianceScheduledActionForRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceComplianceScheduledActionForRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesCreateScheduledActionsForRule")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/scheduledActionsForRule"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceComplianceScheduledActionForRule == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceComplianceScheduledActionForRule is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceComplianceScheduledActionForRule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesCreateUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	microsoftGraphDeviceComplianceUserStatus *MicrosoftGraphDeviceComplianceUserStatus
}

// New navigation property
func (r ApiDeviceManagementDeviceCompliancePoliciesCreateUserStatusesRequest) MicrosoftGraphDeviceComplianceUserStatus(microsoftGraphDeviceComplianceUserStatus MicrosoftGraphDeviceComplianceUserStatus) ApiDeviceManagementDeviceCompliancePoliciesCreateUserStatusesRequest {
	r.microsoftGraphDeviceComplianceUserStatus = &microsoftGraphDeviceComplianceUserStatus
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesCreateUserStatusesRequest) Execute() (MicrosoftGraphDeviceComplianceUserStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesCreateUserStatusesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesCreateUserStatuses Create new navigation property to userStatuses for deviceManagement

List of DeviceComplianceUserStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesCreateUserStatusesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesCreateUserStatuses(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesCreateUserStatusesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesCreateUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceComplianceUserStatus
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesCreateUserStatusesExecute(r ApiDeviceManagementDeviceCompliancePoliciesCreateUserStatusesRequest) (MicrosoftGraphDeviceComplianceUserStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceComplianceUserStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesCreateUserStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/userStatuses"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceComplianceUserStatus == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceComplianceUserStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceComplianceUserStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesDeleteAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceCompliancePolicyAssignmentId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteAssignmentsRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceCompliancePoliciesDeleteAssignmentsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesDeleteAssignmentsExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesDeleteAssignments Delete navigation property assignments for deviceManagement

The collection of assignments for this compliance policy.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceCompliancePolicyAssignmentId key: id of deviceCompliancePolicyAssignment
 @return ApiDeviceManagementDeviceCompliancePoliciesDeleteAssignmentsRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteAssignments(ctx _context.Context, deviceCompliancePolicyId string, deviceCompliancePolicyAssignmentId string) ApiDeviceManagementDeviceCompliancePoliciesDeleteAssignmentsRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesDeleteAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceCompliancePolicyAssignmentId: deviceCompliancePolicyAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteAssignmentsExecute(r ApiDeviceManagementDeviceCompliancePoliciesDeleteAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesDeleteAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/assignments/{deviceCompliancePolicyAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicyAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceSettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	settingStateDeviceSummaryId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceSettingStateSummariesRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceSettingStateSummariesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceSettingStateSummariesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesDeleteDeviceSettingStateSummariesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesDeleteDeviceSettingStateSummaries Delete navigation property deviceSettingStateSummaries for deviceManagement

Compliance Setting State Device Summary

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param settingStateDeviceSummaryId key: id of settingStateDeviceSummary
 @return ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceSettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteDeviceSettingStateSummaries(ctx _context.Context, deviceCompliancePolicyId string, settingStateDeviceSummaryId string) ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceSettingStateSummariesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceSettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		settingStateDeviceSummaryId: settingStateDeviceSummaryId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteDeviceSettingStateSummariesExecute(r ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceSettingStateSummariesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesDeleteDeviceSettingStateSummaries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/deviceSettingStateSummaries/{settingStateDeviceSummary-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"settingStateDeviceSummary-id"+"}", _neturl.PathEscape(parameterToString(r.settingStateDeviceSummaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusOverviewRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusOverviewRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusOverviewRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusOverviewRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusOverviewExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusOverview Delete navigation property deviceStatusOverview for deviceManagement

Device compliance devices status overview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusOverviewRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusOverview(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusOverviewRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusOverviewRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusOverviewExecute(r ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusOverviewRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusOverview")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/deviceStatusOverview"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceDeviceStatusId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusesRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesDeleteDeviceStatuses Delete navigation property deviceStatuses for deviceManagement

List of DeviceComplianceDeviceStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceDeviceStatusId key: id of deviceComplianceDeviceStatus
 @return ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteDeviceStatuses(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceDeviceStatusId string) ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceDeviceStatusId: deviceComplianceDeviceStatusId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusesExecute(r ApiDeviceManagementDeviceCompliancePoliciesDeleteDeviceStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesDeleteDeviceStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/deviceStatuses/{deviceComplianceDeviceStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceDeviceStatus-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceDeviceStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesDeleteScheduledActionsForRuleRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceScheduledActionForRuleId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteScheduledActionsForRuleRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceCompliancePoliciesDeleteScheduledActionsForRuleRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteScheduledActionsForRuleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesDeleteScheduledActionsForRuleExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesDeleteScheduledActionsForRule Delete navigation property scheduledActionsForRule for deviceManagement

The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceScheduledActionForRuleId key: id of deviceComplianceScheduledActionForRule
 @return ApiDeviceManagementDeviceCompliancePoliciesDeleteScheduledActionsForRuleRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteScheduledActionsForRule(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceScheduledActionForRuleId string) ApiDeviceManagementDeviceCompliancePoliciesDeleteScheduledActionsForRuleRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesDeleteScheduledActionsForRuleRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceScheduledActionForRuleId: deviceComplianceScheduledActionForRuleId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteScheduledActionsForRuleExecute(r ApiDeviceManagementDeviceCompliancePoliciesDeleteScheduledActionsForRuleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesDeleteScheduledActionsForRule")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/scheduledActionsForRule/{deviceComplianceScheduledActionForRule-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceScheduledActionForRule-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceScheduledActionForRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusOverviewRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusOverviewRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusOverviewRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusOverviewRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesDeleteUserStatusOverviewExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesDeleteUserStatusOverview Delete navigation property userStatusOverview for deviceManagement

Device compliance users status overview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusOverviewRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteUserStatusOverview(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusOverviewRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusOverviewRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteUserStatusOverviewExecute(r ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusOverviewRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesDeleteUserStatusOverview")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/userStatusOverview"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceUserStatusId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusesRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesDeleteUserStatusesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesDeleteUserStatuses Delete navigation property userStatuses for deviceManagement

List of DeviceComplianceUserStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceUserStatusId key: id of deviceComplianceUserStatus
 @return ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteUserStatuses(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceUserStatusId string) ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceUserStatusId: deviceComplianceUserStatusId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesDeleteUserStatusesExecute(r ApiDeviceManagementDeviceCompliancePoliciesDeleteUserStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesDeleteUserStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/userStatuses/{deviceComplianceUserStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceUserStatus-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceUserStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesGetAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceCompliancePolicyAssignmentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesGetAssignmentsRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesGetAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesGetAssignmentsRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesGetAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesGetAssignmentsRequest) Execute() (MicrosoftGraphDeviceCompliancePolicyAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesGetAssignmentsExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesGetAssignments Get assignments from deviceManagement

The collection of assignments for this compliance policy.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceCompliancePolicyAssignmentId key: id of deviceCompliancePolicyAssignment
 @return ApiDeviceManagementDeviceCompliancePoliciesGetAssignmentsRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetAssignments(ctx _context.Context, deviceCompliancePolicyId string, deviceCompliancePolicyAssignmentId string) ApiDeviceManagementDeviceCompliancePoliciesGetAssignmentsRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesGetAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceCompliancePolicyAssignmentId: deviceCompliancePolicyAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCompliancePolicyAssignment
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetAssignmentsExecute(r ApiDeviceManagementDeviceCompliancePoliciesGetAssignmentsRequest) (MicrosoftGraphDeviceCompliancePolicyAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCompliancePolicyAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesGetAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/assignments/{deviceCompliancePolicyAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicyAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	settingStateDeviceSummaryId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummariesRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummariesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummariesRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummariesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummariesRequest) Execute() (MicrosoftGraphSettingStateDeviceSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummariesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummaries Get deviceSettingStateSummaries from deviceManagement

Compliance Setting State Device Summary

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param settingStateDeviceSummaryId key: id of settingStateDeviceSummary
 @return ApiDeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummaries(ctx _context.Context, deviceCompliancePolicyId string, settingStateDeviceSummaryId string) ApiDeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummariesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		settingStateDeviceSummaryId: settingStateDeviceSummaryId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSettingStateDeviceSummary
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummariesExecute(r ApiDeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummariesRequest) (MicrosoftGraphSettingStateDeviceSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSettingStateDeviceSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesGetDeviceSettingStateSummaries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/deviceSettingStateSummaries/{settingStateDeviceSummary-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"settingStateDeviceSummary-id"+"}", _neturl.PathEscape(parameterToString(r.settingStateDeviceSummaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverviewRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverviewRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverviewRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverviewRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverviewRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverviewRequest) Execute() (MicrosoftGraphDeviceComplianceDeviceOverview, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverviewExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverview Get deviceStatusOverview from deviceManagement

Device compliance devices status overview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverviewRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverview(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverviewRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverviewRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceComplianceDeviceOverview
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverviewExecute(r ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverviewRequest) (MicrosoftGraphDeviceComplianceDeviceOverview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceComplianceDeviceOverview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesGetDeviceStatusOverview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/deviceStatusOverview"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceDeviceStatusId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusesRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusesRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusesRequest) Execute() (MicrosoftGraphDeviceComplianceDeviceStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesGetDeviceStatusesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesGetDeviceStatuses Get deviceStatuses from deviceManagement

List of DeviceComplianceDeviceStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceDeviceStatusId key: id of deviceComplianceDeviceStatus
 @return ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetDeviceStatuses(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceDeviceStatusId string) ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceDeviceStatusId: deviceComplianceDeviceStatusId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceComplianceDeviceStatus
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetDeviceStatusesExecute(r ApiDeviceManagementDeviceCompliancePoliciesGetDeviceStatusesRequest) (MicrosoftGraphDeviceComplianceDeviceStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceComplianceDeviceStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesGetDeviceStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/deviceStatuses/{deviceComplianceDeviceStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceDeviceStatus-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceDeviceStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRuleRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceScheduledActionForRuleId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRuleRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRuleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRuleRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRuleRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRuleRequest) Execute() (MicrosoftGraphDeviceComplianceScheduledActionForRule, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRuleExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRule Get scheduledActionsForRule from deviceManagement

The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceScheduledActionForRuleId key: id of deviceComplianceScheduledActionForRule
 @return ApiDeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRuleRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRule(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceScheduledActionForRuleId string) ApiDeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRuleRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRuleRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceScheduledActionForRuleId: deviceComplianceScheduledActionForRuleId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceComplianceScheduledActionForRule
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRuleExecute(r ApiDeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRuleRequest) (MicrosoftGraphDeviceComplianceScheduledActionForRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceComplianceScheduledActionForRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesGetScheduledActionsForRule")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/scheduledActionsForRule/{deviceComplianceScheduledActionForRule-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceScheduledActionForRule-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceScheduledActionForRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusOverviewRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusOverviewRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusOverviewRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusOverviewRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusOverviewRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusOverviewRequest) Execute() (MicrosoftGraphDeviceComplianceUserOverview, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesGetUserStatusOverviewExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesGetUserStatusOverview Get userStatusOverview from deviceManagement

Device compliance users status overview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusOverviewRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetUserStatusOverview(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusOverviewRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusOverviewRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceComplianceUserOverview
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetUserStatusOverviewExecute(r ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusOverviewRequest) (MicrosoftGraphDeviceComplianceUserOverview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceComplianceUserOverview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesGetUserStatusOverview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/userStatusOverview"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceUserStatusId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusesRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusesRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusesRequest) Execute() (MicrosoftGraphDeviceComplianceUserStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesGetUserStatusesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesGetUserStatuses Get userStatuses from deviceManagement

List of DeviceComplianceUserStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceUserStatusId key: id of deviceComplianceUserStatus
 @return ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetUserStatuses(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceUserStatusId string) ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceUserStatusId: deviceComplianceUserStatusId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceComplianceUserStatus
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesGetUserStatusesExecute(r ApiDeviceManagementDeviceCompliancePoliciesGetUserStatusesRequest) (MicrosoftGraphDeviceComplianceUserStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceComplianceUserStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesGetUserStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/userStatuses/{deviceComplianceUserStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceUserStatus-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceUserStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest) Top(top int32) ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest) Skip(skip int32) ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest) Search(search string) ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest) Filter(filter string) ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest) Count(count bool) ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest) Orderby(orderby []string) ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest) Execute() (CollectionOfDeviceCompliancePolicyAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesListAssignmentsExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesListAssignments Get assignments from deviceManagement

The collection of assignments for this compliance policy.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesListAssignments(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceCompliancePolicyAssignment
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesListAssignmentsExecute(r ApiDeviceManagementDeviceCompliancePoliciesListAssignmentsRequest) (CollectionOfDeviceCompliancePolicyAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceCompliancePolicyAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesListAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest) Top(top int32) ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest) Skip(skip int32) ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest) Search(search string) ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest) Filter(filter string) ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest) Count(count bool) ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest) Orderby(orderby []string) ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest) Execute() (CollectionOfSettingStateDeviceSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummaries Get deviceSettingStateSummaries from deviceManagement

Compliance Setting State Device Summary

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummaries(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
//  @return CollectionOfSettingStateDeviceSummary
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesExecute(r ApiDeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummariesRequest) (CollectionOfSettingStateDeviceSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSettingStateDeviceSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesListDeviceSettingStateSummaries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/deviceSettingStateSummaries"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest) Top(top int32) ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest) Skip(skip int32) ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest) Search(search string) ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest) Filter(filter string) ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest) Count(count bool) ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest) Orderby(orderby []string) ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest) Execute() (CollectionOfDeviceComplianceDeviceStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesListDeviceStatusesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesListDeviceStatuses Get deviceStatuses from deviceManagement

List of DeviceComplianceDeviceStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesListDeviceStatuses(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceComplianceDeviceStatus
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesListDeviceStatusesExecute(r ApiDeviceManagementDeviceCompliancePoliciesListDeviceStatusesRequest) (CollectionOfDeviceComplianceDeviceStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceComplianceDeviceStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesListDeviceStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/deviceStatuses"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest) Top(top int32) ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest) Skip(skip int32) ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest) Search(search string) ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest) Filter(filter string) ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest) Count(count bool) ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest) Orderby(orderby []string) ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest) Execute() (CollectionOfDeviceComplianceScheduledActionForRule, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesListScheduledActionsForRule Get scheduledActionsForRule from deviceManagement

The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesListScheduledActionsForRule(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceComplianceScheduledActionForRule
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleExecute(r ApiDeviceManagementDeviceCompliancePoliciesListScheduledActionsForRuleRequest) (CollectionOfDeviceComplianceScheduledActionForRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceComplianceScheduledActionForRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesListScheduledActionsForRule")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/scheduledActionsForRule"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest) Top(top int32) ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest) Skip(skip int32) ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest) Search(search string) ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest) Filter(filter string) ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest) Count(count bool) ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest) Orderby(orderby []string) ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest) Execute() (CollectionOfDeviceComplianceUserStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesListUserStatusesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesListUserStatuses Get userStatuses from deviceManagement

List of DeviceComplianceUserStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesListUserStatuses(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceComplianceUserStatus
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesListUserStatusesExecute(r ApiDeviceManagementDeviceCompliancePoliciesListUserStatusesRequest) (CollectionOfDeviceComplianceUserStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceComplianceUserStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesListUserStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/userStatuses"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleCreateScheduledActionConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceScheduledActionForRuleId string
	microsoftGraphDeviceComplianceActionItem *MicrosoftGraphDeviceComplianceActionItem
}

// New navigation property
func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleCreateScheduledActionConfigurationsRequest) MicrosoftGraphDeviceComplianceActionItem(microsoftGraphDeviceComplianceActionItem MicrosoftGraphDeviceComplianceActionItem) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleCreateScheduledActionConfigurationsRequest {
	r.microsoftGraphDeviceComplianceActionItem = &microsoftGraphDeviceComplianceActionItem
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleCreateScheduledActionConfigurationsRequest) Execute() (MicrosoftGraphDeviceComplianceActionItem, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleCreateScheduledActionConfigurationsExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleCreateScheduledActionConfigurations Create new navigation property to scheduledActionConfigurations for deviceManagement

The list of scheduled action configurations for this compliance policy. Compliance policy must have one and only one block scheduled action.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceScheduledActionForRuleId key: id of deviceComplianceScheduledActionForRule
 @return ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleCreateScheduledActionConfigurationsRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleCreateScheduledActionConfigurations(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceScheduledActionForRuleId string) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleCreateScheduledActionConfigurationsRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleCreateScheduledActionConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceScheduledActionForRuleId: deviceComplianceScheduledActionForRuleId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceComplianceActionItem
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleCreateScheduledActionConfigurationsExecute(r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleCreateScheduledActionConfigurationsRequest) (MicrosoftGraphDeviceComplianceActionItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceComplianceActionItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleCreateScheduledActionConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/scheduledActionsForRule/{deviceComplianceScheduledActionForRule-id}/scheduledActionConfigurations"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceScheduledActionForRule-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceScheduledActionForRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceComplianceActionItem == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceComplianceActionItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceComplianceActionItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleDeleteScheduledActionConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceScheduledActionForRuleId string
	deviceComplianceActionItemId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleDeleteScheduledActionConfigurationsRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleDeleteScheduledActionConfigurationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleDeleteScheduledActionConfigurationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleDeleteScheduledActionConfigurationsExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleDeleteScheduledActionConfigurations Delete navigation property scheduledActionConfigurations for deviceManagement

The list of scheduled action configurations for this compliance policy. Compliance policy must have one and only one block scheduled action.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceScheduledActionForRuleId key: id of deviceComplianceScheduledActionForRule
 @param deviceComplianceActionItemId key: id of deviceComplianceActionItem
 @return ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleDeleteScheduledActionConfigurationsRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleDeleteScheduledActionConfigurations(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceScheduledActionForRuleId string, deviceComplianceActionItemId string) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleDeleteScheduledActionConfigurationsRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleDeleteScheduledActionConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceScheduledActionForRuleId: deviceComplianceScheduledActionForRuleId,
		deviceComplianceActionItemId: deviceComplianceActionItemId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleDeleteScheduledActionConfigurationsExecute(r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleDeleteScheduledActionConfigurationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleDeleteScheduledActionConfigurations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/scheduledActionsForRule/{deviceComplianceScheduledActionForRule-id}/scheduledActionConfigurations/{deviceComplianceActionItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceScheduledActionForRule-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceScheduledActionForRuleId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceActionItem-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceActionItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceScheduledActionForRuleId string
	deviceComplianceActionItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurationsRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurationsRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurationsRequest) Execute() (MicrosoftGraphDeviceComplianceActionItem, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurationsExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurations Get scheduledActionConfigurations from deviceManagement

The list of scheduled action configurations for this compliance policy. Compliance policy must have one and only one block scheduled action.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceScheduledActionForRuleId key: id of deviceComplianceScheduledActionForRule
 @param deviceComplianceActionItemId key: id of deviceComplianceActionItem
 @return ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurationsRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurations(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceScheduledActionForRuleId string, deviceComplianceActionItemId string) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurationsRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceScheduledActionForRuleId: deviceComplianceScheduledActionForRuleId,
		deviceComplianceActionItemId: deviceComplianceActionItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceComplianceActionItem
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurationsExecute(r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurationsRequest) (MicrosoftGraphDeviceComplianceActionItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceComplianceActionItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleGetScheduledActionConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/scheduledActionsForRule/{deviceComplianceScheduledActionForRule-id}/scheduledActionConfigurations/{deviceComplianceActionItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceScheduledActionForRule-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceScheduledActionForRuleId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceActionItem-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceActionItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceScheduledActionForRuleId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest) Top(top int32) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest) Skip(skip int32) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest) Search(search string) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest) Filter(filter string) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest) Count(count bool) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest) Orderby(orderby []string) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest) Execute() (CollectionOfDeviceComplianceActionItem, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurations Get scheduledActionConfigurations from deviceManagement

The list of scheduled action configurations for this compliance policy. Compliance policy must have one and only one block scheduled action.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceScheduledActionForRuleId key: id of deviceComplianceScheduledActionForRule
 @return ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurations(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceScheduledActionForRuleId string) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceScheduledActionForRuleId: deviceComplianceScheduledActionForRuleId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceComplianceActionItem
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsExecute(r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurationsRequest) (CollectionOfDeviceComplianceActionItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceComplianceActionItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleListScheduledActionConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/scheduledActionsForRule/{deviceComplianceScheduledActionForRule-id}/scheduledActionConfigurations"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceScheduledActionForRule-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceScheduledActionForRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleUpdateScheduledActionConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceScheduledActionForRuleId string
	deviceComplianceActionItemId string
	microsoftGraphDeviceComplianceActionItem *MicrosoftGraphDeviceComplianceActionItem
}

// New navigation property values
func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleUpdateScheduledActionConfigurationsRequest) MicrosoftGraphDeviceComplianceActionItem(microsoftGraphDeviceComplianceActionItem MicrosoftGraphDeviceComplianceActionItem) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleUpdateScheduledActionConfigurationsRequest {
	r.microsoftGraphDeviceComplianceActionItem = &microsoftGraphDeviceComplianceActionItem
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleUpdateScheduledActionConfigurationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleUpdateScheduledActionConfigurationsExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleUpdateScheduledActionConfigurations Update the navigation property scheduledActionConfigurations in deviceManagement

The list of scheduled action configurations for this compliance policy. Compliance policy must have one and only one block scheduled action.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceScheduledActionForRuleId key: id of deviceComplianceScheduledActionForRule
 @param deviceComplianceActionItemId key: id of deviceComplianceActionItem
 @return ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleUpdateScheduledActionConfigurationsRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleUpdateScheduledActionConfigurations(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceScheduledActionForRuleId string, deviceComplianceActionItemId string) ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleUpdateScheduledActionConfigurationsRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleUpdateScheduledActionConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceScheduledActionForRuleId: deviceComplianceScheduledActionForRuleId,
		deviceComplianceActionItemId: deviceComplianceActionItemId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleUpdateScheduledActionConfigurationsExecute(r ApiDeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleUpdateScheduledActionConfigurationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesScheduledActionsForRuleUpdateScheduledActionConfigurations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/scheduledActionsForRule/{deviceComplianceScheduledActionForRule-id}/scheduledActionConfigurations/{deviceComplianceActionItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceScheduledActionForRule-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceScheduledActionForRuleId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceActionItem-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceActionItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceComplianceActionItem == nil {
		return nil, reportError("microsoftGraphDeviceComplianceActionItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceComplianceActionItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesUpdateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceCompliancePolicyAssignmentId string
	microsoftGraphDeviceCompliancePolicyAssignment *MicrosoftGraphDeviceCompliancePolicyAssignment
}

// New navigation property values
func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateAssignmentsRequest) MicrosoftGraphDeviceCompliancePolicyAssignment(microsoftGraphDeviceCompliancePolicyAssignment MicrosoftGraphDeviceCompliancePolicyAssignment) ApiDeviceManagementDeviceCompliancePoliciesUpdateAssignmentsRequest {
	r.microsoftGraphDeviceCompliancePolicyAssignment = &microsoftGraphDeviceCompliancePolicyAssignment
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesUpdateAssignmentsExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesUpdateAssignments Update the navigation property assignments in deviceManagement

The collection of assignments for this compliance policy.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceCompliancePolicyAssignmentId key: id of deviceCompliancePolicyAssignment
 @return ApiDeviceManagementDeviceCompliancePoliciesUpdateAssignmentsRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateAssignments(ctx _context.Context, deviceCompliancePolicyId string, deviceCompliancePolicyAssignmentId string) ApiDeviceManagementDeviceCompliancePoliciesUpdateAssignmentsRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesUpdateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceCompliancePolicyAssignmentId: deviceCompliancePolicyAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateAssignmentsExecute(r ApiDeviceManagementDeviceCompliancePoliciesUpdateAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesUpdateAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/assignments/{deviceCompliancePolicyAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicyAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCompliancePolicyAssignment == nil {
		return nil, reportError("microsoftGraphDeviceCompliancePolicyAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCompliancePolicyAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceSettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	settingStateDeviceSummaryId string
	microsoftGraphSettingStateDeviceSummary *MicrosoftGraphSettingStateDeviceSummary
}

// New navigation property values
func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceSettingStateSummariesRequest) MicrosoftGraphSettingStateDeviceSummary(microsoftGraphSettingStateDeviceSummary MicrosoftGraphSettingStateDeviceSummary) ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceSettingStateSummariesRequest {
	r.microsoftGraphSettingStateDeviceSummary = &microsoftGraphSettingStateDeviceSummary
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceSettingStateSummariesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesUpdateDeviceSettingStateSummariesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesUpdateDeviceSettingStateSummaries Update the navigation property deviceSettingStateSummaries in deviceManagement

Compliance Setting State Device Summary

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param settingStateDeviceSummaryId key: id of settingStateDeviceSummary
 @return ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceSettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateDeviceSettingStateSummaries(ctx _context.Context, deviceCompliancePolicyId string, settingStateDeviceSummaryId string) ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceSettingStateSummariesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceSettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		settingStateDeviceSummaryId: settingStateDeviceSummaryId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateDeviceSettingStateSummariesExecute(r ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceSettingStateSummariesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesUpdateDeviceSettingStateSummaries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/deviceSettingStateSummaries/{settingStateDeviceSummary-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"settingStateDeviceSummary-id"+"}", _neturl.PathEscape(parameterToString(r.settingStateDeviceSummaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSettingStateDeviceSummary == nil {
		return nil, reportError("microsoftGraphSettingStateDeviceSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSettingStateDeviceSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusOverviewRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	microsoftGraphDeviceComplianceDeviceOverview *MicrosoftGraphDeviceComplianceDeviceOverview
}

// New navigation property values
func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusOverviewRequest) MicrosoftGraphDeviceComplianceDeviceOverview(microsoftGraphDeviceComplianceDeviceOverview MicrosoftGraphDeviceComplianceDeviceOverview) ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusOverviewRequest {
	r.microsoftGraphDeviceComplianceDeviceOverview = &microsoftGraphDeviceComplianceDeviceOverview
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusOverviewRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusOverviewExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusOverview Update the navigation property deviceStatusOverview in deviceManagement

Device compliance devices status overview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusOverviewRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusOverview(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusOverviewRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusOverviewRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusOverviewExecute(r ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusOverviewRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusOverview")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/deviceStatusOverview"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceComplianceDeviceOverview == nil {
		return nil, reportError("microsoftGraphDeviceComplianceDeviceOverview is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceComplianceDeviceOverview
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceDeviceStatusId string
	microsoftGraphDeviceComplianceDeviceStatus *MicrosoftGraphDeviceComplianceDeviceStatus
}

// New navigation property values
func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusesRequest) MicrosoftGraphDeviceComplianceDeviceStatus(microsoftGraphDeviceComplianceDeviceStatus MicrosoftGraphDeviceComplianceDeviceStatus) ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusesRequest {
	r.microsoftGraphDeviceComplianceDeviceStatus = &microsoftGraphDeviceComplianceDeviceStatus
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesUpdateDeviceStatuses Update the navigation property deviceStatuses in deviceManagement

List of DeviceComplianceDeviceStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceDeviceStatusId key: id of deviceComplianceDeviceStatus
 @return ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateDeviceStatuses(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceDeviceStatusId string) ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceDeviceStatusId: deviceComplianceDeviceStatusId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusesExecute(r ApiDeviceManagementDeviceCompliancePoliciesUpdateDeviceStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesUpdateDeviceStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/deviceStatuses/{deviceComplianceDeviceStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceDeviceStatus-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceDeviceStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceComplianceDeviceStatus == nil {
		return nil, reportError("microsoftGraphDeviceComplianceDeviceStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceComplianceDeviceStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesUpdateScheduledActionsForRuleRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceScheduledActionForRuleId string
	microsoftGraphDeviceComplianceScheduledActionForRule *MicrosoftGraphDeviceComplianceScheduledActionForRule
}

// New navigation property values
func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateScheduledActionsForRuleRequest) MicrosoftGraphDeviceComplianceScheduledActionForRule(microsoftGraphDeviceComplianceScheduledActionForRule MicrosoftGraphDeviceComplianceScheduledActionForRule) ApiDeviceManagementDeviceCompliancePoliciesUpdateScheduledActionsForRuleRequest {
	r.microsoftGraphDeviceComplianceScheduledActionForRule = &microsoftGraphDeviceComplianceScheduledActionForRule
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateScheduledActionsForRuleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesUpdateScheduledActionsForRuleExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesUpdateScheduledActionsForRule Update the navigation property scheduledActionsForRule in deviceManagement

The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceScheduledActionForRuleId key: id of deviceComplianceScheduledActionForRule
 @return ApiDeviceManagementDeviceCompliancePoliciesUpdateScheduledActionsForRuleRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateScheduledActionsForRule(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceScheduledActionForRuleId string) ApiDeviceManagementDeviceCompliancePoliciesUpdateScheduledActionsForRuleRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesUpdateScheduledActionsForRuleRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceScheduledActionForRuleId: deviceComplianceScheduledActionForRuleId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateScheduledActionsForRuleExecute(r ApiDeviceManagementDeviceCompliancePoliciesUpdateScheduledActionsForRuleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesUpdateScheduledActionsForRule")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/scheduledActionsForRule/{deviceComplianceScheduledActionForRule-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceScheduledActionForRule-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceScheduledActionForRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceComplianceScheduledActionForRule == nil {
		return nil, reportError("microsoftGraphDeviceComplianceScheduledActionForRule is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceComplianceScheduledActionForRule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusOverviewRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	microsoftGraphDeviceComplianceUserOverview *MicrosoftGraphDeviceComplianceUserOverview
}

// New navigation property values
func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusOverviewRequest) MicrosoftGraphDeviceComplianceUserOverview(microsoftGraphDeviceComplianceUserOverview MicrosoftGraphDeviceComplianceUserOverview) ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusOverviewRequest {
	r.microsoftGraphDeviceComplianceUserOverview = &microsoftGraphDeviceComplianceUserOverview
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusOverviewRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesUpdateUserStatusOverviewExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesUpdateUserStatusOverview Update the navigation property userStatusOverview in deviceManagement

Device compliance users status overview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusOverviewRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateUserStatusOverview(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusOverviewRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusOverviewRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateUserStatusOverviewExecute(r ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusOverviewRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesUpdateUserStatusOverview")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/userStatusOverview"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceComplianceUserOverview == nil {
		return nil, reportError("microsoftGraphDeviceComplianceUserOverview is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceComplianceUserOverview
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	deviceComplianceUserStatusId string
	microsoftGraphDeviceComplianceUserStatus *MicrosoftGraphDeviceComplianceUserStatus
}

// New navigation property values
func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusesRequest) MicrosoftGraphDeviceComplianceUserStatus(microsoftGraphDeviceComplianceUserStatus MicrosoftGraphDeviceComplianceUserStatus) ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusesRequest {
	r.microsoftGraphDeviceComplianceUserStatus = &microsoftGraphDeviceComplianceUserStatus
	return r
}

func (r ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePoliciesUpdateUserStatusesExecute(r)
}

/*
DeviceManagementDeviceCompliancePoliciesUpdateUserStatuses Update the navigation property userStatuses in deviceManagement

List of DeviceComplianceUserStatus.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @param deviceComplianceUserStatusId key: id of deviceComplianceUserStatus
 @return ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateUserStatuses(ctx _context.Context, deviceCompliancePolicyId string, deviceComplianceUserStatusId string) ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusesRequest {
	return ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
		deviceComplianceUserStatusId: deviceComplianceUserStatusId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementDeviceCompliancePoliciesUpdateUserStatusesExecute(r ApiDeviceManagementDeviceCompliancePoliciesUpdateUserStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementDeviceCompliancePoliciesUpdateUserStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}/userStatuses/{deviceComplianceUserStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceUserStatus-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceUserStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceComplianceUserStatus == nil {
		return nil, reportError("microsoftGraphDeviceComplianceUserStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceComplianceUserStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementGetDeviceCompliancePoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementGetDeviceCompliancePoliciesRequest) Select_(select_ []string) ApiDeviceManagementGetDeviceCompliancePoliciesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementGetDeviceCompliancePoliciesRequest) Expand(expand []string) ApiDeviceManagementGetDeviceCompliancePoliciesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementGetDeviceCompliancePoliciesRequest) Execute() (MicrosoftGraphDeviceCompliancePolicy, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementGetDeviceCompliancePoliciesExecute(r)
}

/*
DeviceManagementGetDeviceCompliancePolicies Get deviceCompliancePolicies from deviceManagement

The device compliance policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementGetDeviceCompliancePoliciesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementGetDeviceCompliancePolicies(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementGetDeviceCompliancePoliciesRequest {
	return ApiDeviceManagementGetDeviceCompliancePoliciesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCompliancePolicy
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementGetDeviceCompliancePoliciesExecute(r ApiDeviceManagementGetDeviceCompliancePoliciesRequest) (MicrosoftGraphDeviceCompliancePolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCompliancePolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementGetDeviceCompliancePolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementListDeviceCompliancePoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementListDeviceCompliancePoliciesRequest) Top(top int32) ApiDeviceManagementListDeviceCompliancePoliciesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementListDeviceCompliancePoliciesRequest) Skip(skip int32) ApiDeviceManagementListDeviceCompliancePoliciesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementListDeviceCompliancePoliciesRequest) Search(search string) ApiDeviceManagementListDeviceCompliancePoliciesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementListDeviceCompliancePoliciesRequest) Filter(filter string) ApiDeviceManagementListDeviceCompliancePoliciesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementListDeviceCompliancePoliciesRequest) Count(count bool) ApiDeviceManagementListDeviceCompliancePoliciesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementListDeviceCompliancePoliciesRequest) Orderby(orderby []string) ApiDeviceManagementListDeviceCompliancePoliciesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementListDeviceCompliancePoliciesRequest) Select_(select_ []string) ApiDeviceManagementListDeviceCompliancePoliciesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementListDeviceCompliancePoliciesRequest) Expand(expand []string) ApiDeviceManagementListDeviceCompliancePoliciesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementListDeviceCompliancePoliciesRequest) Execute() (CollectionOfDeviceCompliancePolicy, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementListDeviceCompliancePoliciesExecute(r)
}

/*
DeviceManagementListDeviceCompliancePolicies Get deviceCompliancePolicies from deviceManagement

The device compliance policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementListDeviceCompliancePoliciesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementListDeviceCompliancePolicies(ctx _context.Context) ApiDeviceManagementListDeviceCompliancePoliciesRequest {
	return ApiDeviceManagementListDeviceCompliancePoliciesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceCompliancePolicy
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementListDeviceCompliancePoliciesExecute(r ApiDeviceManagementListDeviceCompliancePoliciesRequest) (CollectionOfDeviceCompliancePolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceCompliancePolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementListDeviceCompliancePolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementUpdateDeviceCompliancePoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicyApiService
	deviceCompliancePolicyId string
	microsoftGraphDeviceCompliancePolicy *MicrosoftGraphDeviceCompliancePolicy
}

// New navigation property values
func (r ApiDeviceManagementUpdateDeviceCompliancePoliciesRequest) MicrosoftGraphDeviceCompliancePolicy(microsoftGraphDeviceCompliancePolicy MicrosoftGraphDeviceCompliancePolicy) ApiDeviceManagementUpdateDeviceCompliancePoliciesRequest {
	r.microsoftGraphDeviceCompliancePolicy = &microsoftGraphDeviceCompliancePolicy
	return r
}

func (r ApiDeviceManagementUpdateDeviceCompliancePoliciesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementUpdateDeviceCompliancePoliciesExecute(r)
}

/*
DeviceManagementUpdateDeviceCompliancePolicies Update the navigation property deviceCompliancePolicies in deviceManagement

The device compliance policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicyId key: id of deviceCompliancePolicy
 @return ApiDeviceManagementUpdateDeviceCompliancePoliciesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementUpdateDeviceCompliancePolicies(ctx _context.Context, deviceCompliancePolicyId string) ApiDeviceManagementUpdateDeviceCompliancePoliciesRequest {
	return ApiDeviceManagementUpdateDeviceCompliancePoliciesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicyId: deviceCompliancePolicyId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicyApiService) DeviceManagementUpdateDeviceCompliancePoliciesExecute(r ApiDeviceManagementUpdateDeviceCompliancePoliciesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicyApiService.DeviceManagementUpdateDeviceCompliancePolicies")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicies/{deviceCompliancePolicy-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCompliancePolicy == nil {
		return nil, reportError("microsoftGraphDeviceCompliancePolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCompliancePolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
