/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// WorkbooksDriveItemVersionApiService WorkbooksDriveItemVersionApi service
type WorkbooksDriveItemVersionApiService service

type ApiWorkbooksCreateVersionsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksDriveItemVersionApiService
	driveItemId string
	microsoftGraphDriveItemVersion *MicrosoftGraphDriveItemVersion
}

// New navigation property
func (r ApiWorkbooksCreateVersionsRequest) MicrosoftGraphDriveItemVersion(microsoftGraphDriveItemVersion MicrosoftGraphDriveItemVersion) ApiWorkbooksCreateVersionsRequest {
	r.microsoftGraphDriveItemVersion = &microsoftGraphDriveItemVersion
	return r
}

func (r ApiWorkbooksCreateVersionsRequest) Execute() (MicrosoftGraphDriveItemVersion, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksCreateVersionsExecute(r)
}

/*
WorkbooksCreateVersions Create new navigation property to versions for workbooks

The list of previous versions of the item. For more info, see [getting previous versions][]. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksCreateVersionsRequest
*/
func (a *WorkbooksDriveItemVersionApiService) WorkbooksCreateVersions(ctx _context.Context, driveItemId string) ApiWorkbooksCreateVersionsRequest {
	return ApiWorkbooksCreateVersionsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDriveItemVersion
func (a *WorkbooksDriveItemVersionApiService) WorkbooksCreateVersionsExecute(r ApiWorkbooksCreateVersionsRequest) (MicrosoftGraphDriveItemVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDriveItemVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksDriveItemVersionApiService.WorkbooksCreateVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDriveItemVersion == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDriveItemVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDriveItemVersion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDeleteVersionsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksDriveItemVersionApiService
	driveItemId string
	driveItemVersionId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksDeleteVersionsRequest) IfMatch(ifMatch string) ApiWorkbooksDeleteVersionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksDeleteVersionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDeleteVersionsExecute(r)
}

/*
WorkbooksDeleteVersions Delete navigation property versions for workbooks

The list of previous versions of the item. For more info, see [getting previous versions][]. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param driveItemVersionId key: id of driveItemVersion
 @return ApiWorkbooksDeleteVersionsRequest
*/
func (a *WorkbooksDriveItemVersionApiService) WorkbooksDeleteVersions(ctx _context.Context, driveItemId string, driveItemVersionId string) ApiWorkbooksDeleteVersionsRequest {
	return ApiWorkbooksDeleteVersionsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		driveItemVersionId: driveItemVersionId,
	}
}

// Execute executes the request
func (a *WorkbooksDriveItemVersionApiService) WorkbooksDeleteVersionsExecute(r ApiWorkbooksDeleteVersionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksDriveItemVersionApiService.WorkbooksDeleteVersions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/versions/{driveItemVersion-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"driveItemVersion-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksGetVersionsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksDriveItemVersionApiService
	driveItemId string
	driveItemVersionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksGetVersionsRequest) Select_(select_ []string) ApiWorkbooksGetVersionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksGetVersionsRequest) Expand(expand []string) ApiWorkbooksGetVersionsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksGetVersionsRequest) Execute() (MicrosoftGraphDriveItemVersion, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksGetVersionsExecute(r)
}

/*
WorkbooksGetVersions Get versions from workbooks

The list of previous versions of the item. For more info, see [getting previous versions][]. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param driveItemVersionId key: id of driveItemVersion
 @return ApiWorkbooksGetVersionsRequest
*/
func (a *WorkbooksDriveItemVersionApiService) WorkbooksGetVersions(ctx _context.Context, driveItemId string, driveItemVersionId string) ApiWorkbooksGetVersionsRequest {
	return ApiWorkbooksGetVersionsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		driveItemVersionId: driveItemVersionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDriveItemVersion
func (a *WorkbooksDriveItemVersionApiService) WorkbooksGetVersionsExecute(r ApiWorkbooksGetVersionsRequest) (MicrosoftGraphDriveItemVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDriveItemVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksDriveItemVersionApiService.WorkbooksGetVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/versions/{driveItemVersion-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"driveItemVersion-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksGetVersionsContentRequest struct {
	ctx _context.Context
	ApiService *WorkbooksDriveItemVersionApiService
	driveItemId string
	driveItemVersionId string
}


func (r ApiWorkbooksGetVersionsContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksGetVersionsContentExecute(r)
}

/*
WorkbooksGetVersionsContent Get media content for the navigation property versions from workbooks

The content stream, if the item represents a file.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param driveItemVersionId key: id of driveItemVersion
 @return ApiWorkbooksGetVersionsContentRequest
*/
func (a *WorkbooksDriveItemVersionApiService) WorkbooksGetVersionsContent(ctx _context.Context, driveItemId string, driveItemVersionId string) ApiWorkbooksGetVersionsContentRequest {
	return ApiWorkbooksGetVersionsContentRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		driveItemVersionId: driveItemVersionId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *WorkbooksDriveItemVersionApiService) WorkbooksGetVersionsContentExecute(r ApiWorkbooksGetVersionsContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksDriveItemVersionApiService.WorkbooksGetVersionsContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/versions/{driveItemVersion-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"driveItemVersion-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksListVersionsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksDriveItemVersionApiService
	driveItemId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksListVersionsRequest) Top(top int32) ApiWorkbooksListVersionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksListVersionsRequest) Skip(skip int32) ApiWorkbooksListVersionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksListVersionsRequest) Search(search string) ApiWorkbooksListVersionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksListVersionsRequest) Filter(filter string) ApiWorkbooksListVersionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksListVersionsRequest) Count(count bool) ApiWorkbooksListVersionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksListVersionsRequest) Orderby(orderby []string) ApiWorkbooksListVersionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksListVersionsRequest) Select_(select_ []string) ApiWorkbooksListVersionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksListVersionsRequest) Expand(expand []string) ApiWorkbooksListVersionsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksListVersionsRequest) Execute() (CollectionOfDriveItemVersion, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksListVersionsExecute(r)
}

/*
WorkbooksListVersions Get versions from workbooks

The list of previous versions of the item. For more info, see [getting previous versions][]. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksListVersionsRequest
*/
func (a *WorkbooksDriveItemVersionApiService) WorkbooksListVersions(ctx _context.Context, driveItemId string) ApiWorkbooksListVersionsRequest {
	return ApiWorkbooksListVersionsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return CollectionOfDriveItemVersion
func (a *WorkbooksDriveItemVersionApiService) WorkbooksListVersionsExecute(r ApiWorkbooksListVersionsRequest) (CollectionOfDriveItemVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDriveItemVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksDriveItemVersionApiService.WorkbooksListVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksUpdateVersionsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksDriveItemVersionApiService
	driveItemId string
	driveItemVersionId string
	microsoftGraphDriveItemVersion *MicrosoftGraphDriveItemVersion
}

// New navigation property values
func (r ApiWorkbooksUpdateVersionsRequest) MicrosoftGraphDriveItemVersion(microsoftGraphDriveItemVersion MicrosoftGraphDriveItemVersion) ApiWorkbooksUpdateVersionsRequest {
	r.microsoftGraphDriveItemVersion = &microsoftGraphDriveItemVersion
	return r
}

func (r ApiWorkbooksUpdateVersionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksUpdateVersionsExecute(r)
}

/*
WorkbooksUpdateVersions Update the navigation property versions in workbooks

The list of previous versions of the item. For more info, see [getting previous versions][]. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param driveItemVersionId key: id of driveItemVersion
 @return ApiWorkbooksUpdateVersionsRequest
*/
func (a *WorkbooksDriveItemVersionApiService) WorkbooksUpdateVersions(ctx _context.Context, driveItemId string, driveItemVersionId string) ApiWorkbooksUpdateVersionsRequest {
	return ApiWorkbooksUpdateVersionsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		driveItemVersionId: driveItemVersionId,
	}
}

// Execute executes the request
func (a *WorkbooksDriveItemVersionApiService) WorkbooksUpdateVersionsExecute(r ApiWorkbooksUpdateVersionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksDriveItemVersionApiService.WorkbooksUpdateVersions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/versions/{driveItemVersion-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"driveItemVersion-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDriveItemVersion == nil {
		return nil, reportError("microsoftGraphDriveItemVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDriveItemVersion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksUpdateVersionsContentRequest struct {
	ctx _context.Context
	ApiService *WorkbooksDriveItemVersionApiService
	driveItemId string
	driveItemVersionId string
	body **os.File
}

// New media content.
func (r ApiWorkbooksUpdateVersionsContentRequest) Body(body *os.File) ApiWorkbooksUpdateVersionsContentRequest {
	r.body = &body
	return r
}

func (r ApiWorkbooksUpdateVersionsContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksUpdateVersionsContentExecute(r)
}

/*
WorkbooksUpdateVersionsContent Update media content for the navigation property versions in workbooks

The content stream, if the item represents a file.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param driveItemVersionId key: id of driveItemVersion
 @return ApiWorkbooksUpdateVersionsContentRequest
*/
func (a *WorkbooksDriveItemVersionApiService) WorkbooksUpdateVersionsContent(ctx _context.Context, driveItemId string, driveItemVersionId string) ApiWorkbooksUpdateVersionsContentRequest {
	return ApiWorkbooksUpdateVersionsContentRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		driveItemVersionId: driveItemVersionId,
	}
}

// Execute executes the request
func (a *WorkbooksDriveItemVersionApiService) WorkbooksUpdateVersionsContentExecute(r ApiWorkbooksUpdateVersionsContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksDriveItemVersionApiService.WorkbooksUpdateVersionsContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/versions/{driveItemVersion-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"driveItemVersion-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
