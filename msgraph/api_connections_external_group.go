/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ConnectionsExternalGroupApiService ConnectionsExternalGroupApi service
type ConnectionsExternalGroupApiService service

type ApiConnectionsCreateGroupsRequest struct {
	ctx _context.Context
	ApiService *ConnectionsExternalGroupApiService
	externalConnectionId string
	microsoftGraphExternalConnectorsExternalGroup *MicrosoftGraphExternalConnectorsExternalGroup
}

// New navigation property
func (r ApiConnectionsCreateGroupsRequest) MicrosoftGraphExternalConnectorsExternalGroup(microsoftGraphExternalConnectorsExternalGroup MicrosoftGraphExternalConnectorsExternalGroup) ApiConnectionsCreateGroupsRequest {
	r.microsoftGraphExternalConnectorsExternalGroup = &microsoftGraphExternalConnectorsExternalGroup
	return r
}

func (r ApiConnectionsCreateGroupsRequest) Execute() (MicrosoftGraphExternalConnectorsExternalGroup, *_nethttp.Response, error) {
	return r.ApiService.ConnectionsCreateGroupsExecute(r)
}

/*
ConnectionsCreateGroups Create new navigation property to groups for connections

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalConnectionId key: id of externalConnection
 @return ApiConnectionsCreateGroupsRequest
*/
func (a *ConnectionsExternalGroupApiService) ConnectionsCreateGroups(ctx _context.Context, externalConnectionId string) ApiConnectionsCreateGroupsRequest {
	return ApiConnectionsCreateGroupsRequest{
		ApiService: a,
		ctx: ctx,
		externalConnectionId: externalConnectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphExternalConnectorsExternalGroup
func (a *ConnectionsExternalGroupApiService) ConnectionsCreateGroupsExecute(r ApiConnectionsCreateGroupsRequest) (MicrosoftGraphExternalConnectorsExternalGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphExternalConnectorsExternalGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionsExternalGroupApiService.ConnectionsCreateGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connections/{externalConnection-id}/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"externalConnection-id"+"}", _neturl.PathEscape(parameterToString(r.externalConnectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphExternalConnectorsExternalGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphExternalConnectorsExternalGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphExternalConnectorsExternalGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConnectionsDeleteGroupsRequest struct {
	ctx _context.Context
	ApiService *ConnectionsExternalGroupApiService
	externalConnectionId string
	externalGroupId string
	ifMatch *string
}

// ETag
func (r ApiConnectionsDeleteGroupsRequest) IfMatch(ifMatch string) ApiConnectionsDeleteGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiConnectionsDeleteGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ConnectionsDeleteGroupsExecute(r)
}

/*
ConnectionsDeleteGroups Delete navigation property groups for connections

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalConnectionId key: id of externalConnection
 @param externalGroupId key: id of externalGroup
 @return ApiConnectionsDeleteGroupsRequest
*/
func (a *ConnectionsExternalGroupApiService) ConnectionsDeleteGroups(ctx _context.Context, externalConnectionId string, externalGroupId string) ApiConnectionsDeleteGroupsRequest {
	return ApiConnectionsDeleteGroupsRequest{
		ApiService: a,
		ctx: ctx,
		externalConnectionId: externalConnectionId,
		externalGroupId: externalGroupId,
	}
}

// Execute executes the request
func (a *ConnectionsExternalGroupApiService) ConnectionsDeleteGroupsExecute(r ApiConnectionsDeleteGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionsExternalGroupApiService.ConnectionsDeleteGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connections/{externalConnection-id}/groups/{externalGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalConnection-id"+"}", _neturl.PathEscape(parameterToString(r.externalConnectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalGroup-id"+"}", _neturl.PathEscape(parameterToString(r.externalGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiConnectionsGetGroupsRequest struct {
	ctx _context.Context
	ApiService *ConnectionsExternalGroupApiService
	externalConnectionId string
	externalGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiConnectionsGetGroupsRequest) Select_(select_ []string) ApiConnectionsGetGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiConnectionsGetGroupsRequest) Expand(expand []string) ApiConnectionsGetGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiConnectionsGetGroupsRequest) Execute() (MicrosoftGraphExternalConnectorsExternalGroup, *_nethttp.Response, error) {
	return r.ApiService.ConnectionsGetGroupsExecute(r)
}

/*
ConnectionsGetGroups Get groups from connections

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalConnectionId key: id of externalConnection
 @param externalGroupId key: id of externalGroup
 @return ApiConnectionsGetGroupsRequest
*/
func (a *ConnectionsExternalGroupApiService) ConnectionsGetGroups(ctx _context.Context, externalConnectionId string, externalGroupId string) ApiConnectionsGetGroupsRequest {
	return ApiConnectionsGetGroupsRequest{
		ApiService: a,
		ctx: ctx,
		externalConnectionId: externalConnectionId,
		externalGroupId: externalGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphExternalConnectorsExternalGroup
func (a *ConnectionsExternalGroupApiService) ConnectionsGetGroupsExecute(r ApiConnectionsGetGroupsRequest) (MicrosoftGraphExternalConnectorsExternalGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphExternalConnectorsExternalGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionsExternalGroupApiService.ConnectionsGetGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connections/{externalConnection-id}/groups/{externalGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalConnection-id"+"}", _neturl.PathEscape(parameterToString(r.externalConnectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalGroup-id"+"}", _neturl.PathEscape(parameterToString(r.externalGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConnectionsGroupsCreateMembersRequest struct {
	ctx _context.Context
	ApiService *ConnectionsExternalGroupApiService
	externalConnectionId string
	externalGroupId string
	microsoftGraphExternalConnectorsIdentity *MicrosoftGraphExternalConnectorsIdentity
}

// New navigation property
func (r ApiConnectionsGroupsCreateMembersRequest) MicrosoftGraphExternalConnectorsIdentity(microsoftGraphExternalConnectorsIdentity MicrosoftGraphExternalConnectorsIdentity) ApiConnectionsGroupsCreateMembersRequest {
	r.microsoftGraphExternalConnectorsIdentity = &microsoftGraphExternalConnectorsIdentity
	return r
}

func (r ApiConnectionsGroupsCreateMembersRequest) Execute() (MicrosoftGraphExternalConnectorsIdentity, *_nethttp.Response, error) {
	return r.ApiService.ConnectionsGroupsCreateMembersExecute(r)
}

/*
ConnectionsGroupsCreateMembers Create new navigation property to members for connections

A member added to an externalGroup. You can add Azure Active Directory users, Azure Active Directory groups, or an externalGroup as members.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalConnectionId key: id of externalConnection
 @param externalGroupId key: id of externalGroup
 @return ApiConnectionsGroupsCreateMembersRequest
*/
func (a *ConnectionsExternalGroupApiService) ConnectionsGroupsCreateMembers(ctx _context.Context, externalConnectionId string, externalGroupId string) ApiConnectionsGroupsCreateMembersRequest {
	return ApiConnectionsGroupsCreateMembersRequest{
		ApiService: a,
		ctx: ctx,
		externalConnectionId: externalConnectionId,
		externalGroupId: externalGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphExternalConnectorsIdentity
func (a *ConnectionsExternalGroupApiService) ConnectionsGroupsCreateMembersExecute(r ApiConnectionsGroupsCreateMembersRequest) (MicrosoftGraphExternalConnectorsIdentity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphExternalConnectorsIdentity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionsExternalGroupApiService.ConnectionsGroupsCreateMembers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connections/{externalConnection-id}/groups/{externalGroup-id}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"externalConnection-id"+"}", _neturl.PathEscape(parameterToString(r.externalConnectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalGroup-id"+"}", _neturl.PathEscape(parameterToString(r.externalGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphExternalConnectorsIdentity == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphExternalConnectorsIdentity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphExternalConnectorsIdentity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConnectionsGroupsDeleteMembersRequest struct {
	ctx _context.Context
	ApiService *ConnectionsExternalGroupApiService
	externalConnectionId string
	externalGroupId string
	identityId string
	ifMatch *string
}

// ETag
func (r ApiConnectionsGroupsDeleteMembersRequest) IfMatch(ifMatch string) ApiConnectionsGroupsDeleteMembersRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiConnectionsGroupsDeleteMembersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ConnectionsGroupsDeleteMembersExecute(r)
}

/*
ConnectionsGroupsDeleteMembers Delete navigation property members for connections

A member added to an externalGroup. You can add Azure Active Directory users, Azure Active Directory groups, or an externalGroup as members.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalConnectionId key: id of externalConnection
 @param externalGroupId key: id of externalGroup
 @param identityId key: id of identity
 @return ApiConnectionsGroupsDeleteMembersRequest
*/
func (a *ConnectionsExternalGroupApiService) ConnectionsGroupsDeleteMembers(ctx _context.Context, externalConnectionId string, externalGroupId string, identityId string) ApiConnectionsGroupsDeleteMembersRequest {
	return ApiConnectionsGroupsDeleteMembersRequest{
		ApiService: a,
		ctx: ctx,
		externalConnectionId: externalConnectionId,
		externalGroupId: externalGroupId,
		identityId: identityId,
	}
}

// Execute executes the request
func (a *ConnectionsExternalGroupApiService) ConnectionsGroupsDeleteMembersExecute(r ApiConnectionsGroupsDeleteMembersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionsExternalGroupApiService.ConnectionsGroupsDeleteMembers")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connections/{externalConnection-id}/groups/{externalGroup-id}/members/{identity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalConnection-id"+"}", _neturl.PathEscape(parameterToString(r.externalConnectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalGroup-id"+"}", _neturl.PathEscape(parameterToString(r.externalGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"identity-id"+"}", _neturl.PathEscape(parameterToString(r.identityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiConnectionsGroupsGetMembersRequest struct {
	ctx _context.Context
	ApiService *ConnectionsExternalGroupApiService
	externalConnectionId string
	externalGroupId string
	identityId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiConnectionsGroupsGetMembersRequest) Select_(select_ []string) ApiConnectionsGroupsGetMembersRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiConnectionsGroupsGetMembersRequest) Expand(expand []string) ApiConnectionsGroupsGetMembersRequest {
	r.expand = &expand
	return r
}

func (r ApiConnectionsGroupsGetMembersRequest) Execute() (MicrosoftGraphExternalConnectorsIdentity, *_nethttp.Response, error) {
	return r.ApiService.ConnectionsGroupsGetMembersExecute(r)
}

/*
ConnectionsGroupsGetMembers Get members from connections

A member added to an externalGroup. You can add Azure Active Directory users, Azure Active Directory groups, or an externalGroup as members.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalConnectionId key: id of externalConnection
 @param externalGroupId key: id of externalGroup
 @param identityId key: id of identity
 @return ApiConnectionsGroupsGetMembersRequest
*/
func (a *ConnectionsExternalGroupApiService) ConnectionsGroupsGetMembers(ctx _context.Context, externalConnectionId string, externalGroupId string, identityId string) ApiConnectionsGroupsGetMembersRequest {
	return ApiConnectionsGroupsGetMembersRequest{
		ApiService: a,
		ctx: ctx,
		externalConnectionId: externalConnectionId,
		externalGroupId: externalGroupId,
		identityId: identityId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphExternalConnectorsIdentity
func (a *ConnectionsExternalGroupApiService) ConnectionsGroupsGetMembersExecute(r ApiConnectionsGroupsGetMembersRequest) (MicrosoftGraphExternalConnectorsIdentity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphExternalConnectorsIdentity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionsExternalGroupApiService.ConnectionsGroupsGetMembers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connections/{externalConnection-id}/groups/{externalGroup-id}/members/{identity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalConnection-id"+"}", _neturl.PathEscape(parameterToString(r.externalConnectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalGroup-id"+"}", _neturl.PathEscape(parameterToString(r.externalGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"identity-id"+"}", _neturl.PathEscape(parameterToString(r.identityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConnectionsGroupsListMembersRequest struct {
	ctx _context.Context
	ApiService *ConnectionsExternalGroupApiService
	externalConnectionId string
	externalGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiConnectionsGroupsListMembersRequest) Top(top int32) ApiConnectionsGroupsListMembersRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiConnectionsGroupsListMembersRequest) Skip(skip int32) ApiConnectionsGroupsListMembersRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiConnectionsGroupsListMembersRequest) Search(search string) ApiConnectionsGroupsListMembersRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiConnectionsGroupsListMembersRequest) Filter(filter string) ApiConnectionsGroupsListMembersRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiConnectionsGroupsListMembersRequest) Count(count bool) ApiConnectionsGroupsListMembersRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiConnectionsGroupsListMembersRequest) Orderby(orderby []string) ApiConnectionsGroupsListMembersRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiConnectionsGroupsListMembersRequest) Select_(select_ []string) ApiConnectionsGroupsListMembersRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiConnectionsGroupsListMembersRequest) Expand(expand []string) ApiConnectionsGroupsListMembersRequest {
	r.expand = &expand
	return r
}

func (r ApiConnectionsGroupsListMembersRequest) Execute() (CollectionOfIdentity, *_nethttp.Response, error) {
	return r.ApiService.ConnectionsGroupsListMembersExecute(r)
}

/*
ConnectionsGroupsListMembers Get members from connections

A member added to an externalGroup. You can add Azure Active Directory users, Azure Active Directory groups, or an externalGroup as members.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalConnectionId key: id of externalConnection
 @param externalGroupId key: id of externalGroup
 @return ApiConnectionsGroupsListMembersRequest
*/
func (a *ConnectionsExternalGroupApiService) ConnectionsGroupsListMembers(ctx _context.Context, externalConnectionId string, externalGroupId string) ApiConnectionsGroupsListMembersRequest {
	return ApiConnectionsGroupsListMembersRequest{
		ApiService: a,
		ctx: ctx,
		externalConnectionId: externalConnectionId,
		externalGroupId: externalGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfIdentity
func (a *ConnectionsExternalGroupApiService) ConnectionsGroupsListMembersExecute(r ApiConnectionsGroupsListMembersRequest) (CollectionOfIdentity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfIdentity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionsExternalGroupApiService.ConnectionsGroupsListMembers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connections/{externalConnection-id}/groups/{externalGroup-id}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"externalConnection-id"+"}", _neturl.PathEscape(parameterToString(r.externalConnectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalGroup-id"+"}", _neturl.PathEscape(parameterToString(r.externalGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConnectionsGroupsUpdateMembersRequest struct {
	ctx _context.Context
	ApiService *ConnectionsExternalGroupApiService
	externalConnectionId string
	externalGroupId string
	identityId string
	microsoftGraphExternalConnectorsIdentity *MicrosoftGraphExternalConnectorsIdentity
}

// New navigation property values
func (r ApiConnectionsGroupsUpdateMembersRequest) MicrosoftGraphExternalConnectorsIdentity(microsoftGraphExternalConnectorsIdentity MicrosoftGraphExternalConnectorsIdentity) ApiConnectionsGroupsUpdateMembersRequest {
	r.microsoftGraphExternalConnectorsIdentity = &microsoftGraphExternalConnectorsIdentity
	return r
}

func (r ApiConnectionsGroupsUpdateMembersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ConnectionsGroupsUpdateMembersExecute(r)
}

/*
ConnectionsGroupsUpdateMembers Update the navigation property members in connections

A member added to an externalGroup. You can add Azure Active Directory users, Azure Active Directory groups, or an externalGroup as members.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalConnectionId key: id of externalConnection
 @param externalGroupId key: id of externalGroup
 @param identityId key: id of identity
 @return ApiConnectionsGroupsUpdateMembersRequest
*/
func (a *ConnectionsExternalGroupApiService) ConnectionsGroupsUpdateMembers(ctx _context.Context, externalConnectionId string, externalGroupId string, identityId string) ApiConnectionsGroupsUpdateMembersRequest {
	return ApiConnectionsGroupsUpdateMembersRequest{
		ApiService: a,
		ctx: ctx,
		externalConnectionId: externalConnectionId,
		externalGroupId: externalGroupId,
		identityId: identityId,
	}
}

// Execute executes the request
func (a *ConnectionsExternalGroupApiService) ConnectionsGroupsUpdateMembersExecute(r ApiConnectionsGroupsUpdateMembersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionsExternalGroupApiService.ConnectionsGroupsUpdateMembers")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connections/{externalConnection-id}/groups/{externalGroup-id}/members/{identity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalConnection-id"+"}", _neturl.PathEscape(parameterToString(r.externalConnectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalGroup-id"+"}", _neturl.PathEscape(parameterToString(r.externalGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"identity-id"+"}", _neturl.PathEscape(parameterToString(r.identityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphExternalConnectorsIdentity == nil {
		return nil, reportError("microsoftGraphExternalConnectorsIdentity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphExternalConnectorsIdentity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiConnectionsListGroupsRequest struct {
	ctx _context.Context
	ApiService *ConnectionsExternalGroupApiService
	externalConnectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiConnectionsListGroupsRequest) Top(top int32) ApiConnectionsListGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiConnectionsListGroupsRequest) Skip(skip int32) ApiConnectionsListGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiConnectionsListGroupsRequest) Search(search string) ApiConnectionsListGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiConnectionsListGroupsRequest) Filter(filter string) ApiConnectionsListGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiConnectionsListGroupsRequest) Count(count bool) ApiConnectionsListGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiConnectionsListGroupsRequest) Orderby(orderby []string) ApiConnectionsListGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiConnectionsListGroupsRequest) Select_(select_ []string) ApiConnectionsListGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiConnectionsListGroupsRequest) Expand(expand []string) ApiConnectionsListGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiConnectionsListGroupsRequest) Execute() (CollectionOfExternalGroup, *_nethttp.Response, error) {
	return r.ApiService.ConnectionsListGroupsExecute(r)
}

/*
ConnectionsListGroups Get groups from connections

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalConnectionId key: id of externalConnection
 @return ApiConnectionsListGroupsRequest
*/
func (a *ConnectionsExternalGroupApiService) ConnectionsListGroups(ctx _context.Context, externalConnectionId string) ApiConnectionsListGroupsRequest {
	return ApiConnectionsListGroupsRequest{
		ApiService: a,
		ctx: ctx,
		externalConnectionId: externalConnectionId,
	}
}

// Execute executes the request
//  @return CollectionOfExternalGroup
func (a *ConnectionsExternalGroupApiService) ConnectionsListGroupsExecute(r ApiConnectionsListGroupsRequest) (CollectionOfExternalGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfExternalGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionsExternalGroupApiService.ConnectionsListGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connections/{externalConnection-id}/groups"
	localVarPath = strings.Replace(localVarPath, "{"+"externalConnection-id"+"}", _neturl.PathEscape(parameterToString(r.externalConnectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiConnectionsUpdateGroupsRequest struct {
	ctx _context.Context
	ApiService *ConnectionsExternalGroupApiService
	externalConnectionId string
	externalGroupId string
	microsoftGraphExternalConnectorsExternalGroup *MicrosoftGraphExternalConnectorsExternalGroup
}

// New navigation property values
func (r ApiConnectionsUpdateGroupsRequest) MicrosoftGraphExternalConnectorsExternalGroup(microsoftGraphExternalConnectorsExternalGroup MicrosoftGraphExternalConnectorsExternalGroup) ApiConnectionsUpdateGroupsRequest {
	r.microsoftGraphExternalConnectorsExternalGroup = &microsoftGraphExternalConnectorsExternalGroup
	return r
}

func (r ApiConnectionsUpdateGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ConnectionsUpdateGroupsExecute(r)
}

/*
ConnectionsUpdateGroups Update the navigation property groups in connections

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalConnectionId key: id of externalConnection
 @param externalGroupId key: id of externalGroup
 @return ApiConnectionsUpdateGroupsRequest
*/
func (a *ConnectionsExternalGroupApiService) ConnectionsUpdateGroups(ctx _context.Context, externalConnectionId string, externalGroupId string) ApiConnectionsUpdateGroupsRequest {
	return ApiConnectionsUpdateGroupsRequest{
		ApiService: a,
		ctx: ctx,
		externalConnectionId: externalConnectionId,
		externalGroupId: externalGroupId,
	}
}

// Execute executes the request
func (a *ConnectionsExternalGroupApiService) ConnectionsUpdateGroupsExecute(r ApiConnectionsUpdateGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionsExternalGroupApiService.ConnectionsUpdateGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connections/{externalConnection-id}/groups/{externalGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"externalConnection-id"+"}", _neturl.PathEscape(parameterToString(r.externalConnectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalGroup-id"+"}", _neturl.PathEscape(parameterToString(r.externalGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphExternalConnectorsExternalGroup == nil {
		return nil, reportError("microsoftGraphExternalConnectorsExternalGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphExternalConnectorsExternalGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
