/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"time"
)

// DataPolicyOperation struct for DataPolicyOperation
type DataPolicyOperation struct {
	// Represents when the request for this data policy operation was completed, in UTC time, using the ISO 8601 format. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Null until the operation completes.
	CompletedDateTime NullableTime `json:"completedDateTime,omitempty"`
	// Specifies the progress of an operation.
	Progress AnyOfnumberstringstring `json:"progress,omitempty"`
	// Possible values are: notStarted, running, complete, failed, unknownFutureValue.
	Status AnyOfmicrosoftGraphDataPolicyOperationStatus `json:"status,omitempty"`
	// The URL location to where data is being exported for export requests.
	StorageLocation NullableString `json:"storageLocation,omitempty"`
	// Represents when the request for this data operation was submitted, in UTC time, using the ISO 8601 format. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	SubmittedDateTime *time.Time `json:"submittedDateTime,omitempty"`
	// The id for the user on whom the operation is performed.
	UserId *string `json:"userId,omitempty"`
}

// NewDataPolicyOperation instantiates a new DataPolicyOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataPolicyOperation() *DataPolicyOperation {
	this := DataPolicyOperation{}
	return &this
}

// NewDataPolicyOperationWithDefaults instantiates a new DataPolicyOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataPolicyOperationWithDefaults() *DataPolicyOperation {
	this := DataPolicyOperation{}
	return &this
}

// GetCompletedDateTime returns the CompletedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataPolicyOperation) GetCompletedDateTime() time.Time {
	if o == nil || o.CompletedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CompletedDateTime.Get()
}

// GetCompletedDateTimeOk returns a tuple with the CompletedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataPolicyOperation) GetCompletedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CompletedDateTime.Get(), o.CompletedDateTime.IsSet()
}

// HasCompletedDateTime returns a boolean if a field has been set.
func (o *DataPolicyOperation) HasCompletedDateTime() bool {
	if o != nil && o.CompletedDateTime.IsSet() {
		return true
	}

	return false
}

// SetCompletedDateTime gets a reference to the given NullableTime and assigns it to the CompletedDateTime field.
func (o *DataPolicyOperation) SetCompletedDateTime(v time.Time) {
	o.CompletedDateTime.Set(&v)
}
// SetCompletedDateTimeNil sets the value for CompletedDateTime to be an explicit nil
func (o *DataPolicyOperation) SetCompletedDateTimeNil() {
	o.CompletedDateTime.Set(nil)
}

// UnsetCompletedDateTime ensures that no value is present for CompletedDateTime, not even an explicit nil
func (o *DataPolicyOperation) UnsetCompletedDateTime() {
	o.CompletedDateTime.Unset()
}

// GetProgress returns the Progress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataPolicyOperation) GetProgress() AnyOfnumberstringstring {
	if o == nil  {
		var ret AnyOfnumberstringstring
		return ret
	}
	return o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataPolicyOperation) GetProgressOk() (*AnyOfnumberstringstring, bool) {
	if o == nil || o.Progress == nil {
		return nil, false
	}
	return &o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *DataPolicyOperation) HasProgress() bool {
	if o != nil && o.Progress != nil {
		return true
	}

	return false
}

// SetProgress gets a reference to the given AnyOfnumberstringstring and assigns it to the Progress field.
func (o *DataPolicyOperation) SetProgress(v AnyOfnumberstringstring) {
	o.Progress = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataPolicyOperation) GetStatus() AnyOfmicrosoftGraphDataPolicyOperationStatus {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDataPolicyOperationStatus
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataPolicyOperation) GetStatusOk() (*AnyOfmicrosoftGraphDataPolicyOperationStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return &o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DataPolicyOperation) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AnyOfmicrosoftGraphDataPolicyOperationStatus and assigns it to the Status field.
func (o *DataPolicyOperation) SetStatus(v AnyOfmicrosoftGraphDataPolicyOperationStatus) {
	o.Status = v
}

// GetStorageLocation returns the StorageLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataPolicyOperation) GetStorageLocation() string {
	if o == nil || o.StorageLocation.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageLocation.Get()
}

// GetStorageLocationOk returns a tuple with the StorageLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataPolicyOperation) GetStorageLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageLocation.Get(), o.StorageLocation.IsSet()
}

// HasStorageLocation returns a boolean if a field has been set.
func (o *DataPolicyOperation) HasStorageLocation() bool {
	if o != nil && o.StorageLocation.IsSet() {
		return true
	}

	return false
}

// SetStorageLocation gets a reference to the given NullableString and assigns it to the StorageLocation field.
func (o *DataPolicyOperation) SetStorageLocation(v string) {
	o.StorageLocation.Set(&v)
}
// SetStorageLocationNil sets the value for StorageLocation to be an explicit nil
func (o *DataPolicyOperation) SetStorageLocationNil() {
	o.StorageLocation.Set(nil)
}

// UnsetStorageLocation ensures that no value is present for StorageLocation, not even an explicit nil
func (o *DataPolicyOperation) UnsetStorageLocation() {
	o.StorageLocation.Unset()
}

// GetSubmittedDateTime returns the SubmittedDateTime field value if set, zero value otherwise.
func (o *DataPolicyOperation) GetSubmittedDateTime() time.Time {
	if o == nil || o.SubmittedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.SubmittedDateTime
}

// GetSubmittedDateTimeOk returns a tuple with the SubmittedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataPolicyOperation) GetSubmittedDateTimeOk() (*time.Time, bool) {
	if o == nil || o.SubmittedDateTime == nil {
		return nil, false
	}
	return o.SubmittedDateTime, true
}

// HasSubmittedDateTime returns a boolean if a field has been set.
func (o *DataPolicyOperation) HasSubmittedDateTime() bool {
	if o != nil && o.SubmittedDateTime != nil {
		return true
	}

	return false
}

// SetSubmittedDateTime gets a reference to the given time.Time and assigns it to the SubmittedDateTime field.
func (o *DataPolicyOperation) SetSubmittedDateTime(v time.Time) {
	o.SubmittedDateTime = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *DataPolicyOperation) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataPolicyOperation) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DataPolicyOperation) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *DataPolicyOperation) SetUserId(v string) {
	o.UserId = &v
}

func (o DataPolicyOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompletedDateTime.IsSet() {
		toSerialize["completedDateTime"] = o.CompletedDateTime.Get()
	}
	if o.Progress != nil {
		toSerialize["progress"] = o.Progress
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StorageLocation.IsSet() {
		toSerialize["storageLocation"] = o.StorageLocation.Get()
	}
	if o.SubmittedDateTime != nil {
		toSerialize["submittedDateTime"] = o.SubmittedDateTime
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableDataPolicyOperation struct {
	value *DataPolicyOperation
	isSet bool
}

func (v NullableDataPolicyOperation) Get() *DataPolicyOperation {
	return v.value
}

func (v *NullableDataPolicyOperation) Set(val *DataPolicyOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableDataPolicyOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableDataPolicyOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataPolicyOperation(val *DataPolicyOperation) *NullableDataPolicyOperation {
	return &NullableDataPolicyOperation{value: val, isSet: true}
}

func (v NullableDataPolicyOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataPolicyOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


