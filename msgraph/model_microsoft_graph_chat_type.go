/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphChatType the model 'MicrosoftGraphChatType'
type MicrosoftGraphChatType string

// List of microsoft.graph.chatType
const (
	ONE_ON_ONE MicrosoftGraphChatType = "oneOnOne"
	GROUP MicrosoftGraphChatType = "group"
	MEETING MicrosoftGraphChatType = "meeting"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphChatType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphChatType enum
var AllowedMicrosoftGraphChatTypeEnumValues = []MicrosoftGraphChatType{
	"oneOnOne",
	"group",
	"meeting",
	"unknownFutureValue",
}

func (v *MicrosoftGraphChatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphChatType(value)
	for _, existing := range AllowedMicrosoftGraphChatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphChatType", value)
}

// NewMicrosoftGraphChatTypeFromValue returns a pointer to a valid MicrosoftGraphChatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphChatTypeFromValue(v string) (*MicrosoftGraphChatType, error) {
	ev := MicrosoftGraphChatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphChatType: valid values are %v", v, AllowedMicrosoftGraphChatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphChatType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphChatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.chatType value
func (v MicrosoftGraphChatType) Ptr() *MicrosoftGraphChatType {
	return &v
}

type NullableMicrosoftGraphChatType struct {
	value *MicrosoftGraphChatType
	isSet bool
}

func (v NullableMicrosoftGraphChatType) Get() *MicrosoftGraphChatType {
	return v.value
}

func (v *NullableMicrosoftGraphChatType) Set(val *MicrosoftGraphChatType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphChatType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphChatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphChatType(val *MicrosoftGraphChatType) *NullableMicrosoftGraphChatType {
	return &NullableMicrosoftGraphChatType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphChatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphChatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

