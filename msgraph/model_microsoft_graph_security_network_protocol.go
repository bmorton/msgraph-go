/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphSecurityNetworkProtocol the model 'MicrosoftGraphSecurityNetworkProtocol'
type MicrosoftGraphSecurityNetworkProtocol string

// List of microsoft.graph.securityNetworkProtocol
const (
	UNKNOWN MicrosoftGraphSecurityNetworkProtocol = "unknown"
	IP MicrosoftGraphSecurityNetworkProtocol = "ip"
	ICMP MicrosoftGraphSecurityNetworkProtocol = "icmp"
	IGMP MicrosoftGraphSecurityNetworkProtocol = "igmp"
	GGP MicrosoftGraphSecurityNetworkProtocol = "ggp"
	IPV4 MicrosoftGraphSecurityNetworkProtocol = "ipv4"
	TCP MicrosoftGraphSecurityNetworkProtocol = "tcp"
	PUP MicrosoftGraphSecurityNetworkProtocol = "pup"
	UDP MicrosoftGraphSecurityNetworkProtocol = "udp"
	IDP MicrosoftGraphSecurityNetworkProtocol = "idp"
	IPV6 MicrosoftGraphSecurityNetworkProtocol = "ipv6"
	IPV6_ROUTING_HEADER MicrosoftGraphSecurityNetworkProtocol = "ipv6RoutingHeader"
	IPV6_FRAGMENT_HEADER MicrosoftGraphSecurityNetworkProtocol = "ipv6FragmentHeader"
	IP_SEC_ENCAPSULATING_SECURITY_PAYLOAD MicrosoftGraphSecurityNetworkProtocol = "ipSecEncapsulatingSecurityPayload"
	IP_SEC_AUTHENTICATION_HEADER MicrosoftGraphSecurityNetworkProtocol = "ipSecAuthenticationHeader"
	ICMP_V6 MicrosoftGraphSecurityNetworkProtocol = "icmpV6"
	IPV6_NO_NEXT_HEADER MicrosoftGraphSecurityNetworkProtocol = "ipv6NoNextHeader"
	IPV6_DESTINATION_OPTIONS MicrosoftGraphSecurityNetworkProtocol = "ipv6DestinationOptions"
	ND MicrosoftGraphSecurityNetworkProtocol = "nd"
	RAW MicrosoftGraphSecurityNetworkProtocol = "raw"
	IPX MicrosoftGraphSecurityNetworkProtocol = "ipx"
	SPX MicrosoftGraphSecurityNetworkProtocol = "spx"
	SPX_II MicrosoftGraphSecurityNetworkProtocol = "spxII"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphSecurityNetworkProtocol = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphSecurityNetworkProtocol enum
var AllowedMicrosoftGraphSecurityNetworkProtocolEnumValues = []MicrosoftGraphSecurityNetworkProtocol{
	"unknown",
	"ip",
	"icmp",
	"igmp",
	"ggp",
	"ipv4",
	"tcp",
	"pup",
	"udp",
	"idp",
	"ipv6",
	"ipv6RoutingHeader",
	"ipv6FragmentHeader",
	"ipSecEncapsulatingSecurityPayload",
	"ipSecAuthenticationHeader",
	"icmpV6",
	"ipv6NoNextHeader",
	"ipv6DestinationOptions",
	"nd",
	"raw",
	"ipx",
	"spx",
	"spxII",
	"unknownFutureValue",
}

func (v *MicrosoftGraphSecurityNetworkProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphSecurityNetworkProtocol(value)
	for _, existing := range AllowedMicrosoftGraphSecurityNetworkProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphSecurityNetworkProtocol", value)
}

// NewMicrosoftGraphSecurityNetworkProtocolFromValue returns a pointer to a valid MicrosoftGraphSecurityNetworkProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphSecurityNetworkProtocolFromValue(v string) (*MicrosoftGraphSecurityNetworkProtocol, error) {
	ev := MicrosoftGraphSecurityNetworkProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphSecurityNetworkProtocol: valid values are %v", v, AllowedMicrosoftGraphSecurityNetworkProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphSecurityNetworkProtocol) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphSecurityNetworkProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.securityNetworkProtocol value
func (v MicrosoftGraphSecurityNetworkProtocol) Ptr() *MicrosoftGraphSecurityNetworkProtocol {
	return &v
}

type NullableMicrosoftGraphSecurityNetworkProtocol struct {
	value *MicrosoftGraphSecurityNetworkProtocol
	isSet bool
}

func (v NullableMicrosoftGraphSecurityNetworkProtocol) Get() *MicrosoftGraphSecurityNetworkProtocol {
	return v.value
}

func (v *NullableMicrosoftGraphSecurityNetworkProtocol) Set(val *MicrosoftGraphSecurityNetworkProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphSecurityNetworkProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphSecurityNetworkProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphSecurityNetworkProtocol(val *MicrosoftGraphSecurityNetworkProtocol) *NullableMicrosoftGraphSecurityNetworkProtocol {
	return &NullableMicrosoftGraphSecurityNetworkProtocol{value: val, isSet: true}
}

func (v NullableMicrosoftGraphSecurityNetworkProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphSecurityNetworkProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

