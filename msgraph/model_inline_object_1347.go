/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// InlineObject1347 struct for InlineObject1347
type InlineObject1347 struct {
	Probability AnyOfobject `json:"probability,omitempty"`
	Alpha AnyOfobject `json:"alpha,omitempty"`
	Beta AnyOfobject `json:"beta,omitempty"`
}

// NewInlineObject1347 instantiates a new InlineObject1347 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1347() *InlineObject1347 {
	this := InlineObject1347{}
	return &this
}

// NewInlineObject1347WithDefaults instantiates a new InlineObject1347 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1347WithDefaults() *InlineObject1347 {
	this := InlineObject1347{}
	return &this
}

// GetProbability returns the Probability field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1347) GetProbability() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Probability
}

// GetProbabilityOk returns a tuple with the Probability field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1347) GetProbabilityOk() (*AnyOfobject, bool) {
	if o == nil || o.Probability == nil {
		return nil, false
	}
	return &o.Probability, true
}

// HasProbability returns a boolean if a field has been set.
func (o *InlineObject1347) HasProbability() bool {
	if o != nil && o.Probability != nil {
		return true
	}

	return false
}

// SetProbability gets a reference to the given AnyOfobject and assigns it to the Probability field.
func (o *InlineObject1347) SetProbability(v AnyOfobject) {
	o.Probability = v
}

// GetAlpha returns the Alpha field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1347) GetAlpha() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Alpha
}

// GetAlphaOk returns a tuple with the Alpha field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1347) GetAlphaOk() (*AnyOfobject, bool) {
	if o == nil || o.Alpha == nil {
		return nil, false
	}
	return &o.Alpha, true
}

// HasAlpha returns a boolean if a field has been set.
func (o *InlineObject1347) HasAlpha() bool {
	if o != nil && o.Alpha != nil {
		return true
	}

	return false
}

// SetAlpha gets a reference to the given AnyOfobject and assigns it to the Alpha field.
func (o *InlineObject1347) SetAlpha(v AnyOfobject) {
	o.Alpha = v
}

// GetBeta returns the Beta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1347) GetBeta() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Beta
}

// GetBetaOk returns a tuple with the Beta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1347) GetBetaOk() (*AnyOfobject, bool) {
	if o == nil || o.Beta == nil {
		return nil, false
	}
	return &o.Beta, true
}

// HasBeta returns a boolean if a field has been set.
func (o *InlineObject1347) HasBeta() bool {
	if o != nil && o.Beta != nil {
		return true
	}

	return false
}

// SetBeta gets a reference to the given AnyOfobject and assigns it to the Beta field.
func (o *InlineObject1347) SetBeta(v AnyOfobject) {
	o.Beta = v
}

func (o InlineObject1347) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Probability != nil {
		toSerialize["probability"] = o.Probability
	}
	if o.Alpha != nil {
		toSerialize["alpha"] = o.Alpha
	}
	if o.Beta != nil {
		toSerialize["beta"] = o.Beta
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1347 struct {
	value *InlineObject1347
	isSet bool
}

func (v NullableInlineObject1347) Get() *InlineObject1347 {
	return v.value
}

func (v *NullableInlineObject1347) Set(val *InlineObject1347) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1347) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1347) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1347(val *InlineObject1347) *NullableInlineObject1347 {
	return &NullableInlineObject1347{value: val, isSet: true}
}

func (v NullableInlineObject1347) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1347) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


