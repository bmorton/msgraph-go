/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphPolicyPlatformType Supported platform types for policies.
type MicrosoftGraphPolicyPlatformType string

// List of microsoft.graph.policyPlatformType
const (
	ANDROID MicrosoftGraphPolicyPlatformType = "android"
	ANDROID_FOR_WORK MicrosoftGraphPolicyPlatformType = "androidForWork"
	I_OS MicrosoftGraphPolicyPlatformType = "iOS"
	MAC_OS MicrosoftGraphPolicyPlatformType = "macOS"
	WINDOWS_PHONE81 MicrosoftGraphPolicyPlatformType = "windowsPhone81"
	WINDOWS81_AND_LATER MicrosoftGraphPolicyPlatformType = "windows81AndLater"
	WINDOWS10_AND_LATER MicrosoftGraphPolicyPlatformType = "windows10AndLater"
	ALL MicrosoftGraphPolicyPlatformType = "all"
)

// All allowed values of MicrosoftGraphPolicyPlatformType enum
var AllowedMicrosoftGraphPolicyPlatformTypeEnumValues = []MicrosoftGraphPolicyPlatformType{
	"android",
	"androidForWork",
	"iOS",
	"macOS",
	"windowsPhone81",
	"windows81AndLater",
	"windows10AndLater",
	"all",
}

func (v *MicrosoftGraphPolicyPlatformType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphPolicyPlatformType(value)
	for _, existing := range AllowedMicrosoftGraphPolicyPlatformTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphPolicyPlatformType", value)
}

// NewMicrosoftGraphPolicyPlatformTypeFromValue returns a pointer to a valid MicrosoftGraphPolicyPlatformType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphPolicyPlatformTypeFromValue(v string) (*MicrosoftGraphPolicyPlatformType, error) {
	ev := MicrosoftGraphPolicyPlatformType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphPolicyPlatformType: valid values are %v", v, AllowedMicrosoftGraphPolicyPlatformTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphPolicyPlatformType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphPolicyPlatformTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.policyPlatformType value
func (v MicrosoftGraphPolicyPlatformType) Ptr() *MicrosoftGraphPolicyPlatformType {
	return &v
}

type NullableMicrosoftGraphPolicyPlatformType struct {
	value *MicrosoftGraphPolicyPlatformType
	isSet bool
}

func (v NullableMicrosoftGraphPolicyPlatformType) Get() *MicrosoftGraphPolicyPlatformType {
	return v.value
}

func (v *NullableMicrosoftGraphPolicyPlatformType) Set(val *MicrosoftGraphPolicyPlatformType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPolicyPlatformType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPolicyPlatformType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPolicyPlatformType(val *MicrosoftGraphPolicyPlatformType) *NullableMicrosoftGraphPolicyPlatformType {
	return &NullableMicrosoftGraphPolicyPlatformType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPolicyPlatformType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPolicyPlatformType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

