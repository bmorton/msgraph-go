/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphStagedFeatureName the model 'MicrosoftGraphStagedFeatureName'
type MicrosoftGraphStagedFeatureName string

// List of microsoft.graph.stagedFeatureName
const (
	PASSTHROUGH_AUTHENTICATION MicrosoftGraphStagedFeatureName = "passthroughAuthentication"
	SEAMLESS_SSO MicrosoftGraphStagedFeatureName = "seamlessSso"
	PASSWORD_HASH_SYNC MicrosoftGraphStagedFeatureName = "passwordHashSync"
	EMAIL_AS_ALTERNATE_ID MicrosoftGraphStagedFeatureName = "emailAsAlternateId"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphStagedFeatureName = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphStagedFeatureName enum
var AllowedMicrosoftGraphStagedFeatureNameEnumValues = []MicrosoftGraphStagedFeatureName{
	"passthroughAuthentication",
	"seamlessSso",
	"passwordHashSync",
	"emailAsAlternateId",
	"unknownFutureValue",
}

func (v *MicrosoftGraphStagedFeatureName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphStagedFeatureName(value)
	for _, existing := range AllowedMicrosoftGraphStagedFeatureNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphStagedFeatureName", value)
}

// NewMicrosoftGraphStagedFeatureNameFromValue returns a pointer to a valid MicrosoftGraphStagedFeatureName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphStagedFeatureNameFromValue(v string) (*MicrosoftGraphStagedFeatureName, error) {
	ev := MicrosoftGraphStagedFeatureName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphStagedFeatureName: valid values are %v", v, AllowedMicrosoftGraphStagedFeatureNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphStagedFeatureName) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphStagedFeatureNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.stagedFeatureName value
func (v MicrosoftGraphStagedFeatureName) Ptr() *MicrosoftGraphStagedFeatureName {
	return &v
}

type NullableMicrosoftGraphStagedFeatureName struct {
	value *MicrosoftGraphStagedFeatureName
	isSet bool
}

func (v NullableMicrosoftGraphStagedFeatureName) Get() *MicrosoftGraphStagedFeatureName {
	return v.value
}

func (v *NullableMicrosoftGraphStagedFeatureName) Set(val *MicrosoftGraphStagedFeatureName) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphStagedFeatureName) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphStagedFeatureName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphStagedFeatureName(val *MicrosoftGraphStagedFeatureName) *NullableMicrosoftGraphStagedFeatureName {
	return &NullableMicrosoftGraphStagedFeatureName{value: val, isSet: true}
}

func (v NullableMicrosoftGraphStagedFeatureName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphStagedFeatureName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

