/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// WorkbooksActionsApiService WorkbooksActionsApi service
type WorkbooksActionsApiService service

type ApiWorkbooksDriveItemCheckinRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1196 *InlineObject1196
}

func (r ApiWorkbooksDriveItemCheckinRequest) InlineObject1196(inlineObject1196 InlineObject1196) ApiWorkbooksDriveItemCheckinRequest {
	r.inlineObject1196 = &inlineObject1196
	return r
}

func (r ApiWorkbooksDriveItemCheckinRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemCheckinExecute(r)
}

/*
WorkbooksDriveItemCheckin Invoke action checkin

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemCheckinRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemCheckin(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemCheckinRequest {
	return ApiWorkbooksDriveItemCheckinRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemCheckinExecute(r ApiWorkbooksDriveItemCheckinRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemCheckin")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.checkin"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1196 == nil {
		return nil, reportError("inlineObject1196 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1196
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemCheckoutRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemCheckoutRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemCheckoutExecute(r)
}

/*
WorkbooksDriveItemCheckout Invoke action checkout

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemCheckoutRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemCheckout(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemCheckoutRequest {
	return ApiWorkbooksDriveItemCheckoutRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemCheckoutExecute(r ApiWorkbooksDriveItemCheckoutRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemCheckout")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.checkout"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemCopyRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1197 *InlineObject1197
}

func (r ApiWorkbooksDriveItemCopyRequest) InlineObject1197(inlineObject1197 InlineObject1197) ApiWorkbooksDriveItemCopyRequest {
	r.inlineObject1197 = &inlineObject1197
	return r
}

func (r ApiWorkbooksDriveItemCopyRequest) Execute() (AnyOfmicrosoftGraphDriveItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemCopyExecute(r)
}

/*
WorkbooksDriveItemCopy Invoke action copy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemCopyRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemCopy(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemCopyRequest {
	return ApiWorkbooksDriveItemCopyRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphDriveItem
func (a *WorkbooksActionsApiService) WorkbooksDriveItemCopyExecute(r ApiWorkbooksDriveItemCopyRequest) (AnyOfmicrosoftGraphDriveItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphDriveItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemCopy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.copy"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1197 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1197 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1197
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemCreateLinkRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1198 *InlineObject1198
}

func (r ApiWorkbooksDriveItemCreateLinkRequest) InlineObject1198(inlineObject1198 InlineObject1198) ApiWorkbooksDriveItemCreateLinkRequest {
	r.inlineObject1198 = &inlineObject1198
	return r
}

func (r ApiWorkbooksDriveItemCreateLinkRequest) Execute() (AnyOfmicrosoftGraphPermission, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemCreateLinkExecute(r)
}

/*
WorkbooksDriveItemCreateLink Invoke action createLink

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemCreateLinkRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemCreateLink(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemCreateLinkRequest {
	return ApiWorkbooksDriveItemCreateLinkRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphPermission
func (a *WorkbooksActionsApiService) WorkbooksDriveItemCreateLinkExecute(r ApiWorkbooksDriveItemCreateLinkRequest) (AnyOfmicrosoftGraphPermission, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphPermission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemCreateLink")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.createLink"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1198 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1198 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1198
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemCreateUploadSessionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1199 *InlineObject1199
}

func (r ApiWorkbooksDriveItemCreateUploadSessionRequest) InlineObject1199(inlineObject1199 InlineObject1199) ApiWorkbooksDriveItemCreateUploadSessionRequest {
	r.inlineObject1199 = &inlineObject1199
	return r
}

func (r ApiWorkbooksDriveItemCreateUploadSessionRequest) Execute() (AnyOfmicrosoftGraphUploadSession, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemCreateUploadSessionExecute(r)
}

/*
WorkbooksDriveItemCreateUploadSession Invoke action createUploadSession

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemCreateUploadSessionRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemCreateUploadSession(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemCreateUploadSessionRequest {
	return ApiWorkbooksDriveItemCreateUploadSessionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphUploadSession
func (a *WorkbooksActionsApiService) WorkbooksDriveItemCreateUploadSessionExecute(r ApiWorkbooksDriveItemCreateUploadSessionRequest) (AnyOfmicrosoftGraphUploadSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphUploadSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemCreateUploadSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.createUploadSession"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1199 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1199 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1199
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemFollowRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemFollowRequest) Execute() (AnyOfmicrosoftGraphDriveItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemFollowExecute(r)
}

/*
WorkbooksDriveItemFollow Invoke action follow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemFollowRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemFollow(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemFollowRequest {
	return ApiWorkbooksDriveItemFollowRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphDriveItem
func (a *WorkbooksActionsApiService) WorkbooksDriveItemFollowExecute(r ApiWorkbooksDriveItemFollowRequest) (AnyOfmicrosoftGraphDriveItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphDriveItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemFollow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.follow"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemInviteRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1200 *InlineObject1200
}

func (r ApiWorkbooksDriveItemInviteRequest) InlineObject1200(inlineObject1200 InlineObject1200) ApiWorkbooksDriveItemInviteRequest {
	r.inlineObject1200 = &inlineObject1200
	return r
}

func (r ApiWorkbooksDriveItemInviteRequest) Execute() ([]*AnyOfmicrosoftGraphPermission, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemInviteExecute(r)
}

/*
WorkbooksDriveItemInvite Invoke action invite

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemInviteRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemInvite(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemInviteRequest {
	return ApiWorkbooksDriveItemInviteRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphPermission
func (a *WorkbooksActionsApiService) WorkbooksDriveItemInviteExecute(r ApiWorkbooksDriveItemInviteRequest) ([]*AnyOfmicrosoftGraphPermission, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphPermission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemInvite")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.invite"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1200 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1200 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1200
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemListItemVersionsListItemVersionRestoreVersionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	listItemVersionId string
}


func (r ApiWorkbooksDriveItemListItemVersionsListItemVersionRestoreVersionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemListItemVersionsListItemVersionRestoreVersionExecute(r)
}

/*
WorkbooksDriveItemListItemVersionsListItemVersionRestoreVersion Invoke action restoreVersion

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param listItemVersionId key: id of listItemVersion
 @return ApiWorkbooksDriveItemListItemVersionsListItemVersionRestoreVersionRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemListItemVersionsListItemVersionRestoreVersion(ctx _context.Context, driveItemId string, listItemVersionId string) ApiWorkbooksDriveItemListItemVersionsListItemVersionRestoreVersionRequest {
	return ApiWorkbooksDriveItemListItemVersionsListItemVersionRestoreVersionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		listItemVersionId: listItemVersionId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemListItemVersionsListItemVersionRestoreVersionExecute(r ApiWorkbooksDriveItemListItemVersionsListItemVersionRestoreVersionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemListItemVersionsListItemVersionRestoreVersion")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/listItem/versions/{listItemVersion-id}/microsoft.graph.restoreVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"listItemVersion-id"+"}", _neturl.PathEscape(parameterToString(r.listItemVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemPermissionsPermissionGrantRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	permissionId string
	inlineObject1204 *InlineObject1204
}

func (r ApiWorkbooksDriveItemPermissionsPermissionGrantRequest) InlineObject1204(inlineObject1204 InlineObject1204) ApiWorkbooksDriveItemPermissionsPermissionGrantRequest {
	r.inlineObject1204 = &inlineObject1204
	return r
}

func (r ApiWorkbooksDriveItemPermissionsPermissionGrantRequest) Execute() ([]*AnyOfmicrosoftGraphPermission, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemPermissionsPermissionGrantExecute(r)
}

/*
WorkbooksDriveItemPermissionsPermissionGrant Invoke action grant

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param permissionId key: id of permission
 @return ApiWorkbooksDriveItemPermissionsPermissionGrantRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemPermissionsPermissionGrant(ctx _context.Context, driveItemId string, permissionId string) ApiWorkbooksDriveItemPermissionsPermissionGrantRequest {
	return ApiWorkbooksDriveItemPermissionsPermissionGrantRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		permissionId: permissionId,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphPermission
func (a *WorkbooksActionsApiService) WorkbooksDriveItemPermissionsPermissionGrantExecute(r ApiWorkbooksDriveItemPermissionsPermissionGrantRequest) ([]*AnyOfmicrosoftGraphPermission, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphPermission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemPermissionsPermissionGrant")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/permissions/{permission-id}/microsoft.graph.grant"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"permission-id"+"}", _neturl.PathEscape(parameterToString(r.permissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1204 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1204 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1204
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemPreviewRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1201 *InlineObject1201
}

func (r ApiWorkbooksDriveItemPreviewRequest) InlineObject1201(inlineObject1201 InlineObject1201) ApiWorkbooksDriveItemPreviewRequest {
	r.inlineObject1201 = &inlineObject1201
	return r
}

func (r ApiWorkbooksDriveItemPreviewRequest) Execute() (AnyOfmicrosoftGraphItemPreviewInfo, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemPreviewExecute(r)
}

/*
WorkbooksDriveItemPreview Invoke action preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemPreviewRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemPreview(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemPreviewRequest {
	return ApiWorkbooksDriveItemPreviewRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphItemPreviewInfo
func (a *WorkbooksActionsApiService) WorkbooksDriveItemPreviewExecute(r ApiWorkbooksDriveItemPreviewRequest) (AnyOfmicrosoftGraphItemPreviewInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphItemPreviewInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemPreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.preview"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1201 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1201 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1201
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemRestoreRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1202 *InlineObject1202
}

func (r ApiWorkbooksDriveItemRestoreRequest) InlineObject1202(inlineObject1202 InlineObject1202) ApiWorkbooksDriveItemRestoreRequest {
	r.inlineObject1202 = &inlineObject1202
	return r
}

func (r ApiWorkbooksDriveItemRestoreRequest) Execute() (AnyOfmicrosoftGraphDriveItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemRestoreExecute(r)
}

/*
WorkbooksDriveItemRestore Invoke action restore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemRestoreRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemRestore(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemRestoreRequest {
	return ApiWorkbooksDriveItemRestoreRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphDriveItem
func (a *WorkbooksActionsApiService) WorkbooksDriveItemRestoreExecute(r ApiWorkbooksDriveItemRestoreRequest) (AnyOfmicrosoftGraphDriveItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphDriveItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemRestore")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.restore"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1202 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1202 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1202
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemUnfollowRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemUnfollowRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemUnfollowExecute(r)
}

/*
WorkbooksDriveItemUnfollow Invoke action unfollow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemUnfollowRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemUnfollow(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemUnfollowRequest {
	return ApiWorkbooksDriveItemUnfollowRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemUnfollowExecute(r ApiWorkbooksDriveItemUnfollowRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemUnfollow")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.unfollow"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemValidatePermissionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1203 *InlineObject1203
}

func (r ApiWorkbooksDriveItemValidatePermissionRequest) InlineObject1203(inlineObject1203 InlineObject1203) ApiWorkbooksDriveItemValidatePermissionRequest {
	r.inlineObject1203 = &inlineObject1203
	return r
}

func (r ApiWorkbooksDriveItemValidatePermissionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemValidatePermissionExecute(r)
}

/*
WorkbooksDriveItemValidatePermission Invoke action validatePermission

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemValidatePermissionRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemValidatePermission(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemValidatePermissionRequest {
	return ApiWorkbooksDriveItemValidatePermissionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemValidatePermissionExecute(r ApiWorkbooksDriveItemValidatePermissionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemValidatePermission")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.validatePermission"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1203 == nil {
		return nil, reportError("inlineObject1203 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1203
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemVersionsDriveItemVersionRestoreVersionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	driveItemVersionId string
}


func (r ApiWorkbooksDriveItemVersionsDriveItemVersionRestoreVersionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemVersionsDriveItemVersionRestoreVersionExecute(r)
}

/*
WorkbooksDriveItemVersionsDriveItemVersionRestoreVersion Invoke action restoreVersion

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param driveItemVersionId key: id of driveItemVersion
 @return ApiWorkbooksDriveItemVersionsDriveItemVersionRestoreVersionRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemVersionsDriveItemVersionRestoreVersion(ctx _context.Context, driveItemId string, driveItemVersionId string) ApiWorkbooksDriveItemVersionsDriveItemVersionRestoreVersionRequest {
	return ApiWorkbooksDriveItemVersionsDriveItemVersionRestoreVersionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		driveItemVersionId: driveItemVersionId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemVersionsDriveItemVersionRestoreVersionExecute(r ApiWorkbooksDriveItemVersionsDriveItemVersionRestoreVersionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemVersionsDriveItemVersionRestoreVersion")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/versions/{driveItemVersion-id}/microsoft.graph.restoreVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"driveItemVersion-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookApplicationCalculateRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1205 *InlineObject1205
}

func (r ApiWorkbooksDriveItemWorkbookApplicationCalculateRequest) InlineObject1205(inlineObject1205 InlineObject1205) ApiWorkbooksDriveItemWorkbookApplicationCalculateRequest {
	r.inlineObject1205 = &inlineObject1205
	return r
}

func (r ApiWorkbooksDriveItemWorkbookApplicationCalculateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookApplicationCalculateExecute(r)
}

/*
WorkbooksDriveItemWorkbookApplicationCalculate Invoke action calculate

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookApplicationCalculateRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookApplicationCalculate(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookApplicationCalculateRequest {
	return ApiWorkbooksDriveItemWorkbookApplicationCalculateRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookApplicationCalculateExecute(r ApiWorkbooksDriveItemWorkbookApplicationCalculateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookApplicationCalculate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/application/microsoft.graph.calculate"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1205 == nil {
		return nil, reportError("inlineObject1205 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1205
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookCloseSessionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemWorkbookCloseSessionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookCloseSessionExecute(r)
}

/*
WorkbooksDriveItemWorkbookCloseSession Invoke action closeSession

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookCloseSessionRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookCloseSession(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookCloseSessionRequest {
	return ApiWorkbooksDriveItemWorkbookCloseSessionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookCloseSessionExecute(r ApiWorkbooksDriveItemWorkbookCloseSessionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookCloseSession")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/microsoft.graph.closeSession"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookCreateSessionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1565 *InlineObject1565
}

func (r ApiWorkbooksDriveItemWorkbookCreateSessionRequest) InlineObject1565(inlineObject1565 InlineObject1565) ApiWorkbooksDriveItemWorkbookCreateSessionRequest {
	r.inlineObject1565 = &inlineObject1565
	return r
}

func (r ApiWorkbooksDriveItemWorkbookCreateSessionRequest) Execute() (AnyOfmicrosoftGraphWorkbookSessionInfo, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookCreateSessionExecute(r)
}

/*
WorkbooksDriveItemWorkbookCreateSession Invoke action createSession

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookCreateSessionRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookCreateSession(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookCreateSessionRequest {
	return ApiWorkbooksDriveItemWorkbookCreateSessionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookSessionInfo
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookCreateSessionExecute(r ApiWorkbooksDriveItemWorkbookCreateSessionRequest) (AnyOfmicrosoftGraphWorkbookSessionInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookSessionInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookCreateSession")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/microsoft.graph.createSession"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1565 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1565 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1565
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAbsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1206 *InlineObject1206
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAbsRequest) InlineObject1206(inlineObject1206 InlineObject1206) ApiWorkbooksDriveItemWorkbookFunctionsAbsRequest {
	r.inlineObject1206 = &inlineObject1206
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAbsRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAbsExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAbs Invoke action abs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAbsRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAbs(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAbsRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAbsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAbsExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAbsRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAbs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.abs"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1206 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1206 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1206
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAccrIntRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1207 *InlineObject1207
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAccrIntRequest) InlineObject1207(inlineObject1207 InlineObject1207) ApiWorkbooksDriveItemWorkbookFunctionsAccrIntRequest {
	r.inlineObject1207 = &inlineObject1207
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAccrIntRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAccrIntExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAccrInt Invoke action accrInt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAccrIntRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAccrInt(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAccrIntRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAccrIntRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAccrIntExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAccrIntRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAccrInt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.accrInt"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1207 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1207 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1207
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAccrIntMRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1208 *InlineObject1208
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAccrIntMRequest) InlineObject1208(inlineObject1208 InlineObject1208) ApiWorkbooksDriveItemWorkbookFunctionsAccrIntMRequest {
	r.inlineObject1208 = &inlineObject1208
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAccrIntMRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAccrIntMExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAccrIntM Invoke action accrIntM

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAccrIntMRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAccrIntM(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAccrIntMRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAccrIntMRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAccrIntMExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAccrIntMRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAccrIntM")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.accrIntM"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1208 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1208 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1208
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAcosRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1209 *InlineObject1209
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAcosRequest) InlineObject1209(inlineObject1209 InlineObject1209) ApiWorkbooksDriveItemWorkbookFunctionsAcosRequest {
	r.inlineObject1209 = &inlineObject1209
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAcosRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAcosExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAcos Invoke action acos

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAcosRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAcos(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAcosRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAcosRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAcosExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAcosRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAcos")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.acos"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1209 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1209 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1209
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAcoshRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1210 *InlineObject1210
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAcoshRequest) InlineObject1210(inlineObject1210 InlineObject1210) ApiWorkbooksDriveItemWorkbookFunctionsAcoshRequest {
	r.inlineObject1210 = &inlineObject1210
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAcoshRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAcoshExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAcosh Invoke action acosh

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAcoshRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAcosh(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAcoshRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAcoshRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAcoshExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAcoshRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAcosh")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.acosh"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1210 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1210 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1210
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAcotRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1211 *InlineObject1211
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAcotRequest) InlineObject1211(inlineObject1211 InlineObject1211) ApiWorkbooksDriveItemWorkbookFunctionsAcotRequest {
	r.inlineObject1211 = &inlineObject1211
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAcotRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAcotExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAcot Invoke action acot

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAcotRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAcot(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAcotRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAcotRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAcotExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAcotRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAcot")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.acot"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1211 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1211 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1211
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAcothRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1212 *InlineObject1212
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAcothRequest) InlineObject1212(inlineObject1212 InlineObject1212) ApiWorkbooksDriveItemWorkbookFunctionsAcothRequest {
	r.inlineObject1212 = &inlineObject1212
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAcothRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAcothExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAcoth Invoke action acoth

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAcothRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAcoth(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAcothRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAcothRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAcothExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAcothRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAcoth")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.acoth"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1212 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1212 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1212
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAmorDegrcRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1213 *InlineObject1213
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAmorDegrcRequest) InlineObject1213(inlineObject1213 InlineObject1213) ApiWorkbooksDriveItemWorkbookFunctionsAmorDegrcRequest {
	r.inlineObject1213 = &inlineObject1213
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAmorDegrcRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAmorDegrcExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAmorDegrc Invoke action amorDegrc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAmorDegrcRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAmorDegrc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAmorDegrcRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAmorDegrcRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAmorDegrcExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAmorDegrcRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAmorDegrc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.amorDegrc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1213 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1213 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1213
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAmorLincRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1214 *InlineObject1214
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAmorLincRequest) InlineObject1214(inlineObject1214 InlineObject1214) ApiWorkbooksDriveItemWorkbookFunctionsAmorLincRequest {
	r.inlineObject1214 = &inlineObject1214
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAmorLincRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAmorLincExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAmorLinc Invoke action amorLinc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAmorLincRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAmorLinc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAmorLincRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAmorLincRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAmorLincExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAmorLincRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAmorLinc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.amorLinc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1214 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1214 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1214
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAndRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1215 *InlineObject1215
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAndRequest) InlineObject1215(inlineObject1215 InlineObject1215) ApiWorkbooksDriveItemWorkbookFunctionsAndRequest {
	r.inlineObject1215 = &inlineObject1215
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAndRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAndExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAnd Invoke action and

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAndRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAnd(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAndRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAndRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAndExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAndRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAnd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.and"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1215 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1215 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1215
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsArabicRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1216 *InlineObject1216
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsArabicRequest) InlineObject1216(inlineObject1216 InlineObject1216) ApiWorkbooksDriveItemWorkbookFunctionsArabicRequest {
	r.inlineObject1216 = &inlineObject1216
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsArabicRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsArabicExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsArabic Invoke action arabic

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsArabicRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsArabic(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsArabicRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsArabicRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsArabicExecute(r ApiWorkbooksDriveItemWorkbookFunctionsArabicRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsArabic")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.arabic"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1216 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1216 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1216
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAreasRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1217 *InlineObject1217
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAreasRequest) InlineObject1217(inlineObject1217 InlineObject1217) ApiWorkbooksDriveItemWorkbookFunctionsAreasRequest {
	r.inlineObject1217 = &inlineObject1217
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAreasRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAreasExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAreas Invoke action areas

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAreasRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAreas(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAreasRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAreasRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAreasExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAreasRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAreas")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.areas"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1217 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1217 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1217
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAscRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1218 *InlineObject1218
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAscRequest) InlineObject1218(inlineObject1218 InlineObject1218) ApiWorkbooksDriveItemWorkbookFunctionsAscRequest {
	r.inlineObject1218 = &inlineObject1218
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAscRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAscExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAsc Invoke action asc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAscRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAsc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAscRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAscRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAscExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAscRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAsc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.asc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1218 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1218 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1218
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAsinRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1219 *InlineObject1219
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAsinRequest) InlineObject1219(inlineObject1219 InlineObject1219) ApiWorkbooksDriveItemWorkbookFunctionsAsinRequest {
	r.inlineObject1219 = &inlineObject1219
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAsinRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAsinExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAsin Invoke action asin

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAsinRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAsin(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAsinRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAsinRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAsinExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAsinRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAsin")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.asin"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1219 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1219 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1219
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAsinhRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1220 *InlineObject1220
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAsinhRequest) InlineObject1220(inlineObject1220 InlineObject1220) ApiWorkbooksDriveItemWorkbookFunctionsAsinhRequest {
	r.inlineObject1220 = &inlineObject1220
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAsinhRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAsinhExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAsinh Invoke action asinh

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAsinhRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAsinh(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAsinhRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAsinhRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAsinhExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAsinhRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAsinh")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.asinh"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1220 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1220 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1220
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAtanRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1221 *InlineObject1221
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAtanRequest) InlineObject1221(inlineObject1221 InlineObject1221) ApiWorkbooksDriveItemWorkbookFunctionsAtanRequest {
	r.inlineObject1221 = &inlineObject1221
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAtanRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAtanExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAtan Invoke action atan

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAtanRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAtan(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAtanRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAtanRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAtanExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAtanRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAtan")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.atan"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1221 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1221 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1221
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAtan2Request struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1222 *InlineObject1222
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAtan2Request) InlineObject1222(inlineObject1222 InlineObject1222) ApiWorkbooksDriveItemWorkbookFunctionsAtan2Request {
	r.inlineObject1222 = &inlineObject1222
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAtan2Request) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAtan2Execute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAtan2 Invoke action atan2

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAtan2Request
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAtan2(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAtan2Request {
	return ApiWorkbooksDriveItemWorkbookFunctionsAtan2Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAtan2Execute(r ApiWorkbooksDriveItemWorkbookFunctionsAtan2Request) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAtan2")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.atan2"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1222 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1222 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1222
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAtanhRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1223 *InlineObject1223
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAtanhRequest) InlineObject1223(inlineObject1223 InlineObject1223) ApiWorkbooksDriveItemWorkbookFunctionsAtanhRequest {
	r.inlineObject1223 = &inlineObject1223
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAtanhRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAtanhExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAtanh Invoke action atanh

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAtanhRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAtanh(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAtanhRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAtanhRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAtanhExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAtanhRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAtanh")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.atanh"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1223 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1223 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1223
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAveDevRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1224 *InlineObject1224
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAveDevRequest) InlineObject1224(inlineObject1224 InlineObject1224) ApiWorkbooksDriveItemWorkbookFunctionsAveDevRequest {
	r.inlineObject1224 = &inlineObject1224
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAveDevRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAveDevExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAveDev Invoke action aveDev

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAveDevRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAveDev(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAveDevRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAveDevRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAveDevExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAveDevRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAveDev")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.aveDev"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1224 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1224 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1224
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAverageRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1225 *InlineObject1225
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAverageRequest) InlineObject1225(inlineObject1225 InlineObject1225) ApiWorkbooksDriveItemWorkbookFunctionsAverageRequest {
	r.inlineObject1225 = &inlineObject1225
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAverageRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAverageExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAverage Invoke action average

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAverageRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAverage(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAverageRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAverageRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAverageExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAverageRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAverage")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.average"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1225 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1225 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1225
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAverageARequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1226 *InlineObject1226
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAverageARequest) InlineObject1226(inlineObject1226 InlineObject1226) ApiWorkbooksDriveItemWorkbookFunctionsAverageARequest {
	r.inlineObject1226 = &inlineObject1226
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAverageARequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAverageAExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAverageA Invoke action averageA

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAverageARequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAverageA(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAverageARequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAverageARequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAverageAExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAverageARequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAverageA")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.averageA"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1226 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1226 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1226
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAverageIfRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1227 *InlineObject1227
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAverageIfRequest) InlineObject1227(inlineObject1227 InlineObject1227) ApiWorkbooksDriveItemWorkbookFunctionsAverageIfRequest {
	r.inlineObject1227 = &inlineObject1227
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAverageIfRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAverageIfExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAverageIf Invoke action averageIf

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAverageIfRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAverageIf(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAverageIfRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAverageIfRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAverageIfExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAverageIfRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAverageIf")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.averageIf"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1227 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1227 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1227
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsAverageIfsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1228 *InlineObject1228
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAverageIfsRequest) InlineObject1228(inlineObject1228 InlineObject1228) ApiWorkbooksDriveItemWorkbookFunctionsAverageIfsRequest {
	r.inlineObject1228 = &inlineObject1228
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsAverageIfsRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsAverageIfsExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsAverageIfs Invoke action averageIfs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsAverageIfsRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAverageIfs(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsAverageIfsRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsAverageIfsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsAverageIfsExecute(r ApiWorkbooksDriveItemWorkbookFunctionsAverageIfsRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsAverageIfs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.averageIfs"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1228 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1228 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1228
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBahtTextRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1229 *InlineObject1229
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBahtTextRequest) InlineObject1229(inlineObject1229 InlineObject1229) ApiWorkbooksDriveItemWorkbookFunctionsBahtTextRequest {
	r.inlineObject1229 = &inlineObject1229
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBahtTextRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBahtTextExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBahtText Invoke action bahtText

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBahtTextRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBahtText(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBahtTextRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBahtTextRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBahtTextExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBahtTextRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBahtText")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.bahtText"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1229 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1229 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1229
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBaseRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1230 *InlineObject1230
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBaseRequest) InlineObject1230(inlineObject1230 InlineObject1230) ApiWorkbooksDriveItemWorkbookFunctionsBaseRequest {
	r.inlineObject1230 = &inlineObject1230
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBaseRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBaseExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBase Invoke action base

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBaseRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBase(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBaseRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBaseRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBaseExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBaseRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBase")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.base"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1230 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1230 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1230
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBesselIRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1231 *InlineObject1231
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBesselIRequest) InlineObject1231(inlineObject1231 InlineObject1231) ApiWorkbooksDriveItemWorkbookFunctionsBesselIRequest {
	r.inlineObject1231 = &inlineObject1231
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBesselIRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBesselIExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBesselI Invoke action besselI

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBesselIRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBesselI(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBesselIRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBesselIRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBesselIExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBesselIRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBesselI")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.besselI"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1231 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1231 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1231
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBesselJRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1232 *InlineObject1232
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBesselJRequest) InlineObject1232(inlineObject1232 InlineObject1232) ApiWorkbooksDriveItemWorkbookFunctionsBesselJRequest {
	r.inlineObject1232 = &inlineObject1232
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBesselJRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBesselJExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBesselJ Invoke action besselJ

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBesselJRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBesselJ(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBesselJRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBesselJRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBesselJExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBesselJRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBesselJ")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.besselJ"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1232 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1232 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1232
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBesselKRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1233 *InlineObject1233
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBesselKRequest) InlineObject1233(inlineObject1233 InlineObject1233) ApiWorkbooksDriveItemWorkbookFunctionsBesselKRequest {
	r.inlineObject1233 = &inlineObject1233
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBesselKRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBesselKExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBesselK Invoke action besselK

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBesselKRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBesselK(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBesselKRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBesselKRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBesselKExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBesselKRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBesselK")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.besselK"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1233 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1233 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1233
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBesselYRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1234 *InlineObject1234
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBesselYRequest) InlineObject1234(inlineObject1234 InlineObject1234) ApiWorkbooksDriveItemWorkbookFunctionsBesselYRequest {
	r.inlineObject1234 = &inlineObject1234
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBesselYRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBesselYExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBesselY Invoke action besselY

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBesselYRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBesselY(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBesselYRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBesselYRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBesselYExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBesselYRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBesselY")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.besselY"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1234 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1234 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1234
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBetaDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1235 *InlineObject1235
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBetaDistRequest) InlineObject1235(inlineObject1235 InlineObject1235) ApiWorkbooksDriveItemWorkbookFunctionsBetaDistRequest {
	r.inlineObject1235 = &inlineObject1235
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBetaDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBetaDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBetaDist Invoke action beta_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBetaDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBetaDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBetaDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBetaDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBetaDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBetaDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBetaDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.beta_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1235 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1235 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1235
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBetaInvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1236 *InlineObject1236
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBetaInvRequest) InlineObject1236(inlineObject1236 InlineObject1236) ApiWorkbooksDriveItemWorkbookFunctionsBetaInvRequest {
	r.inlineObject1236 = &inlineObject1236
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBetaInvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBetaInvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBetaInv Invoke action beta_Inv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBetaInvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBetaInv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBetaInvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBetaInvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBetaInvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBetaInvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBetaInv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.beta_Inv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1236 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1236 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1236
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBin2DecRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1237 *InlineObject1237
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBin2DecRequest) InlineObject1237(inlineObject1237 InlineObject1237) ApiWorkbooksDriveItemWorkbookFunctionsBin2DecRequest {
	r.inlineObject1237 = &inlineObject1237
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBin2DecRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBin2DecExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBin2Dec Invoke action bin2Dec

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBin2DecRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBin2Dec(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBin2DecRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBin2DecRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBin2DecExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBin2DecRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBin2Dec")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.bin2Dec"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1237 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1237 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1237
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBin2HexRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1238 *InlineObject1238
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBin2HexRequest) InlineObject1238(inlineObject1238 InlineObject1238) ApiWorkbooksDriveItemWorkbookFunctionsBin2HexRequest {
	r.inlineObject1238 = &inlineObject1238
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBin2HexRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBin2HexExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBin2Hex Invoke action bin2Hex

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBin2HexRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBin2Hex(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBin2HexRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBin2HexRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBin2HexExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBin2HexRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBin2Hex")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.bin2Hex"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1238 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1238 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1238
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBin2OctRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1239 *InlineObject1239
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBin2OctRequest) InlineObject1239(inlineObject1239 InlineObject1239) ApiWorkbooksDriveItemWorkbookFunctionsBin2OctRequest {
	r.inlineObject1239 = &inlineObject1239
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBin2OctRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBin2OctExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBin2Oct Invoke action bin2Oct

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBin2OctRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBin2Oct(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBin2OctRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBin2OctRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBin2OctExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBin2OctRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBin2Oct")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.bin2Oct"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1239 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1239 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1239
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1240 *InlineObject1240
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRequest) InlineObject1240(inlineObject1240 InlineObject1240) ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRequest {
	r.inlineObject1240 = &inlineObject1240
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBinomDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBinomDist Invoke action binom_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBinomDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBinomDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBinomDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.binom_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1240 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1240 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1240
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1241 *InlineObject1241
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRangeRequest) InlineObject1241(inlineObject1241 InlineObject1241) ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRangeRequest {
	r.inlineObject1241 = &inlineObject1241
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBinomDistRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBinomDistRange Invoke action binom_Dist_Range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRangeRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBinomDistRange(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRangeRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBinomDistRangeExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBinomDistRangeRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBinomDistRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.binom_Dist_Range"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1241 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1241 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1241
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBinomInvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1242 *InlineObject1242
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBinomInvRequest) InlineObject1242(inlineObject1242 InlineObject1242) ApiWorkbooksDriveItemWorkbookFunctionsBinomInvRequest {
	r.inlineObject1242 = &inlineObject1242
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBinomInvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBinomInvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBinomInv Invoke action binom_Inv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBinomInvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBinomInv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBinomInvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBinomInvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBinomInvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBinomInvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBinomInv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.binom_Inv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1242 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1242 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1242
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBitandRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1243 *InlineObject1243
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBitandRequest) InlineObject1243(inlineObject1243 InlineObject1243) ApiWorkbooksDriveItemWorkbookFunctionsBitandRequest {
	r.inlineObject1243 = &inlineObject1243
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBitandRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBitandExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBitand Invoke action bitand

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBitandRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBitand(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBitandRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBitandRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBitandExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBitandRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBitand")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.bitand"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1243 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1243 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1243
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBitlshiftRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1244 *InlineObject1244
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBitlshiftRequest) InlineObject1244(inlineObject1244 InlineObject1244) ApiWorkbooksDriveItemWorkbookFunctionsBitlshiftRequest {
	r.inlineObject1244 = &inlineObject1244
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBitlshiftRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBitlshiftExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBitlshift Invoke action bitlshift

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBitlshiftRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBitlshift(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBitlshiftRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBitlshiftRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBitlshiftExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBitlshiftRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBitlshift")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.bitlshift"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1244 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1244 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1244
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBitorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1245 *InlineObject1245
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBitorRequest) InlineObject1245(inlineObject1245 InlineObject1245) ApiWorkbooksDriveItemWorkbookFunctionsBitorRequest {
	r.inlineObject1245 = &inlineObject1245
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBitorRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBitorExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBitor Invoke action bitor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBitorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBitor(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBitorRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBitorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBitorExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBitorRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBitor")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.bitor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1245 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1245 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1245
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBitrshiftRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1246 *InlineObject1246
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBitrshiftRequest) InlineObject1246(inlineObject1246 InlineObject1246) ApiWorkbooksDriveItemWorkbookFunctionsBitrshiftRequest {
	r.inlineObject1246 = &inlineObject1246
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBitrshiftRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBitrshiftExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBitrshift Invoke action bitrshift

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBitrshiftRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBitrshift(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBitrshiftRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBitrshiftRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBitrshiftExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBitrshiftRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBitrshift")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.bitrshift"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1246 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1246 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1246
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsBitxorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1247 *InlineObject1247
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBitxorRequest) InlineObject1247(inlineObject1247 InlineObject1247) ApiWorkbooksDriveItemWorkbookFunctionsBitxorRequest {
	r.inlineObject1247 = &inlineObject1247
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsBitxorRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsBitxorExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsBitxor Invoke action bitxor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsBitxorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBitxor(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsBitxorRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsBitxorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsBitxorExecute(r ApiWorkbooksDriveItemWorkbookFunctionsBitxorRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsBitxor")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.bitxor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1247 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1247 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1247
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCeilingMathRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1248 *InlineObject1248
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCeilingMathRequest) InlineObject1248(inlineObject1248 InlineObject1248) ApiWorkbooksDriveItemWorkbookFunctionsCeilingMathRequest {
	r.inlineObject1248 = &inlineObject1248
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCeilingMathRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCeilingMathExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCeilingMath Invoke action ceiling_Math

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCeilingMathRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCeilingMath(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCeilingMathRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCeilingMathRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCeilingMathExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCeilingMathRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCeilingMath")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.ceiling_Math"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1248 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1248 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1248
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCeilingPreciseRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1249 *InlineObject1249
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCeilingPreciseRequest) InlineObject1249(inlineObject1249 InlineObject1249) ApiWorkbooksDriveItemWorkbookFunctionsCeilingPreciseRequest {
	r.inlineObject1249 = &inlineObject1249
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCeilingPreciseRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCeilingPreciseExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCeilingPrecise Invoke action ceiling_Precise

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCeilingPreciseRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCeilingPrecise(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCeilingPreciseRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCeilingPreciseRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCeilingPreciseExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCeilingPreciseRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCeilingPrecise")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.ceiling_Precise"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1249 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1249 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1249
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCharRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1250 *InlineObject1250
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCharRequest) InlineObject1250(inlineObject1250 InlineObject1250) ApiWorkbooksDriveItemWorkbookFunctionsCharRequest {
	r.inlineObject1250 = &inlineObject1250
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCharRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCharExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsChar Invoke action char

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCharRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsChar(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCharRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCharRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCharExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCharRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsChar")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.char"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1250 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1250 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1250
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1251 *InlineObject1251
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRequest) InlineObject1251(inlineObject1251 InlineObject1251) ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRequest {
	r.inlineObject1251 = &inlineObject1251
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsChiSqDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsChiSqDist Invoke action chiSq_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsChiSqDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsChiSqDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsChiSqDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.chiSq_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1251 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1251 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1251
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRTRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1252 *InlineObject1252
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRTRequest) InlineObject1252(inlineObject1252 InlineObject1252) ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRTRequest {
	r.inlineObject1252 = &inlineObject1252
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRTRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsChiSqDistRTExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsChiSqDistRT Invoke action chiSq_Dist_RT

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRTRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsChiSqDistRT(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRTRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRTRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsChiSqDistRTExecute(r ApiWorkbooksDriveItemWorkbookFunctionsChiSqDistRTRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsChiSqDistRT")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.chiSq_Dist_RT"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1252 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1252 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1252
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1253 *InlineObject1253
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRequest) InlineObject1253(inlineObject1253 InlineObject1253) ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRequest {
	r.inlineObject1253 = &inlineObject1253
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsChiSqInvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsChiSqInv Invoke action chiSq_Inv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsChiSqInv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsChiSqInvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsChiSqInv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.chiSq_Inv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1253 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1253 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1253
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRTRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1254 *InlineObject1254
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRTRequest) InlineObject1254(inlineObject1254 InlineObject1254) ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRTRequest {
	r.inlineObject1254 = &inlineObject1254
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRTRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsChiSqInvRTExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsChiSqInvRT Invoke action chiSq_Inv_RT

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRTRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsChiSqInvRT(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRTRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRTRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsChiSqInvRTExecute(r ApiWorkbooksDriveItemWorkbookFunctionsChiSqInvRTRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsChiSqInvRT")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.chiSq_Inv_RT"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1254 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1254 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1254
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsChooseRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1255 *InlineObject1255
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsChooseRequest) InlineObject1255(inlineObject1255 InlineObject1255) ApiWorkbooksDriveItemWorkbookFunctionsChooseRequest {
	r.inlineObject1255 = &inlineObject1255
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsChooseRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsChooseExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsChoose Invoke action choose

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsChooseRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsChoose(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsChooseRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsChooseRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsChooseExecute(r ApiWorkbooksDriveItemWorkbookFunctionsChooseRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsChoose")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.choose"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1255 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1255 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1255
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCleanRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1256 *InlineObject1256
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCleanRequest) InlineObject1256(inlineObject1256 InlineObject1256) ApiWorkbooksDriveItemWorkbookFunctionsCleanRequest {
	r.inlineObject1256 = &inlineObject1256
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCleanRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCleanExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsClean Invoke action clean

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCleanRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsClean(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCleanRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCleanRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCleanExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCleanRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsClean")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.clean"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1256 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1256 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1256
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCodeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1257 *InlineObject1257
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCodeRequest) InlineObject1257(inlineObject1257 InlineObject1257) ApiWorkbooksDriveItemWorkbookFunctionsCodeRequest {
	r.inlineObject1257 = &inlineObject1257
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCodeRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCodeExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCode Invoke action code

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCodeRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCode(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCodeRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCodeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCodeExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCodeRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCode")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.code"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1257 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1257 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1257
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1258 *InlineObject1258
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsColumnsRequest) InlineObject1258(inlineObject1258 InlineObject1258) ApiWorkbooksDriveItemWorkbookFunctionsColumnsRequest {
	r.inlineObject1258 = &inlineObject1258
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsColumnsRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsColumnsExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsColumns Invoke action columns

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsColumnsRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsColumns(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsColumnsRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsColumnsExecute(r ApiWorkbooksDriveItemWorkbookFunctionsColumnsRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsColumns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.columns"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1258 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1258 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1258
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCombinRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1259 *InlineObject1259
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCombinRequest) InlineObject1259(inlineObject1259 InlineObject1259) ApiWorkbooksDriveItemWorkbookFunctionsCombinRequest {
	r.inlineObject1259 = &inlineObject1259
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCombinRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCombinExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCombin Invoke action combin

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCombinRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCombin(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCombinRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCombinRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCombinExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCombinRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCombin")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.combin"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1259 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1259 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1259
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCombinaRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1260 *InlineObject1260
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCombinaRequest) InlineObject1260(inlineObject1260 InlineObject1260) ApiWorkbooksDriveItemWorkbookFunctionsCombinaRequest {
	r.inlineObject1260 = &inlineObject1260
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCombinaRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCombinaExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCombina Invoke action combina

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCombinaRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCombina(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCombinaRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCombinaRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCombinaExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCombinaRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCombina")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.combina"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1260 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1260 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1260
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsComplexRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1261 *InlineObject1261
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsComplexRequest) InlineObject1261(inlineObject1261 InlineObject1261) ApiWorkbooksDriveItemWorkbookFunctionsComplexRequest {
	r.inlineObject1261 = &inlineObject1261
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsComplexRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsComplexExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsComplex Invoke action complex

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsComplexRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsComplex(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsComplexRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsComplexRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsComplexExecute(r ApiWorkbooksDriveItemWorkbookFunctionsComplexRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsComplex")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.complex"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1261 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1261 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1261
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsConcatenateRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1262 *InlineObject1262
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsConcatenateRequest) InlineObject1262(inlineObject1262 InlineObject1262) ApiWorkbooksDriveItemWorkbookFunctionsConcatenateRequest {
	r.inlineObject1262 = &inlineObject1262
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsConcatenateRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsConcatenateExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsConcatenate Invoke action concatenate

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsConcatenateRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsConcatenate(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsConcatenateRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsConcatenateRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsConcatenateExecute(r ApiWorkbooksDriveItemWorkbookFunctionsConcatenateRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsConcatenate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.concatenate"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1262 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1262 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1262
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsConfidenceNormRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1263 *InlineObject1263
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsConfidenceNormRequest) InlineObject1263(inlineObject1263 InlineObject1263) ApiWorkbooksDriveItemWorkbookFunctionsConfidenceNormRequest {
	r.inlineObject1263 = &inlineObject1263
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsConfidenceNormRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsConfidenceNormExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsConfidenceNorm Invoke action confidence_Norm

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsConfidenceNormRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsConfidenceNorm(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsConfidenceNormRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsConfidenceNormRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsConfidenceNormExecute(r ApiWorkbooksDriveItemWorkbookFunctionsConfidenceNormRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsConfidenceNorm")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.confidence_Norm"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1263 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1263 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1263
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsConfidenceTRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1264 *InlineObject1264
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsConfidenceTRequest) InlineObject1264(inlineObject1264 InlineObject1264) ApiWorkbooksDriveItemWorkbookFunctionsConfidenceTRequest {
	r.inlineObject1264 = &inlineObject1264
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsConfidenceTRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsConfidenceTExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsConfidenceT Invoke action confidence_T

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsConfidenceTRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsConfidenceT(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsConfidenceTRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsConfidenceTRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsConfidenceTExecute(r ApiWorkbooksDriveItemWorkbookFunctionsConfidenceTRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsConfidenceT")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.confidence_T"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1264 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1264 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1264
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsConvertRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1265 *InlineObject1265
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsConvertRequest) InlineObject1265(inlineObject1265 InlineObject1265) ApiWorkbooksDriveItemWorkbookFunctionsConvertRequest {
	r.inlineObject1265 = &inlineObject1265
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsConvertRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsConvertExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsConvert Invoke action convert

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsConvertRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsConvert(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsConvertRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsConvertRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsConvertExecute(r ApiWorkbooksDriveItemWorkbookFunctionsConvertRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsConvert")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.convert"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1265 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1265 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1265
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCosRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1266 *InlineObject1266
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCosRequest) InlineObject1266(inlineObject1266 InlineObject1266) ApiWorkbooksDriveItemWorkbookFunctionsCosRequest {
	r.inlineObject1266 = &inlineObject1266
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCosRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCosExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCos Invoke action cos

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCosRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCos(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCosRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCosRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCosExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCosRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCos")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.cos"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1266 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1266 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1266
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCoshRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1267 *InlineObject1267
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoshRequest) InlineObject1267(inlineObject1267 InlineObject1267) ApiWorkbooksDriveItemWorkbookFunctionsCoshRequest {
	r.inlineObject1267 = &inlineObject1267
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoshRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCoshExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCosh Invoke action cosh

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCoshRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCosh(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCoshRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCoshRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoshExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCoshRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCosh")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.cosh"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1267 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1267 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1267
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCotRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1268 *InlineObject1268
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCotRequest) InlineObject1268(inlineObject1268 InlineObject1268) ApiWorkbooksDriveItemWorkbookFunctionsCotRequest {
	r.inlineObject1268 = &inlineObject1268
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCotRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCotExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCot Invoke action cot

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCotRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCot(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCotRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCotRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCotExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCotRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCot")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.cot"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1268 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1268 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1268
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCothRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1269 *InlineObject1269
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCothRequest) InlineObject1269(inlineObject1269 InlineObject1269) ApiWorkbooksDriveItemWorkbookFunctionsCothRequest {
	r.inlineObject1269 = &inlineObject1269
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCothRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCothExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCoth Invoke action coth

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCothRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoth(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCothRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCothRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCothExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCothRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCoth")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.coth"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1269 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1269 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1269
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1270 *InlineObject1270
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCountRequest) InlineObject1270(inlineObject1270 InlineObject1270) ApiWorkbooksDriveItemWorkbookFunctionsCountRequest {
	r.inlineObject1270 = &inlineObject1270
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCountRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCount Invoke action count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCountRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCount(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCountRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCountExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCountRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.count"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1270 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1270 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1270
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCountARequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1271 *InlineObject1271
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCountARequest) InlineObject1271(inlineObject1271 InlineObject1271) ApiWorkbooksDriveItemWorkbookFunctionsCountARequest {
	r.inlineObject1271 = &inlineObject1271
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCountARequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCountAExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCountA Invoke action countA

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCountARequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCountA(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCountARequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCountARequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCountAExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCountARequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCountA")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.countA"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1271 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1271 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1271
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCountBlankRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1272 *InlineObject1272
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCountBlankRequest) InlineObject1272(inlineObject1272 InlineObject1272) ApiWorkbooksDriveItemWorkbookFunctionsCountBlankRequest {
	r.inlineObject1272 = &inlineObject1272
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCountBlankRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCountBlankExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCountBlank Invoke action countBlank

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCountBlankRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCountBlank(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCountBlankRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCountBlankRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCountBlankExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCountBlankRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCountBlank")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.countBlank"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1272 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1272 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1272
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCountIfRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1273 *InlineObject1273
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCountIfRequest) InlineObject1273(inlineObject1273 InlineObject1273) ApiWorkbooksDriveItemWorkbookFunctionsCountIfRequest {
	r.inlineObject1273 = &inlineObject1273
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCountIfRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCountIfExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCountIf Invoke action countIf

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCountIfRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCountIf(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCountIfRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCountIfRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCountIfExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCountIfRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCountIf")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.countIf"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1273 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1273 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1273
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCountIfsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1274 *InlineObject1274
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCountIfsRequest) InlineObject1274(inlineObject1274 InlineObject1274) ApiWorkbooksDriveItemWorkbookFunctionsCountIfsRequest {
	r.inlineObject1274 = &inlineObject1274
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCountIfsRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCountIfsExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCountIfs Invoke action countIfs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCountIfsRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCountIfs(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCountIfsRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCountIfsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCountIfsExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCountIfsRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCountIfs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.countIfs"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1274 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1274 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1274
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCoupDayBsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1275 *InlineObject1275
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoupDayBsRequest) InlineObject1275(inlineObject1275 InlineObject1275) ApiWorkbooksDriveItemWorkbookFunctionsCoupDayBsRequest {
	r.inlineObject1275 = &inlineObject1275
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoupDayBsRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCoupDayBsExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCoupDayBs Invoke action coupDayBs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCoupDayBsRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoupDayBs(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCoupDayBsRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCoupDayBsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoupDayBsExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCoupDayBsRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCoupDayBs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.coupDayBs"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1275 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1275 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1275
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1276 *InlineObject1276
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysRequest) InlineObject1276(inlineObject1276 InlineObject1276) ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysRequest {
	r.inlineObject1276 = &inlineObject1276
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCoupDaysExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCoupDays Invoke action coupDays

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoupDays(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoupDaysExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCoupDays")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.coupDays"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1276 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1276 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1276
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysNcRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1277 *InlineObject1277
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysNcRequest) InlineObject1277(inlineObject1277 InlineObject1277) ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysNcRequest {
	r.inlineObject1277 = &inlineObject1277
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysNcRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCoupDaysNcExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCoupDaysNc Invoke action coupDaysNc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysNcRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoupDaysNc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysNcRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysNcRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoupDaysNcExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCoupDaysNcRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCoupDaysNc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.coupDaysNc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1277 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1277 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1277
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCoupNcdRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1278 *InlineObject1278
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoupNcdRequest) InlineObject1278(inlineObject1278 InlineObject1278) ApiWorkbooksDriveItemWorkbookFunctionsCoupNcdRequest {
	r.inlineObject1278 = &inlineObject1278
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoupNcdRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCoupNcdExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCoupNcd Invoke action coupNcd

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCoupNcdRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoupNcd(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCoupNcdRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCoupNcdRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoupNcdExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCoupNcdRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCoupNcd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.coupNcd"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1278 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1278 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1278
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCoupNumRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1279 *InlineObject1279
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoupNumRequest) InlineObject1279(inlineObject1279 InlineObject1279) ApiWorkbooksDriveItemWorkbookFunctionsCoupNumRequest {
	r.inlineObject1279 = &inlineObject1279
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoupNumRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCoupNumExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCoupNum Invoke action coupNum

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCoupNumRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoupNum(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCoupNumRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCoupNumRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoupNumExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCoupNumRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCoupNum")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.coupNum"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1279 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1279 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1279
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCoupPcdRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1280 *InlineObject1280
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoupPcdRequest) InlineObject1280(inlineObject1280 InlineObject1280) ApiWorkbooksDriveItemWorkbookFunctionsCoupPcdRequest {
	r.inlineObject1280 = &inlineObject1280
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCoupPcdRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCoupPcdExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCoupPcd Invoke action coupPcd

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCoupPcdRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoupPcd(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCoupPcdRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCoupPcdRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCoupPcdExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCoupPcdRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCoupPcd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.coupPcd"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1280 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1280 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1280
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCscRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1281 *InlineObject1281
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCscRequest) InlineObject1281(inlineObject1281 InlineObject1281) ApiWorkbooksDriveItemWorkbookFunctionsCscRequest {
	r.inlineObject1281 = &inlineObject1281
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCscRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCscExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCsc Invoke action csc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCscRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCsc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCscRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCscRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCscExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCscRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCsc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.csc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1281 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1281 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1281
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCschRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1282 *InlineObject1282
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCschRequest) InlineObject1282(inlineObject1282 InlineObject1282) ApiWorkbooksDriveItemWorkbookFunctionsCschRequest {
	r.inlineObject1282 = &inlineObject1282
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCschRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCschExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCsch Invoke action csch

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCschRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCsch(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCschRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCschRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCschExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCschRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCsch")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.csch"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1282 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1282 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1282
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCumIPmtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1283 *InlineObject1283
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCumIPmtRequest) InlineObject1283(inlineObject1283 InlineObject1283) ApiWorkbooksDriveItemWorkbookFunctionsCumIPmtRequest {
	r.inlineObject1283 = &inlineObject1283
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCumIPmtRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCumIPmtExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCumIPmt Invoke action cumIPmt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCumIPmtRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCumIPmt(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCumIPmtRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCumIPmtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCumIPmtExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCumIPmtRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCumIPmt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.cumIPmt"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1283 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1283 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1283
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsCumPrincRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1284 *InlineObject1284
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCumPrincRequest) InlineObject1284(inlineObject1284 InlineObject1284) ApiWorkbooksDriveItemWorkbookFunctionsCumPrincRequest {
	r.inlineObject1284 = &inlineObject1284
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsCumPrincRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsCumPrincExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsCumPrinc Invoke action cumPrinc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsCumPrincRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCumPrinc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsCumPrincRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsCumPrincRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsCumPrincExecute(r ApiWorkbooksDriveItemWorkbookFunctionsCumPrincRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsCumPrinc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.cumPrinc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1284 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1284 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1284
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDateRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1285 *InlineObject1285
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDateRequest) InlineObject1285(inlineObject1285 InlineObject1285) ApiWorkbooksDriveItemWorkbookFunctionsDateRequest {
	r.inlineObject1285 = &inlineObject1285
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDateRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDateExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDate Invoke action date

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDateRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDate(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDateRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDateRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDateExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDateRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.date"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1285 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1285 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1285
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDatevalueRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1286 *InlineObject1286
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDatevalueRequest) InlineObject1286(inlineObject1286 InlineObject1286) ApiWorkbooksDriveItemWorkbookFunctionsDatevalueRequest {
	r.inlineObject1286 = &inlineObject1286
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDatevalueRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDatevalueExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDatevalue Invoke action datevalue

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDatevalueRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDatevalue(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDatevalueRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDatevalueRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDatevalueExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDatevalueRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDatevalue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.datevalue"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1286 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1286 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1286
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDaverageRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1287 *InlineObject1287
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDaverageRequest) InlineObject1287(inlineObject1287 InlineObject1287) ApiWorkbooksDriveItemWorkbookFunctionsDaverageRequest {
	r.inlineObject1287 = &inlineObject1287
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDaverageRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDaverageExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDaverage Invoke action daverage

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDaverageRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDaverage(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDaverageRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDaverageRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDaverageExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDaverageRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDaverage")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.daverage"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1287 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1287 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1287
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDayRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1288 *InlineObject1288
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDayRequest) InlineObject1288(inlineObject1288 InlineObject1288) ApiWorkbooksDriveItemWorkbookFunctionsDayRequest {
	r.inlineObject1288 = &inlineObject1288
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDayRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDayExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDay Invoke action day

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDayRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDay(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDayRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDayRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDayExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDayRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDay")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.day"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1288 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1288 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1288
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDaysRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1289 *InlineObject1289
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDaysRequest) InlineObject1289(inlineObject1289 InlineObject1289) ApiWorkbooksDriveItemWorkbookFunctionsDaysRequest {
	r.inlineObject1289 = &inlineObject1289
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDaysRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDaysExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDays Invoke action days

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDaysRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDays(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDaysRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDaysRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDaysExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDaysRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDays")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.days"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1289 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1289 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1289
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDays360Request struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1290 *InlineObject1290
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDays360Request) InlineObject1290(inlineObject1290 InlineObject1290) ApiWorkbooksDriveItemWorkbookFunctionsDays360Request {
	r.inlineObject1290 = &inlineObject1290
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDays360Request) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDays360Execute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDays360 Invoke action days360

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDays360Request
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDays360(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDays360Request {
	return ApiWorkbooksDriveItemWorkbookFunctionsDays360Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDays360Execute(r ApiWorkbooksDriveItemWorkbookFunctionsDays360Request) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDays360")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.days360"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1290 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1290 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1290
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDbRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1291 *InlineObject1291
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDbRequest) InlineObject1291(inlineObject1291 InlineObject1291) ApiWorkbooksDriveItemWorkbookFunctionsDbRequest {
	r.inlineObject1291 = &inlineObject1291
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDbRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDbExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDb Invoke action db

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDbRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDb(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDbRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDbRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDbExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDbRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDb")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.db"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1291 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1291 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1291
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDbcsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1292 *InlineObject1292
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDbcsRequest) InlineObject1292(inlineObject1292 InlineObject1292) ApiWorkbooksDriveItemWorkbookFunctionsDbcsRequest {
	r.inlineObject1292 = &inlineObject1292
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDbcsRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDbcsExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDbcs Invoke action dbcs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDbcsRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDbcs(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDbcsRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDbcsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDbcsExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDbcsRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDbcs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dbcs"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1292 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1292 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1292
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDcountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1293 *InlineObject1293
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDcountRequest) InlineObject1293(inlineObject1293 InlineObject1293) ApiWorkbooksDriveItemWorkbookFunctionsDcountRequest {
	r.inlineObject1293 = &inlineObject1293
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDcountRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDcountExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDcount Invoke action dcount

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDcountRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDcount(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDcountRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDcountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDcountExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDcountRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDcount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dcount"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1293 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1293 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1293
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDcountARequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1294 *InlineObject1294
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDcountARequest) InlineObject1294(inlineObject1294 InlineObject1294) ApiWorkbooksDriveItemWorkbookFunctionsDcountARequest {
	r.inlineObject1294 = &inlineObject1294
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDcountARequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDcountAExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDcountA Invoke action dcountA

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDcountARequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDcountA(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDcountARequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDcountARequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDcountAExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDcountARequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDcountA")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dcountA"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1294 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1294 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1294
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDdbRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1295 *InlineObject1295
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDdbRequest) InlineObject1295(inlineObject1295 InlineObject1295) ApiWorkbooksDriveItemWorkbookFunctionsDdbRequest {
	r.inlineObject1295 = &inlineObject1295
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDdbRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDdbExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDdb Invoke action ddb

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDdbRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDdb(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDdbRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDdbRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDdbExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDdbRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDdb")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.ddb"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1295 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1295 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1295
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDec2BinRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1296 *InlineObject1296
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDec2BinRequest) InlineObject1296(inlineObject1296 InlineObject1296) ApiWorkbooksDriveItemWorkbookFunctionsDec2BinRequest {
	r.inlineObject1296 = &inlineObject1296
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDec2BinRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDec2BinExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDec2Bin Invoke action dec2Bin

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDec2BinRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDec2Bin(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDec2BinRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDec2BinRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDec2BinExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDec2BinRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDec2Bin")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dec2Bin"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1296 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1296 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1296
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDec2HexRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1297 *InlineObject1297
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDec2HexRequest) InlineObject1297(inlineObject1297 InlineObject1297) ApiWorkbooksDriveItemWorkbookFunctionsDec2HexRequest {
	r.inlineObject1297 = &inlineObject1297
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDec2HexRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDec2HexExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDec2Hex Invoke action dec2Hex

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDec2HexRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDec2Hex(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDec2HexRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDec2HexRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDec2HexExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDec2HexRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDec2Hex")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dec2Hex"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1297 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1297 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1297
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDec2OctRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1298 *InlineObject1298
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDec2OctRequest) InlineObject1298(inlineObject1298 InlineObject1298) ApiWorkbooksDriveItemWorkbookFunctionsDec2OctRequest {
	r.inlineObject1298 = &inlineObject1298
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDec2OctRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDec2OctExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDec2Oct Invoke action dec2Oct

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDec2OctRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDec2Oct(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDec2OctRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDec2OctRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDec2OctExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDec2OctRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDec2Oct")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dec2Oct"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1298 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1298 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1298
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDecimalRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1299 *InlineObject1299
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDecimalRequest) InlineObject1299(inlineObject1299 InlineObject1299) ApiWorkbooksDriveItemWorkbookFunctionsDecimalRequest {
	r.inlineObject1299 = &inlineObject1299
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDecimalRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDecimalExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDecimal Invoke action decimal

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDecimalRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDecimal(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDecimalRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDecimalRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDecimalExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDecimalRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDecimal")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.decimal"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1299 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1299 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1299
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDegreesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1300 *InlineObject1300
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDegreesRequest) InlineObject1300(inlineObject1300 InlineObject1300) ApiWorkbooksDriveItemWorkbookFunctionsDegreesRequest {
	r.inlineObject1300 = &inlineObject1300
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDegreesRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDegreesExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDegrees Invoke action degrees

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDegreesRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDegrees(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDegreesRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDegreesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDegreesExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDegreesRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDegrees")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.degrees"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1300 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1300 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1300
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDeltaRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1301 *InlineObject1301
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDeltaRequest) InlineObject1301(inlineObject1301 InlineObject1301) ApiWorkbooksDriveItemWorkbookFunctionsDeltaRequest {
	r.inlineObject1301 = &inlineObject1301
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDeltaRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDeltaExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDelta Invoke action delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDeltaRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDelta(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDeltaRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDeltaExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDeltaRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.delta"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1301 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1301 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1301
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDevSqRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1302 *InlineObject1302
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDevSqRequest) InlineObject1302(inlineObject1302 InlineObject1302) ApiWorkbooksDriveItemWorkbookFunctionsDevSqRequest {
	r.inlineObject1302 = &inlineObject1302
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDevSqRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDevSqExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDevSq Invoke action devSq

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDevSqRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDevSq(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDevSqRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDevSqRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDevSqExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDevSqRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDevSq")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.devSq"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1302 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1302 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1302
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDgetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1303 *InlineObject1303
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDgetRequest) InlineObject1303(inlineObject1303 InlineObject1303) ApiWorkbooksDriveItemWorkbookFunctionsDgetRequest {
	r.inlineObject1303 = &inlineObject1303
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDgetRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDgetExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDget Invoke action dget

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDgetRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDget(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDgetRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDgetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDgetExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDgetRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDget")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dget"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1303 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1303 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1303
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDiscRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1304 *InlineObject1304
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDiscRequest) InlineObject1304(inlineObject1304 InlineObject1304) ApiWorkbooksDriveItemWorkbookFunctionsDiscRequest {
	r.inlineObject1304 = &inlineObject1304
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDiscRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDiscExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDisc Invoke action disc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDiscRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDisc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDiscRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDiscRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDiscExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDiscRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDisc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.disc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1304 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1304 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1304
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDmaxRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1305 *InlineObject1305
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDmaxRequest) InlineObject1305(inlineObject1305 InlineObject1305) ApiWorkbooksDriveItemWorkbookFunctionsDmaxRequest {
	r.inlineObject1305 = &inlineObject1305
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDmaxRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDmaxExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDmax Invoke action dmax

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDmaxRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDmax(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDmaxRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDmaxRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDmaxExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDmaxRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDmax")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dmax"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1305 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1305 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1305
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDminRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1306 *InlineObject1306
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDminRequest) InlineObject1306(inlineObject1306 InlineObject1306) ApiWorkbooksDriveItemWorkbookFunctionsDminRequest {
	r.inlineObject1306 = &inlineObject1306
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDminRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDminExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDmin Invoke action dmin

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDminRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDmin(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDminRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDminRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDminExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDminRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDmin")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dmin"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1306 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1306 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1306
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDollarRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1307 *InlineObject1307
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDollarRequest) InlineObject1307(inlineObject1307 InlineObject1307) ApiWorkbooksDriveItemWorkbookFunctionsDollarRequest {
	r.inlineObject1307 = &inlineObject1307
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDollarRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDollarExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDollar Invoke action dollar

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDollarRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDollar(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDollarRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDollarRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDollarExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDollarRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDollar")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dollar"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1307 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1307 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1307
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDollarDeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1308 *InlineObject1308
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDollarDeRequest) InlineObject1308(inlineObject1308 InlineObject1308) ApiWorkbooksDriveItemWorkbookFunctionsDollarDeRequest {
	r.inlineObject1308 = &inlineObject1308
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDollarDeRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDollarDeExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDollarDe Invoke action dollarDe

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDollarDeRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDollarDe(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDollarDeRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDollarDeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDollarDeExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDollarDeRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDollarDe")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dollarDe"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1308 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1308 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1308
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDollarFrRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1309 *InlineObject1309
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDollarFrRequest) InlineObject1309(inlineObject1309 InlineObject1309) ApiWorkbooksDriveItemWorkbookFunctionsDollarFrRequest {
	r.inlineObject1309 = &inlineObject1309
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDollarFrRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDollarFrExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDollarFr Invoke action dollarFr

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDollarFrRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDollarFr(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDollarFrRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDollarFrRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDollarFrExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDollarFrRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDollarFr")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dollarFr"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1309 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1309 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1309
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDproductRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1310 *InlineObject1310
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDproductRequest) InlineObject1310(inlineObject1310 InlineObject1310) ApiWorkbooksDriveItemWorkbookFunctionsDproductRequest {
	r.inlineObject1310 = &inlineObject1310
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDproductRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDproductExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDproduct Invoke action dproduct

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDproductRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDproduct(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDproductRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDproductRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDproductExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDproductRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDproduct")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dproduct"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1310 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1310 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1310
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDstDevRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1311 *InlineObject1311
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDstDevRequest) InlineObject1311(inlineObject1311 InlineObject1311) ApiWorkbooksDriveItemWorkbookFunctionsDstDevRequest {
	r.inlineObject1311 = &inlineObject1311
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDstDevRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDstDevExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDstDev Invoke action dstDev

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDstDevRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDstDev(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDstDevRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDstDevRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDstDevExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDstDevRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDstDev")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dstDev"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1311 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1311 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1311
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDstDevPRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1312 *InlineObject1312
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDstDevPRequest) InlineObject1312(inlineObject1312 InlineObject1312) ApiWorkbooksDriveItemWorkbookFunctionsDstDevPRequest {
	r.inlineObject1312 = &inlineObject1312
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDstDevPRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDstDevPExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDstDevP Invoke action dstDevP

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDstDevPRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDstDevP(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDstDevPRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDstDevPRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDstDevPExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDstDevPRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDstDevP")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dstDevP"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1312 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1312 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1312
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDsumRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1313 *InlineObject1313
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDsumRequest) InlineObject1313(inlineObject1313 InlineObject1313) ApiWorkbooksDriveItemWorkbookFunctionsDsumRequest {
	r.inlineObject1313 = &inlineObject1313
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDsumRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDsumExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDsum Invoke action dsum

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDsumRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDsum(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDsumRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDsumRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDsumExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDsumRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDsum")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dsum"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1313 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1313 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1313
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDurationRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1314 *InlineObject1314
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDurationRequest) InlineObject1314(inlineObject1314 InlineObject1314) ApiWorkbooksDriveItemWorkbookFunctionsDurationRequest {
	r.inlineObject1314 = &inlineObject1314
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDurationRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDurationExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDuration Invoke action duration

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDurationRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDuration(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDurationRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDurationRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDurationExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDurationRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDuration")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.duration"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1314 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1314 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1314
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDvarRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1315 *InlineObject1315
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDvarRequest) InlineObject1315(inlineObject1315 InlineObject1315) ApiWorkbooksDriveItemWorkbookFunctionsDvarRequest {
	r.inlineObject1315 = &inlineObject1315
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDvarRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDvarExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDvar Invoke action dvar

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDvarRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDvar(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDvarRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDvarRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDvarExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDvarRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDvar")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dvar"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1315 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1315 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1315
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsDvarPRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1316 *InlineObject1316
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDvarPRequest) InlineObject1316(inlineObject1316 InlineObject1316) ApiWorkbooksDriveItemWorkbookFunctionsDvarPRequest {
	r.inlineObject1316 = &inlineObject1316
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsDvarPRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsDvarPExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsDvarP Invoke action dvarP

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsDvarPRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDvarP(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsDvarPRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsDvarPRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsDvarPExecute(r ApiWorkbooksDriveItemWorkbookFunctionsDvarPRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsDvarP")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.dvarP"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1316 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1316 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1316
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsEcmaCeilingRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1317 *InlineObject1317
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsEcmaCeilingRequest) InlineObject1317(inlineObject1317 InlineObject1317) ApiWorkbooksDriveItemWorkbookFunctionsEcmaCeilingRequest {
	r.inlineObject1317 = &inlineObject1317
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsEcmaCeilingRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsEcmaCeilingExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsEcmaCeiling Invoke action ecma_Ceiling

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsEcmaCeilingRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsEcmaCeiling(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsEcmaCeilingRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsEcmaCeilingRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsEcmaCeilingExecute(r ApiWorkbooksDriveItemWorkbookFunctionsEcmaCeilingRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsEcmaCeiling")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.ecma_Ceiling"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1317 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1317 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1317
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsEdateRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1318 *InlineObject1318
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsEdateRequest) InlineObject1318(inlineObject1318 InlineObject1318) ApiWorkbooksDriveItemWorkbookFunctionsEdateRequest {
	r.inlineObject1318 = &inlineObject1318
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsEdateRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsEdateExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsEdate Invoke action edate

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsEdateRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsEdate(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsEdateRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsEdateRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsEdateExecute(r ApiWorkbooksDriveItemWorkbookFunctionsEdateRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsEdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.edate"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1318 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1318 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1318
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsEffectRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1319 *InlineObject1319
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsEffectRequest) InlineObject1319(inlineObject1319 InlineObject1319) ApiWorkbooksDriveItemWorkbookFunctionsEffectRequest {
	r.inlineObject1319 = &inlineObject1319
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsEffectRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsEffectExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsEffect Invoke action effect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsEffectRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsEffect(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsEffectRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsEffectRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsEffectExecute(r ApiWorkbooksDriveItemWorkbookFunctionsEffectRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsEffect")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.effect"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1319 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1319 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1319
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsEoMonthRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1320 *InlineObject1320
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsEoMonthRequest) InlineObject1320(inlineObject1320 InlineObject1320) ApiWorkbooksDriveItemWorkbookFunctionsEoMonthRequest {
	r.inlineObject1320 = &inlineObject1320
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsEoMonthRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsEoMonthExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsEoMonth Invoke action eoMonth

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsEoMonthRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsEoMonth(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsEoMonthRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsEoMonthRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsEoMonthExecute(r ApiWorkbooksDriveItemWorkbookFunctionsEoMonthRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsEoMonth")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.eoMonth"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1320 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1320 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1320
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsErfRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1321 *InlineObject1321
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsErfRequest) InlineObject1321(inlineObject1321 InlineObject1321) ApiWorkbooksDriveItemWorkbookFunctionsErfRequest {
	r.inlineObject1321 = &inlineObject1321
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsErfRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsErfExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsErf Invoke action erf

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsErfRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsErf(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsErfRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsErfRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsErfExecute(r ApiWorkbooksDriveItemWorkbookFunctionsErfRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsErf")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.erf"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1321 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1321 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1321
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsErfCRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1323 *InlineObject1323
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsErfCRequest) InlineObject1323(inlineObject1323 InlineObject1323) ApiWorkbooksDriveItemWorkbookFunctionsErfCRequest {
	r.inlineObject1323 = &inlineObject1323
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsErfCRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsErfCExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsErfC Invoke action erfC

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsErfCRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsErfC(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsErfCRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsErfCRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsErfCExecute(r ApiWorkbooksDriveItemWorkbookFunctionsErfCRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsErfC")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.erfC"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1323 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1323 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1323
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsErfCPreciseRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1324 *InlineObject1324
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsErfCPreciseRequest) InlineObject1324(inlineObject1324 InlineObject1324) ApiWorkbooksDriveItemWorkbookFunctionsErfCPreciseRequest {
	r.inlineObject1324 = &inlineObject1324
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsErfCPreciseRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsErfCPreciseExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsErfCPrecise Invoke action erfC_Precise

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsErfCPreciseRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsErfCPrecise(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsErfCPreciseRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsErfCPreciseRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsErfCPreciseExecute(r ApiWorkbooksDriveItemWorkbookFunctionsErfCPreciseRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsErfCPrecise")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.erfC_Precise"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1324 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1324 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1324
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsErfPreciseRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1322 *InlineObject1322
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsErfPreciseRequest) InlineObject1322(inlineObject1322 InlineObject1322) ApiWorkbooksDriveItemWorkbookFunctionsErfPreciseRequest {
	r.inlineObject1322 = &inlineObject1322
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsErfPreciseRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsErfPreciseExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsErfPrecise Invoke action erf_Precise

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsErfPreciseRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsErfPrecise(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsErfPreciseRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsErfPreciseRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsErfPreciseExecute(r ApiWorkbooksDriveItemWorkbookFunctionsErfPreciseRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsErfPrecise")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.erf_Precise"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1322 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1322 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1322
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsErrorTypeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1325 *InlineObject1325
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsErrorTypeRequest) InlineObject1325(inlineObject1325 InlineObject1325) ApiWorkbooksDriveItemWorkbookFunctionsErrorTypeRequest {
	r.inlineObject1325 = &inlineObject1325
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsErrorTypeRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsErrorTypeExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsErrorType Invoke action error_Type

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsErrorTypeRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsErrorType(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsErrorTypeRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsErrorTypeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsErrorTypeExecute(r ApiWorkbooksDriveItemWorkbookFunctionsErrorTypeRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsErrorType")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.error_Type"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1325 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1325 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1325
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsEvenRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1326 *InlineObject1326
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsEvenRequest) InlineObject1326(inlineObject1326 InlineObject1326) ApiWorkbooksDriveItemWorkbookFunctionsEvenRequest {
	r.inlineObject1326 = &inlineObject1326
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsEvenRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsEvenExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsEven Invoke action even

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsEvenRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsEven(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsEvenRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsEvenRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsEvenExecute(r ApiWorkbooksDriveItemWorkbookFunctionsEvenRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsEven")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.even"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1326 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1326 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1326
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsExactRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1327 *InlineObject1327
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsExactRequest) InlineObject1327(inlineObject1327 InlineObject1327) ApiWorkbooksDriveItemWorkbookFunctionsExactRequest {
	r.inlineObject1327 = &inlineObject1327
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsExactRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsExactExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsExact Invoke action exact

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsExactRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsExact(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsExactRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsExactRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsExactExecute(r ApiWorkbooksDriveItemWorkbookFunctionsExactRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsExact")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.exact"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1327 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1327 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1327
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsExpRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1328 *InlineObject1328
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsExpRequest) InlineObject1328(inlineObject1328 InlineObject1328) ApiWorkbooksDriveItemWorkbookFunctionsExpRequest {
	r.inlineObject1328 = &inlineObject1328
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsExpRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsExpExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsExp Invoke action exp

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsExpRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsExp(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsExpRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsExpRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsExpExecute(r ApiWorkbooksDriveItemWorkbookFunctionsExpRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsExp")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.exp"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1328 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1328 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1328
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsExponDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1329 *InlineObject1329
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsExponDistRequest) InlineObject1329(inlineObject1329 InlineObject1329) ApiWorkbooksDriveItemWorkbookFunctionsExponDistRequest {
	r.inlineObject1329 = &inlineObject1329
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsExponDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsExponDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsExponDist Invoke action expon_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsExponDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsExponDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsExponDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsExponDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsExponDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsExponDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsExponDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.expon_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1329 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1329 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1329
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1330 *InlineObject1330
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFDistRequest) InlineObject1330(inlineObject1330 InlineObject1330) ApiWorkbooksDriveItemWorkbookFunctionsFDistRequest {
	r.inlineObject1330 = &inlineObject1330
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFDist Invoke action f_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.f_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1330 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1330 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1330
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFDistRTRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1331 *InlineObject1331
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFDistRTRequest) InlineObject1331(inlineObject1331 InlineObject1331) ApiWorkbooksDriveItemWorkbookFunctionsFDistRTRequest {
	r.inlineObject1331 = &inlineObject1331
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFDistRTRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFDistRTExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFDistRT Invoke action f_Dist_RT

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFDistRTRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFDistRT(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFDistRTRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFDistRTRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFDistRTExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFDistRTRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFDistRT")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.f_Dist_RT"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1331 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1331 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1331
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFInvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1332 *InlineObject1332
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFInvRequest) InlineObject1332(inlineObject1332 InlineObject1332) ApiWorkbooksDriveItemWorkbookFunctionsFInvRequest {
	r.inlineObject1332 = &inlineObject1332
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFInvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFInvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFInv Invoke action f_Inv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFInvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFInv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFInvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFInvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFInvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFInvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFInv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.f_Inv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1332 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1332 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1332
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFInvRTRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1333 *InlineObject1333
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFInvRTRequest) InlineObject1333(inlineObject1333 InlineObject1333) ApiWorkbooksDriveItemWorkbookFunctionsFInvRTRequest {
	r.inlineObject1333 = &inlineObject1333
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFInvRTRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFInvRTExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFInvRT Invoke action f_Inv_RT

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFInvRTRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFInvRT(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFInvRTRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFInvRTRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFInvRTExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFInvRTRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFInvRT")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.f_Inv_RT"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1333 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1333 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1333
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFactRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1334 *InlineObject1334
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFactRequest) InlineObject1334(inlineObject1334 InlineObject1334) ApiWorkbooksDriveItemWorkbookFunctionsFactRequest {
	r.inlineObject1334 = &inlineObject1334
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFactRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFactExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFact Invoke action fact

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFactRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFact(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFactRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFactRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFactExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFactRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFact")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.fact"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1334 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1334 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1334
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFactDoubleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1335 *InlineObject1335
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFactDoubleRequest) InlineObject1335(inlineObject1335 InlineObject1335) ApiWorkbooksDriveItemWorkbookFunctionsFactDoubleRequest {
	r.inlineObject1335 = &inlineObject1335
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFactDoubleRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFactDoubleExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFactDouble Invoke action factDouble

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFactDoubleRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFactDouble(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFactDoubleRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFactDoubleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFactDoubleExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFactDoubleRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFactDouble")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.factDouble"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1335 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1335 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1335
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFalseRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemWorkbookFunctionsFalseRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFalseExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFalse Invoke action false

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFalseRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFalse(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFalseRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFalseRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFalseExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFalseRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFalse")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.false"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFindRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1336 *InlineObject1336
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFindRequest) InlineObject1336(inlineObject1336 InlineObject1336) ApiWorkbooksDriveItemWorkbookFunctionsFindRequest {
	r.inlineObject1336 = &inlineObject1336
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFindRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFindExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFind Invoke action find

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFindRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFind(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFindRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFindRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFindExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFindRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFind")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.find"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1336 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1336 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1336
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFindBRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1337 *InlineObject1337
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFindBRequest) InlineObject1337(inlineObject1337 InlineObject1337) ApiWorkbooksDriveItemWorkbookFunctionsFindBRequest {
	r.inlineObject1337 = &inlineObject1337
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFindBRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFindBExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFindB Invoke action findB

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFindBRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFindB(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFindBRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFindBRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFindBExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFindBRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFindB")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.findB"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1337 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1337 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1337
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFisherRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1338 *InlineObject1338
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFisherRequest) InlineObject1338(inlineObject1338 InlineObject1338) ApiWorkbooksDriveItemWorkbookFunctionsFisherRequest {
	r.inlineObject1338 = &inlineObject1338
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFisherRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFisherExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFisher Invoke action fisher

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFisherRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFisher(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFisherRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFisherRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFisherExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFisherRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFisher")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.fisher"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1338 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1338 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1338
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFisherInvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1339 *InlineObject1339
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFisherInvRequest) InlineObject1339(inlineObject1339 InlineObject1339) ApiWorkbooksDriveItemWorkbookFunctionsFisherInvRequest {
	r.inlineObject1339 = &inlineObject1339
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFisherInvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFisherInvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFisherInv Invoke action fisherInv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFisherInvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFisherInv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFisherInvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFisherInvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFisherInvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFisherInvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFisherInv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.fisherInv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1339 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1339 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1339
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFixedRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1340 *InlineObject1340
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFixedRequest) InlineObject1340(inlineObject1340 InlineObject1340) ApiWorkbooksDriveItemWorkbookFunctionsFixedRequest {
	r.inlineObject1340 = &inlineObject1340
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFixedRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFixedExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFixed Invoke action fixed

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFixedRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFixed(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFixedRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFixedRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFixedExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFixedRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFixed")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.fixed"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1340 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1340 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1340
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFloorMathRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1341 *InlineObject1341
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFloorMathRequest) InlineObject1341(inlineObject1341 InlineObject1341) ApiWorkbooksDriveItemWorkbookFunctionsFloorMathRequest {
	r.inlineObject1341 = &inlineObject1341
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFloorMathRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFloorMathExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFloorMath Invoke action floor_Math

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFloorMathRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFloorMath(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFloorMathRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFloorMathRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFloorMathExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFloorMathRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFloorMath")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.floor_Math"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1341 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1341 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1341
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFloorPreciseRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1342 *InlineObject1342
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFloorPreciseRequest) InlineObject1342(inlineObject1342 InlineObject1342) ApiWorkbooksDriveItemWorkbookFunctionsFloorPreciseRequest {
	r.inlineObject1342 = &inlineObject1342
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFloorPreciseRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFloorPreciseExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFloorPrecise Invoke action floor_Precise

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFloorPreciseRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFloorPrecise(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFloorPreciseRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFloorPreciseRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFloorPreciseExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFloorPreciseRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFloorPrecise")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.floor_Precise"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1342 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1342 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1342
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1343 *InlineObject1343
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFvRequest) InlineObject1343(inlineObject1343 InlineObject1343) ApiWorkbooksDriveItemWorkbookFunctionsFvRequest {
	r.inlineObject1343 = &inlineObject1343
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFv Invoke action fv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.fv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1343 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1343 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1343
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsFvscheduleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1344 *InlineObject1344
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFvscheduleRequest) InlineObject1344(inlineObject1344 InlineObject1344) ApiWorkbooksDriveItemWorkbookFunctionsFvscheduleRequest {
	r.inlineObject1344 = &inlineObject1344
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsFvscheduleRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsFvscheduleExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsFvschedule Invoke action fvschedule

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsFvscheduleRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFvschedule(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsFvscheduleRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsFvscheduleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsFvscheduleExecute(r ApiWorkbooksDriveItemWorkbookFunctionsFvscheduleRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsFvschedule")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.fvschedule"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1344 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1344 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1344
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsGammaRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1345 *InlineObject1345
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGammaRequest) InlineObject1345(inlineObject1345 InlineObject1345) ApiWorkbooksDriveItemWorkbookFunctionsGammaRequest {
	r.inlineObject1345 = &inlineObject1345
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGammaRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsGammaExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsGamma Invoke action gamma

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsGammaRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGamma(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsGammaRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsGammaRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGammaExecute(r ApiWorkbooksDriveItemWorkbookFunctionsGammaRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsGamma")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.gamma"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1345 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1345 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1345
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsGammaDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1346 *InlineObject1346
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGammaDistRequest) InlineObject1346(inlineObject1346 InlineObject1346) ApiWorkbooksDriveItemWorkbookFunctionsGammaDistRequest {
	r.inlineObject1346 = &inlineObject1346
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGammaDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsGammaDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsGammaDist Invoke action gamma_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsGammaDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGammaDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsGammaDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsGammaDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGammaDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsGammaDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsGammaDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.gamma_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1346 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1346 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1346
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsGammaInvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1347 *InlineObject1347
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGammaInvRequest) InlineObject1347(inlineObject1347 InlineObject1347) ApiWorkbooksDriveItemWorkbookFunctionsGammaInvRequest {
	r.inlineObject1347 = &inlineObject1347
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGammaInvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsGammaInvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsGammaInv Invoke action gamma_Inv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsGammaInvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGammaInv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsGammaInvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsGammaInvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGammaInvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsGammaInvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsGammaInv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.gamma_Inv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1347 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1347 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1347
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsGammaLnRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1348 *InlineObject1348
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGammaLnRequest) InlineObject1348(inlineObject1348 InlineObject1348) ApiWorkbooksDriveItemWorkbookFunctionsGammaLnRequest {
	r.inlineObject1348 = &inlineObject1348
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGammaLnRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsGammaLnExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsGammaLn Invoke action gammaLn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsGammaLnRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGammaLn(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsGammaLnRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsGammaLnRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGammaLnExecute(r ApiWorkbooksDriveItemWorkbookFunctionsGammaLnRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsGammaLn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.gammaLn"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1348 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1348 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1348
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsGammaLnPreciseRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1349 *InlineObject1349
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGammaLnPreciseRequest) InlineObject1349(inlineObject1349 InlineObject1349) ApiWorkbooksDriveItemWorkbookFunctionsGammaLnPreciseRequest {
	r.inlineObject1349 = &inlineObject1349
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGammaLnPreciseRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsGammaLnPreciseExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsGammaLnPrecise Invoke action gammaLn_Precise

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsGammaLnPreciseRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGammaLnPrecise(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsGammaLnPreciseRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsGammaLnPreciseRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGammaLnPreciseExecute(r ApiWorkbooksDriveItemWorkbookFunctionsGammaLnPreciseRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsGammaLnPrecise")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.gammaLn_Precise"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1349 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1349 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1349
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsGaussRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1350 *InlineObject1350
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGaussRequest) InlineObject1350(inlineObject1350 InlineObject1350) ApiWorkbooksDriveItemWorkbookFunctionsGaussRequest {
	r.inlineObject1350 = &inlineObject1350
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGaussRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsGaussExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsGauss Invoke action gauss

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsGaussRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGauss(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsGaussRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsGaussRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGaussExecute(r ApiWorkbooksDriveItemWorkbookFunctionsGaussRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsGauss")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.gauss"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1350 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1350 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1350
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsGcdRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1351 *InlineObject1351
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGcdRequest) InlineObject1351(inlineObject1351 InlineObject1351) ApiWorkbooksDriveItemWorkbookFunctionsGcdRequest {
	r.inlineObject1351 = &inlineObject1351
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGcdRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsGcdExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsGcd Invoke action gcd

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsGcdRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGcd(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsGcdRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsGcdRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGcdExecute(r ApiWorkbooksDriveItemWorkbookFunctionsGcdRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsGcd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.gcd"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1351 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1351 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1351
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsGeStepRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1353 *InlineObject1353
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGeStepRequest) InlineObject1353(inlineObject1353 InlineObject1353) ApiWorkbooksDriveItemWorkbookFunctionsGeStepRequest {
	r.inlineObject1353 = &inlineObject1353
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGeStepRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsGeStepExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsGeStep Invoke action geStep

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsGeStepRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGeStep(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsGeStepRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsGeStepRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGeStepExecute(r ApiWorkbooksDriveItemWorkbookFunctionsGeStepRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsGeStep")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.geStep"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1353 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1353 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1353
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsGeoMeanRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1352 *InlineObject1352
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGeoMeanRequest) InlineObject1352(inlineObject1352 InlineObject1352) ApiWorkbooksDriveItemWorkbookFunctionsGeoMeanRequest {
	r.inlineObject1352 = &inlineObject1352
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsGeoMeanRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsGeoMeanExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsGeoMean Invoke action geoMean

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsGeoMeanRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGeoMean(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsGeoMeanRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsGeoMeanRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsGeoMeanExecute(r ApiWorkbooksDriveItemWorkbookFunctionsGeoMeanRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsGeoMean")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.geoMean"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1352 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1352 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1352
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsHarMeanRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1354 *InlineObject1354
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHarMeanRequest) InlineObject1354(inlineObject1354 InlineObject1354) ApiWorkbooksDriveItemWorkbookFunctionsHarMeanRequest {
	r.inlineObject1354 = &inlineObject1354
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHarMeanRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsHarMeanExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsHarMean Invoke action harMean

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsHarMeanRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHarMean(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsHarMeanRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsHarMeanRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHarMeanExecute(r ApiWorkbooksDriveItemWorkbookFunctionsHarMeanRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsHarMean")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.harMean"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1354 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1354 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1354
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsHex2BinRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1355 *InlineObject1355
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHex2BinRequest) InlineObject1355(inlineObject1355 InlineObject1355) ApiWorkbooksDriveItemWorkbookFunctionsHex2BinRequest {
	r.inlineObject1355 = &inlineObject1355
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHex2BinRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsHex2BinExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsHex2Bin Invoke action hex2Bin

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsHex2BinRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHex2Bin(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsHex2BinRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsHex2BinRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHex2BinExecute(r ApiWorkbooksDriveItemWorkbookFunctionsHex2BinRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsHex2Bin")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.hex2Bin"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1355 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1355 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1355
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsHex2DecRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1356 *InlineObject1356
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHex2DecRequest) InlineObject1356(inlineObject1356 InlineObject1356) ApiWorkbooksDriveItemWorkbookFunctionsHex2DecRequest {
	r.inlineObject1356 = &inlineObject1356
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHex2DecRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsHex2DecExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsHex2Dec Invoke action hex2Dec

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsHex2DecRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHex2Dec(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsHex2DecRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsHex2DecRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHex2DecExecute(r ApiWorkbooksDriveItemWorkbookFunctionsHex2DecRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsHex2Dec")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.hex2Dec"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1356 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1356 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1356
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsHex2OctRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1357 *InlineObject1357
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHex2OctRequest) InlineObject1357(inlineObject1357 InlineObject1357) ApiWorkbooksDriveItemWorkbookFunctionsHex2OctRequest {
	r.inlineObject1357 = &inlineObject1357
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHex2OctRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsHex2OctExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsHex2Oct Invoke action hex2Oct

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsHex2OctRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHex2Oct(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsHex2OctRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsHex2OctRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHex2OctExecute(r ApiWorkbooksDriveItemWorkbookFunctionsHex2OctRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsHex2Oct")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.hex2Oct"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1357 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1357 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1357
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsHlookupRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1358 *InlineObject1358
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHlookupRequest) InlineObject1358(inlineObject1358 InlineObject1358) ApiWorkbooksDriveItemWorkbookFunctionsHlookupRequest {
	r.inlineObject1358 = &inlineObject1358
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHlookupRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsHlookupExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsHlookup Invoke action hlookup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsHlookupRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHlookup(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsHlookupRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsHlookupRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHlookupExecute(r ApiWorkbooksDriveItemWorkbookFunctionsHlookupRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsHlookup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.hlookup"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1358 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1358 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1358
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsHourRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1359 *InlineObject1359
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHourRequest) InlineObject1359(inlineObject1359 InlineObject1359) ApiWorkbooksDriveItemWorkbookFunctionsHourRequest {
	r.inlineObject1359 = &inlineObject1359
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHourRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsHourExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsHour Invoke action hour

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsHourRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHour(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsHourRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsHourRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHourExecute(r ApiWorkbooksDriveItemWorkbookFunctionsHourRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsHour")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.hour"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1359 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1359 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1359
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsHypGeomDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1361 *InlineObject1361
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHypGeomDistRequest) InlineObject1361(inlineObject1361 InlineObject1361) ApiWorkbooksDriveItemWorkbookFunctionsHypGeomDistRequest {
	r.inlineObject1361 = &inlineObject1361
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHypGeomDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsHypGeomDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsHypGeomDist Invoke action hypGeom_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsHypGeomDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHypGeomDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsHypGeomDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsHypGeomDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHypGeomDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsHypGeomDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsHypGeomDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.hypGeom_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1361 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1361 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1361
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsHyperlinkRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1360 *InlineObject1360
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHyperlinkRequest) InlineObject1360(inlineObject1360 InlineObject1360) ApiWorkbooksDriveItemWorkbookFunctionsHyperlinkRequest {
	r.inlineObject1360 = &inlineObject1360
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsHyperlinkRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsHyperlinkExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsHyperlink Invoke action hyperlink

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsHyperlinkRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHyperlink(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsHyperlinkRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsHyperlinkRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsHyperlinkExecute(r ApiWorkbooksDriveItemWorkbookFunctionsHyperlinkRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsHyperlink")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.hyperlink"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1360 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1360 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1360
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIfRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1362 *InlineObject1362
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIfRequest) InlineObject1362(inlineObject1362 InlineObject1362) ApiWorkbooksDriveItemWorkbookFunctionsIfRequest {
	r.inlineObject1362 = &inlineObject1362
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIfRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIfExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIf Invoke action if

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIfRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIf(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIfRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIfRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIfExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIfRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIf")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.if"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1362 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1362 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1362
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImAbsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1363 *InlineObject1363
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImAbsRequest) InlineObject1363(inlineObject1363 InlineObject1363) ApiWorkbooksDriveItemWorkbookFunctionsImAbsRequest {
	r.inlineObject1363 = &inlineObject1363
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImAbsRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImAbsExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImAbs Invoke action imAbs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImAbsRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImAbs(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImAbsRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImAbsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImAbsExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImAbsRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImAbs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imAbs"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1363 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1363 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1363
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImArgumentRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1365 *InlineObject1365
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImArgumentRequest) InlineObject1365(inlineObject1365 InlineObject1365) ApiWorkbooksDriveItemWorkbookFunctionsImArgumentRequest {
	r.inlineObject1365 = &inlineObject1365
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImArgumentRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImArgumentExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImArgument Invoke action imArgument

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImArgumentRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImArgument(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImArgumentRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImArgumentRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImArgumentExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImArgumentRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImArgument")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imArgument"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1365 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1365 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1365
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImConjugateRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1366 *InlineObject1366
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImConjugateRequest) InlineObject1366(inlineObject1366 InlineObject1366) ApiWorkbooksDriveItemWorkbookFunctionsImConjugateRequest {
	r.inlineObject1366 = &inlineObject1366
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImConjugateRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImConjugateExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImConjugate Invoke action imConjugate

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImConjugateRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImConjugate(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImConjugateRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImConjugateRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImConjugateExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImConjugateRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImConjugate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imConjugate"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1366 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1366 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1366
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImCosRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1367 *InlineObject1367
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImCosRequest) InlineObject1367(inlineObject1367 InlineObject1367) ApiWorkbooksDriveItemWorkbookFunctionsImCosRequest {
	r.inlineObject1367 = &inlineObject1367
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImCosRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImCosExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImCos Invoke action imCos

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImCosRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImCos(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImCosRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImCosRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImCosExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImCosRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImCos")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imCos"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1367 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1367 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1367
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImCoshRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1368 *InlineObject1368
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImCoshRequest) InlineObject1368(inlineObject1368 InlineObject1368) ApiWorkbooksDriveItemWorkbookFunctionsImCoshRequest {
	r.inlineObject1368 = &inlineObject1368
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImCoshRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImCoshExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImCosh Invoke action imCosh

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImCoshRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImCosh(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImCoshRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImCoshRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImCoshExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImCoshRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImCosh")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imCosh"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1368 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1368 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1368
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImCotRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1369 *InlineObject1369
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImCotRequest) InlineObject1369(inlineObject1369 InlineObject1369) ApiWorkbooksDriveItemWorkbookFunctionsImCotRequest {
	r.inlineObject1369 = &inlineObject1369
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImCotRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImCotExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImCot Invoke action imCot

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImCotRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImCot(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImCotRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImCotRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImCotExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImCotRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImCot")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imCot"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1369 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1369 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1369
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImCscRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1370 *InlineObject1370
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImCscRequest) InlineObject1370(inlineObject1370 InlineObject1370) ApiWorkbooksDriveItemWorkbookFunctionsImCscRequest {
	r.inlineObject1370 = &inlineObject1370
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImCscRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImCscExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImCsc Invoke action imCsc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImCscRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImCsc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImCscRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImCscRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImCscExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImCscRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImCsc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imCsc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1370 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1370 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1370
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImCschRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1371 *InlineObject1371
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImCschRequest) InlineObject1371(inlineObject1371 InlineObject1371) ApiWorkbooksDriveItemWorkbookFunctionsImCschRequest {
	r.inlineObject1371 = &inlineObject1371
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImCschRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImCschExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImCsch Invoke action imCsch

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImCschRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImCsch(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImCschRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImCschRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImCschExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImCschRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImCsch")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imCsch"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1371 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1371 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1371
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImDivRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1372 *InlineObject1372
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImDivRequest) InlineObject1372(inlineObject1372 InlineObject1372) ApiWorkbooksDriveItemWorkbookFunctionsImDivRequest {
	r.inlineObject1372 = &inlineObject1372
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImDivRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImDivExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImDiv Invoke action imDiv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImDivRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImDiv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImDivRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImDivRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImDivExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImDivRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImDiv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imDiv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1372 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1372 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1372
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImExpRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1373 *InlineObject1373
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImExpRequest) InlineObject1373(inlineObject1373 InlineObject1373) ApiWorkbooksDriveItemWorkbookFunctionsImExpRequest {
	r.inlineObject1373 = &inlineObject1373
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImExpRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImExpExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImExp Invoke action imExp

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImExpRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImExp(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImExpRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImExpRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImExpExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImExpRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImExp")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imExp"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1373 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1373 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1373
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImLnRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1374 *InlineObject1374
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImLnRequest) InlineObject1374(inlineObject1374 InlineObject1374) ApiWorkbooksDriveItemWorkbookFunctionsImLnRequest {
	r.inlineObject1374 = &inlineObject1374
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImLnRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImLnExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImLn Invoke action imLn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImLnRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImLn(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImLnRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImLnRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImLnExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImLnRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImLn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imLn"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1374 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1374 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1374
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImLog10Request struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1375 *InlineObject1375
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImLog10Request) InlineObject1375(inlineObject1375 InlineObject1375) ApiWorkbooksDriveItemWorkbookFunctionsImLog10Request {
	r.inlineObject1375 = &inlineObject1375
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImLog10Request) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImLog10Execute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImLog10 Invoke action imLog10

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImLog10Request
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImLog10(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImLog10Request {
	return ApiWorkbooksDriveItemWorkbookFunctionsImLog10Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImLog10Execute(r ApiWorkbooksDriveItemWorkbookFunctionsImLog10Request) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImLog10")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imLog10"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1375 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1375 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1375
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImLog2Request struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1376 *InlineObject1376
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImLog2Request) InlineObject1376(inlineObject1376 InlineObject1376) ApiWorkbooksDriveItemWorkbookFunctionsImLog2Request {
	r.inlineObject1376 = &inlineObject1376
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImLog2Request) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImLog2Execute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImLog2 Invoke action imLog2

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImLog2Request
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImLog2(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImLog2Request {
	return ApiWorkbooksDriveItemWorkbookFunctionsImLog2Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImLog2Execute(r ApiWorkbooksDriveItemWorkbookFunctionsImLog2Request) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImLog2")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imLog2"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1376 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1376 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1376
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImPowerRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1377 *InlineObject1377
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImPowerRequest) InlineObject1377(inlineObject1377 InlineObject1377) ApiWorkbooksDriveItemWorkbookFunctionsImPowerRequest {
	r.inlineObject1377 = &inlineObject1377
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImPowerRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImPowerExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImPower Invoke action imPower

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImPowerRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImPower(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImPowerRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImPowerRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImPowerExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImPowerRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImPower")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imPower"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1377 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1377 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1377
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImProductRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1378 *InlineObject1378
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImProductRequest) InlineObject1378(inlineObject1378 InlineObject1378) ApiWorkbooksDriveItemWorkbookFunctionsImProductRequest {
	r.inlineObject1378 = &inlineObject1378
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImProductRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImProductExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImProduct Invoke action imProduct

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImProductRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImProduct(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImProductRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImProductRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImProductExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImProductRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImProduct")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imProduct"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1378 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1378 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1378
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImRealRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1379 *InlineObject1379
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImRealRequest) InlineObject1379(inlineObject1379 InlineObject1379) ApiWorkbooksDriveItemWorkbookFunctionsImRealRequest {
	r.inlineObject1379 = &inlineObject1379
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImRealRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImRealExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImReal Invoke action imReal

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImRealRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImReal(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImRealRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImRealRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImRealExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImRealRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImReal")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imReal"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1379 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1379 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1379
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImSecRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1380 *InlineObject1380
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSecRequest) InlineObject1380(inlineObject1380 InlineObject1380) ApiWorkbooksDriveItemWorkbookFunctionsImSecRequest {
	r.inlineObject1380 = &inlineObject1380
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSecRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImSecExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImSec Invoke action imSec

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImSecRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSec(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImSecRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImSecRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSecExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImSecRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImSec")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imSec"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1380 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1380 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1380
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImSechRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1381 *InlineObject1381
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSechRequest) InlineObject1381(inlineObject1381 InlineObject1381) ApiWorkbooksDriveItemWorkbookFunctionsImSechRequest {
	r.inlineObject1381 = &inlineObject1381
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSechRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImSechExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImSech Invoke action imSech

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImSechRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSech(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImSechRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImSechRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSechExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImSechRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImSech")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imSech"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1381 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1381 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1381
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImSinRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1382 *InlineObject1382
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSinRequest) InlineObject1382(inlineObject1382 InlineObject1382) ApiWorkbooksDriveItemWorkbookFunctionsImSinRequest {
	r.inlineObject1382 = &inlineObject1382
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSinRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImSinExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImSin Invoke action imSin

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImSinRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSin(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImSinRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImSinRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSinExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImSinRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImSin")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imSin"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1382 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1382 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1382
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImSinhRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1383 *InlineObject1383
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSinhRequest) InlineObject1383(inlineObject1383 InlineObject1383) ApiWorkbooksDriveItemWorkbookFunctionsImSinhRequest {
	r.inlineObject1383 = &inlineObject1383
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSinhRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImSinhExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImSinh Invoke action imSinh

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImSinhRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSinh(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImSinhRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImSinhRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSinhExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImSinhRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImSinh")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imSinh"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1383 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1383 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1383
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImSqrtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1384 *InlineObject1384
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSqrtRequest) InlineObject1384(inlineObject1384 InlineObject1384) ApiWorkbooksDriveItemWorkbookFunctionsImSqrtRequest {
	r.inlineObject1384 = &inlineObject1384
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSqrtRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImSqrtExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImSqrt Invoke action imSqrt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImSqrtRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSqrt(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImSqrtRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImSqrtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSqrtExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImSqrtRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImSqrt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imSqrt"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1384 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1384 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1384
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImSubRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1385 *InlineObject1385
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSubRequest) InlineObject1385(inlineObject1385 InlineObject1385) ApiWorkbooksDriveItemWorkbookFunctionsImSubRequest {
	r.inlineObject1385 = &inlineObject1385
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSubRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImSubExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImSub Invoke action imSub

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImSubRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSub(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImSubRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImSubRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSubExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImSubRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImSub")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imSub"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1385 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1385 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1385
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImSumRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1386 *InlineObject1386
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSumRequest) InlineObject1386(inlineObject1386 InlineObject1386) ApiWorkbooksDriveItemWorkbookFunctionsImSumRequest {
	r.inlineObject1386 = &inlineObject1386
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImSumRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImSumExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImSum Invoke action imSum

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImSumRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSum(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImSumRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImSumRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImSumExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImSumRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImSum")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imSum"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1386 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1386 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1386
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImTanRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1387 *InlineObject1387
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImTanRequest) InlineObject1387(inlineObject1387 InlineObject1387) ApiWorkbooksDriveItemWorkbookFunctionsImTanRequest {
	r.inlineObject1387 = &inlineObject1387
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImTanRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImTanExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImTan Invoke action imTan

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImTanRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImTan(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImTanRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImTanRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImTanExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImTanRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImTan")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imTan"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1387 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1387 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1387
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsImaginaryRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1364 *InlineObject1364
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImaginaryRequest) InlineObject1364(inlineObject1364 InlineObject1364) ApiWorkbooksDriveItemWorkbookFunctionsImaginaryRequest {
	r.inlineObject1364 = &inlineObject1364
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsImaginaryRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsImaginaryExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsImaginary Invoke action imaginary

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsImaginaryRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImaginary(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsImaginaryRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsImaginaryRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsImaginaryExecute(r ApiWorkbooksDriveItemWorkbookFunctionsImaginaryRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsImaginary")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.imaginary"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1364 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1364 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1364
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIntRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1388 *InlineObject1388
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIntRequest) InlineObject1388(inlineObject1388 InlineObject1388) ApiWorkbooksDriveItemWorkbookFunctionsIntRequest {
	r.inlineObject1388 = &inlineObject1388
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIntRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIntExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsInt Invoke action int

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIntRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsInt(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIntRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIntRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIntExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIntRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsInt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.int"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1388 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1388 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1388
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIntRateRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1389 *InlineObject1389
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIntRateRequest) InlineObject1389(inlineObject1389 InlineObject1389) ApiWorkbooksDriveItemWorkbookFunctionsIntRateRequest {
	r.inlineObject1389 = &inlineObject1389
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIntRateRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIntRateExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIntRate Invoke action intRate

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIntRateRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIntRate(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIntRateRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIntRateRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIntRateExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIntRateRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIntRate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.intRate"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1389 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1389 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1389
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIpmtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1390 *InlineObject1390
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIpmtRequest) InlineObject1390(inlineObject1390 InlineObject1390) ApiWorkbooksDriveItemWorkbookFunctionsIpmtRequest {
	r.inlineObject1390 = &inlineObject1390
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIpmtRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIpmtExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIpmt Invoke action ipmt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIpmtRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIpmt(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIpmtRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIpmtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIpmtExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIpmtRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIpmt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.ipmt"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1390 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1390 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1390
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIrrRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1391 *InlineObject1391
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIrrRequest) InlineObject1391(inlineObject1391 InlineObject1391) ApiWorkbooksDriveItemWorkbookFunctionsIrrRequest {
	r.inlineObject1391 = &inlineObject1391
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIrrRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIrrExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIrr Invoke action irr

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIrrRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIrr(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIrrRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIrrRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIrrExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIrrRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIrr")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.irr"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1391 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1391 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1391
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIsErrRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1392 *InlineObject1392
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsErrRequest) InlineObject1392(inlineObject1392 InlineObject1392) ApiWorkbooksDriveItemWorkbookFunctionsIsErrRequest {
	r.inlineObject1392 = &inlineObject1392
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsErrRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIsErrExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIsErr Invoke action isErr

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIsErrRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsErr(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIsErrRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIsErrRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsErrExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIsErrRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIsErr")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.isErr"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1392 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1392 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1392
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIsErrorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1393 *InlineObject1393
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsErrorRequest) InlineObject1393(inlineObject1393 InlineObject1393) ApiWorkbooksDriveItemWorkbookFunctionsIsErrorRequest {
	r.inlineObject1393 = &inlineObject1393
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsErrorRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIsErrorExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIsError Invoke action isError

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIsErrorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsError(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIsErrorRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIsErrorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsErrorExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIsErrorRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIsError")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.isError"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1393 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1393 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1393
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIsEvenRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1394 *InlineObject1394
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsEvenRequest) InlineObject1394(inlineObject1394 InlineObject1394) ApiWorkbooksDriveItemWorkbookFunctionsIsEvenRequest {
	r.inlineObject1394 = &inlineObject1394
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsEvenRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIsEvenExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIsEven Invoke action isEven

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIsEvenRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsEven(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIsEvenRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIsEvenRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsEvenExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIsEvenRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIsEven")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.isEven"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1394 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1394 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1394
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIsFormulaRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1395 *InlineObject1395
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsFormulaRequest) InlineObject1395(inlineObject1395 InlineObject1395) ApiWorkbooksDriveItemWorkbookFunctionsIsFormulaRequest {
	r.inlineObject1395 = &inlineObject1395
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsFormulaRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIsFormulaExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIsFormula Invoke action isFormula

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIsFormulaRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsFormula(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIsFormulaRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIsFormulaRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsFormulaExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIsFormulaRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIsFormula")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.isFormula"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1395 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1395 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1395
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIsLogicalRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1396 *InlineObject1396
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsLogicalRequest) InlineObject1396(inlineObject1396 InlineObject1396) ApiWorkbooksDriveItemWorkbookFunctionsIsLogicalRequest {
	r.inlineObject1396 = &inlineObject1396
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsLogicalRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIsLogicalExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIsLogical Invoke action isLogical

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIsLogicalRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsLogical(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIsLogicalRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIsLogicalRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsLogicalExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIsLogicalRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIsLogical")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.isLogical"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1396 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1396 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1396
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIsNARequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1397 *InlineObject1397
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsNARequest) InlineObject1397(inlineObject1397 InlineObject1397) ApiWorkbooksDriveItemWorkbookFunctionsIsNARequest {
	r.inlineObject1397 = &inlineObject1397
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsNARequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIsNAExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIsNA Invoke action isNA

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIsNARequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsNA(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIsNARequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIsNARequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsNAExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIsNARequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIsNA")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.isNA"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1397 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1397 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1397
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIsNonTextRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1398 *InlineObject1398
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsNonTextRequest) InlineObject1398(inlineObject1398 InlineObject1398) ApiWorkbooksDriveItemWorkbookFunctionsIsNonTextRequest {
	r.inlineObject1398 = &inlineObject1398
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsNonTextRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIsNonTextExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIsNonText Invoke action isNonText

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIsNonTextRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsNonText(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIsNonTextRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIsNonTextRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsNonTextExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIsNonTextRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIsNonText")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.isNonText"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1398 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1398 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1398
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIsNumberRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1399 *InlineObject1399
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsNumberRequest) InlineObject1399(inlineObject1399 InlineObject1399) ApiWorkbooksDriveItemWorkbookFunctionsIsNumberRequest {
	r.inlineObject1399 = &inlineObject1399
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsNumberRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIsNumberExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIsNumber Invoke action isNumber

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIsNumberRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsNumber(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIsNumberRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIsNumberRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsNumberExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIsNumberRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIsNumber")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.isNumber"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1399 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1399 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1399
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIsOddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1401 *InlineObject1401
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsOddRequest) InlineObject1401(inlineObject1401 InlineObject1401) ApiWorkbooksDriveItemWorkbookFunctionsIsOddRequest {
	r.inlineObject1401 = &inlineObject1401
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsOddRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIsOddExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIsOdd Invoke action isOdd

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIsOddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsOdd(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIsOddRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIsOddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsOddExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIsOddRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIsOdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.isOdd"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1401 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1401 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1401
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIsTextRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1405 *InlineObject1405
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsTextRequest) InlineObject1405(inlineObject1405 InlineObject1405) ApiWorkbooksDriveItemWorkbookFunctionsIsTextRequest {
	r.inlineObject1405 = &inlineObject1405
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsTextRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIsTextExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIsText Invoke action isText

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIsTextRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsText(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIsTextRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIsTextRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsTextExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIsTextRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIsText")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.isText"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1405 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1405 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1405
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIsoCeilingRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1400 *InlineObject1400
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsoCeilingRequest) InlineObject1400(inlineObject1400 InlineObject1400) ApiWorkbooksDriveItemWorkbookFunctionsIsoCeilingRequest {
	r.inlineObject1400 = &inlineObject1400
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsoCeilingRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIsoCeilingExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIsoCeiling Invoke action iso_Ceiling

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIsoCeilingRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsoCeiling(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIsoCeilingRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIsoCeilingRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsoCeilingExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIsoCeilingRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIsoCeiling")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.iso_Ceiling"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1400 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1400 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1400
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIsoWeekNumRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1402 *InlineObject1402
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsoWeekNumRequest) InlineObject1402(inlineObject1402 InlineObject1402) ApiWorkbooksDriveItemWorkbookFunctionsIsoWeekNumRequest {
	r.inlineObject1402 = &inlineObject1402
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsoWeekNumRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIsoWeekNumExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIsoWeekNum Invoke action isoWeekNum

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIsoWeekNumRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsoWeekNum(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIsoWeekNumRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIsoWeekNumRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsoWeekNumExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIsoWeekNumRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIsoWeekNum")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.isoWeekNum"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1402 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1402 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1402
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIspmtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1403 *InlineObject1403
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIspmtRequest) InlineObject1403(inlineObject1403 InlineObject1403) ApiWorkbooksDriveItemWorkbookFunctionsIspmtRequest {
	r.inlineObject1403 = &inlineObject1403
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIspmtRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIspmtExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIspmt Invoke action ispmt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIspmtRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIspmt(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIspmtRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIspmtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIspmtExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIspmtRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIspmt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.ispmt"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1403 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1403 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1403
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsIsrefRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1404 *InlineObject1404
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsrefRequest) InlineObject1404(inlineObject1404 InlineObject1404) ApiWorkbooksDriveItemWorkbookFunctionsIsrefRequest {
	r.inlineObject1404 = &inlineObject1404
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsIsrefRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsIsrefExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsIsref Invoke action isref

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsIsrefRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsref(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsIsrefRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsIsrefRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsIsrefExecute(r ApiWorkbooksDriveItemWorkbookFunctionsIsrefRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsIsref")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.isref"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1404 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1404 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1404
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsKurtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1406 *InlineObject1406
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsKurtRequest) InlineObject1406(inlineObject1406 InlineObject1406) ApiWorkbooksDriveItemWorkbookFunctionsKurtRequest {
	r.inlineObject1406 = &inlineObject1406
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsKurtRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsKurtExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsKurt Invoke action kurt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsKurtRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsKurt(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsKurtRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsKurtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsKurtExecute(r ApiWorkbooksDriveItemWorkbookFunctionsKurtRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsKurt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.kurt"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1406 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1406 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1406
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsLargeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1407 *InlineObject1407
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLargeRequest) InlineObject1407(inlineObject1407 InlineObject1407) ApiWorkbooksDriveItemWorkbookFunctionsLargeRequest {
	r.inlineObject1407 = &inlineObject1407
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLargeRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsLargeExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsLarge Invoke action large

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsLargeRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLarge(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsLargeRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsLargeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLargeExecute(r ApiWorkbooksDriveItemWorkbookFunctionsLargeRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsLarge")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.large"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1407 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1407 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1407
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsLcmRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1408 *InlineObject1408
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLcmRequest) InlineObject1408(inlineObject1408 InlineObject1408) ApiWorkbooksDriveItemWorkbookFunctionsLcmRequest {
	r.inlineObject1408 = &inlineObject1408
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLcmRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsLcmExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsLcm Invoke action lcm

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsLcmRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLcm(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsLcmRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsLcmRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLcmExecute(r ApiWorkbooksDriveItemWorkbookFunctionsLcmRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsLcm")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.lcm"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1408 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1408 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1408
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsLeftRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1409 *InlineObject1409
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLeftRequest) InlineObject1409(inlineObject1409 InlineObject1409) ApiWorkbooksDriveItemWorkbookFunctionsLeftRequest {
	r.inlineObject1409 = &inlineObject1409
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLeftRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsLeftExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsLeft Invoke action left

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsLeftRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLeft(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsLeftRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsLeftRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLeftExecute(r ApiWorkbooksDriveItemWorkbookFunctionsLeftRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsLeft")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.left"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1409 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1409 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1409
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsLeftbRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1410 *InlineObject1410
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLeftbRequest) InlineObject1410(inlineObject1410 InlineObject1410) ApiWorkbooksDriveItemWorkbookFunctionsLeftbRequest {
	r.inlineObject1410 = &inlineObject1410
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLeftbRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsLeftbExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsLeftb Invoke action leftb

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsLeftbRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLeftb(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsLeftbRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsLeftbRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLeftbExecute(r ApiWorkbooksDriveItemWorkbookFunctionsLeftbRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsLeftb")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.leftb"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1410 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1410 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1410
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsLenRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1411 *InlineObject1411
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLenRequest) InlineObject1411(inlineObject1411 InlineObject1411) ApiWorkbooksDriveItemWorkbookFunctionsLenRequest {
	r.inlineObject1411 = &inlineObject1411
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLenRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsLenExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsLen Invoke action len

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsLenRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLen(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsLenRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsLenRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLenExecute(r ApiWorkbooksDriveItemWorkbookFunctionsLenRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsLen")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.len"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1411 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1411 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1411
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsLenbRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1412 *InlineObject1412
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLenbRequest) InlineObject1412(inlineObject1412 InlineObject1412) ApiWorkbooksDriveItemWorkbookFunctionsLenbRequest {
	r.inlineObject1412 = &inlineObject1412
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLenbRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsLenbExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsLenb Invoke action lenb

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsLenbRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLenb(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsLenbRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsLenbRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLenbExecute(r ApiWorkbooksDriveItemWorkbookFunctionsLenbRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsLenb")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.lenb"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1412 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1412 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1412
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsLnRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1413 *InlineObject1413
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLnRequest) InlineObject1413(inlineObject1413 InlineObject1413) ApiWorkbooksDriveItemWorkbookFunctionsLnRequest {
	r.inlineObject1413 = &inlineObject1413
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLnRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsLnExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsLn Invoke action ln

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsLnRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLn(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsLnRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsLnRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLnExecute(r ApiWorkbooksDriveItemWorkbookFunctionsLnRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsLn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.ln"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1413 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1413 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1413
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsLogRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1414 *InlineObject1414
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLogRequest) InlineObject1414(inlineObject1414 InlineObject1414) ApiWorkbooksDriveItemWorkbookFunctionsLogRequest {
	r.inlineObject1414 = &inlineObject1414
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLogRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsLogExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsLog Invoke action log

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsLogRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLog(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsLogRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsLogRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLogExecute(r ApiWorkbooksDriveItemWorkbookFunctionsLogRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsLog")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.log"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1414 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1414 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1414
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsLog10Request struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1415 *InlineObject1415
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLog10Request) InlineObject1415(inlineObject1415 InlineObject1415) ApiWorkbooksDriveItemWorkbookFunctionsLog10Request {
	r.inlineObject1415 = &inlineObject1415
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLog10Request) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsLog10Execute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsLog10 Invoke action log10

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsLog10Request
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLog10(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsLog10Request {
	return ApiWorkbooksDriveItemWorkbookFunctionsLog10Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLog10Execute(r ApiWorkbooksDriveItemWorkbookFunctionsLog10Request) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsLog10")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.log10"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1415 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1415 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1415
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsLogNormDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1416 *InlineObject1416
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLogNormDistRequest) InlineObject1416(inlineObject1416 InlineObject1416) ApiWorkbooksDriveItemWorkbookFunctionsLogNormDistRequest {
	r.inlineObject1416 = &inlineObject1416
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLogNormDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsLogNormDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsLogNormDist Invoke action logNorm_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsLogNormDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLogNormDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsLogNormDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsLogNormDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLogNormDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsLogNormDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsLogNormDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.logNorm_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1416 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1416 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1416
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsLogNormInvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1417 *InlineObject1417
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLogNormInvRequest) InlineObject1417(inlineObject1417 InlineObject1417) ApiWorkbooksDriveItemWorkbookFunctionsLogNormInvRequest {
	r.inlineObject1417 = &inlineObject1417
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLogNormInvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsLogNormInvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsLogNormInv Invoke action logNorm_Inv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsLogNormInvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLogNormInv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsLogNormInvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsLogNormInvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLogNormInvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsLogNormInvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsLogNormInv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.logNorm_Inv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1417 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1417 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1417
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsLookupRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1418 *InlineObject1418
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLookupRequest) InlineObject1418(inlineObject1418 InlineObject1418) ApiWorkbooksDriveItemWorkbookFunctionsLookupRequest {
	r.inlineObject1418 = &inlineObject1418
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLookupRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsLookupExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsLookup Invoke action lookup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsLookupRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLookup(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsLookupRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsLookupRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLookupExecute(r ApiWorkbooksDriveItemWorkbookFunctionsLookupRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsLookup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.lookup"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1418 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1418 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1418
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsLowerRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1419 *InlineObject1419
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLowerRequest) InlineObject1419(inlineObject1419 InlineObject1419) ApiWorkbooksDriveItemWorkbookFunctionsLowerRequest {
	r.inlineObject1419 = &inlineObject1419
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsLowerRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsLowerExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsLower Invoke action lower

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsLowerRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLower(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsLowerRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsLowerRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsLowerExecute(r ApiWorkbooksDriveItemWorkbookFunctionsLowerRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsLower")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.lower"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1419 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1419 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1419
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMatchRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1420 *InlineObject1420
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMatchRequest) InlineObject1420(inlineObject1420 InlineObject1420) ApiWorkbooksDriveItemWorkbookFunctionsMatchRequest {
	r.inlineObject1420 = &inlineObject1420
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMatchRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMatchExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMatch Invoke action match

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMatchRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMatch(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMatchRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMatchRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMatchExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMatchRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMatch")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.match"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1420 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1420 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1420
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMaxRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1421 *InlineObject1421
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMaxRequest) InlineObject1421(inlineObject1421 InlineObject1421) ApiWorkbooksDriveItemWorkbookFunctionsMaxRequest {
	r.inlineObject1421 = &inlineObject1421
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMaxRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMaxExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMax Invoke action max

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMaxRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMax(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMaxRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMaxRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMaxExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMaxRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMax")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.max"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1421 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1421 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1421
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMaxARequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1422 *InlineObject1422
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMaxARequest) InlineObject1422(inlineObject1422 InlineObject1422) ApiWorkbooksDriveItemWorkbookFunctionsMaxARequest {
	r.inlineObject1422 = &inlineObject1422
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMaxARequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMaxAExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMaxA Invoke action maxA

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMaxARequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMaxA(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMaxARequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMaxARequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMaxAExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMaxARequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMaxA")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.maxA"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1422 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1422 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1422
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMdurationRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1423 *InlineObject1423
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMdurationRequest) InlineObject1423(inlineObject1423 InlineObject1423) ApiWorkbooksDriveItemWorkbookFunctionsMdurationRequest {
	r.inlineObject1423 = &inlineObject1423
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMdurationRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMdurationExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMduration Invoke action mduration

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMdurationRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMduration(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMdurationRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMdurationRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMdurationExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMdurationRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMduration")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.mduration"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1423 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1423 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1423
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMedianRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1424 *InlineObject1424
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMedianRequest) InlineObject1424(inlineObject1424 InlineObject1424) ApiWorkbooksDriveItemWorkbookFunctionsMedianRequest {
	r.inlineObject1424 = &inlineObject1424
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMedianRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMedianExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMedian Invoke action median

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMedianRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMedian(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMedianRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMedianRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMedianExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMedianRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMedian")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.median"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1424 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1424 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1424
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMidRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1425 *InlineObject1425
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMidRequest) InlineObject1425(inlineObject1425 InlineObject1425) ApiWorkbooksDriveItemWorkbookFunctionsMidRequest {
	r.inlineObject1425 = &inlineObject1425
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMidRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMidExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMid Invoke action mid

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMidRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMid(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMidRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMidRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMidExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMidRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMid")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.mid"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1425 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1425 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1425
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMidbRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1426 *InlineObject1426
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMidbRequest) InlineObject1426(inlineObject1426 InlineObject1426) ApiWorkbooksDriveItemWorkbookFunctionsMidbRequest {
	r.inlineObject1426 = &inlineObject1426
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMidbRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMidbExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMidb Invoke action midb

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMidbRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMidb(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMidbRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMidbRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMidbExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMidbRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMidb")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.midb"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1426 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1426 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1426
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMinRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1427 *InlineObject1427
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMinRequest) InlineObject1427(inlineObject1427 InlineObject1427) ApiWorkbooksDriveItemWorkbookFunctionsMinRequest {
	r.inlineObject1427 = &inlineObject1427
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMinRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMinExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMin Invoke action min

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMinRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMin(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMinRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMinRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMinExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMinRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMin")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.min"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1427 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1427 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1427
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMinARequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1428 *InlineObject1428
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMinARequest) InlineObject1428(inlineObject1428 InlineObject1428) ApiWorkbooksDriveItemWorkbookFunctionsMinARequest {
	r.inlineObject1428 = &inlineObject1428
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMinARequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMinAExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMinA Invoke action minA

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMinARequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMinA(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMinARequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMinARequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMinAExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMinARequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMinA")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.minA"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1428 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1428 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1428
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMinuteRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1429 *InlineObject1429
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMinuteRequest) InlineObject1429(inlineObject1429 InlineObject1429) ApiWorkbooksDriveItemWorkbookFunctionsMinuteRequest {
	r.inlineObject1429 = &inlineObject1429
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMinuteRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMinuteExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMinute Invoke action minute

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMinuteRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMinute(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMinuteRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMinuteRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMinuteExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMinuteRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMinute")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.minute"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1429 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1429 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1429
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMirrRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1430 *InlineObject1430
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMirrRequest) InlineObject1430(inlineObject1430 InlineObject1430) ApiWorkbooksDriveItemWorkbookFunctionsMirrRequest {
	r.inlineObject1430 = &inlineObject1430
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMirrRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMirrExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMirr Invoke action mirr

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMirrRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMirr(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMirrRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMirrRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMirrExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMirrRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMirr")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.mirr"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1430 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1430 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1430
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsModRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1431 *InlineObject1431
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsModRequest) InlineObject1431(inlineObject1431 InlineObject1431) ApiWorkbooksDriveItemWorkbookFunctionsModRequest {
	r.inlineObject1431 = &inlineObject1431
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsModRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsModExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMod Invoke action mod

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsModRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMod(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsModRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsModRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsModExecute(r ApiWorkbooksDriveItemWorkbookFunctionsModRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMod")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.mod"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1431 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1431 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1431
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMonthRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1432 *InlineObject1432
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMonthRequest) InlineObject1432(inlineObject1432 InlineObject1432) ApiWorkbooksDriveItemWorkbookFunctionsMonthRequest {
	r.inlineObject1432 = &inlineObject1432
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMonthRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMonthExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMonth Invoke action month

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMonthRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMonth(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMonthRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMonthRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMonthExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMonthRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMonth")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.month"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1432 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1432 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1432
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMroundRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1433 *InlineObject1433
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMroundRequest) InlineObject1433(inlineObject1433 InlineObject1433) ApiWorkbooksDriveItemWorkbookFunctionsMroundRequest {
	r.inlineObject1433 = &inlineObject1433
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMroundRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMroundExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMround Invoke action mround

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMroundRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMround(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMroundRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMroundRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMroundExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMroundRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMround")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.mround"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1433 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1433 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1433
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsMultiNomialRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1434 *InlineObject1434
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMultiNomialRequest) InlineObject1434(inlineObject1434 InlineObject1434) ApiWorkbooksDriveItemWorkbookFunctionsMultiNomialRequest {
	r.inlineObject1434 = &inlineObject1434
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsMultiNomialRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsMultiNomialExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsMultiNomial Invoke action multiNomial

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsMultiNomialRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMultiNomial(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsMultiNomialRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsMultiNomialRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsMultiNomialExecute(r ApiWorkbooksDriveItemWorkbookFunctionsMultiNomialRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsMultiNomial")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.multiNomial"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1434 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1434 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1434
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1435 *InlineObject1435
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNRequest) InlineObject1435(inlineObject1435 InlineObject1435) ApiWorkbooksDriveItemWorkbookFunctionsNRequest {
	r.inlineObject1435 = &inlineObject1435
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsN Invoke action n

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsN(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsN")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.n"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1435 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1435 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1435
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNaRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemWorkbookFunctionsNaRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNaExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNa Invoke action na

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNaRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNa(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNaRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNaRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNaExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNaRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNa")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.na"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNegBinomDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1436 *InlineObject1436
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNegBinomDistRequest) InlineObject1436(inlineObject1436 InlineObject1436) ApiWorkbooksDriveItemWorkbookFunctionsNegBinomDistRequest {
	r.inlineObject1436 = &inlineObject1436
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNegBinomDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNegBinomDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNegBinomDist Invoke action negBinom_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNegBinomDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNegBinomDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNegBinomDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNegBinomDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNegBinomDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNegBinomDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNegBinomDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.negBinom_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1436 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1436 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1436
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1437 *InlineObject1437
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysRequest) InlineObject1437(inlineObject1437 InlineObject1437) ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysRequest {
	r.inlineObject1437 = &inlineObject1437
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNetworkDaysExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNetworkDays Invoke action networkDays

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNetworkDays(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNetworkDaysExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNetworkDays")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.networkDays"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1437 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1437 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1437
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysIntlRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1438 *InlineObject1438
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysIntlRequest) InlineObject1438(inlineObject1438 InlineObject1438) ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysIntlRequest {
	r.inlineObject1438 = &inlineObject1438
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysIntlRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNetworkDaysIntlExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNetworkDaysIntl Invoke action networkDays_Intl

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysIntlRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNetworkDaysIntl(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysIntlRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysIntlRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNetworkDaysIntlExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNetworkDaysIntlRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNetworkDaysIntl")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.networkDays_Intl"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1438 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1438 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1438
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNominalRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1439 *InlineObject1439
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNominalRequest) InlineObject1439(inlineObject1439 InlineObject1439) ApiWorkbooksDriveItemWorkbookFunctionsNominalRequest {
	r.inlineObject1439 = &inlineObject1439
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNominalRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNominalExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNominal Invoke action nominal

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNominalRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNominal(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNominalRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNominalRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNominalExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNominalRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNominal")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.nominal"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1439 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1439 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1439
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNormDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1440 *InlineObject1440
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNormDistRequest) InlineObject1440(inlineObject1440 InlineObject1440) ApiWorkbooksDriveItemWorkbookFunctionsNormDistRequest {
	r.inlineObject1440 = &inlineObject1440
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNormDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNormDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNormDist Invoke action norm_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNormDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNormDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNormDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNormDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNormDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNormDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNormDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.norm_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1440 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1440 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1440
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNormInvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1441 *InlineObject1441
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNormInvRequest) InlineObject1441(inlineObject1441 InlineObject1441) ApiWorkbooksDriveItemWorkbookFunctionsNormInvRequest {
	r.inlineObject1441 = &inlineObject1441
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNormInvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNormInvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNormInv Invoke action norm_Inv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNormInvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNormInv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNormInvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNormInvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNormInvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNormInvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNormInv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.norm_Inv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1441 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1441 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1441
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNormSDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1442 *InlineObject1442
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNormSDistRequest) InlineObject1442(inlineObject1442 InlineObject1442) ApiWorkbooksDriveItemWorkbookFunctionsNormSDistRequest {
	r.inlineObject1442 = &inlineObject1442
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNormSDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNormSDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNormSDist Invoke action norm_S_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNormSDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNormSDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNormSDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNormSDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNormSDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNormSDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNormSDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.norm_S_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1442 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1442 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1442
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNormSInvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1443 *InlineObject1443
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNormSInvRequest) InlineObject1443(inlineObject1443 InlineObject1443) ApiWorkbooksDriveItemWorkbookFunctionsNormSInvRequest {
	r.inlineObject1443 = &inlineObject1443
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNormSInvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNormSInvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNormSInv Invoke action norm_S_Inv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNormSInvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNormSInv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNormSInvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNormSInvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNormSInvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNormSInvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNormSInv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.norm_S_Inv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1443 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1443 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1443
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNotRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1444 *InlineObject1444
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNotRequest) InlineObject1444(inlineObject1444 InlineObject1444) ApiWorkbooksDriveItemWorkbookFunctionsNotRequest {
	r.inlineObject1444 = &inlineObject1444
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNotRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNotExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNot Invoke action not

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNotRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNot(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNotRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNotRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNotExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNotRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNot")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.not"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1444 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1444 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1444
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNowRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemWorkbookFunctionsNowRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNowExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNow Invoke action now

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNowRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNow(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNowRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNowRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNowExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNowRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.now"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNperRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1445 *InlineObject1445
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNperRequest) InlineObject1445(inlineObject1445 InlineObject1445) ApiWorkbooksDriveItemWorkbookFunctionsNperRequest {
	r.inlineObject1445 = &inlineObject1445
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNperRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNperExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNper Invoke action nper

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNperRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNper(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNperRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNperRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNperExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNperRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNper")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.nper"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1445 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1445 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1445
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNpvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1446 *InlineObject1446
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNpvRequest) InlineObject1446(inlineObject1446 InlineObject1446) ApiWorkbooksDriveItemWorkbookFunctionsNpvRequest {
	r.inlineObject1446 = &inlineObject1446
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNpvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNpvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNpv Invoke action npv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNpvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNpv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNpvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNpvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNpvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNpvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNpv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.npv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1446 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1446 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1446
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsNumberValueRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1447 *InlineObject1447
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNumberValueRequest) InlineObject1447(inlineObject1447 InlineObject1447) ApiWorkbooksDriveItemWorkbookFunctionsNumberValueRequest {
	r.inlineObject1447 = &inlineObject1447
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsNumberValueRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsNumberValueExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsNumberValue Invoke action numberValue

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsNumberValueRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNumberValue(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsNumberValueRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsNumberValueRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsNumberValueExecute(r ApiWorkbooksDriveItemWorkbookFunctionsNumberValueRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsNumberValue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.numberValue"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1447 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1447 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1447
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsOct2BinRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1448 *InlineObject1448
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOct2BinRequest) InlineObject1448(inlineObject1448 InlineObject1448) ApiWorkbooksDriveItemWorkbookFunctionsOct2BinRequest {
	r.inlineObject1448 = &inlineObject1448
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOct2BinRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsOct2BinExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsOct2Bin Invoke action oct2Bin

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsOct2BinRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOct2Bin(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsOct2BinRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsOct2BinRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOct2BinExecute(r ApiWorkbooksDriveItemWorkbookFunctionsOct2BinRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsOct2Bin")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.oct2Bin"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1448 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1448 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1448
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsOct2DecRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1449 *InlineObject1449
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOct2DecRequest) InlineObject1449(inlineObject1449 InlineObject1449) ApiWorkbooksDriveItemWorkbookFunctionsOct2DecRequest {
	r.inlineObject1449 = &inlineObject1449
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOct2DecRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsOct2DecExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsOct2Dec Invoke action oct2Dec

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsOct2DecRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOct2Dec(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsOct2DecRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsOct2DecRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOct2DecExecute(r ApiWorkbooksDriveItemWorkbookFunctionsOct2DecRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsOct2Dec")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.oct2Dec"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1449 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1449 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1449
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsOct2HexRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1450 *InlineObject1450
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOct2HexRequest) InlineObject1450(inlineObject1450 InlineObject1450) ApiWorkbooksDriveItemWorkbookFunctionsOct2HexRequest {
	r.inlineObject1450 = &inlineObject1450
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOct2HexRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsOct2HexExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsOct2Hex Invoke action oct2Hex

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsOct2HexRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOct2Hex(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsOct2HexRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsOct2HexRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOct2HexExecute(r ApiWorkbooksDriveItemWorkbookFunctionsOct2HexRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsOct2Hex")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.oct2Hex"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1450 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1450 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1450
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsOddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1451 *InlineObject1451
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOddRequest) InlineObject1451(inlineObject1451 InlineObject1451) ApiWorkbooksDriveItemWorkbookFunctionsOddRequest {
	r.inlineObject1451 = &inlineObject1451
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOddRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsOddExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsOdd Invoke action odd

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsOddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOdd(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsOddRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsOddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOddExecute(r ApiWorkbooksDriveItemWorkbookFunctionsOddRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsOdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.odd"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1451 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1451 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1451
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsOddFPriceRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1452 *InlineObject1452
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOddFPriceRequest) InlineObject1452(inlineObject1452 InlineObject1452) ApiWorkbooksDriveItemWorkbookFunctionsOddFPriceRequest {
	r.inlineObject1452 = &inlineObject1452
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOddFPriceRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsOddFPriceExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsOddFPrice Invoke action oddFPrice

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsOddFPriceRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOddFPrice(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsOddFPriceRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsOddFPriceRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOddFPriceExecute(r ApiWorkbooksDriveItemWorkbookFunctionsOddFPriceRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsOddFPrice")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.oddFPrice"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1452 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1452 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1452
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsOddFYieldRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1453 *InlineObject1453
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOddFYieldRequest) InlineObject1453(inlineObject1453 InlineObject1453) ApiWorkbooksDriveItemWorkbookFunctionsOddFYieldRequest {
	r.inlineObject1453 = &inlineObject1453
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOddFYieldRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsOddFYieldExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsOddFYield Invoke action oddFYield

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsOddFYieldRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOddFYield(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsOddFYieldRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsOddFYieldRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOddFYieldExecute(r ApiWorkbooksDriveItemWorkbookFunctionsOddFYieldRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsOddFYield")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.oddFYield"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1453 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1453 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1453
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsOddLPriceRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1454 *InlineObject1454
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOddLPriceRequest) InlineObject1454(inlineObject1454 InlineObject1454) ApiWorkbooksDriveItemWorkbookFunctionsOddLPriceRequest {
	r.inlineObject1454 = &inlineObject1454
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOddLPriceRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsOddLPriceExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsOddLPrice Invoke action oddLPrice

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsOddLPriceRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOddLPrice(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsOddLPriceRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsOddLPriceRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOddLPriceExecute(r ApiWorkbooksDriveItemWorkbookFunctionsOddLPriceRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsOddLPrice")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.oddLPrice"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1454 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1454 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1454
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsOddLYieldRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1455 *InlineObject1455
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOddLYieldRequest) InlineObject1455(inlineObject1455 InlineObject1455) ApiWorkbooksDriveItemWorkbookFunctionsOddLYieldRequest {
	r.inlineObject1455 = &inlineObject1455
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOddLYieldRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsOddLYieldExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsOddLYield Invoke action oddLYield

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsOddLYieldRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOddLYield(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsOddLYieldRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsOddLYieldRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOddLYieldExecute(r ApiWorkbooksDriveItemWorkbookFunctionsOddLYieldRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsOddLYield")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.oddLYield"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1455 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1455 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1455
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsOrRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1456 *InlineObject1456
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOrRequest) InlineObject1456(inlineObject1456 InlineObject1456) ApiWorkbooksDriveItemWorkbookFunctionsOrRequest {
	r.inlineObject1456 = &inlineObject1456
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsOrRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsOrExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsOr Invoke action or

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsOrRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOr(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsOrRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsOrRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsOrExecute(r ApiWorkbooksDriveItemWorkbookFunctionsOrRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsOr")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.or"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1456 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1456 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1456
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPdurationRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1457 *InlineObject1457
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPdurationRequest) InlineObject1457(inlineObject1457 InlineObject1457) ApiWorkbooksDriveItemWorkbookFunctionsPdurationRequest {
	r.inlineObject1457 = &inlineObject1457
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPdurationRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPdurationExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPduration Invoke action pduration

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPdurationRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPduration(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPdurationRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPdurationRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPdurationExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPdurationRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPduration")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.pduration"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1457 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1457 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1457
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPercentRankExcRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1460 *InlineObject1460
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPercentRankExcRequest) InlineObject1460(inlineObject1460 InlineObject1460) ApiWorkbooksDriveItemWorkbookFunctionsPercentRankExcRequest {
	r.inlineObject1460 = &inlineObject1460
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPercentRankExcRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPercentRankExcExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPercentRankExc Invoke action percentRank_Exc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPercentRankExcRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPercentRankExc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPercentRankExcRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPercentRankExcRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPercentRankExcExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPercentRankExcRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPercentRankExc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.percentRank_Exc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1460 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1460 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1460
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPercentRankIncRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1461 *InlineObject1461
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPercentRankIncRequest) InlineObject1461(inlineObject1461 InlineObject1461) ApiWorkbooksDriveItemWorkbookFunctionsPercentRankIncRequest {
	r.inlineObject1461 = &inlineObject1461
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPercentRankIncRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPercentRankIncExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPercentRankInc Invoke action percentRank_Inc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPercentRankIncRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPercentRankInc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPercentRankIncRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPercentRankIncRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPercentRankIncExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPercentRankIncRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPercentRankInc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.percentRank_Inc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1461 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1461 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1461
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPercentileExcRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1458 *InlineObject1458
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPercentileExcRequest) InlineObject1458(inlineObject1458 InlineObject1458) ApiWorkbooksDriveItemWorkbookFunctionsPercentileExcRequest {
	r.inlineObject1458 = &inlineObject1458
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPercentileExcRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPercentileExcExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPercentileExc Invoke action percentile_Exc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPercentileExcRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPercentileExc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPercentileExcRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPercentileExcRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPercentileExcExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPercentileExcRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPercentileExc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.percentile_Exc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1458 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1458 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1458
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPercentileIncRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1459 *InlineObject1459
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPercentileIncRequest) InlineObject1459(inlineObject1459 InlineObject1459) ApiWorkbooksDriveItemWorkbookFunctionsPercentileIncRequest {
	r.inlineObject1459 = &inlineObject1459
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPercentileIncRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPercentileIncExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPercentileInc Invoke action percentile_Inc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPercentileIncRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPercentileInc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPercentileIncRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPercentileIncRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPercentileIncExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPercentileIncRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPercentileInc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.percentile_Inc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1459 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1459 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1459
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPermutRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1462 *InlineObject1462
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPermutRequest) InlineObject1462(inlineObject1462 InlineObject1462) ApiWorkbooksDriveItemWorkbookFunctionsPermutRequest {
	r.inlineObject1462 = &inlineObject1462
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPermutRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPermutExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPermut Invoke action permut

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPermutRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPermut(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPermutRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPermutRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPermutExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPermutRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPermut")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.permut"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1462 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1462 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1462
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPermutationaRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1463 *InlineObject1463
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPermutationaRequest) InlineObject1463(inlineObject1463 InlineObject1463) ApiWorkbooksDriveItemWorkbookFunctionsPermutationaRequest {
	r.inlineObject1463 = &inlineObject1463
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPermutationaRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPermutationaExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPermutationa Invoke action permutationa

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPermutationaRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPermutationa(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPermutationaRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPermutationaRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPermutationaExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPermutationaRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPermutationa")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.permutationa"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1463 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1463 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1463
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPhiRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1464 *InlineObject1464
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPhiRequest) InlineObject1464(inlineObject1464 InlineObject1464) ApiWorkbooksDriveItemWorkbookFunctionsPhiRequest {
	r.inlineObject1464 = &inlineObject1464
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPhiRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPhiExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPhi Invoke action phi

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPhiRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPhi(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPhiRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPhiRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPhiExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPhiRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPhi")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.phi"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1464 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1464 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1464
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPiRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemWorkbookFunctionsPiRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPiExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPi Invoke action pi

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPiRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPi(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPiRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPiRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPiExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPiRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPi")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.pi"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPmtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1465 *InlineObject1465
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPmtRequest) InlineObject1465(inlineObject1465 InlineObject1465) ApiWorkbooksDriveItemWorkbookFunctionsPmtRequest {
	r.inlineObject1465 = &inlineObject1465
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPmtRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPmtExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPmt Invoke action pmt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPmtRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPmt(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPmtRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPmtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPmtExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPmtRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPmt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.pmt"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1465 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1465 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1465
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPoissonDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1466 *InlineObject1466
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPoissonDistRequest) InlineObject1466(inlineObject1466 InlineObject1466) ApiWorkbooksDriveItemWorkbookFunctionsPoissonDistRequest {
	r.inlineObject1466 = &inlineObject1466
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPoissonDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPoissonDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPoissonDist Invoke action poisson_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPoissonDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPoissonDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPoissonDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPoissonDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPoissonDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPoissonDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPoissonDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.poisson_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1466 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1466 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1466
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPowerRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1467 *InlineObject1467
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPowerRequest) InlineObject1467(inlineObject1467 InlineObject1467) ApiWorkbooksDriveItemWorkbookFunctionsPowerRequest {
	r.inlineObject1467 = &inlineObject1467
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPowerRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPowerExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPower Invoke action power

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPowerRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPower(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPowerRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPowerRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPowerExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPowerRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPower")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.power"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1467 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1467 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1467
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPpmtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1468 *InlineObject1468
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPpmtRequest) InlineObject1468(inlineObject1468 InlineObject1468) ApiWorkbooksDriveItemWorkbookFunctionsPpmtRequest {
	r.inlineObject1468 = &inlineObject1468
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPpmtRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPpmtExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPpmt Invoke action ppmt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPpmtRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPpmt(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPpmtRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPpmtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPpmtExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPpmtRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPpmt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.ppmt"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1468 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1468 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1468
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPriceRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1469 *InlineObject1469
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPriceRequest) InlineObject1469(inlineObject1469 InlineObject1469) ApiWorkbooksDriveItemWorkbookFunctionsPriceRequest {
	r.inlineObject1469 = &inlineObject1469
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPriceRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPriceExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPrice Invoke action price

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPriceRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPrice(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPriceRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPriceRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPriceExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPriceRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPrice")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.price"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1469 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1469 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1469
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPriceDiscRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1470 *InlineObject1470
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPriceDiscRequest) InlineObject1470(inlineObject1470 InlineObject1470) ApiWorkbooksDriveItemWorkbookFunctionsPriceDiscRequest {
	r.inlineObject1470 = &inlineObject1470
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPriceDiscRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPriceDiscExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPriceDisc Invoke action priceDisc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPriceDiscRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPriceDisc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPriceDiscRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPriceDiscRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPriceDiscExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPriceDiscRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPriceDisc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.priceDisc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1470 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1470 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1470
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPriceMatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1471 *InlineObject1471
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPriceMatRequest) InlineObject1471(inlineObject1471 InlineObject1471) ApiWorkbooksDriveItemWorkbookFunctionsPriceMatRequest {
	r.inlineObject1471 = &inlineObject1471
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPriceMatRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPriceMatExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPriceMat Invoke action priceMat

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPriceMatRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPriceMat(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPriceMatRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPriceMatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPriceMatExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPriceMatRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPriceMat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.priceMat"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1471 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1471 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1471
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsProductRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1472 *InlineObject1472
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsProductRequest) InlineObject1472(inlineObject1472 InlineObject1472) ApiWorkbooksDriveItemWorkbookFunctionsProductRequest {
	r.inlineObject1472 = &inlineObject1472
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsProductRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsProductExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsProduct Invoke action product

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsProductRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsProduct(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsProductRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsProductRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsProductExecute(r ApiWorkbooksDriveItemWorkbookFunctionsProductRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsProduct")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.product"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1472 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1472 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1472
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsProperRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1473 *InlineObject1473
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsProperRequest) InlineObject1473(inlineObject1473 InlineObject1473) ApiWorkbooksDriveItemWorkbookFunctionsProperRequest {
	r.inlineObject1473 = &inlineObject1473
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsProperRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsProperExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsProper Invoke action proper

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsProperRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsProper(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsProperRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsProperRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsProperExecute(r ApiWorkbooksDriveItemWorkbookFunctionsProperRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsProper")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.proper"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1473 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1473 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1473
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsPvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1474 *InlineObject1474
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPvRequest) InlineObject1474(inlineObject1474 InlineObject1474) ApiWorkbooksDriveItemWorkbookFunctionsPvRequest {
	r.inlineObject1474 = &inlineObject1474
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsPvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsPvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsPv Invoke action pv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsPvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsPvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsPvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsPvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsPvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsPv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.pv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1474 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1474 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1474
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsQuartileExcRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1475 *InlineObject1475
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsQuartileExcRequest) InlineObject1475(inlineObject1475 InlineObject1475) ApiWorkbooksDriveItemWorkbookFunctionsQuartileExcRequest {
	r.inlineObject1475 = &inlineObject1475
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsQuartileExcRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsQuartileExcExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsQuartileExc Invoke action quartile_Exc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsQuartileExcRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsQuartileExc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsQuartileExcRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsQuartileExcRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsQuartileExcExecute(r ApiWorkbooksDriveItemWorkbookFunctionsQuartileExcRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsQuartileExc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.quartile_Exc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1475 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1475 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1475
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsQuartileIncRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1476 *InlineObject1476
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsQuartileIncRequest) InlineObject1476(inlineObject1476 InlineObject1476) ApiWorkbooksDriveItemWorkbookFunctionsQuartileIncRequest {
	r.inlineObject1476 = &inlineObject1476
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsQuartileIncRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsQuartileIncExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsQuartileInc Invoke action quartile_Inc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsQuartileIncRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsQuartileInc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsQuartileIncRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsQuartileIncRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsQuartileIncExecute(r ApiWorkbooksDriveItemWorkbookFunctionsQuartileIncRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsQuartileInc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.quartile_Inc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1476 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1476 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1476
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsQuotientRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1477 *InlineObject1477
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsQuotientRequest) InlineObject1477(inlineObject1477 InlineObject1477) ApiWorkbooksDriveItemWorkbookFunctionsQuotientRequest {
	r.inlineObject1477 = &inlineObject1477
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsQuotientRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsQuotientExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsQuotient Invoke action quotient

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsQuotientRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsQuotient(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsQuotientRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsQuotientRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsQuotientExecute(r ApiWorkbooksDriveItemWorkbookFunctionsQuotientRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsQuotient")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.quotient"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1477 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1477 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1477
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRadiansRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1478 *InlineObject1478
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRadiansRequest) InlineObject1478(inlineObject1478 InlineObject1478) ApiWorkbooksDriveItemWorkbookFunctionsRadiansRequest {
	r.inlineObject1478 = &inlineObject1478
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRadiansRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRadiansExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRadians Invoke action radians

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRadiansRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRadians(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRadiansRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRadiansRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRadiansExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRadiansRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRadians")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.radians"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1478 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1478 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1478
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRandRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemWorkbookFunctionsRandRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRandExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRand Invoke action rand

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRandRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRand(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRandRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRandRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRandExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRandRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRand")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.rand"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRandBetweenRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1479 *InlineObject1479
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRandBetweenRequest) InlineObject1479(inlineObject1479 InlineObject1479) ApiWorkbooksDriveItemWorkbookFunctionsRandBetweenRequest {
	r.inlineObject1479 = &inlineObject1479
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRandBetweenRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRandBetweenExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRandBetween Invoke action randBetween

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRandBetweenRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRandBetween(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRandBetweenRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRandBetweenRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRandBetweenExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRandBetweenRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRandBetween")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.randBetween"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1479 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1479 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1479
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRankAvgRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1480 *InlineObject1480
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRankAvgRequest) InlineObject1480(inlineObject1480 InlineObject1480) ApiWorkbooksDriveItemWorkbookFunctionsRankAvgRequest {
	r.inlineObject1480 = &inlineObject1480
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRankAvgRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRankAvgExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRankAvg Invoke action rank_Avg

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRankAvgRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRankAvg(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRankAvgRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRankAvgRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRankAvgExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRankAvgRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRankAvg")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.rank_Avg"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1480 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1480 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1480
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRankEqRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1481 *InlineObject1481
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRankEqRequest) InlineObject1481(inlineObject1481 InlineObject1481) ApiWorkbooksDriveItemWorkbookFunctionsRankEqRequest {
	r.inlineObject1481 = &inlineObject1481
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRankEqRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRankEqExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRankEq Invoke action rank_Eq

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRankEqRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRankEq(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRankEqRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRankEqRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRankEqExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRankEqRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRankEq")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.rank_Eq"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1481 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1481 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1481
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRateRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1482 *InlineObject1482
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRateRequest) InlineObject1482(inlineObject1482 InlineObject1482) ApiWorkbooksDriveItemWorkbookFunctionsRateRequest {
	r.inlineObject1482 = &inlineObject1482
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRateRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRateExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRate Invoke action rate

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRateRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRate(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRateRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRateRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRateExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRateRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.rate"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1482 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1482 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1482
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsReceivedRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1483 *InlineObject1483
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsReceivedRequest) InlineObject1483(inlineObject1483 InlineObject1483) ApiWorkbooksDriveItemWorkbookFunctionsReceivedRequest {
	r.inlineObject1483 = &inlineObject1483
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsReceivedRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsReceivedExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsReceived Invoke action received

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsReceivedRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsReceived(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsReceivedRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsReceivedRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsReceivedExecute(r ApiWorkbooksDriveItemWorkbookFunctionsReceivedRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsReceived")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.received"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1483 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1483 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1483
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsReplaceRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1484 *InlineObject1484
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsReplaceRequest) InlineObject1484(inlineObject1484 InlineObject1484) ApiWorkbooksDriveItemWorkbookFunctionsReplaceRequest {
	r.inlineObject1484 = &inlineObject1484
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsReplaceRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsReplaceExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsReplace Invoke action replace

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsReplaceRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsReplace(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsReplaceRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsReplaceRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsReplaceExecute(r ApiWorkbooksDriveItemWorkbookFunctionsReplaceRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsReplace")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.replace"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1484 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1484 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1484
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsReplaceBRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1485 *InlineObject1485
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsReplaceBRequest) InlineObject1485(inlineObject1485 InlineObject1485) ApiWorkbooksDriveItemWorkbookFunctionsReplaceBRequest {
	r.inlineObject1485 = &inlineObject1485
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsReplaceBRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsReplaceBExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsReplaceB Invoke action replaceB

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsReplaceBRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsReplaceB(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsReplaceBRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsReplaceBRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsReplaceBExecute(r ApiWorkbooksDriveItemWorkbookFunctionsReplaceBRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsReplaceB")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.replaceB"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1485 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1485 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1485
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsReptRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1486 *InlineObject1486
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsReptRequest) InlineObject1486(inlineObject1486 InlineObject1486) ApiWorkbooksDriveItemWorkbookFunctionsReptRequest {
	r.inlineObject1486 = &inlineObject1486
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsReptRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsReptExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRept Invoke action rept

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsReptRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRept(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsReptRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsReptRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsReptExecute(r ApiWorkbooksDriveItemWorkbookFunctionsReptRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRept")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.rept"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1486 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1486 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1486
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRightRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1487 *InlineObject1487
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRightRequest) InlineObject1487(inlineObject1487 InlineObject1487) ApiWorkbooksDriveItemWorkbookFunctionsRightRequest {
	r.inlineObject1487 = &inlineObject1487
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRightRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRightExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRight Invoke action right

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRightRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRight(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRightRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRightRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRightExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRightRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRight")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.right"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1487 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1487 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1487
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRightbRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1488 *InlineObject1488
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRightbRequest) InlineObject1488(inlineObject1488 InlineObject1488) ApiWorkbooksDriveItemWorkbookFunctionsRightbRequest {
	r.inlineObject1488 = &inlineObject1488
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRightbRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRightbExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRightb Invoke action rightb

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRightbRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRightb(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRightbRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRightbRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRightbExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRightbRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRightb")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.rightb"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1488 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1488 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1488
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRomanRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1489 *InlineObject1489
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRomanRequest) InlineObject1489(inlineObject1489 InlineObject1489) ApiWorkbooksDriveItemWorkbookFunctionsRomanRequest {
	r.inlineObject1489 = &inlineObject1489
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRomanRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRomanExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRoman Invoke action roman

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRomanRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRoman(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRomanRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRomanRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRomanExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRomanRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRoman")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.roman"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1489 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1489 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1489
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRoundRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1490 *InlineObject1490
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRoundRequest) InlineObject1490(inlineObject1490 InlineObject1490) ApiWorkbooksDriveItemWorkbookFunctionsRoundRequest {
	r.inlineObject1490 = &inlineObject1490
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRoundRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRoundExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRound Invoke action round

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRoundRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRound(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRoundRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRoundRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRoundExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRoundRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRound")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.round"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1490 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1490 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1490
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRoundDownRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1491 *InlineObject1491
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRoundDownRequest) InlineObject1491(inlineObject1491 InlineObject1491) ApiWorkbooksDriveItemWorkbookFunctionsRoundDownRequest {
	r.inlineObject1491 = &inlineObject1491
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRoundDownRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRoundDownExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRoundDown Invoke action roundDown

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRoundDownRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRoundDown(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRoundDownRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRoundDownRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRoundDownExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRoundDownRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRoundDown")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.roundDown"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1491 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1491 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1491
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRoundUpRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1492 *InlineObject1492
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRoundUpRequest) InlineObject1492(inlineObject1492 InlineObject1492) ApiWorkbooksDriveItemWorkbookFunctionsRoundUpRequest {
	r.inlineObject1492 = &inlineObject1492
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRoundUpRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRoundUpExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRoundUp Invoke action roundUp

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRoundUpRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRoundUp(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRoundUpRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRoundUpRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRoundUpExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRoundUpRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRoundUp")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.roundUp"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1492 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1492 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1492
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1493 *InlineObject1493
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRowsRequest) InlineObject1493(inlineObject1493 InlineObject1493) ApiWorkbooksDriveItemWorkbookFunctionsRowsRequest {
	r.inlineObject1493 = &inlineObject1493
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRowsRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRowsExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRows Invoke action rows

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRowsRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRows(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRowsRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRowsExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRowsRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRows")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.rows"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1493 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1493 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1493
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsRriRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1494 *InlineObject1494
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRriRequest) InlineObject1494(inlineObject1494 InlineObject1494) ApiWorkbooksDriveItemWorkbookFunctionsRriRequest {
	r.inlineObject1494 = &inlineObject1494
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsRriRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsRriExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsRri Invoke action rri

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsRriRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRri(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsRriRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsRriRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsRriExecute(r ApiWorkbooksDriveItemWorkbookFunctionsRriRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsRri")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.rri"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1494 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1494 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1494
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSecRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1495 *InlineObject1495
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSecRequest) InlineObject1495(inlineObject1495 InlineObject1495) ApiWorkbooksDriveItemWorkbookFunctionsSecRequest {
	r.inlineObject1495 = &inlineObject1495
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSecRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSecExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSec Invoke action sec

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSecRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSec(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSecRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSecRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSecExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSecRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSec")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sec"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1495 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1495 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1495
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSechRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1496 *InlineObject1496
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSechRequest) InlineObject1496(inlineObject1496 InlineObject1496) ApiWorkbooksDriveItemWorkbookFunctionsSechRequest {
	r.inlineObject1496 = &inlineObject1496
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSechRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSechExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSech Invoke action sech

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSechRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSech(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSechRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSechRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSechExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSechRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSech")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sech"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1496 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1496 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1496
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSecondRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1497 *InlineObject1497
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSecondRequest) InlineObject1497(inlineObject1497 InlineObject1497) ApiWorkbooksDriveItemWorkbookFunctionsSecondRequest {
	r.inlineObject1497 = &inlineObject1497
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSecondRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSecondExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSecond Invoke action second

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSecondRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSecond(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSecondRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSecondRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSecondExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSecondRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSecond")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.second"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1497 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1497 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1497
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSeriesSumRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1498 *InlineObject1498
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSeriesSumRequest) InlineObject1498(inlineObject1498 InlineObject1498) ApiWorkbooksDriveItemWorkbookFunctionsSeriesSumRequest {
	r.inlineObject1498 = &inlineObject1498
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSeriesSumRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSeriesSumExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSeriesSum Invoke action seriesSum

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSeriesSumRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSeriesSum(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSeriesSumRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSeriesSumRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSeriesSumExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSeriesSumRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSeriesSum")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.seriesSum"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1498 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1498 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1498
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1499 *InlineObject1499
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSheetRequest) InlineObject1499(inlineObject1499 InlineObject1499) ApiWorkbooksDriveItemWorkbookFunctionsSheetRequest {
	r.inlineObject1499 = &inlineObject1499
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSheetRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSheetExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSheet Invoke action sheet

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSheetRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSheet(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSheetRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSheetExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSheetRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSheet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1499 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1499 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1499
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSheetsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1500 *InlineObject1500
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSheetsRequest) InlineObject1500(inlineObject1500 InlineObject1500) ApiWorkbooksDriveItemWorkbookFunctionsSheetsRequest {
	r.inlineObject1500 = &inlineObject1500
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSheetsRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSheetsExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSheets Invoke action sheets

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSheetsRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSheets(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSheetsRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSheetsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSheetsExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSheetsRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSheets")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sheets"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1500 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1500 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1500
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSignRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1501 *InlineObject1501
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSignRequest) InlineObject1501(inlineObject1501 InlineObject1501) ApiWorkbooksDriveItemWorkbookFunctionsSignRequest {
	r.inlineObject1501 = &inlineObject1501
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSignRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSignExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSign Invoke action sign

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSignRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSign(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSignRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSignRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSignExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSignRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSign")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sign"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1501 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1501 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1501
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSinRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1502 *InlineObject1502
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSinRequest) InlineObject1502(inlineObject1502 InlineObject1502) ApiWorkbooksDriveItemWorkbookFunctionsSinRequest {
	r.inlineObject1502 = &inlineObject1502
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSinRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSinExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSin Invoke action sin

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSinRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSin(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSinRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSinRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSinExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSinRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSin")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sin"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1502 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1502 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1502
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSinhRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1503 *InlineObject1503
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSinhRequest) InlineObject1503(inlineObject1503 InlineObject1503) ApiWorkbooksDriveItemWorkbookFunctionsSinhRequest {
	r.inlineObject1503 = &inlineObject1503
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSinhRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSinhExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSinh Invoke action sinh

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSinhRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSinh(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSinhRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSinhRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSinhExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSinhRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSinh")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sinh"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1503 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1503 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1503
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSkewRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1504 *InlineObject1504
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSkewRequest) InlineObject1504(inlineObject1504 InlineObject1504) ApiWorkbooksDriveItemWorkbookFunctionsSkewRequest {
	r.inlineObject1504 = &inlineObject1504
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSkewRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSkewExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSkew Invoke action skew

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSkewRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSkew(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSkewRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSkewRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSkewExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSkewRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSkew")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.skew"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1504 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1504 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1504
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSkewPRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1505 *InlineObject1505
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSkewPRequest) InlineObject1505(inlineObject1505 InlineObject1505) ApiWorkbooksDriveItemWorkbookFunctionsSkewPRequest {
	r.inlineObject1505 = &inlineObject1505
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSkewPRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSkewPExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSkewP Invoke action skew_p

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSkewPRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSkewP(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSkewPRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSkewPRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSkewPExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSkewPRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSkewP")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.skew_p"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1505 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1505 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1505
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSlnRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1506 *InlineObject1506
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSlnRequest) InlineObject1506(inlineObject1506 InlineObject1506) ApiWorkbooksDriveItemWorkbookFunctionsSlnRequest {
	r.inlineObject1506 = &inlineObject1506
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSlnRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSlnExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSln Invoke action sln

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSlnRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSln(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSlnRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSlnRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSlnExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSlnRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSln")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sln"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1506 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1506 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1506
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSmallRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1507 *InlineObject1507
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSmallRequest) InlineObject1507(inlineObject1507 InlineObject1507) ApiWorkbooksDriveItemWorkbookFunctionsSmallRequest {
	r.inlineObject1507 = &inlineObject1507
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSmallRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSmallExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSmall Invoke action small

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSmallRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSmall(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSmallRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSmallRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSmallExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSmallRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSmall")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.small"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1507 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1507 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1507
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSqrtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1508 *InlineObject1508
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSqrtRequest) InlineObject1508(inlineObject1508 InlineObject1508) ApiWorkbooksDriveItemWorkbookFunctionsSqrtRequest {
	r.inlineObject1508 = &inlineObject1508
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSqrtRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSqrtExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSqrt Invoke action sqrt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSqrtRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSqrt(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSqrtRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSqrtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSqrtExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSqrtRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSqrt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sqrt"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1508 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1508 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1508
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSqrtPiRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1509 *InlineObject1509
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSqrtPiRequest) InlineObject1509(inlineObject1509 InlineObject1509) ApiWorkbooksDriveItemWorkbookFunctionsSqrtPiRequest {
	r.inlineObject1509 = &inlineObject1509
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSqrtPiRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSqrtPiExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSqrtPi Invoke action sqrtPi

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSqrtPiRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSqrtPi(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSqrtPiRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSqrtPiRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSqrtPiExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSqrtPiRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSqrtPi")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sqrtPi"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1509 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1509 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1509
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsStDevARequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1513 *InlineObject1513
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsStDevARequest) InlineObject1513(inlineObject1513 InlineObject1513) ApiWorkbooksDriveItemWorkbookFunctionsStDevARequest {
	r.inlineObject1513 = &inlineObject1513
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsStDevARequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsStDevAExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsStDevA Invoke action stDevA

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsStDevARequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsStDevA(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsStDevARequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsStDevARequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsStDevAExecute(r ApiWorkbooksDriveItemWorkbookFunctionsStDevARequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsStDevA")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.stDevA"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1513 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1513 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1513
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsStDevPRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1511 *InlineObject1511
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsStDevPRequest) InlineObject1511(inlineObject1511 InlineObject1511) ApiWorkbooksDriveItemWorkbookFunctionsStDevPRequest {
	r.inlineObject1511 = &inlineObject1511
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsStDevPRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsStDevPExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsStDevP Invoke action stDev_P

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsStDevPRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsStDevP(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsStDevPRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsStDevPRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsStDevPExecute(r ApiWorkbooksDriveItemWorkbookFunctionsStDevPRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsStDevP")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.stDev_P"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1511 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1511 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1511
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsStDevPARequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1514 *InlineObject1514
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsStDevPARequest) InlineObject1514(inlineObject1514 InlineObject1514) ApiWorkbooksDriveItemWorkbookFunctionsStDevPARequest {
	r.inlineObject1514 = &inlineObject1514
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsStDevPARequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsStDevPAExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsStDevPA Invoke action stDevPA

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsStDevPARequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsStDevPA(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsStDevPARequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsStDevPARequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsStDevPAExecute(r ApiWorkbooksDriveItemWorkbookFunctionsStDevPARequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsStDevPA")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.stDevPA"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1514 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1514 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1514
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsStDevSRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1512 *InlineObject1512
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsStDevSRequest) InlineObject1512(inlineObject1512 InlineObject1512) ApiWorkbooksDriveItemWorkbookFunctionsStDevSRequest {
	r.inlineObject1512 = &inlineObject1512
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsStDevSRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsStDevSExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsStDevS Invoke action stDev_S

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsStDevSRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsStDevS(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsStDevSRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsStDevSRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsStDevSExecute(r ApiWorkbooksDriveItemWorkbookFunctionsStDevSRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsStDevS")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.stDev_S"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1512 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1512 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1512
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsStandardizeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1510 *InlineObject1510
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsStandardizeRequest) InlineObject1510(inlineObject1510 InlineObject1510) ApiWorkbooksDriveItemWorkbookFunctionsStandardizeRequest {
	r.inlineObject1510 = &inlineObject1510
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsStandardizeRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsStandardizeExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsStandardize Invoke action standardize

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsStandardizeRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsStandardize(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsStandardizeRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsStandardizeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsStandardizeExecute(r ApiWorkbooksDriveItemWorkbookFunctionsStandardizeRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsStandardize")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.standardize"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1510 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1510 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1510
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSubstituteRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1515 *InlineObject1515
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSubstituteRequest) InlineObject1515(inlineObject1515 InlineObject1515) ApiWorkbooksDriveItemWorkbookFunctionsSubstituteRequest {
	r.inlineObject1515 = &inlineObject1515
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSubstituteRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSubstituteExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSubstitute Invoke action substitute

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSubstituteRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSubstitute(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSubstituteRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSubstituteRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSubstituteExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSubstituteRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSubstitute")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.substitute"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1515 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1515 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1515
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSubtotalRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1516 *InlineObject1516
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSubtotalRequest) InlineObject1516(inlineObject1516 InlineObject1516) ApiWorkbooksDriveItemWorkbookFunctionsSubtotalRequest {
	r.inlineObject1516 = &inlineObject1516
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSubtotalRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSubtotalExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSubtotal Invoke action subtotal

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSubtotalRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSubtotal(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSubtotalRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSubtotalRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSubtotalExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSubtotalRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSubtotal")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.subtotal"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1516 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1516 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1516
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSumRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1517 *InlineObject1517
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSumRequest) InlineObject1517(inlineObject1517 InlineObject1517) ApiWorkbooksDriveItemWorkbookFunctionsSumRequest {
	r.inlineObject1517 = &inlineObject1517
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSumRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSumExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSum Invoke action sum

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSumRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSum(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSumRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSumRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSumExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSumRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSum")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sum"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1517 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1517 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1517
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSumIfRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1518 *InlineObject1518
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSumIfRequest) InlineObject1518(inlineObject1518 InlineObject1518) ApiWorkbooksDriveItemWorkbookFunctionsSumIfRequest {
	r.inlineObject1518 = &inlineObject1518
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSumIfRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSumIfExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSumIf Invoke action sumIf

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSumIfRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSumIf(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSumIfRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSumIfRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSumIfExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSumIfRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSumIf")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sumIf"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1518 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1518 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1518
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSumIfsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1519 *InlineObject1519
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSumIfsRequest) InlineObject1519(inlineObject1519 InlineObject1519) ApiWorkbooksDriveItemWorkbookFunctionsSumIfsRequest {
	r.inlineObject1519 = &inlineObject1519
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSumIfsRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSumIfsExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSumIfs Invoke action sumIfs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSumIfsRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSumIfs(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSumIfsRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSumIfsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSumIfsExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSumIfsRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSumIfs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sumIfs"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1519 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1519 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1519
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSumSqRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1520 *InlineObject1520
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSumSqRequest) InlineObject1520(inlineObject1520 InlineObject1520) ApiWorkbooksDriveItemWorkbookFunctionsSumSqRequest {
	r.inlineObject1520 = &inlineObject1520
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSumSqRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSumSqExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSumSq Invoke action sumSq

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSumSqRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSumSq(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSumSqRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSumSqRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSumSqExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSumSqRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSumSq")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.sumSq"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1520 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1520 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1520
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsSydRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1521 *InlineObject1521
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSydRequest) InlineObject1521(inlineObject1521 InlineObject1521) ApiWorkbooksDriveItemWorkbookFunctionsSydRequest {
	r.inlineObject1521 = &inlineObject1521
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsSydRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsSydExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsSyd Invoke action syd

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsSydRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSyd(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsSydRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsSydRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsSydExecute(r ApiWorkbooksDriveItemWorkbookFunctionsSydRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsSyd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.syd"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1521 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1521 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1521
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1522 *InlineObject1522
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTRequest) InlineObject1522(inlineObject1522 InlineObject1522) ApiWorkbooksDriveItemWorkbookFunctionsTRequest {
	r.inlineObject1522 = &inlineObject1522
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsT Invoke action t

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsT(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsT")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.t"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1522 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1522 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1522
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1523 *InlineObject1523
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTDistRequest) InlineObject1523(inlineObject1523 InlineObject1523) ApiWorkbooksDriveItemWorkbookFunctionsTDistRequest {
	r.inlineObject1523 = &inlineObject1523
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTDist Invoke action t_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.t_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1523 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1523 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1523
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTDist2TRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1524 *InlineObject1524
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTDist2TRequest) InlineObject1524(inlineObject1524 InlineObject1524) ApiWorkbooksDriveItemWorkbookFunctionsTDist2TRequest {
	r.inlineObject1524 = &inlineObject1524
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTDist2TRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTDist2TExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTDist2T Invoke action t_Dist_2T

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTDist2TRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTDist2T(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTDist2TRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTDist2TRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTDist2TExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTDist2TRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTDist2T")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.t_Dist_2T"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1524 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1524 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1524
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTDistRTRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1525 *InlineObject1525
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTDistRTRequest) InlineObject1525(inlineObject1525 InlineObject1525) ApiWorkbooksDriveItemWorkbookFunctionsTDistRTRequest {
	r.inlineObject1525 = &inlineObject1525
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTDistRTRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTDistRTExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTDistRT Invoke action t_Dist_RT

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTDistRTRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTDistRT(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTDistRTRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTDistRTRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTDistRTExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTDistRTRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTDistRT")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.t_Dist_RT"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1525 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1525 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1525
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTInvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1526 *InlineObject1526
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTInvRequest) InlineObject1526(inlineObject1526 InlineObject1526) ApiWorkbooksDriveItemWorkbookFunctionsTInvRequest {
	r.inlineObject1526 = &inlineObject1526
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTInvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTInvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTInv Invoke action t_Inv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTInvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTInv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTInvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTInvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTInvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTInvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTInv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.t_Inv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1526 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1526 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1526
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTInv2TRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1527 *InlineObject1527
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTInv2TRequest) InlineObject1527(inlineObject1527 InlineObject1527) ApiWorkbooksDriveItemWorkbookFunctionsTInv2TRequest {
	r.inlineObject1527 = &inlineObject1527
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTInv2TRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTInv2TExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTInv2T Invoke action t_Inv_2T

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTInv2TRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTInv2T(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTInv2TRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTInv2TRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTInv2TExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTInv2TRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTInv2T")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.t_Inv_2T"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1527 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1527 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1527
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTanRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1528 *InlineObject1528
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTanRequest) InlineObject1528(inlineObject1528 InlineObject1528) ApiWorkbooksDriveItemWorkbookFunctionsTanRequest {
	r.inlineObject1528 = &inlineObject1528
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTanRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTanExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTan Invoke action tan

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTanRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTan(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTanRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTanRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTanExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTanRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTan")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.tan"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1528 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1528 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1528
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTanhRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1529 *InlineObject1529
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTanhRequest) InlineObject1529(inlineObject1529 InlineObject1529) ApiWorkbooksDriveItemWorkbookFunctionsTanhRequest {
	r.inlineObject1529 = &inlineObject1529
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTanhRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTanhExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTanh Invoke action tanh

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTanhRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTanh(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTanhRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTanhRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTanhExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTanhRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTanh")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.tanh"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1529 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1529 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1529
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTbillEqRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1530 *InlineObject1530
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTbillEqRequest) InlineObject1530(inlineObject1530 InlineObject1530) ApiWorkbooksDriveItemWorkbookFunctionsTbillEqRequest {
	r.inlineObject1530 = &inlineObject1530
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTbillEqRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTbillEqExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTbillEq Invoke action tbillEq

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTbillEqRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTbillEq(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTbillEqRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTbillEqRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTbillEqExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTbillEqRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTbillEq")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.tbillEq"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1530 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1530 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1530
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTbillPriceRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1531 *InlineObject1531
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTbillPriceRequest) InlineObject1531(inlineObject1531 InlineObject1531) ApiWorkbooksDriveItemWorkbookFunctionsTbillPriceRequest {
	r.inlineObject1531 = &inlineObject1531
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTbillPriceRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTbillPriceExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTbillPrice Invoke action tbillPrice

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTbillPriceRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTbillPrice(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTbillPriceRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTbillPriceRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTbillPriceExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTbillPriceRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTbillPrice")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.tbillPrice"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1531 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1531 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1531
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTbillYieldRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1532 *InlineObject1532
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTbillYieldRequest) InlineObject1532(inlineObject1532 InlineObject1532) ApiWorkbooksDriveItemWorkbookFunctionsTbillYieldRequest {
	r.inlineObject1532 = &inlineObject1532
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTbillYieldRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTbillYieldExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTbillYield Invoke action tbillYield

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTbillYieldRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTbillYield(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTbillYieldRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTbillYieldRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTbillYieldExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTbillYieldRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTbillYield")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.tbillYield"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1532 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1532 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1532
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTextRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1533 *InlineObject1533
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTextRequest) InlineObject1533(inlineObject1533 InlineObject1533) ApiWorkbooksDriveItemWorkbookFunctionsTextRequest {
	r.inlineObject1533 = &inlineObject1533
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTextRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTextExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsText Invoke action text

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTextRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsText(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTextRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTextRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTextExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTextRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsText")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.text"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1533 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1533 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1533
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTimeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1534 *InlineObject1534
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTimeRequest) InlineObject1534(inlineObject1534 InlineObject1534) ApiWorkbooksDriveItemWorkbookFunctionsTimeRequest {
	r.inlineObject1534 = &inlineObject1534
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTimeRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTimeExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTime Invoke action time

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTimeRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTime(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTimeRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTimeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTimeExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTimeRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTime")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.time"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1534 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1534 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1534
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTimevalueRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1535 *InlineObject1535
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTimevalueRequest) InlineObject1535(inlineObject1535 InlineObject1535) ApiWorkbooksDriveItemWorkbookFunctionsTimevalueRequest {
	r.inlineObject1535 = &inlineObject1535
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTimevalueRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTimevalueExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTimevalue Invoke action timevalue

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTimevalueRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTimevalue(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTimevalueRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTimevalueRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTimevalueExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTimevalueRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTimevalue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.timevalue"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1535 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1535 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1535
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTodayRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemWorkbookFunctionsTodayRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTodayExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsToday Invoke action today

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTodayRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsToday(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTodayRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTodayRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTodayExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTodayRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsToday")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.today"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTrimRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1536 *InlineObject1536
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTrimRequest) InlineObject1536(inlineObject1536 InlineObject1536) ApiWorkbooksDriveItemWorkbookFunctionsTrimRequest {
	r.inlineObject1536 = &inlineObject1536
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTrimRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTrimExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTrim Invoke action trim

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTrimRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTrim(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTrimRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTrimRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTrimExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTrimRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTrim")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.trim"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1536 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1536 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1536
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTrimMeanRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1537 *InlineObject1537
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTrimMeanRequest) InlineObject1537(inlineObject1537 InlineObject1537) ApiWorkbooksDriveItemWorkbookFunctionsTrimMeanRequest {
	r.inlineObject1537 = &inlineObject1537
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTrimMeanRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTrimMeanExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTrimMean Invoke action trimMean

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTrimMeanRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTrimMean(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTrimMeanRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTrimMeanRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTrimMeanExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTrimMeanRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTrimMean")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.trimMean"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1537 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1537 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1537
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTrueRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemWorkbookFunctionsTrueRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTrueExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTrue Invoke action true

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTrueRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTrue(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTrueRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTrueRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTrueExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTrueRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTrue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.true"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTruncRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1538 *InlineObject1538
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTruncRequest) InlineObject1538(inlineObject1538 InlineObject1538) ApiWorkbooksDriveItemWorkbookFunctionsTruncRequest {
	r.inlineObject1538 = &inlineObject1538
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTruncRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTruncExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsTrunc Invoke action trunc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTruncRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTrunc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTruncRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTruncRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTruncExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTruncRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsTrunc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.trunc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1538 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1538 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1538
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsTypeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1539 *InlineObject1539
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTypeRequest) InlineObject1539(inlineObject1539 InlineObject1539) ApiWorkbooksDriveItemWorkbookFunctionsTypeRequest {
	r.inlineObject1539 = &inlineObject1539
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsTypeRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsTypeExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsType Invoke action type

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsTypeRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsType(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsTypeRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsTypeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsTypeExecute(r ApiWorkbooksDriveItemWorkbookFunctionsTypeRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsType")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.type"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1539 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1539 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1539
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsUnicharRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1540 *InlineObject1540
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsUnicharRequest) InlineObject1540(inlineObject1540 InlineObject1540) ApiWorkbooksDriveItemWorkbookFunctionsUnicharRequest {
	r.inlineObject1540 = &inlineObject1540
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsUnicharRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsUnicharExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsUnichar Invoke action unichar

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsUnicharRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsUnichar(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsUnicharRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsUnicharRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsUnicharExecute(r ApiWorkbooksDriveItemWorkbookFunctionsUnicharRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsUnichar")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.unichar"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1540 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1540 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1540
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsUnicodeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1541 *InlineObject1541
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsUnicodeRequest) InlineObject1541(inlineObject1541 InlineObject1541) ApiWorkbooksDriveItemWorkbookFunctionsUnicodeRequest {
	r.inlineObject1541 = &inlineObject1541
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsUnicodeRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsUnicodeExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsUnicode Invoke action unicode

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsUnicodeRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsUnicode(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsUnicodeRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsUnicodeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsUnicodeExecute(r ApiWorkbooksDriveItemWorkbookFunctionsUnicodeRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsUnicode")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.unicode"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1541 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1541 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1541
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsUpperRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1542 *InlineObject1542
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsUpperRequest) InlineObject1542(inlineObject1542 InlineObject1542) ApiWorkbooksDriveItemWorkbookFunctionsUpperRequest {
	r.inlineObject1542 = &inlineObject1542
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsUpperRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsUpperExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsUpper Invoke action upper

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsUpperRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsUpper(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsUpperRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsUpperRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsUpperExecute(r ApiWorkbooksDriveItemWorkbookFunctionsUpperRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsUpper")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.upper"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1542 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1542 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1542
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsUsdollarRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1543 *InlineObject1543
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsUsdollarRequest) InlineObject1543(inlineObject1543 InlineObject1543) ApiWorkbooksDriveItemWorkbookFunctionsUsdollarRequest {
	r.inlineObject1543 = &inlineObject1543
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsUsdollarRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsUsdollarExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsUsdollar Invoke action usdollar

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsUsdollarRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsUsdollar(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsUsdollarRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsUsdollarRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsUsdollarExecute(r ApiWorkbooksDriveItemWorkbookFunctionsUsdollarRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsUsdollar")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.usdollar"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1543 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1543 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1543
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsValueRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1544 *InlineObject1544
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsValueRequest) InlineObject1544(inlineObject1544 InlineObject1544) ApiWorkbooksDriveItemWorkbookFunctionsValueRequest {
	r.inlineObject1544 = &inlineObject1544
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsValueRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsValueExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsValue Invoke action value

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsValueRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsValue(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsValueRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsValueRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsValueExecute(r ApiWorkbooksDriveItemWorkbookFunctionsValueRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsValue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.value"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1544 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1544 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1544
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsVarARequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1547 *InlineObject1547
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsVarARequest) InlineObject1547(inlineObject1547 InlineObject1547) ApiWorkbooksDriveItemWorkbookFunctionsVarARequest {
	r.inlineObject1547 = &inlineObject1547
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsVarARequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsVarAExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsVarA Invoke action varA

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsVarARequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsVarA(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsVarARequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsVarARequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsVarAExecute(r ApiWorkbooksDriveItemWorkbookFunctionsVarARequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsVarA")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.varA"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1547 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1547 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1547
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsVarPRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1545 *InlineObject1545
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsVarPRequest) InlineObject1545(inlineObject1545 InlineObject1545) ApiWorkbooksDriveItemWorkbookFunctionsVarPRequest {
	r.inlineObject1545 = &inlineObject1545
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsVarPRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsVarPExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsVarP Invoke action var_P

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsVarPRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsVarP(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsVarPRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsVarPRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsVarPExecute(r ApiWorkbooksDriveItemWorkbookFunctionsVarPRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsVarP")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.var_P"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1545 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1545 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1545
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsVarPARequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1548 *InlineObject1548
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsVarPARequest) InlineObject1548(inlineObject1548 InlineObject1548) ApiWorkbooksDriveItemWorkbookFunctionsVarPARequest {
	r.inlineObject1548 = &inlineObject1548
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsVarPARequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsVarPAExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsVarPA Invoke action varPA

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsVarPARequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsVarPA(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsVarPARequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsVarPARequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsVarPAExecute(r ApiWorkbooksDriveItemWorkbookFunctionsVarPARequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsVarPA")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.varPA"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1548 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1548 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1548
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsVarSRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1546 *InlineObject1546
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsVarSRequest) InlineObject1546(inlineObject1546 InlineObject1546) ApiWorkbooksDriveItemWorkbookFunctionsVarSRequest {
	r.inlineObject1546 = &inlineObject1546
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsVarSRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsVarSExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsVarS Invoke action var_S

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsVarSRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsVarS(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsVarSRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsVarSRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsVarSExecute(r ApiWorkbooksDriveItemWorkbookFunctionsVarSRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsVarS")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.var_S"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1546 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1546 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1546
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsVdbRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1549 *InlineObject1549
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsVdbRequest) InlineObject1549(inlineObject1549 InlineObject1549) ApiWorkbooksDriveItemWorkbookFunctionsVdbRequest {
	r.inlineObject1549 = &inlineObject1549
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsVdbRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsVdbExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsVdb Invoke action vdb

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsVdbRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsVdb(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsVdbRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsVdbRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsVdbExecute(r ApiWorkbooksDriveItemWorkbookFunctionsVdbRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsVdb")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.vdb"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1549 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1549 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1549
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsVlookupRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1550 *InlineObject1550
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsVlookupRequest) InlineObject1550(inlineObject1550 InlineObject1550) ApiWorkbooksDriveItemWorkbookFunctionsVlookupRequest {
	r.inlineObject1550 = &inlineObject1550
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsVlookupRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsVlookupExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsVlookup Invoke action vlookup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsVlookupRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsVlookup(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsVlookupRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsVlookupRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsVlookupExecute(r ApiWorkbooksDriveItemWorkbookFunctionsVlookupRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsVlookup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.vlookup"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1550 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1550 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1550
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsWeekNumRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1552 *InlineObject1552
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsWeekNumRequest) InlineObject1552(inlineObject1552 InlineObject1552) ApiWorkbooksDriveItemWorkbookFunctionsWeekNumRequest {
	r.inlineObject1552 = &inlineObject1552
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsWeekNumRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsWeekNumExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsWeekNum Invoke action weekNum

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsWeekNumRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsWeekNum(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsWeekNumRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsWeekNumRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsWeekNumExecute(r ApiWorkbooksDriveItemWorkbookFunctionsWeekNumRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsWeekNum")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.weekNum"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1552 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1552 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1552
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsWeekdayRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1551 *InlineObject1551
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsWeekdayRequest) InlineObject1551(inlineObject1551 InlineObject1551) ApiWorkbooksDriveItemWorkbookFunctionsWeekdayRequest {
	r.inlineObject1551 = &inlineObject1551
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsWeekdayRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsWeekdayExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsWeekday Invoke action weekday

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsWeekdayRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsWeekday(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsWeekdayRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsWeekdayRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsWeekdayExecute(r ApiWorkbooksDriveItemWorkbookFunctionsWeekdayRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsWeekday")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.weekday"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1551 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1551 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1551
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsWeibullDistRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1553 *InlineObject1553
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsWeibullDistRequest) InlineObject1553(inlineObject1553 InlineObject1553) ApiWorkbooksDriveItemWorkbookFunctionsWeibullDistRequest {
	r.inlineObject1553 = &inlineObject1553
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsWeibullDistRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsWeibullDistExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsWeibullDist Invoke action weibull_Dist

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsWeibullDistRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsWeibullDist(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsWeibullDistRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsWeibullDistRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsWeibullDistExecute(r ApiWorkbooksDriveItemWorkbookFunctionsWeibullDistRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsWeibullDist")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.weibull_Dist"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1553 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1553 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1553
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsWorkDayRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1554 *InlineObject1554
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsWorkDayRequest) InlineObject1554(inlineObject1554 InlineObject1554) ApiWorkbooksDriveItemWorkbookFunctionsWorkDayRequest {
	r.inlineObject1554 = &inlineObject1554
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsWorkDayRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsWorkDayExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsWorkDay Invoke action workDay

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsWorkDayRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsWorkDay(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsWorkDayRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsWorkDayRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsWorkDayExecute(r ApiWorkbooksDriveItemWorkbookFunctionsWorkDayRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsWorkDay")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.workDay"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1554 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1554 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1554
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsWorkDayIntlRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1555 *InlineObject1555
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsWorkDayIntlRequest) InlineObject1555(inlineObject1555 InlineObject1555) ApiWorkbooksDriveItemWorkbookFunctionsWorkDayIntlRequest {
	r.inlineObject1555 = &inlineObject1555
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsWorkDayIntlRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsWorkDayIntlExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsWorkDayIntl Invoke action workDay_Intl

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsWorkDayIntlRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsWorkDayIntl(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsWorkDayIntlRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsWorkDayIntlRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsWorkDayIntlExecute(r ApiWorkbooksDriveItemWorkbookFunctionsWorkDayIntlRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsWorkDayIntl")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.workDay_Intl"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1555 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1555 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1555
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsXirrRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1556 *InlineObject1556
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsXirrRequest) InlineObject1556(inlineObject1556 InlineObject1556) ApiWorkbooksDriveItemWorkbookFunctionsXirrRequest {
	r.inlineObject1556 = &inlineObject1556
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsXirrRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsXirrExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsXirr Invoke action xirr

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsXirrRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsXirr(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsXirrRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsXirrRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsXirrExecute(r ApiWorkbooksDriveItemWorkbookFunctionsXirrRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsXirr")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.xirr"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1556 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1556 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1556
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsXnpvRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1557 *InlineObject1557
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsXnpvRequest) InlineObject1557(inlineObject1557 InlineObject1557) ApiWorkbooksDriveItemWorkbookFunctionsXnpvRequest {
	r.inlineObject1557 = &inlineObject1557
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsXnpvRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsXnpvExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsXnpv Invoke action xnpv

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsXnpvRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsXnpv(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsXnpvRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsXnpvRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsXnpvExecute(r ApiWorkbooksDriveItemWorkbookFunctionsXnpvRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsXnpv")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.xnpv"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1557 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1557 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1557
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsXorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1558 *InlineObject1558
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsXorRequest) InlineObject1558(inlineObject1558 InlineObject1558) ApiWorkbooksDriveItemWorkbookFunctionsXorRequest {
	r.inlineObject1558 = &inlineObject1558
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsXorRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsXorExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsXor Invoke action xor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsXorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsXor(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsXorRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsXorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsXorExecute(r ApiWorkbooksDriveItemWorkbookFunctionsXorRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsXor")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.xor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1558 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1558 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1558
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsYearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1559 *InlineObject1559
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsYearRequest) InlineObject1559(inlineObject1559 InlineObject1559) ApiWorkbooksDriveItemWorkbookFunctionsYearRequest {
	r.inlineObject1559 = &inlineObject1559
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsYearRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsYearExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsYear Invoke action year

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsYearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsYear(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsYearRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsYearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsYearExecute(r ApiWorkbooksDriveItemWorkbookFunctionsYearRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsYear")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.year"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1559 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1559 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1559
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsYearFracRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1560 *InlineObject1560
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsYearFracRequest) InlineObject1560(inlineObject1560 InlineObject1560) ApiWorkbooksDriveItemWorkbookFunctionsYearFracRequest {
	r.inlineObject1560 = &inlineObject1560
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsYearFracRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsYearFracExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsYearFrac Invoke action yearFrac

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsYearFracRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsYearFrac(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsYearFracRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsYearFracRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsYearFracExecute(r ApiWorkbooksDriveItemWorkbookFunctionsYearFracRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsYearFrac")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.yearFrac"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1560 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1560 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1560
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsYieldRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1561 *InlineObject1561
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsYieldRequest) InlineObject1561(inlineObject1561 InlineObject1561) ApiWorkbooksDriveItemWorkbookFunctionsYieldRequest {
	r.inlineObject1561 = &inlineObject1561
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsYieldRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsYieldExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsYield Invoke action yield

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsYieldRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsYield(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsYieldRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsYieldRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsYieldExecute(r ApiWorkbooksDriveItemWorkbookFunctionsYieldRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsYield")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.yield"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1561 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1561 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1561
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsYieldDiscRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1562 *InlineObject1562
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsYieldDiscRequest) InlineObject1562(inlineObject1562 InlineObject1562) ApiWorkbooksDriveItemWorkbookFunctionsYieldDiscRequest {
	r.inlineObject1562 = &inlineObject1562
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsYieldDiscRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsYieldDiscExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsYieldDisc Invoke action yieldDisc

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsYieldDiscRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsYieldDisc(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsYieldDiscRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsYieldDiscRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsYieldDiscExecute(r ApiWorkbooksDriveItemWorkbookFunctionsYieldDiscRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsYieldDisc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.yieldDisc"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1562 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1562 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1562
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsYieldMatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1563 *InlineObject1563
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsYieldMatRequest) InlineObject1563(inlineObject1563 InlineObject1563) ApiWorkbooksDriveItemWorkbookFunctionsYieldMatRequest {
	r.inlineObject1563 = &inlineObject1563
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsYieldMatRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsYieldMatExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsYieldMat Invoke action yieldMat

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsYieldMatRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsYieldMat(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsYieldMatRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsYieldMatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsYieldMatExecute(r ApiWorkbooksDriveItemWorkbookFunctionsYieldMatRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsYieldMat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.yieldMat"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1563 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1563 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1563
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookFunctionsZTestRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1564 *InlineObject1564
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsZTestRequest) InlineObject1564(inlineObject1564 InlineObject1564) ApiWorkbooksDriveItemWorkbookFunctionsZTestRequest {
	r.inlineObject1564 = &inlineObject1564
	return r
}

func (r ApiWorkbooksDriveItemWorkbookFunctionsZTestRequest) Execute() (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookFunctionsZTestExecute(r)
}

/*
WorkbooksDriveItemWorkbookFunctionsZTest Invoke action z_Test

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookFunctionsZTestRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsZTest(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookFunctionsZTestRequest {
	return ApiWorkbooksDriveItemWorkbookFunctionsZTestRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookFunctionResult
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookFunctionsZTestExecute(r ApiWorkbooksDriveItemWorkbookFunctionsZTestRequest) (AnyOfmicrosoftGraphWorkbookFunctionResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookFunctionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookFunctionsZTest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions/microsoft.graph.z_Test"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1564 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1564 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1564
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1593 *InlineObject1593
}

func (r ApiWorkbooksDriveItemWorkbookNamesAddRequest) InlineObject1593(inlineObject1593 InlineObject1593) ApiWorkbooksDriveItemWorkbookNamesAddRequest {
	r.inlineObject1593 = &inlineObject1593
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookNamesAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesAdd(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookNamesAddRequest {
	return ApiWorkbooksDriveItemWorkbookNamesAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookNamedItem
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesAddExecute(r ApiWorkbooksDriveItemWorkbookNamesAddRequest) (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1593 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1593 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1593
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesAddFormulaLocalRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1594 *InlineObject1594
}

func (r ApiWorkbooksDriveItemWorkbookNamesAddFormulaLocalRequest) InlineObject1594(inlineObject1594 InlineObject1594) ApiWorkbooksDriveItemWorkbookNamesAddFormulaLocalRequest {
	r.inlineObject1594 = &inlineObject1594
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesAddFormulaLocalRequest) Execute() (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesAddFormulaLocalExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesAddFormulaLocal Invoke action addFormulaLocal

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookNamesAddFormulaLocalRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesAddFormulaLocal(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookNamesAddFormulaLocalRequest {
	return ApiWorkbooksDriveItemWorkbookNamesAddFormulaLocalRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookNamedItem
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesAddFormulaLocalExecute(r ApiWorkbooksDriveItemWorkbookNamesAddFormulaLocalRequest) (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesAddFormulaLocal")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/microsoft.graph.addFormulaLocal"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1594 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1594 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1594
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	inlineObject1574 *InlineObject1574
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsAddRequest) InlineObject1574(inlineObject1574 InlineObject1574) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsAddRequest {
	r.inlineObject1574 = &inlineObject1574
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsAdd(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsAddRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChart
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsAddExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsAddRequest) (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1574 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1574 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1574
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisFormatLineClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	inlineObject1566 *InlineObject1566
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest) InlineObject1566(inlineObject1566 InlineObject1566) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest {
	r.inlineObject1566 = &inlineObject1566
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1566 == nil {
		return nil, reportError("inlineObject1566 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1566
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	inlineObject1567 *InlineObject1567
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest) InlineObject1567(inlineObject1567 InlineObject1567) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest {
	r.inlineObject1567 = &inlineObject1567
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1567 == nil {
		return nil, reportError("inlineObject1567 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1567
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	inlineObject1568 *InlineObject1568
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest) InlineObject1568(inlineObject1568 InlineObject1568) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest {
	r.inlineObject1568 = &inlineObject1568
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartLegendFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1568 == nil {
		return nil, reportError("inlineObject1568 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1568
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	inlineObject1571 *InlineObject1571
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest) InlineObject1571(inlineObject1571 InlineObject1571) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest {
	r.inlineObject1571 = &inlineObject1571
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1571 == nil {
		return nil, reportError("inlineObject1571 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1571
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	inlineObject1572 *InlineObject1572
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest) InlineObject1572(inlineObject1572 InlineObject1572) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest {
	r.inlineObject1572 = &inlineObject1572
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1572 == nil {
		return nil, reportError("inlineObject1572 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1572
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetDataRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	inlineObject1569 *InlineObject1569
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetDataRequest) InlineObject1569(inlineObject1569 InlineObject1569) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetDataRequest {
	r.inlineObject1569 = &inlineObject1569
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetDataRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetDataExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetData Invoke action setData

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetDataRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetData(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetDataRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetDataRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetDataExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetDataRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetData")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/microsoft.graph.setData"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1569 == nil {
		return nil, reportError("inlineObject1569 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1569
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetPositionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	inlineObject1570 *InlineObject1570
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetPositionRequest) InlineObject1570(inlineObject1570 InlineObject1570) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetPositionRequest {
	r.inlineObject1570 = &inlineObject1570
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetPositionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetPositionExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetPosition Invoke action setPosition

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetPositionRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetPosition(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetPositionRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetPositionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetPositionExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetPositionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSetPosition")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/microsoft.graph.setPosition"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1570 == nil {
		return nil, reportError("inlineObject1570 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1570
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	inlineObject1573 *InlineObject1573
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest) InlineObject1573(inlineObject1573 InlineObject1573) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest {
	r.inlineObject1573 = &inlineObject1573
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartTitleFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1573 == nil {
		return nil, reportError("inlineObject1573 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1573
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	inlineObject1575 *InlineObject1575
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddRequest) InlineObject1575(inlineObject1575 InlineObject1575) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddRequest {
	r.inlineObject1575 = &inlineObject1575
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAdd(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookNamedItem
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddRequest) (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/names/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1575 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1575 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1575
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddFormulaLocalRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	inlineObject1576 *InlineObject1576
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddFormulaLocalRequest) InlineObject1576(inlineObject1576 InlineObject1576) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddFormulaLocalRequest {
	r.inlineObject1576 = &inlineObject1576
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddFormulaLocalRequest) Execute() (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddFormulaLocalExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddFormulaLocal Invoke action addFormulaLocal

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddFormulaLocalRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddFormulaLocal(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddFormulaLocalRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddFormulaLocalRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookNamedItem
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddFormulaLocalExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddFormulaLocalRequest) (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesAddFormulaLocal")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/names/microsoft.graph.addFormulaLocal"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1576 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1576 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1576
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesRefreshAllRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesRefreshAllRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesRefreshAllExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesRefreshAll Invoke action refreshAll

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesRefreshAllRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesRefreshAll(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesRefreshAllRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesRefreshAllRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesRefreshAllExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesRefreshAllRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesRefreshAll")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables/microsoft.graph.refreshAll"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableRefreshRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookPivotTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableRefreshRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableRefreshExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableRefresh Invoke action refresh

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableRefreshRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableRefresh(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookPivotTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableRefreshRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableRefreshRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableRefreshExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableRefreshRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableRefresh")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables/{workbookPivotTable-id}/microsoft.graph.refresh"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionProtectRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	inlineObject1577 *InlineObject1577
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionProtectRequest) InlineObject1577(inlineObject1577 InlineObject1577) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionProtectRequest {
	r.inlineObject1577 = &inlineObject1577
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionProtectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionProtectExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionProtect Invoke action protect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionProtectRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionProtect(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionProtectRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionProtectRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionProtectExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionProtectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionProtect")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/protection/microsoft.graph.protect"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1577 == nil {
		return nil, reportError("inlineObject1577 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1577
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionUnprotectRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionUnprotectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionUnprotectExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionUnprotect Invoke action unprotect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionUnprotectRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionUnprotect(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionUnprotectRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionUnprotectRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionUnprotectExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionUnprotectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetProtectionUnprotect")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/protection/microsoft.graph.unprotect"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	inlineObject1592 *InlineObject1592
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesAddRequest) InlineObject1592(inlineObject1592 InlineObject1592) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesAddRequest {
	r.inlineObject1592 = &inlineObject1592
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesAdd(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesAddRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTable
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesAddExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesAddRequest) (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1592 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1592 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1592
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableClearFiltersRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableClearFiltersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableClearFiltersExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableClearFilters Invoke action clearFilters

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableClearFiltersRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableClearFilters(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableClearFiltersRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableClearFiltersRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableClearFiltersExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableClearFiltersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableClearFilters")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/microsoft.graph.clearFilters"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	inlineObject1589 *InlineObject1589
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsAddRequest) InlineObject1589(inlineObject1589 InlineObject1589) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsAddRequest {
	r.inlineObject1589 = &inlineObject1589
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsAdd(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsAddRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTableColumn
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsAddExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsAddRequest) (AnyOfmicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1589 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1589 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1589
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1578 *InlineObject1578
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest) InlineObject1578(inlineObject1578 InlineObject1578) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest {
	r.inlineObject1578 = &inlineObject1578
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApply Invoke action apply

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApply(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApply")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.apply"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1578 == nil {
		return nil, reportError("inlineObject1578 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1578
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1579 *InlineObject1579
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest) InlineObject1579(inlineObject1579 InlineObject1579) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest {
	r.inlineObject1579 = &inlineObject1579
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilter Invoke action applyBottomItemsFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilter(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyBottomItemsFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1579 == nil {
		return nil, reportError("inlineObject1579 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1579
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1580 *InlineObject1580
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest) InlineObject1580(inlineObject1580 InlineObject1580) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest {
	r.inlineObject1580 = &inlineObject1580
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilter Invoke action applyBottomPercentFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilter(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyBottomPercentFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1580 == nil {
		return nil, reportError("inlineObject1580 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1580
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1581 *InlineObject1581
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest) InlineObject1581(inlineObject1581 InlineObject1581) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest {
	r.inlineObject1581 = &inlineObject1581
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilter Invoke action applyCellColorFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilter(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyCellColorFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1581 == nil {
		return nil, reportError("inlineObject1581 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1581
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1582 *InlineObject1582
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest) InlineObject1582(inlineObject1582 InlineObject1582) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest {
	r.inlineObject1582 = &inlineObject1582
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilter Invoke action applyCustomFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilter(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyCustomFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1582 == nil {
		return nil, reportError("inlineObject1582 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1582
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1583 *InlineObject1583
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest) InlineObject1583(inlineObject1583 InlineObject1583) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest {
	r.inlineObject1583 = &inlineObject1583
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilter Invoke action applyDynamicFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilter(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyDynamicFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1583 == nil {
		return nil, reportError("inlineObject1583 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1583
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1584 *InlineObject1584
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest) InlineObject1584(inlineObject1584 InlineObject1584) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest {
	r.inlineObject1584 = &inlineObject1584
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilter Invoke action applyFontColorFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilter(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyFontColorFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1584 == nil {
		return nil, reportError("inlineObject1584 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1584
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1585 *InlineObject1585
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest) InlineObject1585(inlineObject1585 InlineObject1585) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest {
	r.inlineObject1585 = &inlineObject1585
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilter Invoke action applyIconFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilter(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyIconFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1585 == nil {
		return nil, reportError("inlineObject1585 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1585
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1586 *InlineObject1586
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest) InlineObject1586(inlineObject1586 InlineObject1586) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest {
	r.inlineObject1586 = &inlineObject1586
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilter Invoke action applyTopItemsFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilter(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyTopItemsFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1586 == nil {
		return nil, reportError("inlineObject1586 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1586
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1587 *InlineObject1587
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest) InlineObject1587(inlineObject1587 InlineObject1587) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest {
	r.inlineObject1587 = &inlineObject1587
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilter Invoke action applyTopPercentFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilter(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyTopPercentFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1587 == nil {
		return nil, reportError("inlineObject1587 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1587
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1588 *InlineObject1588
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest) InlineObject1588(inlineObject1588 InlineObject1588) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest {
	r.inlineObject1588 = &inlineObject1588
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilter Invoke action applyValuesFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilter(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyValuesFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1588 == nil {
		return nil, reportError("inlineObject1588 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1588
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableConvertToRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableConvertToRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableConvertToRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableConvertToRange Invoke action convertToRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableConvertToRangeRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableConvertToRange(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableConvertToRangeRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableConvertToRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableConvertToRangeExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableConvertToRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableConvertToRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/microsoft.graph.convertToRange"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableReapplyFiltersRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableReapplyFiltersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableReapplyFiltersExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableReapplyFilters Invoke action reapplyFilters

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableReapplyFiltersRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableReapplyFilters(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableReapplyFiltersRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableReapplyFiltersRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableReapplyFiltersExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableReapplyFiltersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableReapplyFilters")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/microsoft.graph.reapplyFilters"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	inlineObject1590 *InlineObject1590
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsAddRequest) InlineObject1590(inlineObject1590 InlineObject1590) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsAddRequest {
	r.inlineObject1590 = &inlineObject1590
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsAdd(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsAddRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTableRow
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsAddExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsAddRequest) (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/rows/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1590 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1590 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1590
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortApplyRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	inlineObject1591 *InlineObject1591
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortApplyRequest) InlineObject1591(inlineObject1591 InlineObject1591) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortApplyRequest {
	r.inlineObject1591 = &inlineObject1591
	return r
}

func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortApplyRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortApplyExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortApply Invoke action apply

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortApplyRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortApply(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortApplyRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortApplyRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortApplyExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortApplyRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortApply")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/sort/microsoft.graph.apply"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1591 == nil {
		return nil, reportError("inlineObject1591 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1591
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortClear(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortClearRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortClearExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/sort/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortReapplyRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortReapplyRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortReapplyExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortReapply Invoke action reapply

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortReapplyRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortReapply(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortReapplyRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortReapplyRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortReapplyExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortReapplyRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableSortReapply")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/sort/microsoft.graph.reapply"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookRefreshSessionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemWorkbookRefreshSessionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookRefreshSessionExecute(r)
}

/*
WorkbooksDriveItemWorkbookRefreshSession Invoke action refreshSession

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookRefreshSessionRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookRefreshSession(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookRefreshSessionRequest {
	return ApiWorkbooksDriveItemWorkbookRefreshSessionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookRefreshSessionExecute(r ApiWorkbooksDriveItemWorkbookRefreshSessionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookRefreshSession")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/microsoft.graph.refreshSession"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1622 *InlineObject1622
}

func (r ApiWorkbooksDriveItemWorkbookTablesAddRequest) InlineObject1622(inlineObject1622 InlineObject1622) ApiWorkbooksDriveItemWorkbookTablesAddRequest {
	r.inlineObject1622 = &inlineObject1622
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookTablesAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesAdd(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookTablesAddRequest {
	return ApiWorkbooksDriveItemWorkbookTablesAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTable
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesAddExecute(r ApiWorkbooksDriveItemWorkbookTablesAddRequest) (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1622 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1622 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1622
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableClearFiltersRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableClearFiltersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableClearFiltersExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableClearFilters Invoke action clearFilters

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableClearFiltersRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableClearFilters(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableClearFiltersRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableClearFiltersRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableClearFiltersExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableClearFiltersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableClearFilters")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/microsoft.graph.clearFilters"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	inlineObject1606 *InlineObject1606
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsAddRequest) InlineObject1606(inlineObject1606 InlineObject1606) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsAddRequest {
	r.inlineObject1606 = &inlineObject1606
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsAdd(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsAddRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTableColumn
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsAddExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsAddRequest) (AnyOfmicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1606 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1606 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1606
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1595 *InlineObject1595
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest) InlineObject1595(inlineObject1595 InlineObject1595) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest {
	r.inlineObject1595 = &inlineObject1595
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApply Invoke action apply

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApply(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApply")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.apply"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1595 == nil {
		return nil, reportError("inlineObject1595 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1595
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1596 *InlineObject1596
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest) InlineObject1596(inlineObject1596 InlineObject1596) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest {
	r.inlineObject1596 = &inlineObject1596
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilter Invoke action applyBottomItemsFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilter(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyBottomItemsFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1596 == nil {
		return nil, reportError("inlineObject1596 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1596
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1597 *InlineObject1597
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest) InlineObject1597(inlineObject1597 InlineObject1597) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest {
	r.inlineObject1597 = &inlineObject1597
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilter Invoke action applyBottomPercentFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilter(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyBottomPercentFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1597 == nil {
		return nil, reportError("inlineObject1597 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1597
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1598 *InlineObject1598
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest) InlineObject1598(inlineObject1598 InlineObject1598) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest {
	r.inlineObject1598 = &inlineObject1598
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilter Invoke action applyCellColorFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilter(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyCellColorFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1598 == nil {
		return nil, reportError("inlineObject1598 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1598
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1599 *InlineObject1599
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest) InlineObject1599(inlineObject1599 InlineObject1599) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest {
	r.inlineObject1599 = &inlineObject1599
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilter Invoke action applyCustomFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilter(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyCustomFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1599 == nil {
		return nil, reportError("inlineObject1599 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1599
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1600 *InlineObject1600
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest) InlineObject1600(inlineObject1600 InlineObject1600) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest {
	r.inlineObject1600 = &inlineObject1600
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilter Invoke action applyDynamicFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilter(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyDynamicFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1600 == nil {
		return nil, reportError("inlineObject1600 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1600
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1601 *InlineObject1601
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest) InlineObject1601(inlineObject1601 InlineObject1601) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest {
	r.inlineObject1601 = &inlineObject1601
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilter Invoke action applyFontColorFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilter(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyFontColorFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1601 == nil {
		return nil, reportError("inlineObject1601 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1601
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1602 *InlineObject1602
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest) InlineObject1602(inlineObject1602 InlineObject1602) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest {
	r.inlineObject1602 = &inlineObject1602
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilter Invoke action applyIconFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilter(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyIconFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1602 == nil {
		return nil, reportError("inlineObject1602 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1602
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1603 *InlineObject1603
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest) InlineObject1603(inlineObject1603 InlineObject1603) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest {
	r.inlineObject1603 = &inlineObject1603
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilter Invoke action applyTopItemsFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilter(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyTopItemsFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1603 == nil {
		return nil, reportError("inlineObject1603 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1603
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1604 *InlineObject1604
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest) InlineObject1604(inlineObject1604 InlineObject1604) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest {
	r.inlineObject1604 = &inlineObject1604
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilter Invoke action applyTopPercentFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilter(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyTopPercentFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1604 == nil {
		return nil, reportError("inlineObject1604 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1604
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1605 *InlineObject1605
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest) InlineObject1605(inlineObject1605 InlineObject1605) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest {
	r.inlineObject1605 = &inlineObject1605
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilter Invoke action applyValuesFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilter(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyValuesFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1605 == nil {
		return nil, reportError("inlineObject1605 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1605
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableConvertToRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableConvertToRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableConvertToRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableConvertToRange Invoke action convertToRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableConvertToRangeRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableConvertToRange(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableConvertToRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableConvertToRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableConvertToRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableConvertToRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableConvertToRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/microsoft.graph.convertToRange"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableReapplyFiltersRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableReapplyFiltersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableReapplyFiltersExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableReapplyFilters Invoke action reapplyFilters

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableReapplyFiltersRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableReapplyFilters(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableReapplyFiltersRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableReapplyFiltersRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableReapplyFiltersExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableReapplyFiltersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableReapplyFilters")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/microsoft.graph.reapplyFilters"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	inlineObject1607 *InlineObject1607
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsAddRequest) InlineObject1607(inlineObject1607 InlineObject1607) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsAddRequest {
	r.inlineObject1607 = &inlineObject1607
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableRowsAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableRowsAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableRowsAdd(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsAddRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTableRow
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableRowsAddExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsAddRequest) (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableRowsAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/rows/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1607 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1607 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1607
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortApplyRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	inlineObject1608 *InlineObject1608
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortApplyRequest) InlineObject1608(inlineObject1608 InlineObject1608) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortApplyRequest {
	r.inlineObject1608 = &inlineObject1608
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortApplyRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableSortApplyExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableSortApply Invoke action apply

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortApplyRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableSortApply(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortApplyRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortApplyRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableSortApplyExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortApplyRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableSortApply")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/sort/microsoft.graph.apply"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1608 == nil {
		return nil, reportError("inlineObject1608 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1608
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableSortClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableSortClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableSortClear(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableSortClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableSortClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/sort/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortReapplyRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortReapplyRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableSortReapplyExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableSortReapply Invoke action reapply

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortReapplyRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableSortReapply(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortReapplyRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortReapplyRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableSortReapplyExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableSortReapplyRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableSortReapply")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/sort/microsoft.graph.reapply"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	inlineObject1617 *InlineObject1617
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsAddRequest) InlineObject1617(inlineObject1617 InlineObject1617) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsAddRequest {
	r.inlineObject1617 = &inlineObject1617
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsAdd(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsAddRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChart
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsAddExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsAddRequest) (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1617 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1617 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1617
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisFormatLineClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	inlineObject1609 *InlineObject1609
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest) InlineObject1609(inlineObject1609 InlineObject1609) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest {
	r.inlineObject1609 = &inlineObject1609
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1609 == nil {
		return nil, reportError("inlineObject1609 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1609
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	inlineObject1610 *InlineObject1610
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest) InlineObject1610(inlineObject1610 InlineObject1610) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest {
	r.inlineObject1610 = &inlineObject1610
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1610 == nil {
		return nil, reportError("inlineObject1610 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1610
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	inlineObject1611 *InlineObject1611
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest) InlineObject1611(inlineObject1611 InlineObject1611) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest {
	r.inlineObject1611 = &inlineObject1611
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartLegendFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1611 == nil {
		return nil, reportError("inlineObject1611 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1611
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	inlineObject1614 *InlineObject1614
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest) InlineObject1614(inlineObject1614 InlineObject1614) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest {
	r.inlineObject1614 = &inlineObject1614
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1614 == nil {
		return nil, reportError("inlineObject1614 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1614
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	inlineObject1615 *InlineObject1615
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest) InlineObject1615(inlineObject1615 InlineObject1615) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest {
	r.inlineObject1615 = &inlineObject1615
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1615 == nil {
		return nil, reportError("inlineObject1615 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1615
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetDataRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	inlineObject1612 *InlineObject1612
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetDataRequest) InlineObject1612(inlineObject1612 InlineObject1612) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetDataRequest {
	r.inlineObject1612 = &inlineObject1612
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetDataRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetDataExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetData Invoke action setData

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetDataRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetData(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetDataRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetDataRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetDataExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetDataRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetData")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/microsoft.graph.setData"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1612 == nil {
		return nil, reportError("inlineObject1612 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1612
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetPositionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	inlineObject1613 *InlineObject1613
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetPositionRequest) InlineObject1613(inlineObject1613 InlineObject1613) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetPositionRequest {
	r.inlineObject1613 = &inlineObject1613
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetPositionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetPositionExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetPosition Invoke action setPosition

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetPositionRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetPosition(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetPositionRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetPositionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetPositionExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetPositionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSetPosition")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/microsoft.graph.setPosition"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1613 == nil {
		return nil, reportError("inlineObject1613 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1613
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillClear(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	inlineObject1616 *InlineObject1616
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest) InlineObject1616(inlineObject1616 InlineObject1616) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest {
	r.inlineObject1616 = &inlineObject1616
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartTitleFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1616 == nil {
		return nil, reportError("inlineObject1616 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1616
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	inlineObject1618 *InlineObject1618
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddRequest) InlineObject1618(inlineObject1618 InlineObject1618) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddRequest {
	r.inlineObject1618 = &inlineObject1618
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAdd(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookNamedItem
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddRequest) (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1618 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1618 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1618
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddFormulaLocalRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	inlineObject1619 *InlineObject1619
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddFormulaLocalRequest) InlineObject1619(inlineObject1619 InlineObject1619) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddFormulaLocalRequest {
	r.inlineObject1619 = &inlineObject1619
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddFormulaLocalRequest) Execute() (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddFormulaLocalExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddFormulaLocal Invoke action addFormulaLocal

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddFormulaLocalRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddFormulaLocal(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddFormulaLocalRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddFormulaLocalRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookNamedItem
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddFormulaLocalExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddFormulaLocalRequest) (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesAddFormulaLocal")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/microsoft.graph.addFormulaLocal"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1619 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1619 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1619
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesRefreshAllRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesRefreshAllRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesRefreshAllExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesRefreshAll Invoke action refreshAll

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesRefreshAllRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesRefreshAll(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesRefreshAllRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesRefreshAllRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesRefreshAllExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesRefreshAllRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesRefreshAll")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables/microsoft.graph.refreshAll"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableRefreshRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookPivotTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableRefreshRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableRefreshExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableRefresh Invoke action refresh

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableRefreshRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableRefresh(ctx _context.Context, driveItemId string, workbookTableId string, workbookPivotTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableRefreshRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableRefreshRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableRefreshExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableRefreshRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableRefresh")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables/{workbookPivotTable-id}/microsoft.graph.refresh"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionProtectRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	inlineObject1620 *InlineObject1620
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionProtectRequest) InlineObject1620(inlineObject1620 InlineObject1620) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionProtectRequest {
	r.inlineObject1620 = &inlineObject1620
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionProtectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionProtectExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionProtect Invoke action protect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionProtectRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionProtect(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionProtectRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionProtectRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionProtectExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionProtectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionProtect")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/protection/microsoft.graph.protect"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1620 == nil {
		return nil, reportError("inlineObject1620 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1620
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionUnprotectRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionUnprotectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionUnprotectExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionUnprotect Invoke action unprotect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionUnprotectRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionUnprotect(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionUnprotectRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionUnprotectRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionUnprotectExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionUnprotectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetProtectionUnprotect")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/protection/microsoft.graph.unprotect"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	inlineObject1621 *InlineObject1621
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesAddRequest) InlineObject1621(inlineObject1621 InlineObject1621) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesAddRequest {
	r.inlineObject1621 = &inlineObject1621
	return r
}

func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesAdd(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesAddRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTable
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesAddExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesAddRequest) (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1621 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1621 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1621
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableClearFiltersRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableId1 string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableClearFiltersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableClearFiltersExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableClearFilters Invoke action clearFilters

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableId1 key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableClearFiltersRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableClearFilters(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableId1 string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableClearFiltersRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableClearFiltersRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableId1: workbookTableId1,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableClearFiltersExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableClearFiltersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableClearFilters")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables/{workbookTable-id1}/microsoft.graph.clearFilters"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableConvertToRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableId1 string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableConvertToRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableConvertToRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableConvertToRange Invoke action convertToRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableId1 key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableConvertToRangeRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableConvertToRange(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableId1 string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableConvertToRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableConvertToRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableId1: workbookTableId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableConvertToRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableConvertToRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableConvertToRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables/{workbookTable-id1}/microsoft.graph.convertToRange"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableReapplyFiltersRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookTableId string
	workbookTableId1 string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableReapplyFiltersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableReapplyFiltersExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableReapplyFilters Invoke action reapplyFilters

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableId1 key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableReapplyFiltersRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableReapplyFilters(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableId1 string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableReapplyFiltersRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableReapplyFiltersRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableId1: workbookTableId1,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableReapplyFiltersExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableReapplyFiltersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableReapplyFilters")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables/{workbookTable-id1}/microsoft.graph.reapplyFilters"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	inlineObject1650 *InlineObject1650
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsAddRequest) InlineObject1650(inlineObject1650 InlineObject1650) ApiWorkbooksDriveItemWorkbookWorksheetsAddRequest {
	r.inlineObject1650 = &inlineObject1650
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookWorksheetsAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsAdd(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookWorksheetsAddRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookWorksheet
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsAddExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsAddRequest) (AnyOfmicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1650 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1650 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1650
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	inlineObject1631 *InlineObject1631
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAddRequest) InlineObject1631(inlineObject1631 InlineObject1631) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAddRequest {
	r.inlineObject1631 = &inlineObject1631
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAdd(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAddRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChart
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAddExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAddRequest) (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1631 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1631 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1631
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMajorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesCategoryAxisMinorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMajorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesSeriesAxisMinorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisFormatLineClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMajorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartAxesValueAxisMinorGridlinesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	inlineObject1623 *InlineObject1623
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest) InlineObject1623(inlineObject1623 InlineObject1623) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest {
	r.inlineObject1623 = &inlineObject1623
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartDataLabelsFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1623 == nil {
		return nil, reportError("inlineObject1623 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1623
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	inlineObject1624 *InlineObject1624
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest) InlineObject1624(inlineObject1624 InlineObject1624) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest {
	r.inlineObject1624 = &inlineObject1624
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1624 == nil {
		return nil, reportError("inlineObject1624 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1624
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	inlineObject1625 *InlineObject1625
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest) InlineObject1625(inlineObject1625 InlineObject1625) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest {
	r.inlineObject1625 = &inlineObject1625
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartLegendFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1625 == nil {
		return nil, reportError("inlineObject1625 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1625
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	inlineObject1628 *InlineObject1628
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest) InlineObject1628(inlineObject1628 InlineObject1628) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest {
	r.inlineObject1628 = &inlineObject1628
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1628 == nil {
		return nil, reportError("inlineObject1628 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1628
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesFormatLineClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/line/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	inlineObject1629 *InlineObject1629
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest) InlineObject1629(inlineObject1629 InlineObject1629) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest {
	r.inlineObject1629 = &inlineObject1629
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsWorkbookChartPointFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1629 == nil {
		return nil, reportError("inlineObject1629 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1629
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetDataRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	inlineObject1626 *InlineObject1626
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetDataRequest) InlineObject1626(inlineObject1626 InlineObject1626) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetDataRequest {
	r.inlineObject1626 = &inlineObject1626
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetDataRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetDataExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetData Invoke action setData

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetDataRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetData(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetDataRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetDataRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetDataExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetDataRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetData")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/microsoft.graph.setData"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1626 == nil {
		return nil, reportError("inlineObject1626 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1626
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPositionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	inlineObject1627 *InlineObject1627
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPositionRequest) InlineObject1627(inlineObject1627 InlineObject1627) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPositionRequest {
	r.inlineObject1627 = &inlineObject1627
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPositionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPositionExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPosition Invoke action setPosition

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPositionRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPosition(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPositionRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPositionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPositionExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPositionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPosition")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/microsoft.graph.setPosition"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1627 == nil {
		return nil, reportError("inlineObject1627 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1627
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title/format/fill/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	inlineObject1630 *InlineObject1630
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest) InlineObject1630(inlineObject1630 InlineObject1630) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest {
	r.inlineObject1630 = &inlineObject1630
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColor Invoke action setSolidColor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColor(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColor")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title/format/fill/microsoft.graph.setSolidColor"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1630 == nil {
		return nil, reportError("inlineObject1630 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1630
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	inlineObject1632 *InlineObject1632
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddRequest) InlineObject1632(inlineObject1632 InlineObject1632) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddRequest {
	r.inlineObject1632 = &inlineObject1632
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAdd(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookNamedItem
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddRequest) (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1632 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1632 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1632
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddFormulaLocalRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	inlineObject1633 *InlineObject1633
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddFormulaLocalRequest) InlineObject1633(inlineObject1633 InlineObject1633) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddFormulaLocalRequest {
	r.inlineObject1633 = &inlineObject1633
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddFormulaLocalRequest) Execute() (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddFormulaLocalExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddFormulaLocal Invoke action addFormulaLocal

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddFormulaLocalRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddFormulaLocal(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddFormulaLocalRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddFormulaLocalRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookNamedItem
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddFormulaLocalExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddFormulaLocalRequest) (AnyOfmicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesAddFormulaLocal")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/microsoft.graph.addFormulaLocal"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1633 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1633 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1633
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesRefreshAllRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesRefreshAllRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesRefreshAllExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesRefreshAll Invoke action refreshAll

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesRefreshAllRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesRefreshAll(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesRefreshAllRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesRefreshAllRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesRefreshAllExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesRefreshAllRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesRefreshAll")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables/microsoft.graph.refreshAll"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableRefreshRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookPivotTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableRefreshRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableRefreshExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableRefresh Invoke action refresh

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableRefreshRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableRefresh(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookPivotTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableRefreshRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableRefreshRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableRefreshExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableRefreshRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableRefresh")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables/{workbookPivotTable-id}/microsoft.graph.refresh"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtectRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	inlineObject1634 *InlineObject1634
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtectRequest) InlineObject1634(inlineObject1634 InlineObject1634) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtectRequest {
	r.inlineObject1634 = &inlineObject1634
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtectExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtect Invoke action protect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtectRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtect(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtectRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtectRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtectExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtect")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/protection/microsoft.graph.protect"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1634 == nil {
		return nil, reportError("inlineObject1634 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1634
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionUnprotectRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionUnprotectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionUnprotectExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionUnprotect Invoke action unprotect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionUnprotectRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionUnprotect(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionUnprotectRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionUnprotectRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionUnprotectExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionUnprotectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionUnprotect")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/protection/microsoft.graph.unprotect"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	inlineObject1649 *InlineObject1649
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesAddRequest) InlineObject1649(inlineObject1649 InlineObject1649) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesAddRequest {
	r.inlineObject1649 = &inlineObject1649
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesAdd(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesAddRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTable
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesAddExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesAddRequest) (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1649 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1649 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1649
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableClearFiltersRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableClearFiltersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableClearFiltersExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableClearFilters Invoke action clearFilters

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableClearFiltersRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableClearFilters(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableClearFiltersRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableClearFiltersRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableClearFiltersExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableClearFiltersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableClearFilters")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/microsoft.graph.clearFilters"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	inlineObject1646 *InlineObject1646
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddRequest) InlineObject1646(inlineObject1646 InlineObject1646) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddRequest {
	r.inlineObject1646 = &inlineObject1646
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTableColumn
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddRequest) (AnyOfmicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1646 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1646 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1646
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1635 *InlineObject1635
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest) InlineObject1635(inlineObject1635 InlineObject1635) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest {
	r.inlineObject1635 = &inlineObject1635
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApply Invoke action apply

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApply(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApply")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.apply"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1635 == nil {
		return nil, reportError("inlineObject1635 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1635
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1636 *InlineObject1636
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest) InlineObject1636(inlineObject1636 InlineObject1636) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest {
	r.inlineObject1636 = &inlineObject1636
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilter Invoke action applyBottomItemsFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilter(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomItemsFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyBottomItemsFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1636 == nil {
		return nil, reportError("inlineObject1636 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1636
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1637 *InlineObject1637
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest) InlineObject1637(inlineObject1637 InlineObject1637) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest {
	r.inlineObject1637 = &inlineObject1637
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilter Invoke action applyBottomPercentFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilter(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyBottomPercentFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1637 == nil {
		return nil, reportError("inlineObject1637 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1637
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1638 *InlineObject1638
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest) InlineObject1638(inlineObject1638 InlineObject1638) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest {
	r.inlineObject1638 = &inlineObject1638
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilter Invoke action applyCellColorFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilter(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCellColorFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyCellColorFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1638 == nil {
		return nil, reportError("inlineObject1638 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1638
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1639 *InlineObject1639
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest) InlineObject1639(inlineObject1639 InlineObject1639) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest {
	r.inlineObject1639 = &inlineObject1639
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilter Invoke action applyCustomFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilter(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyCustomFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1639 == nil {
		return nil, reportError("inlineObject1639 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1639
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1640 *InlineObject1640
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest) InlineObject1640(inlineObject1640 InlineObject1640) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest {
	r.inlineObject1640 = &inlineObject1640
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilter Invoke action applyDynamicFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilter(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyDynamicFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1640 == nil {
		return nil, reportError("inlineObject1640 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1640
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1641 *InlineObject1641
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest) InlineObject1641(inlineObject1641 InlineObject1641) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest {
	r.inlineObject1641 = &inlineObject1641
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilter Invoke action applyFontColorFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilter(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyFontColorFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyFontColorFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1641 == nil {
		return nil, reportError("inlineObject1641 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1641
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1642 *InlineObject1642
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest) InlineObject1642(inlineObject1642 InlineObject1642) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest {
	r.inlineObject1642 = &inlineObject1642
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilter Invoke action applyIconFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilter(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyIconFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1642 == nil {
		return nil, reportError("inlineObject1642 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1642
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1643 *InlineObject1643
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest) InlineObject1643(inlineObject1643 InlineObject1643) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest {
	r.inlineObject1643 = &inlineObject1643
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilter Invoke action applyTopItemsFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilter(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyTopItemsFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1643 == nil {
		return nil, reportError("inlineObject1643 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1643
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1644 *InlineObject1644
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest) InlineObject1644(inlineObject1644 InlineObject1644) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest {
	r.inlineObject1644 = &inlineObject1644
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilter Invoke action applyTopPercentFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilter(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopPercentFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyTopPercentFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1644 == nil {
		return nil, reportError("inlineObject1644 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1644
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	inlineObject1645 *InlineObject1645
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest) InlineObject1645(inlineObject1645 InlineObject1645) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest {
	r.inlineObject1645 = &inlineObject1645
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilter Invoke action applyValuesFilter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilter(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyValuesFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.applyValuesFilter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1645 == nil {
		return nil, reportError("inlineObject1645 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1645
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableConvertToRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableConvertToRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableConvertToRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableConvertToRange Invoke action convertToRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableConvertToRangeRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableConvertToRange(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableConvertToRangeRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableConvertToRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableConvertToRangeExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableConvertToRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableConvertToRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/microsoft.graph.convertToRange"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableReapplyFiltersRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableReapplyFiltersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableReapplyFiltersExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableReapplyFilters Invoke action reapplyFilters

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableReapplyFiltersRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableReapplyFilters(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableReapplyFiltersRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableReapplyFiltersRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableReapplyFiltersExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableReapplyFiltersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableReapplyFilters")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/microsoft.graph.reapplyFilters"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	inlineObject1647 *InlineObject1647
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddRequest) InlineObject1647(inlineObject1647 InlineObject1647) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddRequest {
	r.inlineObject1647 = &inlineObject1647
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddRequest) Execute() (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAdd(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTableRow
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddRequest) (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/rows/microsoft.graph.add"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1647 == nil {
		return localVarReturnValue, nil, reportError("inlineObject1647 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1647
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortApplyRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	inlineObject1648 *InlineObject1648
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortApplyRequest) InlineObject1648(inlineObject1648 InlineObject1648) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortApplyRequest {
	r.inlineObject1648 = &inlineObject1648
	return r
}

func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortApplyRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortApplyExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortApply Invoke action apply

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortApplyRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortApply(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortApplyRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortApplyRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortApplyExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortApplyRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortApply")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/sort/microsoft.graph.apply"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject1648 == nil {
		return nil, reportError("inlineObject1648 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject1648
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortClearRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortClearRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortClearExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortClear Invoke action clear

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortClearRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortClear(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortClearRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortClearRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortClearExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortClearRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortClear")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/sort/microsoft.graph.clear"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortReapplyRequest struct {
	ctx _context.Context
	ApiService *WorkbooksActionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortReapplyRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortReapplyExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortReapply Invoke action reapply

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortReapplyRequest
*/
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortReapply(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortReapplyRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortReapplyRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksActionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortReapplyExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortReapplyRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksActionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableSortReapply")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/sort/microsoft.graph.reapply"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
