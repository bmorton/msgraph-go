/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphInitiatorType the model 'MicrosoftGraphInitiatorType'
type MicrosoftGraphInitiatorType string

// List of microsoft.graph.initiatorType
const (
	USER MicrosoftGraphInitiatorType = "user"
	APPLICATION MicrosoftGraphInitiatorType = "application"
	SYSTEM MicrosoftGraphInitiatorType = "system"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphInitiatorType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphInitiatorType enum
var AllowedMicrosoftGraphInitiatorTypeEnumValues = []MicrosoftGraphInitiatorType{
	"user",
	"application",
	"system",
	"unknownFutureValue",
}

func (v *MicrosoftGraphInitiatorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphInitiatorType(value)
	for _, existing := range AllowedMicrosoftGraphInitiatorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphInitiatorType", value)
}

// NewMicrosoftGraphInitiatorTypeFromValue returns a pointer to a valid MicrosoftGraphInitiatorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphInitiatorTypeFromValue(v string) (*MicrosoftGraphInitiatorType, error) {
	ev := MicrosoftGraphInitiatorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphInitiatorType: valid values are %v", v, AllowedMicrosoftGraphInitiatorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphInitiatorType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphInitiatorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.initiatorType value
func (v MicrosoftGraphInitiatorType) Ptr() *MicrosoftGraphInitiatorType {
	return &v
}

type NullableMicrosoftGraphInitiatorType struct {
	value *MicrosoftGraphInitiatorType
	isSet bool
}

func (v NullableMicrosoftGraphInitiatorType) Get() *MicrosoftGraphInitiatorType {
	return v.value
}

func (v *NullableMicrosoftGraphInitiatorType) Set(val *MicrosoftGraphInitiatorType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphInitiatorType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphInitiatorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphInitiatorType(val *MicrosoftGraphInitiatorType) *NullableMicrosoftGraphInitiatorType {
	return &NullableMicrosoftGraphInitiatorType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphInitiatorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphInitiatorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

