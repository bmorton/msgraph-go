/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// TeamworkConversationIdentity struct for TeamworkConversationIdentity
type TeamworkConversationIdentity struct {
	// Type of conversation. Possible values are: team, channel, chat, and unknownFutureValue.
	ConversationIdentityType AnyOfmicrosoftGraphTeamworkConversationIdentityType `json:"conversationIdentityType,omitempty"`
}

// NewTeamworkConversationIdentity instantiates a new TeamworkConversationIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamworkConversationIdentity() *TeamworkConversationIdentity {
	this := TeamworkConversationIdentity{}
	return &this
}

// NewTeamworkConversationIdentityWithDefaults instantiates a new TeamworkConversationIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamworkConversationIdentityWithDefaults() *TeamworkConversationIdentity {
	this := TeamworkConversationIdentity{}
	return &this
}

// GetConversationIdentityType returns the ConversationIdentityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamworkConversationIdentity) GetConversationIdentityType() AnyOfmicrosoftGraphTeamworkConversationIdentityType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphTeamworkConversationIdentityType
		return ret
	}
	return o.ConversationIdentityType
}

// GetConversationIdentityTypeOk returns a tuple with the ConversationIdentityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamworkConversationIdentity) GetConversationIdentityTypeOk() (*AnyOfmicrosoftGraphTeamworkConversationIdentityType, bool) {
	if o == nil || o.ConversationIdentityType == nil {
		return nil, false
	}
	return &o.ConversationIdentityType, true
}

// HasConversationIdentityType returns a boolean if a field has been set.
func (o *TeamworkConversationIdentity) HasConversationIdentityType() bool {
	if o != nil && o.ConversationIdentityType != nil {
		return true
	}

	return false
}

// SetConversationIdentityType gets a reference to the given AnyOfmicrosoftGraphTeamworkConversationIdentityType and assigns it to the ConversationIdentityType field.
func (o *TeamworkConversationIdentity) SetConversationIdentityType(v AnyOfmicrosoftGraphTeamworkConversationIdentityType) {
	o.ConversationIdentityType = v
}

func (o TeamworkConversationIdentity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConversationIdentityType != nil {
		toSerialize["conversationIdentityType"] = o.ConversationIdentityType
	}
	return json.Marshal(toSerialize)
}

type NullableTeamworkConversationIdentity struct {
	value *TeamworkConversationIdentity
	isSet bool
}

func (v NullableTeamworkConversationIdentity) Get() *TeamworkConversationIdentity {
	return v.value
}

func (v *NullableTeamworkConversationIdentity) Set(val *TeamworkConversationIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamworkConversationIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamworkConversationIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamworkConversationIdentity(val *TeamworkConversationIdentity) *NullableTeamworkConversationIdentity {
	return &NullableTeamworkConversationIdentity{value: val, isSet: true}
}

func (v NullableTeamworkConversationIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamworkConversationIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


