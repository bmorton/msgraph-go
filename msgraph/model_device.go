/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Device struct for Device
type Device struct {
	// true if the account is enabled; otherwise, false. Required. Default is true.  Supports $filter (eq, ne, not, in). Only callers in Global Administrator and Cloud Device Administrator roles can set this property.
	AccountEnabled NullableBool `json:"accountEnabled,omitempty"`
	// For internal use only. Not nullable. Supports $filter (eq, not, ge, le).
	AlternativeSecurityIds *[]MicrosoftGraphAlternativeSecurityId `json:"alternativeSecurityIds,omitempty"`
	// The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Supports $filter (eq, ne, not, ge, le, and eq on null values) and $orderBy.
	ApproximateLastSignInDateTime NullableTime `json:"approximateLastSignInDateTime,omitempty"`
	// The timestamp when the device is no longer deemed compliant. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	ComplianceExpirationDateTime NullableTime `json:"complianceExpirationDateTime,omitempty"`
	// Unique identifier set by Azure Device Registration Service at the time of registration. Supports $filter (eq, ne, not, startsWith).
	DeviceId NullableString `json:"deviceId,omitempty"`
	// For internal use only. Set to null.
	DeviceMetadata NullableString `json:"deviceMetadata,omitempty"`
	// For internal use only.
	DeviceVersion NullableInt32 `json:"deviceVersion,omitempty"`
	// The display name for the device. Required. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderBy.
	DisplayName NullableString `json:"displayName,omitempty"`
	// true if the device complies with Mobile Device Management (MDM) policies; otherwise, false. Read-only. This can only be updated by Intune for any device OS type or by an approved MDM app for Windows OS devices. Supports $filter (eq, ne, not).
	IsCompliant NullableBool `json:"isCompliant,omitempty"`
	// true if the device is managed by a Mobile Device Management (MDM) app; otherwise, false. This can only be updated by Intune for any device OS type or by an approved MDM app for Windows OS devices. Supports $filter (eq, ne, not).
	IsManaged NullableBool `json:"isManaged,omitempty"`
	// Application identifier used to register device into MDM. Read-only. Supports $filter (eq, ne, not, startsWith).
	MdmAppId NullableString `json:"mdmAppId,omitempty"`
	// The last time at which the object was synced with the on-premises directory. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Read-only. Supports $filter (eq, ne, not, ge, le, in).
	OnPremisesLastSyncDateTime NullableTime `json:"onPremisesLastSyncDateTime,omitempty"`
	// true if this object is synced from an on-premises directory; false if this object was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Read-only. Supports $filter (eq, ne, not, in, and eq on null values).
	OnPremisesSyncEnabled NullableBool `json:"onPremisesSyncEnabled,omitempty"`
	// The type of operating system on the device. Required. Supports $filter (eq, ne, not, ge, le, startsWith, and eq on null values).
	OperatingSystem NullableString `json:"operatingSystem,omitempty"`
	// The version of the operating system on the device. Required. Supports $filter (eq, ne, not, ge, le, startsWith, and eq on null values).
	OperatingSystemVersion NullableString `json:"operatingSystemVersion,omitempty"`
	// For internal use only. Not nullable. Supports $filter (eq, not, ge, le, startsWith).
	PhysicalIds *[]string `json:"physicalIds,omitempty"`
	// The profile type of the device. Possible values: RegisteredDevice (default), SecureVM, Printer, Shared, IoT.
	ProfileType NullableString `json:"profileType,omitempty"`
	// List of labels applied to the device by the system.
	SystemLabels *[]string `json:"systemLabels,omitempty"`
	// Type of trust for the joined device. Read-only. Possible values:  Workplace (indicates bring your own personal devices), AzureAd (Cloud only joined devices), ServerAd (on-premises domain joined devices joined to Azure AD). For more details, see Introduction to device management in Azure Active Directory
	TrustType NullableString `json:"trustType,omitempty"`
	// Groups that this device is a member of. Read-only. Nullable. Supports $expand.
	MemberOf *[]MicrosoftGraphDirectoryObject `json:"memberOf,omitempty"`
	// The user that cloud joined the device or registered their personal device. The registered owner is set at the time of registration. Currently, there can be only one owner. Read-only. Nullable. Supports $expand.
	RegisteredOwners *[]MicrosoftGraphDirectoryObject `json:"registeredOwners,omitempty"`
	// Collection of registered users of the device. For cloud joined devices and registered personal devices, registered users are set to the same value as registered owners at the time of registration. Read-only. Nullable. Supports $expand.
	RegisteredUsers *[]MicrosoftGraphDirectoryObject `json:"registeredUsers,omitempty"`
	// Groups that the device is a member of. This operation is transitive. Supports $expand.
	TransitiveMemberOf *[]MicrosoftGraphDirectoryObject `json:"transitiveMemberOf,omitempty"`
	// The collection of open extensions defined for the device. Read-only. Nullable.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`
}

// NewDevice instantiates a new Device object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevice() *Device {
	this := Device{}
	return &this
}

// NewDeviceWithDefaults instantiates a new Device object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceWithDefaults() *Device {
	this := Device{}
	return &this
}

// GetAccountEnabled returns the AccountEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetAccountEnabled() bool {
	if o == nil || o.AccountEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AccountEnabled.Get()
}

// GetAccountEnabledOk returns a tuple with the AccountEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetAccountEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountEnabled.Get(), o.AccountEnabled.IsSet()
}

// HasAccountEnabled returns a boolean if a field has been set.
func (o *Device) HasAccountEnabled() bool {
	if o != nil && o.AccountEnabled.IsSet() {
		return true
	}

	return false
}

// SetAccountEnabled gets a reference to the given NullableBool and assigns it to the AccountEnabled field.
func (o *Device) SetAccountEnabled(v bool) {
	o.AccountEnabled.Set(&v)
}
// SetAccountEnabledNil sets the value for AccountEnabled to be an explicit nil
func (o *Device) SetAccountEnabledNil() {
	o.AccountEnabled.Set(nil)
}

// UnsetAccountEnabled ensures that no value is present for AccountEnabled, not even an explicit nil
func (o *Device) UnsetAccountEnabled() {
	o.AccountEnabled.Unset()
}

// GetAlternativeSecurityIds returns the AlternativeSecurityIds field value if set, zero value otherwise.
func (o *Device) GetAlternativeSecurityIds() []MicrosoftGraphAlternativeSecurityId {
	if o == nil || o.AlternativeSecurityIds == nil {
		var ret []MicrosoftGraphAlternativeSecurityId
		return ret
	}
	return *o.AlternativeSecurityIds
}

// GetAlternativeSecurityIdsOk returns a tuple with the AlternativeSecurityIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetAlternativeSecurityIdsOk() (*[]MicrosoftGraphAlternativeSecurityId, bool) {
	if o == nil || o.AlternativeSecurityIds == nil {
		return nil, false
	}
	return o.AlternativeSecurityIds, true
}

// HasAlternativeSecurityIds returns a boolean if a field has been set.
func (o *Device) HasAlternativeSecurityIds() bool {
	if o != nil && o.AlternativeSecurityIds != nil {
		return true
	}

	return false
}

// SetAlternativeSecurityIds gets a reference to the given []MicrosoftGraphAlternativeSecurityId and assigns it to the AlternativeSecurityIds field.
func (o *Device) SetAlternativeSecurityIds(v []MicrosoftGraphAlternativeSecurityId) {
	o.AlternativeSecurityIds = &v
}

// GetApproximateLastSignInDateTime returns the ApproximateLastSignInDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetApproximateLastSignInDateTime() time.Time {
	if o == nil || o.ApproximateLastSignInDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ApproximateLastSignInDateTime.Get()
}

// GetApproximateLastSignInDateTimeOk returns a tuple with the ApproximateLastSignInDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetApproximateLastSignInDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApproximateLastSignInDateTime.Get(), o.ApproximateLastSignInDateTime.IsSet()
}

// HasApproximateLastSignInDateTime returns a boolean if a field has been set.
func (o *Device) HasApproximateLastSignInDateTime() bool {
	if o != nil && o.ApproximateLastSignInDateTime.IsSet() {
		return true
	}

	return false
}

// SetApproximateLastSignInDateTime gets a reference to the given NullableTime and assigns it to the ApproximateLastSignInDateTime field.
func (o *Device) SetApproximateLastSignInDateTime(v time.Time) {
	o.ApproximateLastSignInDateTime.Set(&v)
}
// SetApproximateLastSignInDateTimeNil sets the value for ApproximateLastSignInDateTime to be an explicit nil
func (o *Device) SetApproximateLastSignInDateTimeNil() {
	o.ApproximateLastSignInDateTime.Set(nil)
}

// UnsetApproximateLastSignInDateTime ensures that no value is present for ApproximateLastSignInDateTime, not even an explicit nil
func (o *Device) UnsetApproximateLastSignInDateTime() {
	o.ApproximateLastSignInDateTime.Unset()
}

// GetComplianceExpirationDateTime returns the ComplianceExpirationDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetComplianceExpirationDateTime() time.Time {
	if o == nil || o.ComplianceExpirationDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ComplianceExpirationDateTime.Get()
}

// GetComplianceExpirationDateTimeOk returns a tuple with the ComplianceExpirationDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetComplianceExpirationDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ComplianceExpirationDateTime.Get(), o.ComplianceExpirationDateTime.IsSet()
}

// HasComplianceExpirationDateTime returns a boolean if a field has been set.
func (o *Device) HasComplianceExpirationDateTime() bool {
	if o != nil && o.ComplianceExpirationDateTime.IsSet() {
		return true
	}

	return false
}

// SetComplianceExpirationDateTime gets a reference to the given NullableTime and assigns it to the ComplianceExpirationDateTime field.
func (o *Device) SetComplianceExpirationDateTime(v time.Time) {
	o.ComplianceExpirationDateTime.Set(&v)
}
// SetComplianceExpirationDateTimeNil sets the value for ComplianceExpirationDateTime to be an explicit nil
func (o *Device) SetComplianceExpirationDateTimeNil() {
	o.ComplianceExpirationDateTime.Set(nil)
}

// UnsetComplianceExpirationDateTime ensures that no value is present for ComplianceExpirationDateTime, not even an explicit nil
func (o *Device) UnsetComplianceExpirationDateTime() {
	o.ComplianceExpirationDateTime.Unset()
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetDeviceId() string {
	if o == nil || o.DeviceId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DeviceId.Get()
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetDeviceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeviceId.Get(), o.DeviceId.IsSet()
}

// HasDeviceId returns a boolean if a field has been set.
func (o *Device) HasDeviceId() bool {
	if o != nil && o.DeviceId.IsSet() {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given NullableString and assigns it to the DeviceId field.
func (o *Device) SetDeviceId(v string) {
	o.DeviceId.Set(&v)
}
// SetDeviceIdNil sets the value for DeviceId to be an explicit nil
func (o *Device) SetDeviceIdNil() {
	o.DeviceId.Set(nil)
}

// UnsetDeviceId ensures that no value is present for DeviceId, not even an explicit nil
func (o *Device) UnsetDeviceId() {
	o.DeviceId.Unset()
}

// GetDeviceMetadata returns the DeviceMetadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetDeviceMetadata() string {
	if o == nil || o.DeviceMetadata.Get() == nil {
		var ret string
		return ret
	}
	return *o.DeviceMetadata.Get()
}

// GetDeviceMetadataOk returns a tuple with the DeviceMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetDeviceMetadataOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeviceMetadata.Get(), o.DeviceMetadata.IsSet()
}

// HasDeviceMetadata returns a boolean if a field has been set.
func (o *Device) HasDeviceMetadata() bool {
	if o != nil && o.DeviceMetadata.IsSet() {
		return true
	}

	return false
}

// SetDeviceMetadata gets a reference to the given NullableString and assigns it to the DeviceMetadata field.
func (o *Device) SetDeviceMetadata(v string) {
	o.DeviceMetadata.Set(&v)
}
// SetDeviceMetadataNil sets the value for DeviceMetadata to be an explicit nil
func (o *Device) SetDeviceMetadataNil() {
	o.DeviceMetadata.Set(nil)
}

// UnsetDeviceMetadata ensures that no value is present for DeviceMetadata, not even an explicit nil
func (o *Device) UnsetDeviceMetadata() {
	o.DeviceMetadata.Unset()
}

// GetDeviceVersion returns the DeviceVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetDeviceVersion() int32 {
	if o == nil || o.DeviceVersion.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DeviceVersion.Get()
}

// GetDeviceVersionOk returns a tuple with the DeviceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetDeviceVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeviceVersion.Get(), o.DeviceVersion.IsSet()
}

// HasDeviceVersion returns a boolean if a field has been set.
func (o *Device) HasDeviceVersion() bool {
	if o != nil && o.DeviceVersion.IsSet() {
		return true
	}

	return false
}

// SetDeviceVersion gets a reference to the given NullableInt32 and assigns it to the DeviceVersion field.
func (o *Device) SetDeviceVersion(v int32) {
	o.DeviceVersion.Set(&v)
}
// SetDeviceVersionNil sets the value for DeviceVersion to be an explicit nil
func (o *Device) SetDeviceVersionNil() {
	o.DeviceVersion.Set(nil)
}

// UnsetDeviceVersion ensures that no value is present for DeviceVersion, not even an explicit nil
func (o *Device) UnsetDeviceVersion() {
	o.DeviceVersion.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Device) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *Device) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *Device) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *Device) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetIsCompliant returns the IsCompliant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetIsCompliant() bool {
	if o == nil || o.IsCompliant.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsCompliant.Get()
}

// GetIsCompliantOk returns a tuple with the IsCompliant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetIsCompliantOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsCompliant.Get(), o.IsCompliant.IsSet()
}

// HasIsCompliant returns a boolean if a field has been set.
func (o *Device) HasIsCompliant() bool {
	if o != nil && o.IsCompliant.IsSet() {
		return true
	}

	return false
}

// SetIsCompliant gets a reference to the given NullableBool and assigns it to the IsCompliant field.
func (o *Device) SetIsCompliant(v bool) {
	o.IsCompliant.Set(&v)
}
// SetIsCompliantNil sets the value for IsCompliant to be an explicit nil
func (o *Device) SetIsCompliantNil() {
	o.IsCompliant.Set(nil)
}

// UnsetIsCompliant ensures that no value is present for IsCompliant, not even an explicit nil
func (o *Device) UnsetIsCompliant() {
	o.IsCompliant.Unset()
}

// GetIsManaged returns the IsManaged field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetIsManaged() bool {
	if o == nil || o.IsManaged.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsManaged.Get()
}

// GetIsManagedOk returns a tuple with the IsManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetIsManagedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsManaged.Get(), o.IsManaged.IsSet()
}

// HasIsManaged returns a boolean if a field has been set.
func (o *Device) HasIsManaged() bool {
	if o != nil && o.IsManaged.IsSet() {
		return true
	}

	return false
}

// SetIsManaged gets a reference to the given NullableBool and assigns it to the IsManaged field.
func (o *Device) SetIsManaged(v bool) {
	o.IsManaged.Set(&v)
}
// SetIsManagedNil sets the value for IsManaged to be an explicit nil
func (o *Device) SetIsManagedNil() {
	o.IsManaged.Set(nil)
}

// UnsetIsManaged ensures that no value is present for IsManaged, not even an explicit nil
func (o *Device) UnsetIsManaged() {
	o.IsManaged.Unset()
}

// GetMdmAppId returns the MdmAppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetMdmAppId() string {
	if o == nil || o.MdmAppId.Get() == nil {
		var ret string
		return ret
	}
	return *o.MdmAppId.Get()
}

// GetMdmAppIdOk returns a tuple with the MdmAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetMdmAppIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MdmAppId.Get(), o.MdmAppId.IsSet()
}

// HasMdmAppId returns a boolean if a field has been set.
func (o *Device) HasMdmAppId() bool {
	if o != nil && o.MdmAppId.IsSet() {
		return true
	}

	return false
}

// SetMdmAppId gets a reference to the given NullableString and assigns it to the MdmAppId field.
func (o *Device) SetMdmAppId(v string) {
	o.MdmAppId.Set(&v)
}
// SetMdmAppIdNil sets the value for MdmAppId to be an explicit nil
func (o *Device) SetMdmAppIdNil() {
	o.MdmAppId.Set(nil)
}

// UnsetMdmAppId ensures that no value is present for MdmAppId, not even an explicit nil
func (o *Device) UnsetMdmAppId() {
	o.MdmAppId.Unset()
}

// GetOnPremisesLastSyncDateTime returns the OnPremisesLastSyncDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetOnPremisesLastSyncDateTime() time.Time {
	if o == nil || o.OnPremisesLastSyncDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.OnPremisesLastSyncDateTime.Get()
}

// GetOnPremisesLastSyncDateTimeOk returns a tuple with the OnPremisesLastSyncDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetOnPremisesLastSyncDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesLastSyncDateTime.Get(), o.OnPremisesLastSyncDateTime.IsSet()
}

// HasOnPremisesLastSyncDateTime returns a boolean if a field has been set.
func (o *Device) HasOnPremisesLastSyncDateTime() bool {
	if o != nil && o.OnPremisesLastSyncDateTime.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesLastSyncDateTime gets a reference to the given NullableTime and assigns it to the OnPremisesLastSyncDateTime field.
func (o *Device) SetOnPremisesLastSyncDateTime(v time.Time) {
	o.OnPremisesLastSyncDateTime.Set(&v)
}
// SetOnPremisesLastSyncDateTimeNil sets the value for OnPremisesLastSyncDateTime to be an explicit nil
func (o *Device) SetOnPremisesLastSyncDateTimeNil() {
	o.OnPremisesLastSyncDateTime.Set(nil)
}

// UnsetOnPremisesLastSyncDateTime ensures that no value is present for OnPremisesLastSyncDateTime, not even an explicit nil
func (o *Device) UnsetOnPremisesLastSyncDateTime() {
	o.OnPremisesLastSyncDateTime.Unset()
}

// GetOnPremisesSyncEnabled returns the OnPremisesSyncEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetOnPremisesSyncEnabled() bool {
	if o == nil || o.OnPremisesSyncEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OnPremisesSyncEnabled.Get()
}

// GetOnPremisesSyncEnabledOk returns a tuple with the OnPremisesSyncEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetOnPremisesSyncEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesSyncEnabled.Get(), o.OnPremisesSyncEnabled.IsSet()
}

// HasOnPremisesSyncEnabled returns a boolean if a field has been set.
func (o *Device) HasOnPremisesSyncEnabled() bool {
	if o != nil && o.OnPremisesSyncEnabled.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesSyncEnabled gets a reference to the given NullableBool and assigns it to the OnPremisesSyncEnabled field.
func (o *Device) SetOnPremisesSyncEnabled(v bool) {
	o.OnPremisesSyncEnabled.Set(&v)
}
// SetOnPremisesSyncEnabledNil sets the value for OnPremisesSyncEnabled to be an explicit nil
func (o *Device) SetOnPremisesSyncEnabledNil() {
	o.OnPremisesSyncEnabled.Set(nil)
}

// UnsetOnPremisesSyncEnabled ensures that no value is present for OnPremisesSyncEnabled, not even an explicit nil
func (o *Device) UnsetOnPremisesSyncEnabled() {
	o.OnPremisesSyncEnabled.Unset()
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetOperatingSystem() string {
	if o == nil || o.OperatingSystem.Get() == nil {
		var ret string
		return ret
	}
	return *o.OperatingSystem.Get()
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetOperatingSystemOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OperatingSystem.Get(), o.OperatingSystem.IsSet()
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *Device) HasOperatingSystem() bool {
	if o != nil && o.OperatingSystem.IsSet() {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given NullableString and assigns it to the OperatingSystem field.
func (o *Device) SetOperatingSystem(v string) {
	o.OperatingSystem.Set(&v)
}
// SetOperatingSystemNil sets the value for OperatingSystem to be an explicit nil
func (o *Device) SetOperatingSystemNil() {
	o.OperatingSystem.Set(nil)
}

// UnsetOperatingSystem ensures that no value is present for OperatingSystem, not even an explicit nil
func (o *Device) UnsetOperatingSystem() {
	o.OperatingSystem.Unset()
}

// GetOperatingSystemVersion returns the OperatingSystemVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetOperatingSystemVersion() string {
	if o == nil || o.OperatingSystemVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.OperatingSystemVersion.Get()
}

// GetOperatingSystemVersionOk returns a tuple with the OperatingSystemVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetOperatingSystemVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OperatingSystemVersion.Get(), o.OperatingSystemVersion.IsSet()
}

// HasOperatingSystemVersion returns a boolean if a field has been set.
func (o *Device) HasOperatingSystemVersion() bool {
	if o != nil && o.OperatingSystemVersion.IsSet() {
		return true
	}

	return false
}

// SetOperatingSystemVersion gets a reference to the given NullableString and assigns it to the OperatingSystemVersion field.
func (o *Device) SetOperatingSystemVersion(v string) {
	o.OperatingSystemVersion.Set(&v)
}
// SetOperatingSystemVersionNil sets the value for OperatingSystemVersion to be an explicit nil
func (o *Device) SetOperatingSystemVersionNil() {
	o.OperatingSystemVersion.Set(nil)
}

// UnsetOperatingSystemVersion ensures that no value is present for OperatingSystemVersion, not even an explicit nil
func (o *Device) UnsetOperatingSystemVersion() {
	o.OperatingSystemVersion.Unset()
}

// GetPhysicalIds returns the PhysicalIds field value if set, zero value otherwise.
func (o *Device) GetPhysicalIds() []string {
	if o == nil || o.PhysicalIds == nil {
		var ret []string
		return ret
	}
	return *o.PhysicalIds
}

// GetPhysicalIdsOk returns a tuple with the PhysicalIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetPhysicalIdsOk() (*[]string, bool) {
	if o == nil || o.PhysicalIds == nil {
		return nil, false
	}
	return o.PhysicalIds, true
}

// HasPhysicalIds returns a boolean if a field has been set.
func (o *Device) HasPhysicalIds() bool {
	if o != nil && o.PhysicalIds != nil {
		return true
	}

	return false
}

// SetPhysicalIds gets a reference to the given []string and assigns it to the PhysicalIds field.
func (o *Device) SetPhysicalIds(v []string) {
	o.PhysicalIds = &v
}

// GetProfileType returns the ProfileType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetProfileType() string {
	if o == nil || o.ProfileType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProfileType.Get()
}

// GetProfileTypeOk returns a tuple with the ProfileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetProfileTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProfileType.Get(), o.ProfileType.IsSet()
}

// HasProfileType returns a boolean if a field has been set.
func (o *Device) HasProfileType() bool {
	if o != nil && o.ProfileType.IsSet() {
		return true
	}

	return false
}

// SetProfileType gets a reference to the given NullableString and assigns it to the ProfileType field.
func (o *Device) SetProfileType(v string) {
	o.ProfileType.Set(&v)
}
// SetProfileTypeNil sets the value for ProfileType to be an explicit nil
func (o *Device) SetProfileTypeNil() {
	o.ProfileType.Set(nil)
}

// UnsetProfileType ensures that no value is present for ProfileType, not even an explicit nil
func (o *Device) UnsetProfileType() {
	o.ProfileType.Unset()
}

// GetSystemLabels returns the SystemLabels field value if set, zero value otherwise.
func (o *Device) GetSystemLabels() []string {
	if o == nil || o.SystemLabels == nil {
		var ret []string
		return ret
	}
	return *o.SystemLabels
}

// GetSystemLabelsOk returns a tuple with the SystemLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetSystemLabelsOk() (*[]string, bool) {
	if o == nil || o.SystemLabels == nil {
		return nil, false
	}
	return o.SystemLabels, true
}

// HasSystemLabels returns a boolean if a field has been set.
func (o *Device) HasSystemLabels() bool {
	if o != nil && o.SystemLabels != nil {
		return true
	}

	return false
}

// SetSystemLabels gets a reference to the given []string and assigns it to the SystemLabels field.
func (o *Device) SetSystemLabels(v []string) {
	o.SystemLabels = &v
}

// GetTrustType returns the TrustType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetTrustType() string {
	if o == nil || o.TrustType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TrustType.Get()
}

// GetTrustTypeOk returns a tuple with the TrustType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetTrustTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TrustType.Get(), o.TrustType.IsSet()
}

// HasTrustType returns a boolean if a field has been set.
func (o *Device) HasTrustType() bool {
	if o != nil && o.TrustType.IsSet() {
		return true
	}

	return false
}

// SetTrustType gets a reference to the given NullableString and assigns it to the TrustType field.
func (o *Device) SetTrustType(v string) {
	o.TrustType.Set(&v)
}
// SetTrustTypeNil sets the value for TrustType to be an explicit nil
func (o *Device) SetTrustTypeNil() {
	o.TrustType.Set(nil)
}

// UnsetTrustType ensures that no value is present for TrustType, not even an explicit nil
func (o *Device) UnsetTrustType() {
	o.TrustType.Unset()
}

// GetMemberOf returns the MemberOf field value if set, zero value otherwise.
func (o *Device) GetMemberOf() []MicrosoftGraphDirectoryObject {
	if o == nil || o.MemberOf == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.MemberOf
}

// GetMemberOfOk returns a tuple with the MemberOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetMemberOfOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.MemberOf == nil {
		return nil, false
	}
	return o.MemberOf, true
}

// HasMemberOf returns a boolean if a field has been set.
func (o *Device) HasMemberOf() bool {
	if o != nil && o.MemberOf != nil {
		return true
	}

	return false
}

// SetMemberOf gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the MemberOf field.
func (o *Device) SetMemberOf(v []MicrosoftGraphDirectoryObject) {
	o.MemberOf = &v
}

// GetRegisteredOwners returns the RegisteredOwners field value if set, zero value otherwise.
func (o *Device) GetRegisteredOwners() []MicrosoftGraphDirectoryObject {
	if o == nil || o.RegisteredOwners == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.RegisteredOwners
}

// GetRegisteredOwnersOk returns a tuple with the RegisteredOwners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetRegisteredOwnersOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.RegisteredOwners == nil {
		return nil, false
	}
	return o.RegisteredOwners, true
}

// HasRegisteredOwners returns a boolean if a field has been set.
func (o *Device) HasRegisteredOwners() bool {
	if o != nil && o.RegisteredOwners != nil {
		return true
	}

	return false
}

// SetRegisteredOwners gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the RegisteredOwners field.
func (o *Device) SetRegisteredOwners(v []MicrosoftGraphDirectoryObject) {
	o.RegisteredOwners = &v
}

// GetRegisteredUsers returns the RegisteredUsers field value if set, zero value otherwise.
func (o *Device) GetRegisteredUsers() []MicrosoftGraphDirectoryObject {
	if o == nil || o.RegisteredUsers == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.RegisteredUsers
}

// GetRegisteredUsersOk returns a tuple with the RegisteredUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetRegisteredUsersOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.RegisteredUsers == nil {
		return nil, false
	}
	return o.RegisteredUsers, true
}

// HasRegisteredUsers returns a boolean if a field has been set.
func (o *Device) HasRegisteredUsers() bool {
	if o != nil && o.RegisteredUsers != nil {
		return true
	}

	return false
}

// SetRegisteredUsers gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the RegisteredUsers field.
func (o *Device) SetRegisteredUsers(v []MicrosoftGraphDirectoryObject) {
	o.RegisteredUsers = &v
}

// GetTransitiveMemberOf returns the TransitiveMemberOf field value if set, zero value otherwise.
func (o *Device) GetTransitiveMemberOf() []MicrosoftGraphDirectoryObject {
	if o == nil || o.TransitiveMemberOf == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.TransitiveMemberOf
}

// GetTransitiveMemberOfOk returns a tuple with the TransitiveMemberOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetTransitiveMemberOfOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.TransitiveMemberOf == nil {
		return nil, false
	}
	return o.TransitiveMemberOf, true
}

// HasTransitiveMemberOf returns a boolean if a field has been set.
func (o *Device) HasTransitiveMemberOf() bool {
	if o != nil && o.TransitiveMemberOf != nil {
		return true
	}

	return false
}

// SetTransitiveMemberOf gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the TransitiveMemberOf field.
func (o *Device) SetTransitiveMemberOf(v []MicrosoftGraphDirectoryObject) {
	o.TransitiveMemberOf = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *Device) GetExtensions() []MicrosoftGraphExtension {
	if o == nil || o.Extensions == nil {
		var ret []MicrosoftGraphExtension
		return ret
	}
	return *o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetExtensionsOk() (*[]MicrosoftGraphExtension, bool) {
	if o == nil || o.Extensions == nil {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *Device) HasExtensions() bool {
	if o != nil && o.Extensions != nil {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []MicrosoftGraphExtension and assigns it to the Extensions field.
func (o *Device) SetExtensions(v []MicrosoftGraphExtension) {
	o.Extensions = &v
}

func (o Device) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountEnabled.IsSet() {
		toSerialize["accountEnabled"] = o.AccountEnabled.Get()
	}
	if o.AlternativeSecurityIds != nil {
		toSerialize["alternativeSecurityIds"] = o.AlternativeSecurityIds
	}
	if o.ApproximateLastSignInDateTime.IsSet() {
		toSerialize["approximateLastSignInDateTime"] = o.ApproximateLastSignInDateTime.Get()
	}
	if o.ComplianceExpirationDateTime.IsSet() {
		toSerialize["complianceExpirationDateTime"] = o.ComplianceExpirationDateTime.Get()
	}
	if o.DeviceId.IsSet() {
		toSerialize["deviceId"] = o.DeviceId.Get()
	}
	if o.DeviceMetadata.IsSet() {
		toSerialize["deviceMetadata"] = o.DeviceMetadata.Get()
	}
	if o.DeviceVersion.IsSet() {
		toSerialize["deviceVersion"] = o.DeviceVersion.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.IsCompliant.IsSet() {
		toSerialize["isCompliant"] = o.IsCompliant.Get()
	}
	if o.IsManaged.IsSet() {
		toSerialize["isManaged"] = o.IsManaged.Get()
	}
	if o.MdmAppId.IsSet() {
		toSerialize["mdmAppId"] = o.MdmAppId.Get()
	}
	if o.OnPremisesLastSyncDateTime.IsSet() {
		toSerialize["onPremisesLastSyncDateTime"] = o.OnPremisesLastSyncDateTime.Get()
	}
	if o.OnPremisesSyncEnabled.IsSet() {
		toSerialize["onPremisesSyncEnabled"] = o.OnPremisesSyncEnabled.Get()
	}
	if o.OperatingSystem.IsSet() {
		toSerialize["operatingSystem"] = o.OperatingSystem.Get()
	}
	if o.OperatingSystemVersion.IsSet() {
		toSerialize["operatingSystemVersion"] = o.OperatingSystemVersion.Get()
	}
	if o.PhysicalIds != nil {
		toSerialize["physicalIds"] = o.PhysicalIds
	}
	if o.ProfileType.IsSet() {
		toSerialize["profileType"] = o.ProfileType.Get()
	}
	if o.SystemLabels != nil {
		toSerialize["systemLabels"] = o.SystemLabels
	}
	if o.TrustType.IsSet() {
		toSerialize["trustType"] = o.TrustType.Get()
	}
	if o.MemberOf != nil {
		toSerialize["memberOf"] = o.MemberOf
	}
	if o.RegisteredOwners != nil {
		toSerialize["registeredOwners"] = o.RegisteredOwners
	}
	if o.RegisteredUsers != nil {
		toSerialize["registeredUsers"] = o.RegisteredUsers
	}
	if o.TransitiveMemberOf != nil {
		toSerialize["transitiveMemberOf"] = o.TransitiveMemberOf
	}
	if o.Extensions != nil {
		toSerialize["extensions"] = o.Extensions
	}
	return json.Marshal(toSerialize)
}

type NullableDevice struct {
	value *Device
	isSet bool
}

func (v NullableDevice) Get() *Device {
	return v.value
}

func (v *NullableDevice) Set(val *Device) {
	v.value = val
	v.isSet = true
}

func (v NullableDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevice(val *Device) *NullableDevice {
	return &NullableDevice{value: val, isSet: true}
}

func (v NullableDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


