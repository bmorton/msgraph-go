/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// TimeOffRequest struct for TimeOffRequest
type TimeOffRequest struct {
	// The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	EndDateTime NullableTime `json:"endDateTime,omitempty"`
	// The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	StartDateTime NullableTime `json:"startDateTime,omitempty"`
	// The reason for the time off.
	TimeOffReasonId NullableString `json:"timeOffReasonId,omitempty"`
}

// NewTimeOffRequest instantiates a new TimeOffRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeOffRequest() *TimeOffRequest {
	this := TimeOffRequest{}
	return &this
}

// NewTimeOffRequestWithDefaults instantiates a new TimeOffRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeOffRequestWithDefaults() *TimeOffRequest {
	this := TimeOffRequest{}
	return &this
}

// GetEndDateTime returns the EndDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeOffRequest) GetEndDateTime() time.Time {
	if o == nil || o.EndDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDateTime.Get()
}

// GetEndDateTimeOk returns a tuple with the EndDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeOffRequest) GetEndDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndDateTime.Get(), o.EndDateTime.IsSet()
}

// HasEndDateTime returns a boolean if a field has been set.
func (o *TimeOffRequest) HasEndDateTime() bool {
	if o != nil && o.EndDateTime.IsSet() {
		return true
	}

	return false
}

// SetEndDateTime gets a reference to the given NullableTime and assigns it to the EndDateTime field.
func (o *TimeOffRequest) SetEndDateTime(v time.Time) {
	o.EndDateTime.Set(&v)
}
// SetEndDateTimeNil sets the value for EndDateTime to be an explicit nil
func (o *TimeOffRequest) SetEndDateTimeNil() {
	o.EndDateTime.Set(nil)
}

// UnsetEndDateTime ensures that no value is present for EndDateTime, not even an explicit nil
func (o *TimeOffRequest) UnsetEndDateTime() {
	o.EndDateTime.Unset()
}

// GetStartDateTime returns the StartDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeOffRequest) GetStartDateTime() time.Time {
	if o == nil || o.StartDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDateTime.Get()
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeOffRequest) GetStartDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartDateTime.Get(), o.StartDateTime.IsSet()
}

// HasStartDateTime returns a boolean if a field has been set.
func (o *TimeOffRequest) HasStartDateTime() bool {
	if o != nil && o.StartDateTime.IsSet() {
		return true
	}

	return false
}

// SetStartDateTime gets a reference to the given NullableTime and assigns it to the StartDateTime field.
func (o *TimeOffRequest) SetStartDateTime(v time.Time) {
	o.StartDateTime.Set(&v)
}
// SetStartDateTimeNil sets the value for StartDateTime to be an explicit nil
func (o *TimeOffRequest) SetStartDateTimeNil() {
	o.StartDateTime.Set(nil)
}

// UnsetStartDateTime ensures that no value is present for StartDateTime, not even an explicit nil
func (o *TimeOffRequest) UnsetStartDateTime() {
	o.StartDateTime.Unset()
}

// GetTimeOffReasonId returns the TimeOffReasonId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeOffRequest) GetTimeOffReasonId() string {
	if o == nil || o.TimeOffReasonId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TimeOffReasonId.Get()
}

// GetTimeOffReasonIdOk returns a tuple with the TimeOffReasonId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeOffRequest) GetTimeOffReasonIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimeOffReasonId.Get(), o.TimeOffReasonId.IsSet()
}

// HasTimeOffReasonId returns a boolean if a field has been set.
func (o *TimeOffRequest) HasTimeOffReasonId() bool {
	if o != nil && o.TimeOffReasonId.IsSet() {
		return true
	}

	return false
}

// SetTimeOffReasonId gets a reference to the given NullableString and assigns it to the TimeOffReasonId field.
func (o *TimeOffRequest) SetTimeOffReasonId(v string) {
	o.TimeOffReasonId.Set(&v)
}
// SetTimeOffReasonIdNil sets the value for TimeOffReasonId to be an explicit nil
func (o *TimeOffRequest) SetTimeOffReasonIdNil() {
	o.TimeOffReasonId.Set(nil)
}

// UnsetTimeOffReasonId ensures that no value is present for TimeOffReasonId, not even an explicit nil
func (o *TimeOffRequest) UnsetTimeOffReasonId() {
	o.TimeOffReasonId.Unset()
}

func (o TimeOffRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EndDateTime.IsSet() {
		toSerialize["endDateTime"] = o.EndDateTime.Get()
	}
	if o.StartDateTime.IsSet() {
		toSerialize["startDateTime"] = o.StartDateTime.Get()
	}
	if o.TimeOffReasonId.IsSet() {
		toSerialize["timeOffReasonId"] = o.TimeOffReasonId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTimeOffRequest struct {
	value *TimeOffRequest
	isSet bool
}

func (v NullableTimeOffRequest) Get() *TimeOffRequest {
	return v.value
}

func (v *NullableTimeOffRequest) Set(val *TimeOffRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeOffRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeOffRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeOffRequest(val *TimeOffRequest) *NullableTimeOffRequest {
	return &NullableTimeOffRequest{value: val, isSet: true}
}

func (v NullableTimeOffRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeOffRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


