/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphMediaDirection the model 'MicrosoftGraphMediaDirection'
type MicrosoftGraphMediaDirection string

// List of microsoft.graph.mediaDirection
const (
	INACTIVE MicrosoftGraphMediaDirection = "inactive"
	SEND_ONLY MicrosoftGraphMediaDirection = "sendOnly"
	RECEIVE_ONLY MicrosoftGraphMediaDirection = "receiveOnly"
	SEND_RECEIVE MicrosoftGraphMediaDirection = "sendReceive"
)

// All allowed values of MicrosoftGraphMediaDirection enum
var AllowedMicrosoftGraphMediaDirectionEnumValues = []MicrosoftGraphMediaDirection{
	"inactive",
	"sendOnly",
	"receiveOnly",
	"sendReceive",
}

func (v *MicrosoftGraphMediaDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphMediaDirection(value)
	for _, existing := range AllowedMicrosoftGraphMediaDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphMediaDirection", value)
}

// NewMicrosoftGraphMediaDirectionFromValue returns a pointer to a valid MicrosoftGraphMediaDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphMediaDirectionFromValue(v string) (*MicrosoftGraphMediaDirection, error) {
	ev := MicrosoftGraphMediaDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphMediaDirection: valid values are %v", v, AllowedMicrosoftGraphMediaDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphMediaDirection) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphMediaDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.mediaDirection value
func (v MicrosoftGraphMediaDirection) Ptr() *MicrosoftGraphMediaDirection {
	return &v
}

type NullableMicrosoftGraphMediaDirection struct {
	value *MicrosoftGraphMediaDirection
	isSet bool
}

func (v NullableMicrosoftGraphMediaDirection) Get() *MicrosoftGraphMediaDirection {
	return v.value
}

func (v *NullableMicrosoftGraphMediaDirection) Set(val *MicrosoftGraphMediaDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphMediaDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphMediaDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphMediaDirection(val *MicrosoftGraphMediaDirection) *NullableMicrosoftGraphMediaDirection {
	return &NullableMicrosoftGraphMediaDirection{value: val, isSet: true}
}

func (v NullableMicrosoftGraphMediaDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphMediaDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

