/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphDeviceManagementReportStatus Possible statuses associated with a generated report
type MicrosoftGraphDeviceManagementReportStatus string

// List of microsoft.graph.deviceManagementReportStatus
const (
	UNKNOWN MicrosoftGraphDeviceManagementReportStatus = "unknown"
	NOT_STARTED MicrosoftGraphDeviceManagementReportStatus = "notStarted"
	IN_PROGRESS MicrosoftGraphDeviceManagementReportStatus = "inProgress"
	COMPLETED MicrosoftGraphDeviceManagementReportStatus = "completed"
	FAILED MicrosoftGraphDeviceManagementReportStatus = "failed"
)

// All allowed values of MicrosoftGraphDeviceManagementReportStatus enum
var AllowedMicrosoftGraphDeviceManagementReportStatusEnumValues = []MicrosoftGraphDeviceManagementReportStatus{
	"unknown",
	"notStarted",
	"inProgress",
	"completed",
	"failed",
}

func (v *MicrosoftGraphDeviceManagementReportStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphDeviceManagementReportStatus(value)
	for _, existing := range AllowedMicrosoftGraphDeviceManagementReportStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphDeviceManagementReportStatus", value)
}

// NewMicrosoftGraphDeviceManagementReportStatusFromValue returns a pointer to a valid MicrosoftGraphDeviceManagementReportStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphDeviceManagementReportStatusFromValue(v string) (*MicrosoftGraphDeviceManagementReportStatus, error) {
	ev := MicrosoftGraphDeviceManagementReportStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphDeviceManagementReportStatus: valid values are %v", v, AllowedMicrosoftGraphDeviceManagementReportStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphDeviceManagementReportStatus) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphDeviceManagementReportStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.deviceManagementReportStatus value
func (v MicrosoftGraphDeviceManagementReportStatus) Ptr() *MicrosoftGraphDeviceManagementReportStatus {
	return &v
}

type NullableMicrosoftGraphDeviceManagementReportStatus struct {
	value *MicrosoftGraphDeviceManagementReportStatus
	isSet bool
}

func (v NullableMicrosoftGraphDeviceManagementReportStatus) Get() *MicrosoftGraphDeviceManagementReportStatus {
	return v.value
}

func (v *NullableMicrosoftGraphDeviceManagementReportStatus) Set(val *MicrosoftGraphDeviceManagementReportStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphDeviceManagementReportStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphDeviceManagementReportStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphDeviceManagementReportStatus(val *MicrosoftGraphDeviceManagementReportStatus) *NullableMicrosoftGraphDeviceManagementReportStatus {
	return &NullableMicrosoftGraphDeviceManagementReportStatus{value: val, isSet: true}
}

func (v NullableMicrosoftGraphDeviceManagementReportStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphDeviceManagementReportStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

