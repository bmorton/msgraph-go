/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphOnenotePatchActionType the model 'MicrosoftGraphOnenotePatchActionType'
type MicrosoftGraphOnenotePatchActionType string

// List of microsoft.graph.onenotePatchActionType
const (
	REPLACE MicrosoftGraphOnenotePatchActionType = "Replace"
	APPEND MicrosoftGraphOnenotePatchActionType = "Append"
	DELETE MicrosoftGraphOnenotePatchActionType = "Delete"
	INSERT MicrosoftGraphOnenotePatchActionType = "Insert"
	PREPEND MicrosoftGraphOnenotePatchActionType = "Prepend"
)

// All allowed values of MicrosoftGraphOnenotePatchActionType enum
var AllowedMicrosoftGraphOnenotePatchActionTypeEnumValues = []MicrosoftGraphOnenotePatchActionType{
	"Replace",
	"Append",
	"Delete",
	"Insert",
	"Prepend",
}

func (v *MicrosoftGraphOnenotePatchActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphOnenotePatchActionType(value)
	for _, existing := range AllowedMicrosoftGraphOnenotePatchActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphOnenotePatchActionType", value)
}

// NewMicrosoftGraphOnenotePatchActionTypeFromValue returns a pointer to a valid MicrosoftGraphOnenotePatchActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphOnenotePatchActionTypeFromValue(v string) (*MicrosoftGraphOnenotePatchActionType, error) {
	ev := MicrosoftGraphOnenotePatchActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphOnenotePatchActionType: valid values are %v", v, AllowedMicrosoftGraphOnenotePatchActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphOnenotePatchActionType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphOnenotePatchActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.onenotePatchActionType value
func (v MicrosoftGraphOnenotePatchActionType) Ptr() *MicrosoftGraphOnenotePatchActionType {
	return &v
}

type NullableMicrosoftGraphOnenotePatchActionType struct {
	value *MicrosoftGraphOnenotePatchActionType
	isSet bool
}

func (v NullableMicrosoftGraphOnenotePatchActionType) Get() *MicrosoftGraphOnenotePatchActionType {
	return v.value
}

func (v *NullableMicrosoftGraphOnenotePatchActionType) Set(val *MicrosoftGraphOnenotePatchActionType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphOnenotePatchActionType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphOnenotePatchActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphOnenotePatchActionType(val *MicrosoftGraphOnenotePatchActionType) *NullableMicrosoftGraphOnenotePatchActionType {
	return &NullableMicrosoftGraphOnenotePatchActionType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphOnenotePatchActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphOnenotePatchActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

