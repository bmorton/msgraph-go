/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphAccessPackageAssignmentState the model 'MicrosoftGraphAccessPackageAssignmentState'
type MicrosoftGraphAccessPackageAssignmentState string

// List of microsoft.graph.accessPackageAssignmentState
const (
	DELIVERING MicrosoftGraphAccessPackageAssignmentState = "delivering"
	PARTIALLY_DELIVERED MicrosoftGraphAccessPackageAssignmentState = "partiallyDelivered"
	DELIVERED MicrosoftGraphAccessPackageAssignmentState = "delivered"
	EXPIRED MicrosoftGraphAccessPackageAssignmentState = "expired"
	DELIVERY_FAILED MicrosoftGraphAccessPackageAssignmentState = "deliveryFailed"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphAccessPackageAssignmentState = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphAccessPackageAssignmentState enum
var AllowedMicrosoftGraphAccessPackageAssignmentStateEnumValues = []MicrosoftGraphAccessPackageAssignmentState{
	"delivering",
	"partiallyDelivered",
	"delivered",
	"expired",
	"deliveryFailed",
	"unknownFutureValue",
}

func (v *MicrosoftGraphAccessPackageAssignmentState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphAccessPackageAssignmentState(value)
	for _, existing := range AllowedMicrosoftGraphAccessPackageAssignmentStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphAccessPackageAssignmentState", value)
}

// NewMicrosoftGraphAccessPackageAssignmentStateFromValue returns a pointer to a valid MicrosoftGraphAccessPackageAssignmentState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphAccessPackageAssignmentStateFromValue(v string) (*MicrosoftGraphAccessPackageAssignmentState, error) {
	ev := MicrosoftGraphAccessPackageAssignmentState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphAccessPackageAssignmentState: valid values are %v", v, AllowedMicrosoftGraphAccessPackageAssignmentStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphAccessPackageAssignmentState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphAccessPackageAssignmentStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.accessPackageAssignmentState value
func (v MicrosoftGraphAccessPackageAssignmentState) Ptr() *MicrosoftGraphAccessPackageAssignmentState {
	return &v
}

type NullableMicrosoftGraphAccessPackageAssignmentState struct {
	value *MicrosoftGraphAccessPackageAssignmentState
	isSet bool
}

func (v NullableMicrosoftGraphAccessPackageAssignmentState) Get() *MicrosoftGraphAccessPackageAssignmentState {
	return v.value
}

func (v *NullableMicrosoftGraphAccessPackageAssignmentState) Set(val *MicrosoftGraphAccessPackageAssignmentState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAccessPackageAssignmentState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAccessPackageAssignmentState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAccessPackageAssignmentState(val *MicrosoftGraphAccessPackageAssignmentState) *NullableMicrosoftGraphAccessPackageAssignmentState {
	return &NullableMicrosoftGraphAccessPackageAssignmentState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAccessPackageAssignmentState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAccessPackageAssignmentState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

