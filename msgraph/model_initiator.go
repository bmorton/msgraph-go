/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// Initiator struct for Initiator
type Initiator struct {
	// Type of initiator. Possible values are: user, application, system, unknownFutureValue.
	InitiatorType AnyOfmicrosoftGraphInitiatorType `json:"initiatorType,omitempty"`
}

// NewInitiator instantiates a new Initiator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitiator() *Initiator {
	this := Initiator{}
	return &this
}

// NewInitiatorWithDefaults instantiates a new Initiator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitiatorWithDefaults() *Initiator {
	this := Initiator{}
	return &this
}

// GetInitiatorType returns the InitiatorType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Initiator) GetInitiatorType() AnyOfmicrosoftGraphInitiatorType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphInitiatorType
		return ret
	}
	return o.InitiatorType
}

// GetInitiatorTypeOk returns a tuple with the InitiatorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Initiator) GetInitiatorTypeOk() (*AnyOfmicrosoftGraphInitiatorType, bool) {
	if o == nil || o.InitiatorType == nil {
		return nil, false
	}
	return &o.InitiatorType, true
}

// HasInitiatorType returns a boolean if a field has been set.
func (o *Initiator) HasInitiatorType() bool {
	if o != nil && o.InitiatorType != nil {
		return true
	}

	return false
}

// SetInitiatorType gets a reference to the given AnyOfmicrosoftGraphInitiatorType and assigns it to the InitiatorType field.
func (o *Initiator) SetInitiatorType(v AnyOfmicrosoftGraphInitiatorType) {
	o.InitiatorType = v
}

func (o Initiator) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InitiatorType != nil {
		toSerialize["initiatorType"] = o.InitiatorType
	}
	return json.Marshal(toSerialize)
}

type NullableInitiator struct {
	value *Initiator
	isSet bool
}

func (v NullableInitiator) Get() *Initiator {
	return v.value
}

func (v *NullableInitiator) Set(val *Initiator) {
	v.value = val
	v.isSet = true
}

func (v NullableInitiator) IsSet() bool {
	return v.isSet
}

func (v *NullableInitiator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitiator(val *Initiator) *NullableInitiator {
	return &NullableInitiator{value: val, isSet: true}
}

func (v NullableInitiator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitiator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


