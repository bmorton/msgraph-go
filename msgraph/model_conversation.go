/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Conversation struct for Conversation
type Conversation struct {
	// Indicates whether any of the posts within this Conversation has at least one attachment. Supports $filter (eq, ne) and $search.
	HasAttachments *bool `json:"hasAttachments,omitempty"`
	// The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastDeliveredDateTime *time.Time `json:"lastDeliveredDateTime,omitempty"`
	// A short summary from the body of the latest post in this conversation. Supports $filter (eq, ne, le, ge).
	Preview *string `json:"preview,omitempty"`
	// The topic of the conversation. This property can be set when the conversation is created, but it cannot be updated.
	Topic *string `json:"topic,omitempty"`
	// All the users that sent a message to this Conversation.
	UniqueSenders *[]string `json:"uniqueSenders,omitempty"`
	// A collection of all the conversation threads in the conversation. A navigation property. Read-only. Nullable.
	Threads *[]MicrosoftGraphConversationThread `json:"threads,omitempty"`
}

// NewConversation instantiates a new Conversation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversation() *Conversation {
	this := Conversation{}
	return &this
}

// NewConversationWithDefaults instantiates a new Conversation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationWithDefaults() *Conversation {
	this := Conversation{}
	return &this
}

// GetHasAttachments returns the HasAttachments field value if set, zero value otherwise.
func (o *Conversation) GetHasAttachments() bool {
	if o == nil || o.HasAttachments == nil {
		var ret bool
		return ret
	}
	return *o.HasAttachments
}

// GetHasAttachmentsOk returns a tuple with the HasAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conversation) GetHasAttachmentsOk() (*bool, bool) {
	if o == nil || o.HasAttachments == nil {
		return nil, false
	}
	return o.HasAttachments, true
}

// HasHasAttachments returns a boolean if a field has been set.
func (o *Conversation) HasHasAttachments() bool {
	if o != nil && o.HasAttachments != nil {
		return true
	}

	return false
}

// SetHasAttachments gets a reference to the given bool and assigns it to the HasAttachments field.
func (o *Conversation) SetHasAttachments(v bool) {
	o.HasAttachments = &v
}

// GetLastDeliveredDateTime returns the LastDeliveredDateTime field value if set, zero value otherwise.
func (o *Conversation) GetLastDeliveredDateTime() time.Time {
	if o == nil || o.LastDeliveredDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastDeliveredDateTime
}

// GetLastDeliveredDateTimeOk returns a tuple with the LastDeliveredDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conversation) GetLastDeliveredDateTimeOk() (*time.Time, bool) {
	if o == nil || o.LastDeliveredDateTime == nil {
		return nil, false
	}
	return o.LastDeliveredDateTime, true
}

// HasLastDeliveredDateTime returns a boolean if a field has been set.
func (o *Conversation) HasLastDeliveredDateTime() bool {
	if o != nil && o.LastDeliveredDateTime != nil {
		return true
	}

	return false
}

// SetLastDeliveredDateTime gets a reference to the given time.Time and assigns it to the LastDeliveredDateTime field.
func (o *Conversation) SetLastDeliveredDateTime(v time.Time) {
	o.LastDeliveredDateTime = &v
}

// GetPreview returns the Preview field value if set, zero value otherwise.
func (o *Conversation) GetPreview() string {
	if o == nil || o.Preview == nil {
		var ret string
		return ret
	}
	return *o.Preview
}

// GetPreviewOk returns a tuple with the Preview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conversation) GetPreviewOk() (*string, bool) {
	if o == nil || o.Preview == nil {
		return nil, false
	}
	return o.Preview, true
}

// HasPreview returns a boolean if a field has been set.
func (o *Conversation) HasPreview() bool {
	if o != nil && o.Preview != nil {
		return true
	}

	return false
}

// SetPreview gets a reference to the given string and assigns it to the Preview field.
func (o *Conversation) SetPreview(v string) {
	o.Preview = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *Conversation) GetTopic() string {
	if o == nil || o.Topic == nil {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conversation) GetTopicOk() (*string, bool) {
	if o == nil || o.Topic == nil {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *Conversation) HasTopic() bool {
	if o != nil && o.Topic != nil {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *Conversation) SetTopic(v string) {
	o.Topic = &v
}

// GetUniqueSenders returns the UniqueSenders field value if set, zero value otherwise.
func (o *Conversation) GetUniqueSenders() []string {
	if o == nil || o.UniqueSenders == nil {
		var ret []string
		return ret
	}
	return *o.UniqueSenders
}

// GetUniqueSendersOk returns a tuple with the UniqueSenders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conversation) GetUniqueSendersOk() (*[]string, bool) {
	if o == nil || o.UniqueSenders == nil {
		return nil, false
	}
	return o.UniqueSenders, true
}

// HasUniqueSenders returns a boolean if a field has been set.
func (o *Conversation) HasUniqueSenders() bool {
	if o != nil && o.UniqueSenders != nil {
		return true
	}

	return false
}

// SetUniqueSenders gets a reference to the given []string and assigns it to the UniqueSenders field.
func (o *Conversation) SetUniqueSenders(v []string) {
	o.UniqueSenders = &v
}

// GetThreads returns the Threads field value if set, zero value otherwise.
func (o *Conversation) GetThreads() []MicrosoftGraphConversationThread {
	if o == nil || o.Threads == nil {
		var ret []MicrosoftGraphConversationThread
		return ret
	}
	return *o.Threads
}

// GetThreadsOk returns a tuple with the Threads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Conversation) GetThreadsOk() (*[]MicrosoftGraphConversationThread, bool) {
	if o == nil || o.Threads == nil {
		return nil, false
	}
	return o.Threads, true
}

// HasThreads returns a boolean if a field has been set.
func (o *Conversation) HasThreads() bool {
	if o != nil && o.Threads != nil {
		return true
	}

	return false
}

// SetThreads gets a reference to the given []MicrosoftGraphConversationThread and assigns it to the Threads field.
func (o *Conversation) SetThreads(v []MicrosoftGraphConversationThread) {
	o.Threads = &v
}

func (o Conversation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HasAttachments != nil {
		toSerialize["hasAttachments"] = o.HasAttachments
	}
	if o.LastDeliveredDateTime != nil {
		toSerialize["lastDeliveredDateTime"] = o.LastDeliveredDateTime
	}
	if o.Preview != nil {
		toSerialize["preview"] = o.Preview
	}
	if o.Topic != nil {
		toSerialize["topic"] = o.Topic
	}
	if o.UniqueSenders != nil {
		toSerialize["uniqueSenders"] = o.UniqueSenders
	}
	if o.Threads != nil {
		toSerialize["threads"] = o.Threads
	}
	return json.Marshal(toSerialize)
}

type NullableConversation struct {
	value *Conversation
	isSet bool
}

func (v NullableConversation) Get() *Conversation {
	return v.value
}

func (v *NullableConversation) Set(val *Conversation) {
	v.value = val
	v.isSet = true
}

func (v NullableConversation) IsSet() bool {
	return v.isSet
}

func (v *NullableConversation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversation(val *Conversation) *NullableConversation {
	return &NullableConversation{value: val, isSet: true}
}

func (v NullableConversation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


