/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphPrintUsageByUser struct for MicrosoftGraphPrintUsageByUser
type MicrosoftGraphPrintUsageByUser struct {
	// Read-only.
	Id *string `json:"id,omitempty"`
	CompletedBlackAndWhiteJobCount *int64 `json:"completedBlackAndWhiteJobCount,omitempty"`
	CompletedColorJobCount *int64 `json:"completedColorJobCount,omitempty"`
	IncompleteJobCount *int64 `json:"incompleteJobCount,omitempty"`
	UsageDate *string `json:"usageDate,omitempty"`
	// The UPN of the user represented by these statistics.
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
}

// NewMicrosoftGraphPrintUsageByUser instantiates a new MicrosoftGraphPrintUsageByUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphPrintUsageByUser() *MicrosoftGraphPrintUsageByUser {
	this := MicrosoftGraphPrintUsageByUser{}
	return &this
}

// NewMicrosoftGraphPrintUsageByUserWithDefaults instantiates a new MicrosoftGraphPrintUsageByUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphPrintUsageByUserWithDefaults() *MicrosoftGraphPrintUsageByUser {
	this := MicrosoftGraphPrintUsageByUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MicrosoftGraphPrintUsageByUser) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrintUsageByUser) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphPrintUsageByUser) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphPrintUsageByUser) SetId(v string) {
	o.Id = &v
}

// GetCompletedBlackAndWhiteJobCount returns the CompletedBlackAndWhiteJobCount field value if set, zero value otherwise.
func (o *MicrosoftGraphPrintUsageByUser) GetCompletedBlackAndWhiteJobCount() int64 {
	if o == nil || o.CompletedBlackAndWhiteJobCount == nil {
		var ret int64
		return ret
	}
	return *o.CompletedBlackAndWhiteJobCount
}

// GetCompletedBlackAndWhiteJobCountOk returns a tuple with the CompletedBlackAndWhiteJobCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrintUsageByUser) GetCompletedBlackAndWhiteJobCountOk() (*int64, bool) {
	if o == nil || o.CompletedBlackAndWhiteJobCount == nil {
		return nil, false
	}
	return o.CompletedBlackAndWhiteJobCount, true
}

// HasCompletedBlackAndWhiteJobCount returns a boolean if a field has been set.
func (o *MicrosoftGraphPrintUsageByUser) HasCompletedBlackAndWhiteJobCount() bool {
	if o != nil && o.CompletedBlackAndWhiteJobCount != nil {
		return true
	}

	return false
}

// SetCompletedBlackAndWhiteJobCount gets a reference to the given int64 and assigns it to the CompletedBlackAndWhiteJobCount field.
func (o *MicrosoftGraphPrintUsageByUser) SetCompletedBlackAndWhiteJobCount(v int64) {
	o.CompletedBlackAndWhiteJobCount = &v
}

// GetCompletedColorJobCount returns the CompletedColorJobCount field value if set, zero value otherwise.
func (o *MicrosoftGraphPrintUsageByUser) GetCompletedColorJobCount() int64 {
	if o == nil || o.CompletedColorJobCount == nil {
		var ret int64
		return ret
	}
	return *o.CompletedColorJobCount
}

// GetCompletedColorJobCountOk returns a tuple with the CompletedColorJobCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrintUsageByUser) GetCompletedColorJobCountOk() (*int64, bool) {
	if o == nil || o.CompletedColorJobCount == nil {
		return nil, false
	}
	return o.CompletedColorJobCount, true
}

// HasCompletedColorJobCount returns a boolean if a field has been set.
func (o *MicrosoftGraphPrintUsageByUser) HasCompletedColorJobCount() bool {
	if o != nil && o.CompletedColorJobCount != nil {
		return true
	}

	return false
}

// SetCompletedColorJobCount gets a reference to the given int64 and assigns it to the CompletedColorJobCount field.
func (o *MicrosoftGraphPrintUsageByUser) SetCompletedColorJobCount(v int64) {
	o.CompletedColorJobCount = &v
}

// GetIncompleteJobCount returns the IncompleteJobCount field value if set, zero value otherwise.
func (o *MicrosoftGraphPrintUsageByUser) GetIncompleteJobCount() int64 {
	if o == nil || o.IncompleteJobCount == nil {
		var ret int64
		return ret
	}
	return *o.IncompleteJobCount
}

// GetIncompleteJobCountOk returns a tuple with the IncompleteJobCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrintUsageByUser) GetIncompleteJobCountOk() (*int64, bool) {
	if o == nil || o.IncompleteJobCount == nil {
		return nil, false
	}
	return o.IncompleteJobCount, true
}

// HasIncompleteJobCount returns a boolean if a field has been set.
func (o *MicrosoftGraphPrintUsageByUser) HasIncompleteJobCount() bool {
	if o != nil && o.IncompleteJobCount != nil {
		return true
	}

	return false
}

// SetIncompleteJobCount gets a reference to the given int64 and assigns it to the IncompleteJobCount field.
func (o *MicrosoftGraphPrintUsageByUser) SetIncompleteJobCount(v int64) {
	o.IncompleteJobCount = &v
}

// GetUsageDate returns the UsageDate field value if set, zero value otherwise.
func (o *MicrosoftGraphPrintUsageByUser) GetUsageDate() string {
	if o == nil || o.UsageDate == nil {
		var ret string
		return ret
	}
	return *o.UsageDate
}

// GetUsageDateOk returns a tuple with the UsageDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrintUsageByUser) GetUsageDateOk() (*string, bool) {
	if o == nil || o.UsageDate == nil {
		return nil, false
	}
	return o.UsageDate, true
}

// HasUsageDate returns a boolean if a field has been set.
func (o *MicrosoftGraphPrintUsageByUser) HasUsageDate() bool {
	if o != nil && o.UsageDate != nil {
		return true
	}

	return false
}

// SetUsageDate gets a reference to the given string and assigns it to the UsageDate field.
func (o *MicrosoftGraphPrintUsageByUser) SetUsageDate(v string) {
	o.UsageDate = &v
}

// GetUserPrincipalName returns the UserPrincipalName field value if set, zero value otherwise.
func (o *MicrosoftGraphPrintUsageByUser) GetUserPrincipalName() string {
	if o == nil || o.UserPrincipalName == nil {
		var ret string
		return ret
	}
	return *o.UserPrincipalName
}

// GetUserPrincipalNameOk returns a tuple with the UserPrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrintUsageByUser) GetUserPrincipalNameOk() (*string, bool) {
	if o == nil || o.UserPrincipalName == nil {
		return nil, false
	}
	return o.UserPrincipalName, true
}

// HasUserPrincipalName returns a boolean if a field has been set.
func (o *MicrosoftGraphPrintUsageByUser) HasUserPrincipalName() bool {
	if o != nil && o.UserPrincipalName != nil {
		return true
	}

	return false
}

// SetUserPrincipalName gets a reference to the given string and assigns it to the UserPrincipalName field.
func (o *MicrosoftGraphPrintUsageByUser) SetUserPrincipalName(v string) {
	o.UserPrincipalName = &v
}

func (o MicrosoftGraphPrintUsageByUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CompletedBlackAndWhiteJobCount != nil {
		toSerialize["completedBlackAndWhiteJobCount"] = o.CompletedBlackAndWhiteJobCount
	}
	if o.CompletedColorJobCount != nil {
		toSerialize["completedColorJobCount"] = o.CompletedColorJobCount
	}
	if o.IncompleteJobCount != nil {
		toSerialize["incompleteJobCount"] = o.IncompleteJobCount
	}
	if o.UsageDate != nil {
		toSerialize["usageDate"] = o.UsageDate
	}
	if o.UserPrincipalName != nil {
		toSerialize["userPrincipalName"] = o.UserPrincipalName
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphPrintUsageByUser struct {
	value *MicrosoftGraphPrintUsageByUser
	isSet bool
}

func (v NullableMicrosoftGraphPrintUsageByUser) Get() *MicrosoftGraphPrintUsageByUser {
	return v.value
}

func (v *NullableMicrosoftGraphPrintUsageByUser) Set(val *MicrosoftGraphPrintUsageByUser) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPrintUsageByUser) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPrintUsageByUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPrintUsageByUser(val *MicrosoftGraphPrintUsageByUser) *NullableMicrosoftGraphPrintUsageByUser {
	return &NullableMicrosoftGraphPrintUsageByUser{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPrintUsageByUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPrintUsageByUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


