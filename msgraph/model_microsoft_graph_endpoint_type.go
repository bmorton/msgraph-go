/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphEndpointType the model 'MicrosoftGraphEndpointType'
type MicrosoftGraphEndpointType string

// List of microsoft.graph.endpointType
const (
	DEFAULT MicrosoftGraphEndpointType = "default"
	VOICEMAIL MicrosoftGraphEndpointType = "voicemail"
	SKYPE_FOR_BUSINESS MicrosoftGraphEndpointType = "skypeForBusiness"
	SKYPE_FOR_BUSINESS_VOIP_PHONE MicrosoftGraphEndpointType = "skypeForBusinessVoipPhone"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphEndpointType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphEndpointType enum
var AllowedMicrosoftGraphEndpointTypeEnumValues = []MicrosoftGraphEndpointType{
	"default",
	"voicemail",
	"skypeForBusiness",
	"skypeForBusinessVoipPhone",
	"unknownFutureValue",
}

func (v *MicrosoftGraphEndpointType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphEndpointType(value)
	for _, existing := range AllowedMicrosoftGraphEndpointTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphEndpointType", value)
}

// NewMicrosoftGraphEndpointTypeFromValue returns a pointer to a valid MicrosoftGraphEndpointType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphEndpointTypeFromValue(v string) (*MicrosoftGraphEndpointType, error) {
	ev := MicrosoftGraphEndpointType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphEndpointType: valid values are %v", v, AllowedMicrosoftGraphEndpointTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphEndpointType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphEndpointTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.endpointType value
func (v MicrosoftGraphEndpointType) Ptr() *MicrosoftGraphEndpointType {
	return &v
}

type NullableMicrosoftGraphEndpointType struct {
	value *MicrosoftGraphEndpointType
	isSet bool
}

func (v NullableMicrosoftGraphEndpointType) Get() *MicrosoftGraphEndpointType {
	return v.value
}

func (v *NullableMicrosoftGraphEndpointType) Set(val *MicrosoftGraphEndpointType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphEndpointType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphEndpointType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphEndpointType(val *MicrosoftGraphEndpointType) *NullableMicrosoftGraphEndpointType {
	return &NullableMicrosoftGraphEndpointType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphEndpointType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphEndpointType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

