/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Set struct for Set
type Set struct {
	// Date and time of set creation. Read-only.
	CreatedDateTime NullableTime `json:"createdDateTime,omitempty"`
	// Description that gives details on the term usage.
	Description NullableString `json:"description,omitempty"`
	// Name of the set for each languageTag.
	LocalizedNames *[]*AnyOfmicrosoftGraphTermStoreLocalizedName `json:"localizedNames,omitempty"`
	// Custom properties for the set.
	Properties *[]*AnyOfmicrosoftGraphKeyValue `json:"properties,omitempty"`
	// Children terms of set in term [store].
	Children *[]MicrosoftGraphTermStoreTerm `json:"children,omitempty"`
	ParentGroup *MicrosoftGraphTermStoreGroup `json:"parentGroup,omitempty"`
	// Indicates which terms have been pinned or reused directly under the set.
	Relations *[]MicrosoftGraphTermStoreRelation `json:"relations,omitempty"`
	// All the terms under the set.
	Terms *[]MicrosoftGraphTermStoreTerm `json:"terms,omitempty"`
}

// NewSet instantiates a new Set object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSet() *Set {
	this := Set{}
	return &this
}

// NewSetWithDefaults instantiates a new Set object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetWithDefaults() *Set {
	this := Set{}
	return &this
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Set) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime.Get()
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Set) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedDateTime.Get(), o.CreatedDateTime.IsSet()
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *Set) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime.IsSet() {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given NullableTime and assigns it to the CreatedDateTime field.
func (o *Set) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime.Set(&v)
}
// SetCreatedDateTimeNil sets the value for CreatedDateTime to be an explicit nil
func (o *Set) SetCreatedDateTimeNil() {
	o.CreatedDateTime.Set(nil)
}

// UnsetCreatedDateTime ensures that no value is present for CreatedDateTime, not even an explicit nil
func (o *Set) UnsetCreatedDateTime() {
	o.CreatedDateTime.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Set) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Set) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Set) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Set) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Set) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Set) UnsetDescription() {
	o.Description.Unset()
}

// GetLocalizedNames returns the LocalizedNames field value if set, zero value otherwise.
func (o *Set) GetLocalizedNames() []*AnyOfmicrosoftGraphTermStoreLocalizedName {
	if o == nil || o.LocalizedNames == nil {
		var ret []*AnyOfmicrosoftGraphTermStoreLocalizedName
		return ret
	}
	return *o.LocalizedNames
}

// GetLocalizedNamesOk returns a tuple with the LocalizedNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Set) GetLocalizedNamesOk() (*[]*AnyOfmicrosoftGraphTermStoreLocalizedName, bool) {
	if o == nil || o.LocalizedNames == nil {
		return nil, false
	}
	return o.LocalizedNames, true
}

// HasLocalizedNames returns a boolean if a field has been set.
func (o *Set) HasLocalizedNames() bool {
	if o != nil && o.LocalizedNames != nil {
		return true
	}

	return false
}

// SetLocalizedNames gets a reference to the given []*AnyOfmicrosoftGraphTermStoreLocalizedName and assigns it to the LocalizedNames field.
func (o *Set) SetLocalizedNames(v []*AnyOfmicrosoftGraphTermStoreLocalizedName) {
	o.LocalizedNames = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Set) GetProperties() []*AnyOfmicrosoftGraphKeyValue {
	if o == nil || o.Properties == nil {
		var ret []*AnyOfmicrosoftGraphKeyValue
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Set) GetPropertiesOk() (*[]*AnyOfmicrosoftGraphKeyValue, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Set) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []*AnyOfmicrosoftGraphKeyValue and assigns it to the Properties field.
func (o *Set) SetProperties(v []*AnyOfmicrosoftGraphKeyValue) {
	o.Properties = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *Set) GetChildren() []MicrosoftGraphTermStoreTerm {
	if o == nil || o.Children == nil {
		var ret []MicrosoftGraphTermStoreTerm
		return ret
	}
	return *o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Set) GetChildrenOk() (*[]MicrosoftGraphTermStoreTerm, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *Set) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []MicrosoftGraphTermStoreTerm and assigns it to the Children field.
func (o *Set) SetChildren(v []MicrosoftGraphTermStoreTerm) {
	o.Children = &v
}

// GetParentGroup returns the ParentGroup field value if set, zero value otherwise.
func (o *Set) GetParentGroup() MicrosoftGraphTermStoreGroup {
	if o == nil || o.ParentGroup == nil {
		var ret MicrosoftGraphTermStoreGroup
		return ret
	}
	return *o.ParentGroup
}

// GetParentGroupOk returns a tuple with the ParentGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Set) GetParentGroupOk() (*MicrosoftGraphTermStoreGroup, bool) {
	if o == nil || o.ParentGroup == nil {
		return nil, false
	}
	return o.ParentGroup, true
}

// HasParentGroup returns a boolean if a field has been set.
func (o *Set) HasParentGroup() bool {
	if o != nil && o.ParentGroup != nil {
		return true
	}

	return false
}

// SetParentGroup gets a reference to the given MicrosoftGraphTermStoreGroup and assigns it to the ParentGroup field.
func (o *Set) SetParentGroup(v MicrosoftGraphTermStoreGroup) {
	o.ParentGroup = &v
}

// GetRelations returns the Relations field value if set, zero value otherwise.
func (o *Set) GetRelations() []MicrosoftGraphTermStoreRelation {
	if o == nil || o.Relations == nil {
		var ret []MicrosoftGraphTermStoreRelation
		return ret
	}
	return *o.Relations
}

// GetRelationsOk returns a tuple with the Relations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Set) GetRelationsOk() (*[]MicrosoftGraphTermStoreRelation, bool) {
	if o == nil || o.Relations == nil {
		return nil, false
	}
	return o.Relations, true
}

// HasRelations returns a boolean if a field has been set.
func (o *Set) HasRelations() bool {
	if o != nil && o.Relations != nil {
		return true
	}

	return false
}

// SetRelations gets a reference to the given []MicrosoftGraphTermStoreRelation and assigns it to the Relations field.
func (o *Set) SetRelations(v []MicrosoftGraphTermStoreRelation) {
	o.Relations = &v
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *Set) GetTerms() []MicrosoftGraphTermStoreTerm {
	if o == nil || o.Terms == nil {
		var ret []MicrosoftGraphTermStoreTerm
		return ret
	}
	return *o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Set) GetTermsOk() (*[]MicrosoftGraphTermStoreTerm, bool) {
	if o == nil || o.Terms == nil {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *Set) HasTerms() bool {
	if o != nil && o.Terms != nil {
		return true
	}

	return false
}

// SetTerms gets a reference to the given []MicrosoftGraphTermStoreTerm and assigns it to the Terms field.
func (o *Set) SetTerms(v []MicrosoftGraphTermStoreTerm) {
	o.Terms = &v
}

func (o Set) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedDateTime.IsSet() {
		toSerialize["createdDateTime"] = o.CreatedDateTime.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.LocalizedNames != nil {
		toSerialize["localizedNames"] = o.LocalizedNames
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	if o.ParentGroup != nil {
		toSerialize["parentGroup"] = o.ParentGroup
	}
	if o.Relations != nil {
		toSerialize["relations"] = o.Relations
	}
	if o.Terms != nil {
		toSerialize["terms"] = o.Terms
	}
	return json.Marshal(toSerialize)
}

type NullableSet struct {
	value *Set
	isSet bool
}

func (v NullableSet) Get() *Set {
	return v.value
}

func (v *NullableSet) Set(val *Set) {
	v.value = val
	v.isSet = true
}

func (v NullableSet) IsSet() bool {
	return v.isSet
}

func (v *NullableSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSet(val *Set) *NullableSet {
	return &NullableSet{value: val, isSet: true}
}

func (v NullableSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


