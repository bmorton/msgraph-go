/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphDeviceManagementReportFileFormat Possible values for the file format of a report
type MicrosoftGraphDeviceManagementReportFileFormat string

// List of microsoft.graph.deviceManagementReportFileFormat
const (
	CSV MicrosoftGraphDeviceManagementReportFileFormat = "csv"
	PDF MicrosoftGraphDeviceManagementReportFileFormat = "pdf"
)

// All allowed values of MicrosoftGraphDeviceManagementReportFileFormat enum
var AllowedMicrosoftGraphDeviceManagementReportFileFormatEnumValues = []MicrosoftGraphDeviceManagementReportFileFormat{
	"csv",
	"pdf",
}

func (v *MicrosoftGraphDeviceManagementReportFileFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphDeviceManagementReportFileFormat(value)
	for _, existing := range AllowedMicrosoftGraphDeviceManagementReportFileFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphDeviceManagementReportFileFormat", value)
}

// NewMicrosoftGraphDeviceManagementReportFileFormatFromValue returns a pointer to a valid MicrosoftGraphDeviceManagementReportFileFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphDeviceManagementReportFileFormatFromValue(v string) (*MicrosoftGraphDeviceManagementReportFileFormat, error) {
	ev := MicrosoftGraphDeviceManagementReportFileFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphDeviceManagementReportFileFormat: valid values are %v", v, AllowedMicrosoftGraphDeviceManagementReportFileFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphDeviceManagementReportFileFormat) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphDeviceManagementReportFileFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.deviceManagementReportFileFormat value
func (v MicrosoftGraphDeviceManagementReportFileFormat) Ptr() *MicrosoftGraphDeviceManagementReportFileFormat {
	return &v
}

type NullableMicrosoftGraphDeviceManagementReportFileFormat struct {
	value *MicrosoftGraphDeviceManagementReportFileFormat
	isSet bool
}

func (v NullableMicrosoftGraphDeviceManagementReportFileFormat) Get() *MicrosoftGraphDeviceManagementReportFileFormat {
	return v.value
}

func (v *NullableMicrosoftGraphDeviceManagementReportFileFormat) Set(val *MicrosoftGraphDeviceManagementReportFileFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphDeviceManagementReportFileFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphDeviceManagementReportFileFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphDeviceManagementReportFileFormat(val *MicrosoftGraphDeviceManagementReportFileFormat) *NullableMicrosoftGraphDeviceManagementReportFileFormat {
	return &NullableMicrosoftGraphDeviceManagementReportFileFormat{value: val, isSet: true}
}

func (v NullableMicrosoftGraphDeviceManagementReportFileFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphDeviceManagementReportFileFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

