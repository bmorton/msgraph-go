/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ApplePushNotificationCertificate Apple push notification certificate.
type ApplePushNotificationCertificate struct {
	// Apple Id of the account used to create the MDM push certificate.
	AppleIdentifier NullableString `json:"appleIdentifier,omitempty"`
	// Not yet documented
	Certificate NullableString `json:"certificate,omitempty"`
	// Certificate serial number. This property is read-only.
	CertificateSerialNumber NullableString `json:"certificateSerialNumber,omitempty"`
	// The expiration date and time for Apple push notification certificate.
	ExpirationDateTime *time.Time `json:"expirationDateTime,omitempty"`
	// Last modified date and time for Apple push notification certificate.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`
	// Topic Id.
	TopicIdentifier NullableString `json:"topicIdentifier,omitempty"`
}

// NewApplePushNotificationCertificate instantiates a new ApplePushNotificationCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplePushNotificationCertificate() *ApplePushNotificationCertificate {
	this := ApplePushNotificationCertificate{}
	return &this
}

// NewApplePushNotificationCertificateWithDefaults instantiates a new ApplePushNotificationCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplePushNotificationCertificateWithDefaults() *ApplePushNotificationCertificate {
	this := ApplePushNotificationCertificate{}
	return &this
}

// GetAppleIdentifier returns the AppleIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplePushNotificationCertificate) GetAppleIdentifier() string {
	if o == nil || o.AppleIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.AppleIdentifier.Get()
}

// GetAppleIdentifierOk returns a tuple with the AppleIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplePushNotificationCertificate) GetAppleIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppleIdentifier.Get(), o.AppleIdentifier.IsSet()
}

// HasAppleIdentifier returns a boolean if a field has been set.
func (o *ApplePushNotificationCertificate) HasAppleIdentifier() bool {
	if o != nil && o.AppleIdentifier.IsSet() {
		return true
	}

	return false
}

// SetAppleIdentifier gets a reference to the given NullableString and assigns it to the AppleIdentifier field.
func (o *ApplePushNotificationCertificate) SetAppleIdentifier(v string) {
	o.AppleIdentifier.Set(&v)
}
// SetAppleIdentifierNil sets the value for AppleIdentifier to be an explicit nil
func (o *ApplePushNotificationCertificate) SetAppleIdentifierNil() {
	o.AppleIdentifier.Set(nil)
}

// UnsetAppleIdentifier ensures that no value is present for AppleIdentifier, not even an explicit nil
func (o *ApplePushNotificationCertificate) UnsetAppleIdentifier() {
	o.AppleIdentifier.Unset()
}

// GetCertificate returns the Certificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplePushNotificationCertificate) GetCertificate() string {
	if o == nil || o.Certificate.Get() == nil {
		var ret string
		return ret
	}
	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplePushNotificationCertificate) GetCertificateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// HasCertificate returns a boolean if a field has been set.
func (o *ApplePushNotificationCertificate) HasCertificate() bool {
	if o != nil && o.Certificate.IsSet() {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given NullableString and assigns it to the Certificate field.
func (o *ApplePushNotificationCertificate) SetCertificate(v string) {
	o.Certificate.Set(&v)
}
// SetCertificateNil sets the value for Certificate to be an explicit nil
func (o *ApplePushNotificationCertificate) SetCertificateNil() {
	o.Certificate.Set(nil)
}

// UnsetCertificate ensures that no value is present for Certificate, not even an explicit nil
func (o *ApplePushNotificationCertificate) UnsetCertificate() {
	o.Certificate.Unset()
}

// GetCertificateSerialNumber returns the CertificateSerialNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplePushNotificationCertificate) GetCertificateSerialNumber() string {
	if o == nil || o.CertificateSerialNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.CertificateSerialNumber.Get()
}

// GetCertificateSerialNumberOk returns a tuple with the CertificateSerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplePushNotificationCertificate) GetCertificateSerialNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CertificateSerialNumber.Get(), o.CertificateSerialNumber.IsSet()
}

// HasCertificateSerialNumber returns a boolean if a field has been set.
func (o *ApplePushNotificationCertificate) HasCertificateSerialNumber() bool {
	if o != nil && o.CertificateSerialNumber.IsSet() {
		return true
	}

	return false
}

// SetCertificateSerialNumber gets a reference to the given NullableString and assigns it to the CertificateSerialNumber field.
func (o *ApplePushNotificationCertificate) SetCertificateSerialNumber(v string) {
	o.CertificateSerialNumber.Set(&v)
}
// SetCertificateSerialNumberNil sets the value for CertificateSerialNumber to be an explicit nil
func (o *ApplePushNotificationCertificate) SetCertificateSerialNumberNil() {
	o.CertificateSerialNumber.Set(nil)
}

// UnsetCertificateSerialNumber ensures that no value is present for CertificateSerialNumber, not even an explicit nil
func (o *ApplePushNotificationCertificate) UnsetCertificateSerialNumber() {
	o.CertificateSerialNumber.Unset()
}

// GetExpirationDateTime returns the ExpirationDateTime field value if set, zero value otherwise.
func (o *ApplePushNotificationCertificate) GetExpirationDateTime() time.Time {
	if o == nil || o.ExpirationDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDateTime
}

// GetExpirationDateTimeOk returns a tuple with the ExpirationDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplePushNotificationCertificate) GetExpirationDateTimeOk() (*time.Time, bool) {
	if o == nil || o.ExpirationDateTime == nil {
		return nil, false
	}
	return o.ExpirationDateTime, true
}

// HasExpirationDateTime returns a boolean if a field has been set.
func (o *ApplePushNotificationCertificate) HasExpirationDateTime() bool {
	if o != nil && o.ExpirationDateTime != nil {
		return true
	}

	return false
}

// SetExpirationDateTime gets a reference to the given time.Time and assigns it to the ExpirationDateTime field.
func (o *ApplePushNotificationCertificate) SetExpirationDateTime(v time.Time) {
	o.ExpirationDateTime = &v
}

// GetLastModifiedDateTime returns the LastModifiedDateTime field value if set, zero value otherwise.
func (o *ApplePushNotificationCertificate) GetLastModifiedDateTime() time.Time {
	if o == nil || o.LastModifiedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedDateTime
}

// GetLastModifiedDateTimeOk returns a tuple with the LastModifiedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplePushNotificationCertificate) GetLastModifiedDateTimeOk() (*time.Time, bool) {
	if o == nil || o.LastModifiedDateTime == nil {
		return nil, false
	}
	return o.LastModifiedDateTime, true
}

// HasLastModifiedDateTime returns a boolean if a field has been set.
func (o *ApplePushNotificationCertificate) HasLastModifiedDateTime() bool {
	if o != nil && o.LastModifiedDateTime != nil {
		return true
	}

	return false
}

// SetLastModifiedDateTime gets a reference to the given time.Time and assigns it to the LastModifiedDateTime field.
func (o *ApplePushNotificationCertificate) SetLastModifiedDateTime(v time.Time) {
	o.LastModifiedDateTime = &v
}

// GetTopicIdentifier returns the TopicIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplePushNotificationCertificate) GetTopicIdentifier() string {
	if o == nil || o.TopicIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.TopicIdentifier.Get()
}

// GetTopicIdentifierOk returns a tuple with the TopicIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplePushNotificationCertificate) GetTopicIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TopicIdentifier.Get(), o.TopicIdentifier.IsSet()
}

// HasTopicIdentifier returns a boolean if a field has been set.
func (o *ApplePushNotificationCertificate) HasTopicIdentifier() bool {
	if o != nil && o.TopicIdentifier.IsSet() {
		return true
	}

	return false
}

// SetTopicIdentifier gets a reference to the given NullableString and assigns it to the TopicIdentifier field.
func (o *ApplePushNotificationCertificate) SetTopicIdentifier(v string) {
	o.TopicIdentifier.Set(&v)
}
// SetTopicIdentifierNil sets the value for TopicIdentifier to be an explicit nil
func (o *ApplePushNotificationCertificate) SetTopicIdentifierNil() {
	o.TopicIdentifier.Set(nil)
}

// UnsetTopicIdentifier ensures that no value is present for TopicIdentifier, not even an explicit nil
func (o *ApplePushNotificationCertificate) UnsetTopicIdentifier() {
	o.TopicIdentifier.Unset()
}

func (o ApplePushNotificationCertificate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppleIdentifier.IsSet() {
		toSerialize["appleIdentifier"] = o.AppleIdentifier.Get()
	}
	if o.Certificate.IsSet() {
		toSerialize["certificate"] = o.Certificate.Get()
	}
	if o.CertificateSerialNumber.IsSet() {
		toSerialize["certificateSerialNumber"] = o.CertificateSerialNumber.Get()
	}
	if o.ExpirationDateTime != nil {
		toSerialize["expirationDateTime"] = o.ExpirationDateTime
	}
	if o.LastModifiedDateTime != nil {
		toSerialize["lastModifiedDateTime"] = o.LastModifiedDateTime
	}
	if o.TopicIdentifier.IsSet() {
		toSerialize["topicIdentifier"] = o.TopicIdentifier.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableApplePushNotificationCertificate struct {
	value *ApplePushNotificationCertificate
	isSet bool
}

func (v NullableApplePushNotificationCertificate) Get() *ApplePushNotificationCertificate {
	return v.value
}

func (v *NullableApplePushNotificationCertificate) Set(val *ApplePushNotificationCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableApplePushNotificationCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableApplePushNotificationCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplePushNotificationCertificate(val *ApplePushNotificationCertificate) *NullableApplePushNotificationCertificate {
	return &NullableApplePushNotificationCertificate{value: val, isSet: true}
}

func (v NullableApplePushNotificationCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplePushNotificationCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


