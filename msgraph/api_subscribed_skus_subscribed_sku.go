/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// SubscribedSkusSubscribedSkuApiService SubscribedSkusSubscribedSkuApi service
type SubscribedSkusSubscribedSkuApiService service

type ApiSubscribedSkusSubscribedSkuCreateSubscribedSkuRequest struct {
	ctx _context.Context
	ApiService *SubscribedSkusSubscribedSkuApiService
	microsoftGraphSubscribedSku *MicrosoftGraphSubscribedSku
}

// New entity
func (r ApiSubscribedSkusSubscribedSkuCreateSubscribedSkuRequest) MicrosoftGraphSubscribedSku(microsoftGraphSubscribedSku MicrosoftGraphSubscribedSku) ApiSubscribedSkusSubscribedSkuCreateSubscribedSkuRequest {
	r.microsoftGraphSubscribedSku = &microsoftGraphSubscribedSku
	return r
}

func (r ApiSubscribedSkusSubscribedSkuCreateSubscribedSkuRequest) Execute() (MicrosoftGraphSubscribedSku, *_nethttp.Response, error) {
	return r.ApiService.SubscribedSkusSubscribedSkuCreateSubscribedSkuExecute(r)
}

/*
SubscribedSkusSubscribedSkuCreateSubscribedSku Add new entity to subscribedSkus

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSubscribedSkusSubscribedSkuCreateSubscribedSkuRequest
*/
func (a *SubscribedSkusSubscribedSkuApiService) SubscribedSkusSubscribedSkuCreateSubscribedSku(ctx _context.Context) ApiSubscribedSkusSubscribedSkuCreateSubscribedSkuRequest {
	return ApiSubscribedSkusSubscribedSkuCreateSubscribedSkuRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSubscribedSku
func (a *SubscribedSkusSubscribedSkuApiService) SubscribedSkusSubscribedSkuCreateSubscribedSkuExecute(r ApiSubscribedSkusSubscribedSkuCreateSubscribedSkuRequest) (MicrosoftGraphSubscribedSku, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSubscribedSku
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscribedSkusSubscribedSkuApiService.SubscribedSkusSubscribedSkuCreateSubscribedSku")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscribedSkus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSubscribedSku == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSubscribedSku is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSubscribedSku
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscribedSkusSubscribedSkuDeleteSubscribedSkuRequest struct {
	ctx _context.Context
	ApiService *SubscribedSkusSubscribedSkuApiService
	subscribedSkuId string
	ifMatch *string
}

// ETag
func (r ApiSubscribedSkusSubscribedSkuDeleteSubscribedSkuRequest) IfMatch(ifMatch string) ApiSubscribedSkusSubscribedSkuDeleteSubscribedSkuRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSubscribedSkusSubscribedSkuDeleteSubscribedSkuRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SubscribedSkusSubscribedSkuDeleteSubscribedSkuExecute(r)
}

/*
SubscribedSkusSubscribedSkuDeleteSubscribedSku Delete entity from subscribedSkus

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subscribedSkuId key: id of subscribedSku
 @return ApiSubscribedSkusSubscribedSkuDeleteSubscribedSkuRequest
*/
func (a *SubscribedSkusSubscribedSkuApiService) SubscribedSkusSubscribedSkuDeleteSubscribedSku(ctx _context.Context, subscribedSkuId string) ApiSubscribedSkusSubscribedSkuDeleteSubscribedSkuRequest {
	return ApiSubscribedSkusSubscribedSkuDeleteSubscribedSkuRequest{
		ApiService: a,
		ctx: ctx,
		subscribedSkuId: subscribedSkuId,
	}
}

// Execute executes the request
func (a *SubscribedSkusSubscribedSkuApiService) SubscribedSkusSubscribedSkuDeleteSubscribedSkuExecute(r ApiSubscribedSkusSubscribedSkuDeleteSubscribedSkuRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscribedSkusSubscribedSkuApiService.SubscribedSkusSubscribedSkuDeleteSubscribedSku")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscribedSkus/{subscribedSku-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subscribedSku-id"+"}", _neturl.PathEscape(parameterToString(r.subscribedSkuId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSubscribedSkusSubscribedSkuGetSubscribedSkuRequest struct {
	ctx _context.Context
	ApiService *SubscribedSkusSubscribedSkuApiService
	subscribedSkuId string
	select_ *[]string
}

// Select properties to be returned
func (r ApiSubscribedSkusSubscribedSkuGetSubscribedSkuRequest) Select_(select_ []string) ApiSubscribedSkusSubscribedSkuGetSubscribedSkuRequest {
	r.select_ = &select_
	return r
}

func (r ApiSubscribedSkusSubscribedSkuGetSubscribedSkuRequest) Execute() (MicrosoftGraphSubscribedSku, *_nethttp.Response, error) {
	return r.ApiService.SubscribedSkusSubscribedSkuGetSubscribedSkuExecute(r)
}

/*
SubscribedSkusSubscribedSkuGetSubscribedSku Get entity from subscribedSkus by key

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subscribedSkuId key: id of subscribedSku
 @return ApiSubscribedSkusSubscribedSkuGetSubscribedSkuRequest
*/
func (a *SubscribedSkusSubscribedSkuApiService) SubscribedSkusSubscribedSkuGetSubscribedSku(ctx _context.Context, subscribedSkuId string) ApiSubscribedSkusSubscribedSkuGetSubscribedSkuRequest {
	return ApiSubscribedSkusSubscribedSkuGetSubscribedSkuRequest{
		ApiService: a,
		ctx: ctx,
		subscribedSkuId: subscribedSkuId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSubscribedSku
func (a *SubscribedSkusSubscribedSkuApiService) SubscribedSkusSubscribedSkuGetSubscribedSkuExecute(r ApiSubscribedSkusSubscribedSkuGetSubscribedSkuRequest) (MicrosoftGraphSubscribedSku, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSubscribedSku
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscribedSkusSubscribedSkuApiService.SubscribedSkusSubscribedSkuGetSubscribedSku")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscribedSkus/{subscribedSku-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subscribedSku-id"+"}", _neturl.PathEscape(parameterToString(r.subscribedSkuId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscribedSkusSubscribedSkuListSubscribedSkuRequest struct {
	ctx _context.Context
	ApiService *SubscribedSkusSubscribedSkuApiService
	search *string
	orderby *[]string
	select_ *[]string
}

// Search items by search phrases
func (r ApiSubscribedSkusSubscribedSkuListSubscribedSkuRequest) Search(search string) ApiSubscribedSkusSubscribedSkuListSubscribedSkuRequest {
	r.search = &search
	return r
}
// Order items by property values
func (r ApiSubscribedSkusSubscribedSkuListSubscribedSkuRequest) Orderby(orderby []string) ApiSubscribedSkusSubscribedSkuListSubscribedSkuRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSubscribedSkusSubscribedSkuListSubscribedSkuRequest) Select_(select_ []string) ApiSubscribedSkusSubscribedSkuListSubscribedSkuRequest {
	r.select_ = &select_
	return r
}

func (r ApiSubscribedSkusSubscribedSkuListSubscribedSkuRequest) Execute() (CollectionOfSubscribedSku, *_nethttp.Response, error) {
	return r.ApiService.SubscribedSkusSubscribedSkuListSubscribedSkuExecute(r)
}

/*
SubscribedSkusSubscribedSkuListSubscribedSku Get entities from subscribedSkus

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSubscribedSkusSubscribedSkuListSubscribedSkuRequest
*/
func (a *SubscribedSkusSubscribedSkuApiService) SubscribedSkusSubscribedSkuListSubscribedSku(ctx _context.Context) ApiSubscribedSkusSubscribedSkuListSubscribedSkuRequest {
	return ApiSubscribedSkusSubscribedSkuListSubscribedSkuRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfSubscribedSku
func (a *SubscribedSkusSubscribedSkuApiService) SubscribedSkusSubscribedSkuListSubscribedSkuExecute(r ApiSubscribedSkusSubscribedSkuListSubscribedSkuRequest) (CollectionOfSubscribedSku, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSubscribedSku
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscribedSkusSubscribedSkuApiService.SubscribedSkusSubscribedSkuListSubscribedSku")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscribedSkus"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscribedSkusSubscribedSkuUpdateSubscribedSkuRequest struct {
	ctx _context.Context
	ApiService *SubscribedSkusSubscribedSkuApiService
	subscribedSkuId string
	microsoftGraphSubscribedSku *MicrosoftGraphSubscribedSku
}

// New property values
func (r ApiSubscribedSkusSubscribedSkuUpdateSubscribedSkuRequest) MicrosoftGraphSubscribedSku(microsoftGraphSubscribedSku MicrosoftGraphSubscribedSku) ApiSubscribedSkusSubscribedSkuUpdateSubscribedSkuRequest {
	r.microsoftGraphSubscribedSku = &microsoftGraphSubscribedSku
	return r
}

func (r ApiSubscribedSkusSubscribedSkuUpdateSubscribedSkuRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SubscribedSkusSubscribedSkuUpdateSubscribedSkuExecute(r)
}

/*
SubscribedSkusSubscribedSkuUpdateSubscribedSku Update entity in subscribedSkus

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param subscribedSkuId key: id of subscribedSku
 @return ApiSubscribedSkusSubscribedSkuUpdateSubscribedSkuRequest
*/
func (a *SubscribedSkusSubscribedSkuApiService) SubscribedSkusSubscribedSkuUpdateSubscribedSku(ctx _context.Context, subscribedSkuId string) ApiSubscribedSkusSubscribedSkuUpdateSubscribedSkuRequest {
	return ApiSubscribedSkusSubscribedSkuUpdateSubscribedSkuRequest{
		ApiService: a,
		ctx: ctx,
		subscribedSkuId: subscribedSkuId,
	}
}

// Execute executes the request
func (a *SubscribedSkusSubscribedSkuApiService) SubscribedSkusSubscribedSkuUpdateSubscribedSkuExecute(r ApiSubscribedSkusSubscribedSkuUpdateSubscribedSkuRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscribedSkusSubscribedSkuApiService.SubscribedSkusSubscribedSkuUpdateSubscribedSku")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscribedSkus/{subscribedSku-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subscribedSku-id"+"}", _neturl.PathEscape(parameterToString(r.subscribedSkuId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSubscribedSku == nil {
		return nil, reportError("microsoftGraphSubscribedSku is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSubscribedSku
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
