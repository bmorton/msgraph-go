/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject1492 struct for InlineObject1492
type InlineObject1492 struct {
	Number AnyOfobject `json:"number,omitempty"`
	NumDigits AnyOfobject `json:"numDigits,omitempty"`
}

// NewInlineObject1492 instantiates a new InlineObject1492 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1492() *InlineObject1492 {
	this := InlineObject1492{}
	return &this
}

// NewInlineObject1492WithDefaults instantiates a new InlineObject1492 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1492WithDefaults() *InlineObject1492 {
	this := InlineObject1492{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1492) GetNumber() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1492) GetNumberOk() (*AnyOfobject, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return &o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *InlineObject1492) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given AnyOfobject and assigns it to the Number field.
func (o *InlineObject1492) SetNumber(v AnyOfobject) {
	o.Number = v
}

// GetNumDigits returns the NumDigits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1492) GetNumDigits() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.NumDigits
}

// GetNumDigitsOk returns a tuple with the NumDigits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1492) GetNumDigitsOk() (*AnyOfobject, bool) {
	if o == nil || o.NumDigits == nil {
		return nil, false
	}
	return &o.NumDigits, true
}

// HasNumDigits returns a boolean if a field has been set.
func (o *InlineObject1492) HasNumDigits() bool {
	if o != nil && o.NumDigits != nil {
		return true
	}

	return false
}

// SetNumDigits gets a reference to the given AnyOfobject and assigns it to the NumDigits field.
func (o *InlineObject1492) SetNumDigits(v AnyOfobject) {
	o.NumDigits = v
}

func (o InlineObject1492) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	if o.NumDigits != nil {
		toSerialize["numDigits"] = o.NumDigits
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1492 struct {
	value *InlineObject1492
	isSet bool
}

func (v NullableInlineObject1492) Get() *InlineObject1492 {
	return v.value
}

func (v *NullableInlineObject1492) Set(val *InlineObject1492) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1492) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1492) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1492(val *InlineObject1492) *NullableInlineObject1492 {
	return &NullableInlineObject1492{value: val, isSet: true}
}

func (v NullableInlineObject1492) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1492) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


