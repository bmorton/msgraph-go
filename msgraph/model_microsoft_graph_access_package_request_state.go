/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphAccessPackageRequestState the model 'MicrosoftGraphAccessPackageRequestState'
type MicrosoftGraphAccessPackageRequestState string

// List of microsoft.graph.accessPackageRequestState
const (
	SUBMITTED MicrosoftGraphAccessPackageRequestState = "submitted"
	PENDING_APPROVAL MicrosoftGraphAccessPackageRequestState = "pendingApproval"
	DELIVERING MicrosoftGraphAccessPackageRequestState = "delivering"
	DELIVERED MicrosoftGraphAccessPackageRequestState = "delivered"
	DELIVERY_FAILED MicrosoftGraphAccessPackageRequestState = "deliveryFailed"
	DENIED MicrosoftGraphAccessPackageRequestState = "denied"
	SCHEDULED MicrosoftGraphAccessPackageRequestState = "scheduled"
	CANCELED MicrosoftGraphAccessPackageRequestState = "canceled"
	PARTIALLY_DELIVERED MicrosoftGraphAccessPackageRequestState = "partiallyDelivered"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphAccessPackageRequestState = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphAccessPackageRequestState enum
var AllowedMicrosoftGraphAccessPackageRequestStateEnumValues = []MicrosoftGraphAccessPackageRequestState{
	"submitted",
	"pendingApproval",
	"delivering",
	"delivered",
	"deliveryFailed",
	"denied",
	"scheduled",
	"canceled",
	"partiallyDelivered",
	"unknownFutureValue",
}

func (v *MicrosoftGraphAccessPackageRequestState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphAccessPackageRequestState(value)
	for _, existing := range AllowedMicrosoftGraphAccessPackageRequestStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphAccessPackageRequestState", value)
}

// NewMicrosoftGraphAccessPackageRequestStateFromValue returns a pointer to a valid MicrosoftGraphAccessPackageRequestState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphAccessPackageRequestStateFromValue(v string) (*MicrosoftGraphAccessPackageRequestState, error) {
	ev := MicrosoftGraphAccessPackageRequestState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphAccessPackageRequestState: valid values are %v", v, AllowedMicrosoftGraphAccessPackageRequestStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphAccessPackageRequestState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphAccessPackageRequestStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.accessPackageRequestState value
func (v MicrosoftGraphAccessPackageRequestState) Ptr() *MicrosoftGraphAccessPackageRequestState {
	return &v
}

type NullableMicrosoftGraphAccessPackageRequestState struct {
	value *MicrosoftGraphAccessPackageRequestState
	isSet bool
}

func (v NullableMicrosoftGraphAccessPackageRequestState) Get() *MicrosoftGraphAccessPackageRequestState {
	return v.value
}

func (v *NullableMicrosoftGraphAccessPackageRequestState) Set(val *MicrosoftGraphAccessPackageRequestState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAccessPackageRequestState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAccessPackageRequestState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAccessPackageRequestState(val *MicrosoftGraphAccessPackageRequestState) *NullableMicrosoftGraphAccessPackageRequestState {
	return &NullableMicrosoftGraphAccessPackageRequestState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAccessPackageRequestState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAccessPackageRequestState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

