/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// MeInferenceClassificationApiService MeInferenceClassificationApi service
type MeInferenceClassificationApiService service

type ApiMeDeleteInferenceClassificationRequest struct {
	ctx _context.Context
	ApiService *MeInferenceClassificationApiService
	ifMatch *string
}

// ETag
func (r ApiMeDeleteInferenceClassificationRequest) IfMatch(ifMatch string) ApiMeDeleteInferenceClassificationRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeDeleteInferenceClassificationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeDeleteInferenceClassificationExecute(r)
}

/*
MeDeleteInferenceClassification Delete navigation property inferenceClassification for me

Relevance classification of the user's messages based on explicit designations which override inferred relevance or importance.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeDeleteInferenceClassificationRequest
*/
func (a *MeInferenceClassificationApiService) MeDeleteInferenceClassification(ctx _context.Context) ApiMeDeleteInferenceClassificationRequest {
	return ApiMeDeleteInferenceClassificationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MeInferenceClassificationApiService) MeDeleteInferenceClassificationExecute(r ApiMeDeleteInferenceClassificationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeInferenceClassificationApiService.MeDeleteInferenceClassification")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/inferenceClassification"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeGetInferenceClassificationRequest struct {
	ctx _context.Context
	ApiService *MeInferenceClassificationApiService
	select_ *[]string
}

// Select properties to be returned
func (r ApiMeGetInferenceClassificationRequest) Select_(select_ []string) ApiMeGetInferenceClassificationRequest {
	r.select_ = &select_
	return r
}

func (r ApiMeGetInferenceClassificationRequest) Execute() (MicrosoftGraphInferenceClassification, *_nethttp.Response, error) {
	return r.ApiService.MeGetInferenceClassificationExecute(r)
}

/*
MeGetInferenceClassification Get inferenceClassification from me

Relevance classification of the user's messages based on explicit designations which override inferred relevance or importance.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeGetInferenceClassificationRequest
*/
func (a *MeInferenceClassificationApiService) MeGetInferenceClassification(ctx _context.Context) ApiMeGetInferenceClassificationRequest {
	return ApiMeGetInferenceClassificationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphInferenceClassification
func (a *MeInferenceClassificationApiService) MeGetInferenceClassificationExecute(r ApiMeGetInferenceClassificationRequest) (MicrosoftGraphInferenceClassification, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphInferenceClassification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeInferenceClassificationApiService.MeGetInferenceClassification")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/inferenceClassification"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInferenceClassificationCreateOverridesRequest struct {
	ctx _context.Context
	ApiService *MeInferenceClassificationApiService
	microsoftGraphInferenceClassificationOverride *MicrosoftGraphInferenceClassificationOverride
}

// New navigation property
func (r ApiMeInferenceClassificationCreateOverridesRequest) MicrosoftGraphInferenceClassificationOverride(microsoftGraphInferenceClassificationOverride MicrosoftGraphInferenceClassificationOverride) ApiMeInferenceClassificationCreateOverridesRequest {
	r.microsoftGraphInferenceClassificationOverride = &microsoftGraphInferenceClassificationOverride
	return r
}

func (r ApiMeInferenceClassificationCreateOverridesRequest) Execute() (MicrosoftGraphInferenceClassificationOverride, *_nethttp.Response, error) {
	return r.ApiService.MeInferenceClassificationCreateOverridesExecute(r)
}

/*
MeInferenceClassificationCreateOverrides Create new navigation property to overrides for me

A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeInferenceClassificationCreateOverridesRequest
*/
func (a *MeInferenceClassificationApiService) MeInferenceClassificationCreateOverrides(ctx _context.Context) ApiMeInferenceClassificationCreateOverridesRequest {
	return ApiMeInferenceClassificationCreateOverridesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphInferenceClassificationOverride
func (a *MeInferenceClassificationApiService) MeInferenceClassificationCreateOverridesExecute(r ApiMeInferenceClassificationCreateOverridesRequest) (MicrosoftGraphInferenceClassificationOverride, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphInferenceClassificationOverride
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeInferenceClassificationApiService.MeInferenceClassificationCreateOverrides")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/inferenceClassification/overrides"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphInferenceClassificationOverride == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphInferenceClassificationOverride is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphInferenceClassificationOverride
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInferenceClassificationDeleteOverridesRequest struct {
	ctx _context.Context
	ApiService *MeInferenceClassificationApiService
	inferenceClassificationOverrideId string
	ifMatch *string
}

// ETag
func (r ApiMeInferenceClassificationDeleteOverridesRequest) IfMatch(ifMatch string) ApiMeInferenceClassificationDeleteOverridesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeInferenceClassificationDeleteOverridesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeInferenceClassificationDeleteOverridesExecute(r)
}

/*
MeInferenceClassificationDeleteOverrides Delete navigation property overrides for me

A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param inferenceClassificationOverrideId key: id of inferenceClassificationOverride
 @return ApiMeInferenceClassificationDeleteOverridesRequest
*/
func (a *MeInferenceClassificationApiService) MeInferenceClassificationDeleteOverrides(ctx _context.Context, inferenceClassificationOverrideId string) ApiMeInferenceClassificationDeleteOverridesRequest {
	return ApiMeInferenceClassificationDeleteOverridesRequest{
		ApiService: a,
		ctx: ctx,
		inferenceClassificationOverrideId: inferenceClassificationOverrideId,
	}
}

// Execute executes the request
func (a *MeInferenceClassificationApiService) MeInferenceClassificationDeleteOverridesExecute(r ApiMeInferenceClassificationDeleteOverridesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeInferenceClassificationApiService.MeInferenceClassificationDeleteOverrides")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/inferenceClassification/overrides/{inferenceClassificationOverride-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"inferenceClassificationOverride-id"+"}", _neturl.PathEscape(parameterToString(r.inferenceClassificationOverrideId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeInferenceClassificationGetOverridesRequest struct {
	ctx _context.Context
	ApiService *MeInferenceClassificationApiService
	inferenceClassificationOverrideId string
	select_ *[]string
}

// Select properties to be returned
func (r ApiMeInferenceClassificationGetOverridesRequest) Select_(select_ []string) ApiMeInferenceClassificationGetOverridesRequest {
	r.select_ = &select_
	return r
}

func (r ApiMeInferenceClassificationGetOverridesRequest) Execute() (MicrosoftGraphInferenceClassificationOverride, *_nethttp.Response, error) {
	return r.ApiService.MeInferenceClassificationGetOverridesExecute(r)
}

/*
MeInferenceClassificationGetOverrides Get overrides from me

A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param inferenceClassificationOverrideId key: id of inferenceClassificationOverride
 @return ApiMeInferenceClassificationGetOverridesRequest
*/
func (a *MeInferenceClassificationApiService) MeInferenceClassificationGetOverrides(ctx _context.Context, inferenceClassificationOverrideId string) ApiMeInferenceClassificationGetOverridesRequest {
	return ApiMeInferenceClassificationGetOverridesRequest{
		ApiService: a,
		ctx: ctx,
		inferenceClassificationOverrideId: inferenceClassificationOverrideId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphInferenceClassificationOverride
func (a *MeInferenceClassificationApiService) MeInferenceClassificationGetOverridesExecute(r ApiMeInferenceClassificationGetOverridesRequest) (MicrosoftGraphInferenceClassificationOverride, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphInferenceClassificationOverride
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeInferenceClassificationApiService.MeInferenceClassificationGetOverrides")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/inferenceClassification/overrides/{inferenceClassificationOverride-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"inferenceClassificationOverride-id"+"}", _neturl.PathEscape(parameterToString(r.inferenceClassificationOverrideId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInferenceClassificationListOverridesRequest struct {
	ctx _context.Context
	ApiService *MeInferenceClassificationApiService
	top *int32
	skip *int32
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
}

// Show only the first n items
func (r ApiMeInferenceClassificationListOverridesRequest) Top(top int32) ApiMeInferenceClassificationListOverridesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeInferenceClassificationListOverridesRequest) Skip(skip int32) ApiMeInferenceClassificationListOverridesRequest {
	r.skip = &skip
	return r
}
// Filter items by property values
func (r ApiMeInferenceClassificationListOverridesRequest) Filter(filter string) ApiMeInferenceClassificationListOverridesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeInferenceClassificationListOverridesRequest) Count(count bool) ApiMeInferenceClassificationListOverridesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeInferenceClassificationListOverridesRequest) Orderby(orderby []string) ApiMeInferenceClassificationListOverridesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeInferenceClassificationListOverridesRequest) Select_(select_ []string) ApiMeInferenceClassificationListOverridesRequest {
	r.select_ = &select_
	return r
}

func (r ApiMeInferenceClassificationListOverridesRequest) Execute() (CollectionOfInferenceClassificationOverride, *_nethttp.Response, error) {
	return r.ApiService.MeInferenceClassificationListOverridesExecute(r)
}

/*
MeInferenceClassificationListOverrides Get overrides from me

A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeInferenceClassificationListOverridesRequest
*/
func (a *MeInferenceClassificationApiService) MeInferenceClassificationListOverrides(ctx _context.Context) ApiMeInferenceClassificationListOverridesRequest {
	return ApiMeInferenceClassificationListOverridesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfInferenceClassificationOverride
func (a *MeInferenceClassificationApiService) MeInferenceClassificationListOverridesExecute(r ApiMeInferenceClassificationListOverridesRequest) (CollectionOfInferenceClassificationOverride, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfInferenceClassificationOverride
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeInferenceClassificationApiService.MeInferenceClassificationListOverrides")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/inferenceClassification/overrides"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInferenceClassificationUpdateOverridesRequest struct {
	ctx _context.Context
	ApiService *MeInferenceClassificationApiService
	inferenceClassificationOverrideId string
	microsoftGraphInferenceClassificationOverride *MicrosoftGraphInferenceClassificationOverride
}

// New navigation property values
func (r ApiMeInferenceClassificationUpdateOverridesRequest) MicrosoftGraphInferenceClassificationOverride(microsoftGraphInferenceClassificationOverride MicrosoftGraphInferenceClassificationOverride) ApiMeInferenceClassificationUpdateOverridesRequest {
	r.microsoftGraphInferenceClassificationOverride = &microsoftGraphInferenceClassificationOverride
	return r
}

func (r ApiMeInferenceClassificationUpdateOverridesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeInferenceClassificationUpdateOverridesExecute(r)
}

/*
MeInferenceClassificationUpdateOverrides Update the navigation property overrides in me

A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param inferenceClassificationOverrideId key: id of inferenceClassificationOverride
 @return ApiMeInferenceClassificationUpdateOverridesRequest
*/
func (a *MeInferenceClassificationApiService) MeInferenceClassificationUpdateOverrides(ctx _context.Context, inferenceClassificationOverrideId string) ApiMeInferenceClassificationUpdateOverridesRequest {
	return ApiMeInferenceClassificationUpdateOverridesRequest{
		ApiService: a,
		ctx: ctx,
		inferenceClassificationOverrideId: inferenceClassificationOverrideId,
	}
}

// Execute executes the request
func (a *MeInferenceClassificationApiService) MeInferenceClassificationUpdateOverridesExecute(r ApiMeInferenceClassificationUpdateOverridesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeInferenceClassificationApiService.MeInferenceClassificationUpdateOverrides")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/inferenceClassification/overrides/{inferenceClassificationOverride-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"inferenceClassificationOverride-id"+"}", _neturl.PathEscape(parameterToString(r.inferenceClassificationOverrideId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphInferenceClassificationOverride == nil {
		return nil, reportError("microsoftGraphInferenceClassificationOverride is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphInferenceClassificationOverride
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeUpdateInferenceClassificationRequest struct {
	ctx _context.Context
	ApiService *MeInferenceClassificationApiService
	microsoftGraphInferenceClassification *MicrosoftGraphInferenceClassification
}

// New navigation property values
func (r ApiMeUpdateInferenceClassificationRequest) MicrosoftGraphInferenceClassification(microsoftGraphInferenceClassification MicrosoftGraphInferenceClassification) ApiMeUpdateInferenceClassificationRequest {
	r.microsoftGraphInferenceClassification = &microsoftGraphInferenceClassification
	return r
}

func (r ApiMeUpdateInferenceClassificationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeUpdateInferenceClassificationExecute(r)
}

/*
MeUpdateInferenceClassification Update the navigation property inferenceClassification in me

Relevance classification of the user's messages based on explicit designations which override inferred relevance or importance.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeUpdateInferenceClassificationRequest
*/
func (a *MeInferenceClassificationApiService) MeUpdateInferenceClassification(ctx _context.Context) ApiMeUpdateInferenceClassificationRequest {
	return ApiMeUpdateInferenceClassificationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MeInferenceClassificationApiService) MeUpdateInferenceClassificationExecute(r ApiMeUpdateInferenceClassificationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeInferenceClassificationApiService.MeUpdateInferenceClassification")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/inferenceClassification"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphInferenceClassification == nil {
		return nil, reportError("microsoftGraphInferenceClassification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphInferenceClassification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
