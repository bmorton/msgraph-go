/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ChatsConversationMemberApiService ChatsConversationMemberApi service
type ChatsConversationMemberApiService service

type ApiChatsCreateMembersRequest struct {
	ctx _context.Context
	ApiService *ChatsConversationMemberApiService
	chatId string
	microsoftGraphConversationMember *MicrosoftGraphConversationMember
}

// New navigation property
func (r ApiChatsCreateMembersRequest) MicrosoftGraphConversationMember(microsoftGraphConversationMember MicrosoftGraphConversationMember) ApiChatsCreateMembersRequest {
	r.microsoftGraphConversationMember = &microsoftGraphConversationMember
	return r
}

func (r ApiChatsCreateMembersRequest) Execute() (MicrosoftGraphConversationMember, *_nethttp.Response, error) {
	return r.ApiService.ChatsCreateMembersExecute(r)
}

/*
ChatsCreateMembers Create new navigation property to members for chats

A collection of all the members in the chat. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @return ApiChatsCreateMembersRequest
*/
func (a *ChatsConversationMemberApiService) ChatsCreateMembers(ctx _context.Context, chatId string) ApiChatsCreateMembersRequest {
	return ApiChatsCreateMembersRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphConversationMember
func (a *ChatsConversationMemberApiService) ChatsCreateMembersExecute(r ApiChatsCreateMembersRequest) (MicrosoftGraphConversationMember, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphConversationMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsConversationMemberApiService.ChatsCreateMembers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphConversationMember == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphConversationMember is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphConversationMember
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsDeleteMembersRequest struct {
	ctx _context.Context
	ApiService *ChatsConversationMemberApiService
	chatId string
	conversationMemberId string
	ifMatch *string
}

// ETag
func (r ApiChatsDeleteMembersRequest) IfMatch(ifMatch string) ApiChatsDeleteMembersRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiChatsDeleteMembersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ChatsDeleteMembersExecute(r)
}

/*
ChatsDeleteMembers Delete navigation property members for chats

A collection of all the members in the chat. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param conversationMemberId key: id of conversationMember
 @return ApiChatsDeleteMembersRequest
*/
func (a *ChatsConversationMemberApiService) ChatsDeleteMembers(ctx _context.Context, chatId string, conversationMemberId string) ApiChatsDeleteMembersRequest {
	return ApiChatsDeleteMembersRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		conversationMemberId: conversationMemberId,
	}
}

// Execute executes the request
func (a *ChatsConversationMemberApiService) ChatsDeleteMembersExecute(r ApiChatsDeleteMembersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsConversationMemberApiService.ChatsDeleteMembers")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/members/{conversationMember-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"conversationMember-id"+"}", _neturl.PathEscape(parameterToString(r.conversationMemberId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiChatsGetMembersRequest struct {
	ctx _context.Context
	ApiService *ChatsConversationMemberApiService
	chatId string
	conversationMemberId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiChatsGetMembersRequest) Select_(select_ []string) ApiChatsGetMembersRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiChatsGetMembersRequest) Expand(expand []string) ApiChatsGetMembersRequest {
	r.expand = &expand
	return r
}

func (r ApiChatsGetMembersRequest) Execute() (MicrosoftGraphConversationMember, *_nethttp.Response, error) {
	return r.ApiService.ChatsGetMembersExecute(r)
}

/*
ChatsGetMembers Get members from chats

A collection of all the members in the chat. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param conversationMemberId key: id of conversationMember
 @return ApiChatsGetMembersRequest
*/
func (a *ChatsConversationMemberApiService) ChatsGetMembers(ctx _context.Context, chatId string, conversationMemberId string) ApiChatsGetMembersRequest {
	return ApiChatsGetMembersRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		conversationMemberId: conversationMemberId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphConversationMember
func (a *ChatsConversationMemberApiService) ChatsGetMembersExecute(r ApiChatsGetMembersRequest) (MicrosoftGraphConversationMember, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphConversationMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsConversationMemberApiService.ChatsGetMembers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/members/{conversationMember-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"conversationMember-id"+"}", _neturl.PathEscape(parameterToString(r.conversationMemberId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsListMembersRequest struct {
	ctx _context.Context
	ApiService *ChatsConversationMemberApiService
	chatId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiChatsListMembersRequest) Top(top int32) ApiChatsListMembersRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiChatsListMembersRequest) Skip(skip int32) ApiChatsListMembersRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiChatsListMembersRequest) Search(search string) ApiChatsListMembersRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiChatsListMembersRequest) Filter(filter string) ApiChatsListMembersRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiChatsListMembersRequest) Count(count bool) ApiChatsListMembersRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiChatsListMembersRequest) Orderby(orderby []string) ApiChatsListMembersRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiChatsListMembersRequest) Select_(select_ []string) ApiChatsListMembersRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiChatsListMembersRequest) Expand(expand []string) ApiChatsListMembersRequest {
	r.expand = &expand
	return r
}

func (r ApiChatsListMembersRequest) Execute() (CollectionOfConversationMember, *_nethttp.Response, error) {
	return r.ApiService.ChatsListMembersExecute(r)
}

/*
ChatsListMembers Get members from chats

A collection of all the members in the chat. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @return ApiChatsListMembersRequest
*/
func (a *ChatsConversationMemberApiService) ChatsListMembers(ctx _context.Context, chatId string) ApiChatsListMembersRequest {
	return ApiChatsListMembersRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
	}
}

// Execute executes the request
//  @return CollectionOfConversationMember
func (a *ChatsConversationMemberApiService) ChatsListMembersExecute(r ApiChatsListMembersRequest) (CollectionOfConversationMember, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfConversationMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsConversationMemberApiService.ChatsListMembers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChatsUpdateMembersRequest struct {
	ctx _context.Context
	ApiService *ChatsConversationMemberApiService
	chatId string
	conversationMemberId string
	microsoftGraphConversationMember *MicrosoftGraphConversationMember
}

// New navigation property values
func (r ApiChatsUpdateMembersRequest) MicrosoftGraphConversationMember(microsoftGraphConversationMember MicrosoftGraphConversationMember) ApiChatsUpdateMembersRequest {
	r.microsoftGraphConversationMember = &microsoftGraphConversationMember
	return r
}

func (r ApiChatsUpdateMembersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ChatsUpdateMembersExecute(r)
}

/*
ChatsUpdateMembers Update the navigation property members in chats

A collection of all the members in the chat. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param chatId key: id of chat
 @param conversationMemberId key: id of conversationMember
 @return ApiChatsUpdateMembersRequest
*/
func (a *ChatsConversationMemberApiService) ChatsUpdateMembers(ctx _context.Context, chatId string, conversationMemberId string) ApiChatsUpdateMembersRequest {
	return ApiChatsUpdateMembersRequest{
		ApiService: a,
		ctx: ctx,
		chatId: chatId,
		conversationMemberId: conversationMemberId,
	}
}

// Execute executes the request
func (a *ChatsConversationMemberApiService) ChatsUpdateMembersExecute(r ApiChatsUpdateMembersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatsConversationMemberApiService.ChatsUpdateMembers")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chats/{chat-id}/members/{conversationMember-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"chat-id"+"}", _neturl.PathEscape(parameterToString(r.chatId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"conversationMember-id"+"}", _neturl.PathEscape(parameterToString(r.conversationMemberId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphConversationMember == nil {
		return nil, reportError("microsoftGraphConversationMember is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphConversationMember
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
