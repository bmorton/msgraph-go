/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphPrintOrientation the model 'MicrosoftGraphPrintOrientation'
type MicrosoftGraphPrintOrientation string

// List of microsoft.graph.printOrientation
const (
	PORTRAIT MicrosoftGraphPrintOrientation = "portrait"
	LANDSCAPE MicrosoftGraphPrintOrientation = "landscape"
	REVERSE_LANDSCAPE MicrosoftGraphPrintOrientation = "reverseLandscape"
	REVERSE_PORTRAIT MicrosoftGraphPrintOrientation = "reversePortrait"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphPrintOrientation = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphPrintOrientation enum
var AllowedMicrosoftGraphPrintOrientationEnumValues = []MicrosoftGraphPrintOrientation{
	"portrait",
	"landscape",
	"reverseLandscape",
	"reversePortrait",
	"unknownFutureValue",
}

func (v *MicrosoftGraphPrintOrientation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphPrintOrientation(value)
	for _, existing := range AllowedMicrosoftGraphPrintOrientationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphPrintOrientation", value)
}

// NewMicrosoftGraphPrintOrientationFromValue returns a pointer to a valid MicrosoftGraphPrintOrientation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphPrintOrientationFromValue(v string) (*MicrosoftGraphPrintOrientation, error) {
	ev := MicrosoftGraphPrintOrientation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphPrintOrientation: valid values are %v", v, AllowedMicrosoftGraphPrintOrientationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphPrintOrientation) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphPrintOrientationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.printOrientation value
func (v MicrosoftGraphPrintOrientation) Ptr() *MicrosoftGraphPrintOrientation {
	return &v
}

type NullableMicrosoftGraphPrintOrientation struct {
	value *MicrosoftGraphPrintOrientation
	isSet bool
}

func (v NullableMicrosoftGraphPrintOrientation) Get() *MicrosoftGraphPrintOrientation {
	return v.value
}

func (v *NullableMicrosoftGraphPrintOrientation) Set(val *MicrosoftGraphPrintOrientation) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPrintOrientation) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPrintOrientation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPrintOrientation(val *MicrosoftGraphPrintOrientation) *NullableMicrosoftGraphPrintOrientation {
	return &NullableMicrosoftGraphPrintOrientation{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPrintOrientation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPrintOrientation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

