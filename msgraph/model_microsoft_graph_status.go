/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphStatus the model 'MicrosoftGraphStatus'
type MicrosoftGraphStatus string

// List of microsoft.graph.status
const (
	ACTIVE MicrosoftGraphStatus = "active"
	UPDATED MicrosoftGraphStatus = "updated"
	DELETED MicrosoftGraphStatus = "deleted"
	IGNORED MicrosoftGraphStatus = "ignored"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphStatus = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphStatus enum
var AllowedMicrosoftGraphStatusEnumValues = []MicrosoftGraphStatus{
	"active",
	"updated",
	"deleted",
	"ignored",
	"unknownFutureValue",
}

func (v *MicrosoftGraphStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphStatus(value)
	for _, existing := range AllowedMicrosoftGraphStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphStatus", value)
}

// NewMicrosoftGraphStatusFromValue returns a pointer to a valid MicrosoftGraphStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphStatusFromValue(v string) (*MicrosoftGraphStatus, error) {
	ev := MicrosoftGraphStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphStatus: valid values are %v", v, AllowedMicrosoftGraphStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphStatus) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.status value
func (v MicrosoftGraphStatus) Ptr() *MicrosoftGraphStatus {
	return &v
}

type NullableMicrosoftGraphStatus struct {
	value *MicrosoftGraphStatus
	isSet bool
}

func (v NullableMicrosoftGraphStatus) Get() *MicrosoftGraphStatus {
	return v.value
}

func (v *NullableMicrosoftGraphStatus) Set(val *MicrosoftGraphStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphStatus(val *MicrosoftGraphStatus) *NullableMicrosoftGraphStatus {
	return &NullableMicrosoftGraphStatus{value: val, isSet: true}
}

func (v NullableMicrosoftGraphStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

