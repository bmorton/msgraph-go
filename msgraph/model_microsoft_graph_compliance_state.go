/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphComplianceState Compliance state.
type MicrosoftGraphComplianceState string

// List of microsoft.graph.complianceState
const (
	UNKNOWN MicrosoftGraphComplianceState = "unknown"
	COMPLIANT MicrosoftGraphComplianceState = "compliant"
	NONCOMPLIANT MicrosoftGraphComplianceState = "noncompliant"
	CONFLICT MicrosoftGraphComplianceState = "conflict"
	ERROR MicrosoftGraphComplianceState = "error"
	IN_GRACE_PERIOD MicrosoftGraphComplianceState = "inGracePeriod"
	CONFIG_MANAGER MicrosoftGraphComplianceState = "configManager"
)

// All allowed values of MicrosoftGraphComplianceState enum
var AllowedMicrosoftGraphComplianceStateEnumValues = []MicrosoftGraphComplianceState{
	"unknown",
	"compliant",
	"noncompliant",
	"conflict",
	"error",
	"inGracePeriod",
	"configManager",
}

func (v *MicrosoftGraphComplianceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphComplianceState(value)
	for _, existing := range AllowedMicrosoftGraphComplianceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphComplianceState", value)
}

// NewMicrosoftGraphComplianceStateFromValue returns a pointer to a valid MicrosoftGraphComplianceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphComplianceStateFromValue(v string) (*MicrosoftGraphComplianceState, error) {
	ev := MicrosoftGraphComplianceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphComplianceState: valid values are %v", v, AllowedMicrosoftGraphComplianceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphComplianceState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphComplianceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.complianceState value
func (v MicrosoftGraphComplianceState) Ptr() *MicrosoftGraphComplianceState {
	return &v
}

type NullableMicrosoftGraphComplianceState struct {
	value *MicrosoftGraphComplianceState
	isSet bool
}

func (v NullableMicrosoftGraphComplianceState) Get() *MicrosoftGraphComplianceState {
	return v.value
}

func (v *NullableMicrosoftGraphComplianceState) Set(val *MicrosoftGraphComplianceState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphComplianceState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphComplianceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphComplianceState(val *MicrosoftGraphComplianceState) *NullableMicrosoftGraphComplianceState {
	return &NullableMicrosoftGraphComplianceState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphComplianceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphComplianceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

