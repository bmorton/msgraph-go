/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject1606 struct for InlineObject1606
type InlineObject1606 struct {
	Index NullableInt32 `json:"index,omitempty"`
	Values AnyOfobject `json:"values,omitempty"`
	Name NullableString `json:"name,omitempty"`
}

// NewInlineObject1606 instantiates a new InlineObject1606 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1606() *InlineObject1606 {
	this := InlineObject1606{}
	return &this
}

// NewInlineObject1606WithDefaults instantiates a new InlineObject1606 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1606WithDefaults() *InlineObject1606 {
	this := InlineObject1606{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1606) GetIndex() int32 {
	if o == nil || o.Index.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Index.Get()
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1606) GetIndexOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Index.Get(), o.Index.IsSet()
}

// HasIndex returns a boolean if a field has been set.
func (o *InlineObject1606) HasIndex() bool {
	if o != nil && o.Index.IsSet() {
		return true
	}

	return false
}

// SetIndex gets a reference to the given NullableInt32 and assigns it to the Index field.
func (o *InlineObject1606) SetIndex(v int32) {
	o.Index.Set(&v)
}
// SetIndexNil sets the value for Index to be an explicit nil
func (o *InlineObject1606) SetIndexNil() {
	o.Index.Set(nil)
}

// UnsetIndex ensures that no value is present for Index, not even an explicit nil
func (o *InlineObject1606) UnsetIndex() {
	o.Index.Unset()
}

// GetValues returns the Values field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1606) GetValues() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1606) GetValuesOk() (*AnyOfobject, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return &o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *InlineObject1606) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given AnyOfobject and assigns it to the Values field.
func (o *InlineObject1606) SetValues(v AnyOfobject) {
	o.Values = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1606) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1606) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *InlineObject1606) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *InlineObject1606) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *InlineObject1606) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *InlineObject1606) UnsetName() {
	o.Name.Unset()
}

func (o InlineObject1606) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Index.IsSet() {
		toSerialize["index"] = o.Index.Get()
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1606 struct {
	value *InlineObject1606
	isSet bool
}

func (v NullableInlineObject1606) Get() *InlineObject1606 {
	return v.value
}

func (v *NullableInlineObject1606) Set(val *InlineObject1606) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1606) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1606) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1606(val *InlineObject1606) *NullableInlineObject1606 {
	return &NullableInlineObject1606{value: val, isSet: true}
}

func (v NullableInlineObject1606) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1606) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


