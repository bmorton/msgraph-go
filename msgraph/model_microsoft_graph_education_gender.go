/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphEducationGender the model 'MicrosoftGraphEducationGender'
type MicrosoftGraphEducationGender string

// List of microsoft.graph.educationGender
const (
	FEMALE MicrosoftGraphEducationGender = "female"
	MALE MicrosoftGraphEducationGender = "male"
	OTHER MicrosoftGraphEducationGender = "other"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphEducationGender = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphEducationGender enum
var AllowedMicrosoftGraphEducationGenderEnumValues = []MicrosoftGraphEducationGender{
	"female",
	"male",
	"other",
	"unknownFutureValue",
}

func (v *MicrosoftGraphEducationGender) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphEducationGender(value)
	for _, existing := range AllowedMicrosoftGraphEducationGenderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphEducationGender", value)
}

// NewMicrosoftGraphEducationGenderFromValue returns a pointer to a valid MicrosoftGraphEducationGender
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphEducationGenderFromValue(v string) (*MicrosoftGraphEducationGender, error) {
	ev := MicrosoftGraphEducationGender(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphEducationGender: valid values are %v", v, AllowedMicrosoftGraphEducationGenderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphEducationGender) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphEducationGenderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.educationGender value
func (v MicrosoftGraphEducationGender) Ptr() *MicrosoftGraphEducationGender {
	return &v
}

type NullableMicrosoftGraphEducationGender struct {
	value *MicrosoftGraphEducationGender
	isSet bool
}

func (v NullableMicrosoftGraphEducationGender) Get() *MicrosoftGraphEducationGender {
	return v.value
}

func (v *NullableMicrosoftGraphEducationGender) Set(val *MicrosoftGraphEducationGender) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphEducationGender) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphEducationGender) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphEducationGender(val *MicrosoftGraphEducationGender) *NullableMicrosoftGraphEducationGender {
	return &NullableMicrosoftGraphEducationGender{value: val, isSet: true}
}

func (v NullableMicrosoftGraphEducationGender) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphEducationGender) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

