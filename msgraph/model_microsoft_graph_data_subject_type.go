/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphDataSubjectType the model 'MicrosoftGraphDataSubjectType'
type MicrosoftGraphDataSubjectType string

// List of microsoft.graph.dataSubjectType
const (
	CUSTOMER MicrosoftGraphDataSubjectType = "customer"
	CURRENT_EMPLOYEE MicrosoftGraphDataSubjectType = "currentEmployee"
	FORMER_EMPLOYEE MicrosoftGraphDataSubjectType = "formerEmployee"
	PROSPECTIVE_EMPLOYEE MicrosoftGraphDataSubjectType = "prospectiveEmployee"
	STUDENT MicrosoftGraphDataSubjectType = "student"
	TEACHER MicrosoftGraphDataSubjectType = "teacher"
	FACULTY MicrosoftGraphDataSubjectType = "faculty"
	OTHER MicrosoftGraphDataSubjectType = "other"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphDataSubjectType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphDataSubjectType enum
var AllowedMicrosoftGraphDataSubjectTypeEnumValues = []MicrosoftGraphDataSubjectType{
	"customer",
	"currentEmployee",
	"formerEmployee",
	"prospectiveEmployee",
	"student",
	"teacher",
	"faculty",
	"other",
	"unknownFutureValue",
}

func (v *MicrosoftGraphDataSubjectType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphDataSubjectType(value)
	for _, existing := range AllowedMicrosoftGraphDataSubjectTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphDataSubjectType", value)
}

// NewMicrosoftGraphDataSubjectTypeFromValue returns a pointer to a valid MicrosoftGraphDataSubjectType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphDataSubjectTypeFromValue(v string) (*MicrosoftGraphDataSubjectType, error) {
	ev := MicrosoftGraphDataSubjectType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphDataSubjectType: valid values are %v", v, AllowedMicrosoftGraphDataSubjectTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphDataSubjectType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphDataSubjectTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.dataSubjectType value
func (v MicrosoftGraphDataSubjectType) Ptr() *MicrosoftGraphDataSubjectType {
	return &v
}

type NullableMicrosoftGraphDataSubjectType struct {
	value *MicrosoftGraphDataSubjectType
	isSet bool
}

func (v NullableMicrosoftGraphDataSubjectType) Get() *MicrosoftGraphDataSubjectType {
	return v.value
}

func (v *NullableMicrosoftGraphDataSubjectType) Set(val *MicrosoftGraphDataSubjectType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphDataSubjectType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphDataSubjectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphDataSubjectType(val *MicrosoftGraphDataSubjectType) *NullableMicrosoftGraphDataSubjectType {
	return &NullableMicrosoftGraphDataSubjectType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphDataSubjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphDataSubjectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

