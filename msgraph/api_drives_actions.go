/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DrivesActionsApiService DrivesActionsApi service
type DrivesActionsApiService service

type ApiDrivesDriveListContentTypesAddCopyRequest struct {
	ctx _context.Context
	ApiService *DrivesActionsApiService
	driveId string
	inlineObject146 *InlineObject146
}

func (r ApiDrivesDriveListContentTypesAddCopyRequest) InlineObject146(inlineObject146 InlineObject146) ApiDrivesDriveListContentTypesAddCopyRequest {
	r.inlineObject146 = &inlineObject146
	return r
}

func (r ApiDrivesDriveListContentTypesAddCopyRequest) Execute() (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	return r.ApiService.DrivesDriveListContentTypesAddCopyExecute(r)
}

/*
DrivesDriveListContentTypesAddCopy Invoke action addCopy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveId key: id of drive
 @return ApiDrivesDriveListContentTypesAddCopyRequest
*/
func (a *DrivesActionsApiService) DrivesDriveListContentTypesAddCopy(ctx _context.Context, driveId string) ApiDrivesDriveListContentTypesAddCopyRequest {
	return ApiDrivesDriveListContentTypesAddCopyRequest{
		ApiService: a,
		ctx: ctx,
		driveId: driveId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphContentType
func (a *DrivesActionsApiService) DrivesDriveListContentTypesAddCopyExecute(r ApiDrivesDriveListContentTypesAddCopyRequest) (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphContentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrivesActionsApiService.DrivesDriveListContentTypesAddCopy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/drives/{drive-id}/list/contentTypes/microsoft.graph.addCopy"
	localVarPath = strings.Replace(localVarPath, "{"+"drive-id"+"}", _neturl.PathEscape(parameterToString(r.driveId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject146 == nil {
		return localVarReturnValue, nil, reportError("inlineObject146 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject146
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDrivesDriveListContentTypesContentTypeAssociateWithHubSitesRequest struct {
	ctx _context.Context
	ApiService *DrivesActionsApiService
	driveId string
	contentTypeId string
	inlineObject144 *InlineObject144
}

func (r ApiDrivesDriveListContentTypesContentTypeAssociateWithHubSitesRequest) InlineObject144(inlineObject144 InlineObject144) ApiDrivesDriveListContentTypesContentTypeAssociateWithHubSitesRequest {
	r.inlineObject144 = &inlineObject144
	return r
}

func (r ApiDrivesDriveListContentTypesContentTypeAssociateWithHubSitesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DrivesDriveListContentTypesContentTypeAssociateWithHubSitesExecute(r)
}

/*
DrivesDriveListContentTypesContentTypeAssociateWithHubSites Invoke action associateWithHubSites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveId key: id of drive
 @param contentTypeId key: id of contentType
 @return ApiDrivesDriveListContentTypesContentTypeAssociateWithHubSitesRequest
*/
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeAssociateWithHubSites(ctx _context.Context, driveId string, contentTypeId string) ApiDrivesDriveListContentTypesContentTypeAssociateWithHubSitesRequest {
	return ApiDrivesDriveListContentTypesContentTypeAssociateWithHubSitesRequest{
		ApiService: a,
		ctx: ctx,
		driveId: driveId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeAssociateWithHubSitesExecute(r ApiDrivesDriveListContentTypesContentTypeAssociateWithHubSitesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrivesActionsApiService.DrivesDriveListContentTypesContentTypeAssociateWithHubSites")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/drives/{drive-id}/list/contentTypes/{contentType-id}/microsoft.graph.associateWithHubSites"
	localVarPath = strings.Replace(localVarPath, "{"+"drive-id"+"}", _neturl.PathEscape(parameterToString(r.driveId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject144 == nil {
		return nil, reportError("inlineObject144 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject144
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDrivesDriveListContentTypesContentTypeBaseAssociateWithHubSitesRequest struct {
	ctx _context.Context
	ApiService *DrivesActionsApiService
	driveId string
	contentTypeId string
	inlineObject141 *InlineObject141
}

func (r ApiDrivesDriveListContentTypesContentTypeBaseAssociateWithHubSitesRequest) InlineObject141(inlineObject141 InlineObject141) ApiDrivesDriveListContentTypesContentTypeBaseAssociateWithHubSitesRequest {
	r.inlineObject141 = &inlineObject141
	return r
}

func (r ApiDrivesDriveListContentTypesContentTypeBaseAssociateWithHubSitesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DrivesDriveListContentTypesContentTypeBaseAssociateWithHubSitesExecute(r)
}

/*
DrivesDriveListContentTypesContentTypeBaseAssociateWithHubSites Invoke action associateWithHubSites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveId key: id of drive
 @param contentTypeId key: id of contentType
 @return ApiDrivesDriveListContentTypesContentTypeBaseAssociateWithHubSitesRequest
*/
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeBaseAssociateWithHubSites(ctx _context.Context, driveId string, contentTypeId string) ApiDrivesDriveListContentTypesContentTypeBaseAssociateWithHubSitesRequest {
	return ApiDrivesDriveListContentTypesContentTypeBaseAssociateWithHubSitesRequest{
		ApiService: a,
		ctx: ctx,
		driveId: driveId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeBaseAssociateWithHubSitesExecute(r ApiDrivesDriveListContentTypesContentTypeBaseAssociateWithHubSitesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrivesActionsApiService.DrivesDriveListContentTypesContentTypeBaseAssociateWithHubSites")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/drives/{drive-id}/list/contentTypes/{contentType-id}/base/microsoft.graph.associateWithHubSites"
	localVarPath = strings.Replace(localVarPath, "{"+"drive-id"+"}", _neturl.PathEscape(parameterToString(r.driveId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject141 == nil {
		return nil, reportError("inlineObject141 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject141
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDrivesDriveListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest struct {
	ctx _context.Context
	ApiService *DrivesActionsApiService
	driveId string
	contentTypeId string
	inlineObject142 *InlineObject142
}

func (r ApiDrivesDriveListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest) InlineObject142(inlineObject142 InlineObject142) ApiDrivesDriveListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest {
	r.inlineObject142 = &inlineObject142
	return r
}

func (r ApiDrivesDriveListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DrivesDriveListContentTypesContentTypeBaseCopyToDefaultContentLocationExecute(r)
}

/*
DrivesDriveListContentTypesContentTypeBaseCopyToDefaultContentLocation Invoke action copyToDefaultContentLocation

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveId key: id of drive
 @param contentTypeId key: id of contentType
 @return ApiDrivesDriveListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest
*/
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeBaseCopyToDefaultContentLocation(ctx _context.Context, driveId string, contentTypeId string) ApiDrivesDriveListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest {
	return ApiDrivesDriveListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest{
		ApiService: a,
		ctx: ctx,
		driveId: driveId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeBaseCopyToDefaultContentLocationExecute(r ApiDrivesDriveListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrivesActionsApiService.DrivesDriveListContentTypesContentTypeBaseCopyToDefaultContentLocation")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/drives/{drive-id}/list/contentTypes/{contentType-id}/base/microsoft.graph.copyToDefaultContentLocation"
	localVarPath = strings.Replace(localVarPath, "{"+"drive-id"+"}", _neturl.PathEscape(parameterToString(r.driveId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject142 == nil {
		return nil, reportError("inlineObject142 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject142
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDrivesDriveListContentTypesContentTypeBasePublishRequest struct {
	ctx _context.Context
	ApiService *DrivesActionsApiService
	driveId string
	contentTypeId string
}


func (r ApiDrivesDriveListContentTypesContentTypeBasePublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DrivesDriveListContentTypesContentTypeBasePublishExecute(r)
}

/*
DrivesDriveListContentTypesContentTypeBasePublish Invoke action publish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveId key: id of drive
 @param contentTypeId key: id of contentType
 @return ApiDrivesDriveListContentTypesContentTypeBasePublishRequest
*/
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeBasePublish(ctx _context.Context, driveId string, contentTypeId string) ApiDrivesDriveListContentTypesContentTypeBasePublishRequest {
	return ApiDrivesDriveListContentTypesContentTypeBasePublishRequest{
		ApiService: a,
		ctx: ctx,
		driveId: driveId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeBasePublishExecute(r ApiDrivesDriveListContentTypesContentTypeBasePublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrivesActionsApiService.DrivesDriveListContentTypesContentTypeBasePublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/drives/{drive-id}/list/contentTypes/{contentType-id}/base/microsoft.graph.publish"
	localVarPath = strings.Replace(localVarPath, "{"+"drive-id"+"}", _neturl.PathEscape(parameterToString(r.driveId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDrivesDriveListContentTypesContentTypeBaseTypesAddCopyRequest struct {
	ctx _context.Context
	ApiService *DrivesActionsApiService
	driveId string
	contentTypeId string
	inlineObject143 *InlineObject143
}

func (r ApiDrivesDriveListContentTypesContentTypeBaseTypesAddCopyRequest) InlineObject143(inlineObject143 InlineObject143) ApiDrivesDriveListContentTypesContentTypeBaseTypesAddCopyRequest {
	r.inlineObject143 = &inlineObject143
	return r
}

func (r ApiDrivesDriveListContentTypesContentTypeBaseTypesAddCopyRequest) Execute() (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	return r.ApiService.DrivesDriveListContentTypesContentTypeBaseTypesAddCopyExecute(r)
}

/*
DrivesDriveListContentTypesContentTypeBaseTypesAddCopy Invoke action addCopy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveId key: id of drive
 @param contentTypeId key: id of contentType
 @return ApiDrivesDriveListContentTypesContentTypeBaseTypesAddCopyRequest
*/
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeBaseTypesAddCopy(ctx _context.Context, driveId string, contentTypeId string) ApiDrivesDriveListContentTypesContentTypeBaseTypesAddCopyRequest {
	return ApiDrivesDriveListContentTypesContentTypeBaseTypesAddCopyRequest{
		ApiService: a,
		ctx: ctx,
		driveId: driveId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphContentType
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeBaseTypesAddCopyExecute(r ApiDrivesDriveListContentTypesContentTypeBaseTypesAddCopyRequest) (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphContentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrivesActionsApiService.DrivesDriveListContentTypesContentTypeBaseTypesAddCopy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/drives/{drive-id}/list/contentTypes/{contentType-id}/baseTypes/microsoft.graph.addCopy"
	localVarPath = strings.Replace(localVarPath, "{"+"drive-id"+"}", _neturl.PathEscape(parameterToString(r.driveId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject143 == nil {
		return localVarReturnValue, nil, reportError("inlineObject143 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject143
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDrivesDriveListContentTypesContentTypeBaseUnpublishRequest struct {
	ctx _context.Context
	ApiService *DrivesActionsApiService
	driveId string
	contentTypeId string
}


func (r ApiDrivesDriveListContentTypesContentTypeBaseUnpublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DrivesDriveListContentTypesContentTypeBaseUnpublishExecute(r)
}

/*
DrivesDriveListContentTypesContentTypeBaseUnpublish Invoke action unpublish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveId key: id of drive
 @param contentTypeId key: id of contentType
 @return ApiDrivesDriveListContentTypesContentTypeBaseUnpublishRequest
*/
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeBaseUnpublish(ctx _context.Context, driveId string, contentTypeId string) ApiDrivesDriveListContentTypesContentTypeBaseUnpublishRequest {
	return ApiDrivesDriveListContentTypesContentTypeBaseUnpublishRequest{
		ApiService: a,
		ctx: ctx,
		driveId: driveId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeBaseUnpublishExecute(r ApiDrivesDriveListContentTypesContentTypeBaseUnpublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrivesActionsApiService.DrivesDriveListContentTypesContentTypeBaseUnpublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/drives/{drive-id}/list/contentTypes/{contentType-id}/base/microsoft.graph.unpublish"
	localVarPath = strings.Replace(localVarPath, "{"+"drive-id"+"}", _neturl.PathEscape(parameterToString(r.driveId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDrivesDriveListContentTypesContentTypeCopyToDefaultContentLocationRequest struct {
	ctx _context.Context
	ApiService *DrivesActionsApiService
	driveId string
	contentTypeId string
	inlineObject145 *InlineObject145
}

func (r ApiDrivesDriveListContentTypesContentTypeCopyToDefaultContentLocationRequest) InlineObject145(inlineObject145 InlineObject145) ApiDrivesDriveListContentTypesContentTypeCopyToDefaultContentLocationRequest {
	r.inlineObject145 = &inlineObject145
	return r
}

func (r ApiDrivesDriveListContentTypesContentTypeCopyToDefaultContentLocationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DrivesDriveListContentTypesContentTypeCopyToDefaultContentLocationExecute(r)
}

/*
DrivesDriveListContentTypesContentTypeCopyToDefaultContentLocation Invoke action copyToDefaultContentLocation

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveId key: id of drive
 @param contentTypeId key: id of contentType
 @return ApiDrivesDriveListContentTypesContentTypeCopyToDefaultContentLocationRequest
*/
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeCopyToDefaultContentLocation(ctx _context.Context, driveId string, contentTypeId string) ApiDrivesDriveListContentTypesContentTypeCopyToDefaultContentLocationRequest {
	return ApiDrivesDriveListContentTypesContentTypeCopyToDefaultContentLocationRequest{
		ApiService: a,
		ctx: ctx,
		driveId: driveId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeCopyToDefaultContentLocationExecute(r ApiDrivesDriveListContentTypesContentTypeCopyToDefaultContentLocationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrivesActionsApiService.DrivesDriveListContentTypesContentTypeCopyToDefaultContentLocation")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/drives/{drive-id}/list/contentTypes/{contentType-id}/microsoft.graph.copyToDefaultContentLocation"
	localVarPath = strings.Replace(localVarPath, "{"+"drive-id"+"}", _neturl.PathEscape(parameterToString(r.driveId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject145 == nil {
		return nil, reportError("inlineObject145 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject145
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDrivesDriveListContentTypesContentTypePublishRequest struct {
	ctx _context.Context
	ApiService *DrivesActionsApiService
	driveId string
	contentTypeId string
}


func (r ApiDrivesDriveListContentTypesContentTypePublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DrivesDriveListContentTypesContentTypePublishExecute(r)
}

/*
DrivesDriveListContentTypesContentTypePublish Invoke action publish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveId key: id of drive
 @param contentTypeId key: id of contentType
 @return ApiDrivesDriveListContentTypesContentTypePublishRequest
*/
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypePublish(ctx _context.Context, driveId string, contentTypeId string) ApiDrivesDriveListContentTypesContentTypePublishRequest {
	return ApiDrivesDriveListContentTypesContentTypePublishRequest{
		ApiService: a,
		ctx: ctx,
		driveId: driveId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypePublishExecute(r ApiDrivesDriveListContentTypesContentTypePublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrivesActionsApiService.DrivesDriveListContentTypesContentTypePublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/drives/{drive-id}/list/contentTypes/{contentType-id}/microsoft.graph.publish"
	localVarPath = strings.Replace(localVarPath, "{"+"drive-id"+"}", _neturl.PathEscape(parameterToString(r.driveId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDrivesDriveListContentTypesContentTypeUnpublishRequest struct {
	ctx _context.Context
	ApiService *DrivesActionsApiService
	driveId string
	contentTypeId string
}


func (r ApiDrivesDriveListContentTypesContentTypeUnpublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DrivesDriveListContentTypesContentTypeUnpublishExecute(r)
}

/*
DrivesDriveListContentTypesContentTypeUnpublish Invoke action unpublish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveId key: id of drive
 @param contentTypeId key: id of contentType
 @return ApiDrivesDriveListContentTypesContentTypeUnpublishRequest
*/
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeUnpublish(ctx _context.Context, driveId string, contentTypeId string) ApiDrivesDriveListContentTypesContentTypeUnpublishRequest {
	return ApiDrivesDriveListContentTypesContentTypeUnpublishRequest{
		ApiService: a,
		ctx: ctx,
		driveId: driveId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *DrivesActionsApiService) DrivesDriveListContentTypesContentTypeUnpublishExecute(r ApiDrivesDriveListContentTypesContentTypeUnpublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrivesActionsApiService.DrivesDriveListContentTypesContentTypeUnpublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/drives/{drive-id}/list/contentTypes/{contentType-id}/microsoft.graph.unpublish"
	localVarPath = strings.Replace(localVarPath, "{"+"drive-id"+"}", _neturl.PathEscape(parameterToString(r.driveId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDrivesDriveListItemsListItemVersionsListItemVersionRestoreVersionRequest struct {
	ctx _context.Context
	ApiService *DrivesActionsApiService
	driveId string
	listItemId string
	listItemVersionId string
}


func (r ApiDrivesDriveListItemsListItemVersionsListItemVersionRestoreVersionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DrivesDriveListItemsListItemVersionsListItemVersionRestoreVersionExecute(r)
}

/*
DrivesDriveListItemsListItemVersionsListItemVersionRestoreVersion Invoke action restoreVersion

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveId key: id of drive
 @param listItemId key: id of listItem
 @param listItemVersionId key: id of listItemVersion
 @return ApiDrivesDriveListItemsListItemVersionsListItemVersionRestoreVersionRequest
*/
func (a *DrivesActionsApiService) DrivesDriveListItemsListItemVersionsListItemVersionRestoreVersion(ctx _context.Context, driveId string, listItemId string, listItemVersionId string) ApiDrivesDriveListItemsListItemVersionsListItemVersionRestoreVersionRequest {
	return ApiDrivesDriveListItemsListItemVersionsListItemVersionRestoreVersionRequest{
		ApiService: a,
		ctx: ctx,
		driveId: driveId,
		listItemId: listItemId,
		listItemVersionId: listItemVersionId,
	}
}

// Execute executes the request
func (a *DrivesActionsApiService) DrivesDriveListItemsListItemVersionsListItemVersionRestoreVersionExecute(r ApiDrivesDriveListItemsListItemVersionsListItemVersionRestoreVersionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DrivesActionsApiService.DrivesDriveListItemsListItemVersionsListItemVersionRestoreVersion")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/drives/{drive-id}/list/items/{listItem-id}/versions/{listItemVersion-id}/microsoft.graph.restoreVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"drive-id"+"}", _neturl.PathEscape(parameterToString(r.driveId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"listItem-id"+"}", _neturl.PathEscape(parameterToString(r.listItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"listItemVersion-id"+"}", _neturl.PathEscape(parameterToString(r.listItemVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
