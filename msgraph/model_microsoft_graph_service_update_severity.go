/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphServiceUpdateSeverity the model 'MicrosoftGraphServiceUpdateSeverity'
type MicrosoftGraphServiceUpdateSeverity string

// List of microsoft.graph.serviceUpdateSeverity
const (
	NORMAL MicrosoftGraphServiceUpdateSeverity = "normal"
	HIGH MicrosoftGraphServiceUpdateSeverity = "high"
	CRITICAL MicrosoftGraphServiceUpdateSeverity = "critical"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphServiceUpdateSeverity = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphServiceUpdateSeverity enum
var AllowedMicrosoftGraphServiceUpdateSeverityEnumValues = []MicrosoftGraphServiceUpdateSeverity{
	"normal",
	"high",
	"critical",
	"unknownFutureValue",
}

func (v *MicrosoftGraphServiceUpdateSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphServiceUpdateSeverity(value)
	for _, existing := range AllowedMicrosoftGraphServiceUpdateSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphServiceUpdateSeverity", value)
}

// NewMicrosoftGraphServiceUpdateSeverityFromValue returns a pointer to a valid MicrosoftGraphServiceUpdateSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphServiceUpdateSeverityFromValue(v string) (*MicrosoftGraphServiceUpdateSeverity, error) {
	ev := MicrosoftGraphServiceUpdateSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphServiceUpdateSeverity: valid values are %v", v, AllowedMicrosoftGraphServiceUpdateSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphServiceUpdateSeverity) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphServiceUpdateSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.serviceUpdateSeverity value
func (v MicrosoftGraphServiceUpdateSeverity) Ptr() *MicrosoftGraphServiceUpdateSeverity {
	return &v
}

type NullableMicrosoftGraphServiceUpdateSeverity struct {
	value *MicrosoftGraphServiceUpdateSeverity
	isSet bool
}

func (v NullableMicrosoftGraphServiceUpdateSeverity) Get() *MicrosoftGraphServiceUpdateSeverity {
	return v.value
}

func (v *NullableMicrosoftGraphServiceUpdateSeverity) Set(val *MicrosoftGraphServiceUpdateSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphServiceUpdateSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphServiceUpdateSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphServiceUpdateSeverity(val *MicrosoftGraphServiceUpdateSeverity) *NullableMicrosoftGraphServiceUpdateSeverity {
	return &NullableMicrosoftGraphServiceUpdateSeverity{value: val, isSet: true}
}

func (v NullableMicrosoftGraphServiceUpdateSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphServiceUpdateSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

