/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Site struct for Site
type Site struct {
	// The full title for the site. Read-only.
	DisplayName NullableString `json:"displayName,omitempty"`
	Error AnyOfmicrosoftGraphPublicError `json:"error,omitempty"`
	// If present, indicates that this is the root site in the site collection. Read-only.
	Root AnyOfobject `json:"root,omitempty"`
	// Returns identifiers useful for SharePoint REST compatibility. Read-only.
	SharepointIds AnyOfmicrosoftGraphSharepointIds `json:"sharepointIds,omitempty"`
	// Provides details about the site's site collection. Available only on the root site. Read-only.
	SiteCollection AnyOfmicrosoftGraphSiteCollection `json:"siteCollection,omitempty"`
	// Analytics about the view activities that took place in this site.
	Analytics AnyOfmicrosoftGraphItemAnalytics `json:"analytics,omitempty"`
	// The collection of column definitions reusable across lists under this site.
	Columns *[]MicrosoftGraphColumnDefinition `json:"columns,omitempty"`
	// The collection of content types defined for this site.
	ContentTypes *[]MicrosoftGraphContentType `json:"contentTypes,omitempty"`
	// The default drive (document library) for this site.
	Drive AnyOfmicrosoftGraphDrive `json:"drive,omitempty"`
	// The collection of drives (document libraries) under this site.
	Drives *[]MicrosoftGraphDrive `json:"drives,omitempty"`
	// The collection of column definitions available in the site that are referenced from the sites in the parent hierarchy of the current site.
	ExternalColumns *[]MicrosoftGraphColumnDefinition `json:"externalColumns,omitempty"`
	// Used to address any item contained in this site. This collection can't be enumerated.
	Items *[]MicrosoftGraphBaseItem `json:"items,omitempty"`
	// The collection of lists under this site.
	Lists *[]MicrosoftGraphList `json:"lists,omitempty"`
	// The permissions associated with the site. Nullable.
	Permissions *[]MicrosoftGraphPermission `json:"permissions,omitempty"`
	// The collection of the sub-sites under this site.
	Sites *[]MicrosoftGraphSite `json:"sites,omitempty"`
	// The default termStore under this site.
	TermStore AnyOfmicrosoftGraphTermStoreStore `json:"termStore,omitempty"`
	// The collection of termStores under this site.
	TermStores *[]MicrosoftGraphTermStoreStore `json:"termStores,omitempty"`
	// Calls the OneNote service for notebook related operations.
	Onenote AnyOfmicrosoftGraphOnenote `json:"onenote,omitempty"`
}

// NewSite instantiates a new Site object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSite() *Site {
	this := Site{}
	return &this
}

// NewSiteWithDefaults instantiates a new Site object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteWithDefaults() *Site {
	this := Site{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Site) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Site) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Site) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *Site) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *Site) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *Site) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Site) GetError() AnyOfmicrosoftGraphPublicError {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPublicError
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Site) GetErrorOk() (*AnyOfmicrosoftGraphPublicError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return &o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Site) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given AnyOfmicrosoftGraphPublicError and assigns it to the Error field.
func (o *Site) SetError(v AnyOfmicrosoftGraphPublicError) {
	o.Error = v
}

// GetRoot returns the Root field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Site) GetRoot() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Root
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Site) GetRootOk() (*AnyOfobject, bool) {
	if o == nil || o.Root == nil {
		return nil, false
	}
	return &o.Root, true
}

// HasRoot returns a boolean if a field has been set.
func (o *Site) HasRoot() bool {
	if o != nil && o.Root != nil {
		return true
	}

	return false
}

// SetRoot gets a reference to the given AnyOfobject and assigns it to the Root field.
func (o *Site) SetRoot(v AnyOfobject) {
	o.Root = v
}

// GetSharepointIds returns the SharepointIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Site) GetSharepointIds() AnyOfmicrosoftGraphSharepointIds {
	if o == nil  {
		var ret AnyOfmicrosoftGraphSharepointIds
		return ret
	}
	return o.SharepointIds
}

// GetSharepointIdsOk returns a tuple with the SharepointIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Site) GetSharepointIdsOk() (*AnyOfmicrosoftGraphSharepointIds, bool) {
	if o == nil || o.SharepointIds == nil {
		return nil, false
	}
	return &o.SharepointIds, true
}

// HasSharepointIds returns a boolean if a field has been set.
func (o *Site) HasSharepointIds() bool {
	if o != nil && o.SharepointIds != nil {
		return true
	}

	return false
}

// SetSharepointIds gets a reference to the given AnyOfmicrosoftGraphSharepointIds and assigns it to the SharepointIds field.
func (o *Site) SetSharepointIds(v AnyOfmicrosoftGraphSharepointIds) {
	o.SharepointIds = v
}

// GetSiteCollection returns the SiteCollection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Site) GetSiteCollection() AnyOfmicrosoftGraphSiteCollection {
	if o == nil  {
		var ret AnyOfmicrosoftGraphSiteCollection
		return ret
	}
	return o.SiteCollection
}

// GetSiteCollectionOk returns a tuple with the SiteCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Site) GetSiteCollectionOk() (*AnyOfmicrosoftGraphSiteCollection, bool) {
	if o == nil || o.SiteCollection == nil {
		return nil, false
	}
	return &o.SiteCollection, true
}

// HasSiteCollection returns a boolean if a field has been set.
func (o *Site) HasSiteCollection() bool {
	if o != nil && o.SiteCollection != nil {
		return true
	}

	return false
}

// SetSiteCollection gets a reference to the given AnyOfmicrosoftGraphSiteCollection and assigns it to the SiteCollection field.
func (o *Site) SetSiteCollection(v AnyOfmicrosoftGraphSiteCollection) {
	o.SiteCollection = v
}

// GetAnalytics returns the Analytics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Site) GetAnalytics() AnyOfmicrosoftGraphItemAnalytics {
	if o == nil  {
		var ret AnyOfmicrosoftGraphItemAnalytics
		return ret
	}
	return o.Analytics
}

// GetAnalyticsOk returns a tuple with the Analytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Site) GetAnalyticsOk() (*AnyOfmicrosoftGraphItemAnalytics, bool) {
	if o == nil || o.Analytics == nil {
		return nil, false
	}
	return &o.Analytics, true
}

// HasAnalytics returns a boolean if a field has been set.
func (o *Site) HasAnalytics() bool {
	if o != nil && o.Analytics != nil {
		return true
	}

	return false
}

// SetAnalytics gets a reference to the given AnyOfmicrosoftGraphItemAnalytics and assigns it to the Analytics field.
func (o *Site) SetAnalytics(v AnyOfmicrosoftGraphItemAnalytics) {
	o.Analytics = v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *Site) GetColumns() []MicrosoftGraphColumnDefinition {
	if o == nil || o.Columns == nil {
		var ret []MicrosoftGraphColumnDefinition
		return ret
	}
	return *o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetColumnsOk() (*[]MicrosoftGraphColumnDefinition, bool) {
	if o == nil || o.Columns == nil {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *Site) HasColumns() bool {
	if o != nil && o.Columns != nil {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []MicrosoftGraphColumnDefinition and assigns it to the Columns field.
func (o *Site) SetColumns(v []MicrosoftGraphColumnDefinition) {
	o.Columns = &v
}

// GetContentTypes returns the ContentTypes field value if set, zero value otherwise.
func (o *Site) GetContentTypes() []MicrosoftGraphContentType {
	if o == nil || o.ContentTypes == nil {
		var ret []MicrosoftGraphContentType
		return ret
	}
	return *o.ContentTypes
}

// GetContentTypesOk returns a tuple with the ContentTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetContentTypesOk() (*[]MicrosoftGraphContentType, bool) {
	if o == nil || o.ContentTypes == nil {
		return nil, false
	}
	return o.ContentTypes, true
}

// HasContentTypes returns a boolean if a field has been set.
func (o *Site) HasContentTypes() bool {
	if o != nil && o.ContentTypes != nil {
		return true
	}

	return false
}

// SetContentTypes gets a reference to the given []MicrosoftGraphContentType and assigns it to the ContentTypes field.
func (o *Site) SetContentTypes(v []MicrosoftGraphContentType) {
	o.ContentTypes = &v
}

// GetDrive returns the Drive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Site) GetDrive() AnyOfmicrosoftGraphDrive {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDrive
		return ret
	}
	return o.Drive
}

// GetDriveOk returns a tuple with the Drive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Site) GetDriveOk() (*AnyOfmicrosoftGraphDrive, bool) {
	if o == nil || o.Drive == nil {
		return nil, false
	}
	return &o.Drive, true
}

// HasDrive returns a boolean if a field has been set.
func (o *Site) HasDrive() bool {
	if o != nil && o.Drive != nil {
		return true
	}

	return false
}

// SetDrive gets a reference to the given AnyOfmicrosoftGraphDrive and assigns it to the Drive field.
func (o *Site) SetDrive(v AnyOfmicrosoftGraphDrive) {
	o.Drive = v
}

// GetDrives returns the Drives field value if set, zero value otherwise.
func (o *Site) GetDrives() []MicrosoftGraphDrive {
	if o == nil || o.Drives == nil {
		var ret []MicrosoftGraphDrive
		return ret
	}
	return *o.Drives
}

// GetDrivesOk returns a tuple with the Drives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetDrivesOk() (*[]MicrosoftGraphDrive, bool) {
	if o == nil || o.Drives == nil {
		return nil, false
	}
	return o.Drives, true
}

// HasDrives returns a boolean if a field has been set.
func (o *Site) HasDrives() bool {
	if o != nil && o.Drives != nil {
		return true
	}

	return false
}

// SetDrives gets a reference to the given []MicrosoftGraphDrive and assigns it to the Drives field.
func (o *Site) SetDrives(v []MicrosoftGraphDrive) {
	o.Drives = &v
}

// GetExternalColumns returns the ExternalColumns field value if set, zero value otherwise.
func (o *Site) GetExternalColumns() []MicrosoftGraphColumnDefinition {
	if o == nil || o.ExternalColumns == nil {
		var ret []MicrosoftGraphColumnDefinition
		return ret
	}
	return *o.ExternalColumns
}

// GetExternalColumnsOk returns a tuple with the ExternalColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetExternalColumnsOk() (*[]MicrosoftGraphColumnDefinition, bool) {
	if o == nil || o.ExternalColumns == nil {
		return nil, false
	}
	return o.ExternalColumns, true
}

// HasExternalColumns returns a boolean if a field has been set.
func (o *Site) HasExternalColumns() bool {
	if o != nil && o.ExternalColumns != nil {
		return true
	}

	return false
}

// SetExternalColumns gets a reference to the given []MicrosoftGraphColumnDefinition and assigns it to the ExternalColumns field.
func (o *Site) SetExternalColumns(v []MicrosoftGraphColumnDefinition) {
	o.ExternalColumns = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Site) GetItems() []MicrosoftGraphBaseItem {
	if o == nil || o.Items == nil {
		var ret []MicrosoftGraphBaseItem
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetItemsOk() (*[]MicrosoftGraphBaseItem, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Site) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []MicrosoftGraphBaseItem and assigns it to the Items field.
func (o *Site) SetItems(v []MicrosoftGraphBaseItem) {
	o.Items = &v
}

// GetLists returns the Lists field value if set, zero value otherwise.
func (o *Site) GetLists() []MicrosoftGraphList {
	if o == nil || o.Lists == nil {
		var ret []MicrosoftGraphList
		return ret
	}
	return *o.Lists
}

// GetListsOk returns a tuple with the Lists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetListsOk() (*[]MicrosoftGraphList, bool) {
	if o == nil || o.Lists == nil {
		return nil, false
	}
	return o.Lists, true
}

// HasLists returns a boolean if a field has been set.
func (o *Site) HasLists() bool {
	if o != nil && o.Lists != nil {
		return true
	}

	return false
}

// SetLists gets a reference to the given []MicrosoftGraphList and assigns it to the Lists field.
func (o *Site) SetLists(v []MicrosoftGraphList) {
	o.Lists = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *Site) GetPermissions() []MicrosoftGraphPermission {
	if o == nil || o.Permissions == nil {
		var ret []MicrosoftGraphPermission
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetPermissionsOk() (*[]MicrosoftGraphPermission, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *Site) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []MicrosoftGraphPermission and assigns it to the Permissions field.
func (o *Site) SetPermissions(v []MicrosoftGraphPermission) {
	o.Permissions = &v
}

// GetSites returns the Sites field value if set, zero value otherwise.
func (o *Site) GetSites() []MicrosoftGraphSite {
	if o == nil || o.Sites == nil {
		var ret []MicrosoftGraphSite
		return ret
	}
	return *o.Sites
}

// GetSitesOk returns a tuple with the Sites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetSitesOk() (*[]MicrosoftGraphSite, bool) {
	if o == nil || o.Sites == nil {
		return nil, false
	}
	return o.Sites, true
}

// HasSites returns a boolean if a field has been set.
func (o *Site) HasSites() bool {
	if o != nil && o.Sites != nil {
		return true
	}

	return false
}

// SetSites gets a reference to the given []MicrosoftGraphSite and assigns it to the Sites field.
func (o *Site) SetSites(v []MicrosoftGraphSite) {
	o.Sites = &v
}

// GetTermStore returns the TermStore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Site) GetTermStore() AnyOfmicrosoftGraphTermStoreStore {
	if o == nil  {
		var ret AnyOfmicrosoftGraphTermStoreStore
		return ret
	}
	return o.TermStore
}

// GetTermStoreOk returns a tuple with the TermStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Site) GetTermStoreOk() (*AnyOfmicrosoftGraphTermStoreStore, bool) {
	if o == nil || o.TermStore == nil {
		return nil, false
	}
	return &o.TermStore, true
}

// HasTermStore returns a boolean if a field has been set.
func (o *Site) HasTermStore() bool {
	if o != nil && o.TermStore != nil {
		return true
	}

	return false
}

// SetTermStore gets a reference to the given AnyOfmicrosoftGraphTermStoreStore and assigns it to the TermStore field.
func (o *Site) SetTermStore(v AnyOfmicrosoftGraphTermStoreStore) {
	o.TermStore = v
}

// GetTermStores returns the TermStores field value if set, zero value otherwise.
func (o *Site) GetTermStores() []MicrosoftGraphTermStoreStore {
	if o == nil || o.TermStores == nil {
		var ret []MicrosoftGraphTermStoreStore
		return ret
	}
	return *o.TermStores
}

// GetTermStoresOk returns a tuple with the TermStores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Site) GetTermStoresOk() (*[]MicrosoftGraphTermStoreStore, bool) {
	if o == nil || o.TermStores == nil {
		return nil, false
	}
	return o.TermStores, true
}

// HasTermStores returns a boolean if a field has been set.
func (o *Site) HasTermStores() bool {
	if o != nil && o.TermStores != nil {
		return true
	}

	return false
}

// SetTermStores gets a reference to the given []MicrosoftGraphTermStoreStore and assigns it to the TermStores field.
func (o *Site) SetTermStores(v []MicrosoftGraphTermStoreStore) {
	o.TermStores = &v
}

// GetOnenote returns the Onenote field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Site) GetOnenote() AnyOfmicrosoftGraphOnenote {
	if o == nil  {
		var ret AnyOfmicrosoftGraphOnenote
		return ret
	}
	return o.Onenote
}

// GetOnenoteOk returns a tuple with the Onenote field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Site) GetOnenoteOk() (*AnyOfmicrosoftGraphOnenote, bool) {
	if o == nil || o.Onenote == nil {
		return nil, false
	}
	return &o.Onenote, true
}

// HasOnenote returns a boolean if a field has been set.
func (o *Site) HasOnenote() bool {
	if o != nil && o.Onenote != nil {
		return true
	}

	return false
}

// SetOnenote gets a reference to the given AnyOfmicrosoftGraphOnenote and assigns it to the Onenote field.
func (o *Site) SetOnenote(v AnyOfmicrosoftGraphOnenote) {
	o.Onenote = v
}

func (o Site) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Root != nil {
		toSerialize["root"] = o.Root
	}
	if o.SharepointIds != nil {
		toSerialize["sharepointIds"] = o.SharepointIds
	}
	if o.SiteCollection != nil {
		toSerialize["siteCollection"] = o.SiteCollection
	}
	if o.Analytics != nil {
		toSerialize["analytics"] = o.Analytics
	}
	if o.Columns != nil {
		toSerialize["columns"] = o.Columns
	}
	if o.ContentTypes != nil {
		toSerialize["contentTypes"] = o.ContentTypes
	}
	if o.Drive != nil {
		toSerialize["drive"] = o.Drive
	}
	if o.Drives != nil {
		toSerialize["drives"] = o.Drives
	}
	if o.ExternalColumns != nil {
		toSerialize["externalColumns"] = o.ExternalColumns
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Lists != nil {
		toSerialize["lists"] = o.Lists
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	if o.Sites != nil {
		toSerialize["sites"] = o.Sites
	}
	if o.TermStore != nil {
		toSerialize["termStore"] = o.TermStore
	}
	if o.TermStores != nil {
		toSerialize["termStores"] = o.TermStores
	}
	if o.Onenote != nil {
		toSerialize["onenote"] = o.Onenote
	}
	return json.Marshal(toSerialize)
}

type NullableSite struct {
	value *Site
	isSet bool
}

func (v NullableSite) Get() *Site {
	return v.value
}

func (v *NullableSite) Set(val *Site) {
	v.value = val
	v.isSet = true
}

func (v NullableSite) IsSet() bool {
	return v.isSet
}

func (v *NullableSite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSite(val *Site) *NullableSite {
	return &NullableSite{value: val, isSet: true}
}

func (v NullableSite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


