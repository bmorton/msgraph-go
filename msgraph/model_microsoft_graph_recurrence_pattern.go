/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MicrosoftGraphRecurrencePattern struct for MicrosoftGraphRecurrencePattern
type MicrosoftGraphRecurrencePattern struct {
	// The day of the month on which the event occurs. Required if type is absoluteMonthly or absoluteYearly.
	DayOfMonth *int32 `json:"dayOfMonth,omitempty"`
	// A collection of the days of the week on which the event occurs. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. If type is relativeMonthly or relativeYearly, and daysOfWeek specifies more than one day, the event falls on the first day that satisfies the pattern.  Required if type is weekly, relativeMonthly, or relativeYearly.
	DaysOfWeek *[]*AnyOfmicrosoftGraphDayOfWeek `json:"daysOfWeek,omitempty"`
	// The first day of the week. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. Default is sunday. Required if type is weekly.
	FirstDayOfWeek AnyOfmicrosoftGraphDayOfWeek `json:"firstDayOfWeek,omitempty"`
	// Specifies on which instance of the allowed days specified in daysOfWeek the event occurs, counted from the first instance in the month. The possible values are: first, second, third, fourth, last. Default is first. Optional and used if type is relativeMonthly or relativeYearly.
	Index AnyOfmicrosoftGraphWeekIndex `json:"index,omitempty"`
	// The number of units between occurrences, where units can be in days, weeks, months, or years, depending on the type. Required.
	Interval *int32 `json:"interval,omitempty"`
	// The month in which the event occurs.  This is a number from 1 to 12.
	Month *int32 `json:"month,omitempty"`
	// The recurrence pattern type: daily, weekly, absoluteMonthly, relativeMonthly, absoluteYearly, relativeYearly. Required.
	Type AnyOfmicrosoftGraphRecurrencePatternType `json:"type,omitempty"`
}

// NewMicrosoftGraphRecurrencePattern instantiates a new MicrosoftGraphRecurrencePattern object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphRecurrencePattern() *MicrosoftGraphRecurrencePattern {
	this := MicrosoftGraphRecurrencePattern{}
	return &this
}

// NewMicrosoftGraphRecurrencePatternWithDefaults instantiates a new MicrosoftGraphRecurrencePattern object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphRecurrencePatternWithDefaults() *MicrosoftGraphRecurrencePattern {
	this := MicrosoftGraphRecurrencePattern{}
	return &this
}

// GetDayOfMonth returns the DayOfMonth field value if set, zero value otherwise.
func (o *MicrosoftGraphRecurrencePattern) GetDayOfMonth() int32 {
	if o == nil || o.DayOfMonth == nil {
		var ret int32
		return ret
	}
	return *o.DayOfMonth
}

// GetDayOfMonthOk returns a tuple with the DayOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrencePattern) GetDayOfMonthOk() (*int32, bool) {
	if o == nil || o.DayOfMonth == nil {
		return nil, false
	}
	return o.DayOfMonth, true
}

// HasDayOfMonth returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasDayOfMonth() bool {
	if o != nil && o.DayOfMonth != nil {
		return true
	}

	return false
}

// SetDayOfMonth gets a reference to the given int32 and assigns it to the DayOfMonth field.
func (o *MicrosoftGraphRecurrencePattern) SetDayOfMonth(v int32) {
	o.DayOfMonth = &v
}

// GetDaysOfWeek returns the DaysOfWeek field value if set, zero value otherwise.
func (o *MicrosoftGraphRecurrencePattern) GetDaysOfWeek() []*AnyOfmicrosoftGraphDayOfWeek {
	if o == nil || o.DaysOfWeek == nil {
		var ret []*AnyOfmicrosoftGraphDayOfWeek
		return ret
	}
	return *o.DaysOfWeek
}

// GetDaysOfWeekOk returns a tuple with the DaysOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrencePattern) GetDaysOfWeekOk() (*[]*AnyOfmicrosoftGraphDayOfWeek, bool) {
	if o == nil || o.DaysOfWeek == nil {
		return nil, false
	}
	return o.DaysOfWeek, true
}

// HasDaysOfWeek returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasDaysOfWeek() bool {
	if o != nil && o.DaysOfWeek != nil {
		return true
	}

	return false
}

// SetDaysOfWeek gets a reference to the given []*AnyOfmicrosoftGraphDayOfWeek and assigns it to the DaysOfWeek field.
func (o *MicrosoftGraphRecurrencePattern) SetDaysOfWeek(v []*AnyOfmicrosoftGraphDayOfWeek) {
	o.DaysOfWeek = &v
}

// GetFirstDayOfWeek returns the FirstDayOfWeek field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphRecurrencePattern) GetFirstDayOfWeek() AnyOfmicrosoftGraphDayOfWeek {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDayOfWeek
		return ret
	}
	return o.FirstDayOfWeek
}

// GetFirstDayOfWeekOk returns a tuple with the FirstDayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphRecurrencePattern) GetFirstDayOfWeekOk() (*AnyOfmicrosoftGraphDayOfWeek, bool) {
	if o == nil || o.FirstDayOfWeek == nil {
		return nil, false
	}
	return &o.FirstDayOfWeek, true
}

// HasFirstDayOfWeek returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasFirstDayOfWeek() bool {
	if o != nil && o.FirstDayOfWeek != nil {
		return true
	}

	return false
}

// SetFirstDayOfWeek gets a reference to the given AnyOfmicrosoftGraphDayOfWeek and assigns it to the FirstDayOfWeek field.
func (o *MicrosoftGraphRecurrencePattern) SetFirstDayOfWeek(v AnyOfmicrosoftGraphDayOfWeek) {
	o.FirstDayOfWeek = v
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphRecurrencePattern) GetIndex() AnyOfmicrosoftGraphWeekIndex {
	if o == nil  {
		var ret AnyOfmicrosoftGraphWeekIndex
		return ret
	}
	return o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphRecurrencePattern) GetIndexOk() (*AnyOfmicrosoftGraphWeekIndex, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return &o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given AnyOfmicrosoftGraphWeekIndex and assigns it to the Index field.
func (o *MicrosoftGraphRecurrencePattern) SetIndex(v AnyOfmicrosoftGraphWeekIndex) {
	o.Index = v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *MicrosoftGraphRecurrencePattern) GetInterval() int32 {
	if o == nil || o.Interval == nil {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrencePattern) GetIntervalOk() (*int32, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *MicrosoftGraphRecurrencePattern) SetInterval(v int32) {
	o.Interval = &v
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *MicrosoftGraphRecurrencePattern) GetMonth() int32 {
	if o == nil || o.Month == nil {
		var ret int32
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphRecurrencePattern) GetMonthOk() (*int32, bool) {
	if o == nil || o.Month == nil {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasMonth() bool {
	if o != nil && o.Month != nil {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int32 and assigns it to the Month field.
func (o *MicrosoftGraphRecurrencePattern) SetMonth(v int32) {
	o.Month = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphRecurrencePattern) GetType() AnyOfmicrosoftGraphRecurrencePatternType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphRecurrencePatternType
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphRecurrencePattern) GetTypeOk() (*AnyOfmicrosoftGraphRecurrencePatternType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return &o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MicrosoftGraphRecurrencePattern) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given AnyOfmicrosoftGraphRecurrencePatternType and assigns it to the Type field.
func (o *MicrosoftGraphRecurrencePattern) SetType(v AnyOfmicrosoftGraphRecurrencePatternType) {
	o.Type = v
}

func (o MicrosoftGraphRecurrencePattern) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DayOfMonth != nil {
		toSerialize["dayOfMonth"] = o.DayOfMonth
	}
	if o.DaysOfWeek != nil {
		toSerialize["daysOfWeek"] = o.DaysOfWeek
	}
	if o.FirstDayOfWeek != nil {
		toSerialize["firstDayOfWeek"] = o.FirstDayOfWeek
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if o.Month != nil {
		toSerialize["month"] = o.Month
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphRecurrencePattern struct {
	value *MicrosoftGraphRecurrencePattern
	isSet bool
}

func (v NullableMicrosoftGraphRecurrencePattern) Get() *MicrosoftGraphRecurrencePattern {
	return v.value
}

func (v *NullableMicrosoftGraphRecurrencePattern) Set(val *MicrosoftGraphRecurrencePattern) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphRecurrencePattern) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphRecurrencePattern) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphRecurrencePattern(val *MicrosoftGraphRecurrencePattern) *NullableMicrosoftGraphRecurrencePattern {
	return &NullableMicrosoftGraphRecurrencePattern{value: val, isSet: true}
}

func (v NullableMicrosoftGraphRecurrencePattern) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphRecurrencePattern) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


