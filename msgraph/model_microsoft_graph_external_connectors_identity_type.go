/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphExternalConnectorsIdentityType the model 'MicrosoftGraphExternalConnectorsIdentityType'
type MicrosoftGraphExternalConnectorsIdentityType string

// List of microsoft.graph.externalConnectors.identityType
const (
	USER MicrosoftGraphExternalConnectorsIdentityType = "user"
	GROUP MicrosoftGraphExternalConnectorsIdentityType = "group"
	EXTERNAL_GROUP MicrosoftGraphExternalConnectorsIdentityType = "externalGroup"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphExternalConnectorsIdentityType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphExternalConnectorsIdentityType enum
var AllowedMicrosoftGraphExternalConnectorsIdentityTypeEnumValues = []MicrosoftGraphExternalConnectorsIdentityType{
	"user",
	"group",
	"externalGroup",
	"unknownFutureValue",
}

func (v *MicrosoftGraphExternalConnectorsIdentityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphExternalConnectorsIdentityType(value)
	for _, existing := range AllowedMicrosoftGraphExternalConnectorsIdentityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphExternalConnectorsIdentityType", value)
}

// NewMicrosoftGraphExternalConnectorsIdentityTypeFromValue returns a pointer to a valid MicrosoftGraphExternalConnectorsIdentityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphExternalConnectorsIdentityTypeFromValue(v string) (*MicrosoftGraphExternalConnectorsIdentityType, error) {
	ev := MicrosoftGraphExternalConnectorsIdentityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphExternalConnectorsIdentityType: valid values are %v", v, AllowedMicrosoftGraphExternalConnectorsIdentityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphExternalConnectorsIdentityType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphExternalConnectorsIdentityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.externalConnectors.identityType value
func (v MicrosoftGraphExternalConnectorsIdentityType) Ptr() *MicrosoftGraphExternalConnectorsIdentityType {
	return &v
}

type NullableMicrosoftGraphExternalConnectorsIdentityType struct {
	value *MicrosoftGraphExternalConnectorsIdentityType
	isSet bool
}

func (v NullableMicrosoftGraphExternalConnectorsIdentityType) Get() *MicrosoftGraphExternalConnectorsIdentityType {
	return v.value
}

func (v *NullableMicrosoftGraphExternalConnectorsIdentityType) Set(val *MicrosoftGraphExternalConnectorsIdentityType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphExternalConnectorsIdentityType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphExternalConnectorsIdentityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphExternalConnectorsIdentityType(val *MicrosoftGraphExternalConnectorsIdentityType) *NullableMicrosoftGraphExternalConnectorsIdentityType {
	return &NullableMicrosoftGraphExternalConnectorsIdentityType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphExternalConnectorsIdentityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphExternalConnectorsIdentityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

