/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// MeFunctionsApiService MeFunctionsApi service
type MeFunctionsApiService service

type ApiMeActivitiesRecentRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeActivitiesRecentRequest) Execute() ([]*AnyOfmicrosoftGraphUserActivity, *_nethttp.Response, error) {
	return r.ApiService.MeActivitiesRecentExecute(r)
}

/*
MeActivitiesRecent Invoke function recent

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeActivitiesRecentRequest
*/
func (a *MeFunctionsApiService) MeActivitiesRecent(ctx _context.Context) ApiMeActivitiesRecentRequest {
	return ApiMeActivitiesRecentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphUserActivity
func (a *MeFunctionsApiService) MeActivitiesRecentExecute(r ApiMeActivitiesRecentRequest) ([]*AnyOfmicrosoftGraphUserActivity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphUserActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeActivitiesRecent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities/microsoft.graph.recent()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	user string
}


func (r ApiMeCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
MeCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param user Usage: User={User}
 @return ApiMeCalendarAllowedCalendarSharingRolesRequest
*/
func (a *MeFunctionsApiService) MeCalendarAllowedCalendarSharingRoles(ctx _context.Context, user string) ApiMeCalendarAllowedCalendarSharingRolesRequest {
	return ApiMeCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *MeFunctionsApiService) MeCalendarAllowedCalendarSharingRolesExecute(r ApiMeCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarCalendarViewDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeCalendarCalendarViewDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarCalendarViewDeltaExecute(r)
}

/*
MeCalendarCalendarViewDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeCalendarCalendarViewDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarCalendarViewDelta(ctx _context.Context) ApiMeCalendarCalendarViewDeltaRequest {
	return ApiMeCalendarCalendarViewDeltaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarCalendarViewDeltaExecute(r ApiMeCalendarCalendarViewDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarCalendarViewDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendar/calendarView/microsoft.graph.delta()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	eventId string
	user string
}


func (r ApiMeCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
MeCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiMeCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *MeFunctionsApiService) MeCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, eventId string, user string) ApiMeCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiMeCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *MeFunctionsApiService) MeCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r ApiMeCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendar/calendarView/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarCalendarViewEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	eventId string
}


func (r ApiMeCalendarCalendarViewEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarCalendarViewEventInstancesDeltaExecute(r)
}

/*
MeCalendarCalendarViewEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventId key: id of event
 @return ApiMeCalendarCalendarViewEventInstancesDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarCalendarViewEventInstancesDelta(ctx _context.Context, eventId string) ApiMeCalendarCalendarViewEventInstancesDeltaRequest {
	return ApiMeCalendarCalendarViewEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarCalendarViewEventInstancesDeltaExecute(r ApiMeCalendarCalendarViewEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarCalendarViewEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendar/calendarView/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarEventsDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeCalendarEventsDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarEventsDeltaExecute(r)
}

/*
MeCalendarEventsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeCalendarEventsDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarEventsDelta(ctx _context.Context) ApiMeCalendarEventsDeltaRequest {
	return ApiMeCalendarEventsDeltaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarEventsDeltaExecute(r ApiMeCalendarEventsDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarEventsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendar/events/microsoft.graph.delta()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	eventId string
	user string
}


func (r ApiMeCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarEventsEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
MeCalendarEventsEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiMeCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *MeFunctionsApiService) MeCalendarEventsEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, eventId string, user string) ApiMeCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiMeCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *MeFunctionsApiService) MeCalendarEventsEventCalendarAllowedCalendarSharingRolesExecute(r ApiMeCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarEventsEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendar/events/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarEventsEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	eventId string
}


func (r ApiMeCalendarEventsEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarEventsEventInstancesDeltaExecute(r)
}

/*
MeCalendarEventsEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventId key: id of event
 @return ApiMeCalendarEventsEventInstancesDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarEventsEventInstancesDelta(ctx _context.Context, eventId string) ApiMeCalendarEventsEventInstancesDeltaRequest {
	return ApiMeCalendarEventsEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarEventsEventInstancesDeltaExecute(r ApiMeCalendarEventsEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarEventsEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendar/events/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarGroupId string
	calendarId string
	user string
}


func (r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
MeCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @param user Usage: User={User}
 @return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesRequest
*/
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRoles(ctx _context.Context, calendarGroupId string, calendarId string, user string) ApiMeCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesRequest {
	return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesExecute(r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarGroupId string
	calendarId string
}


func (r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaExecute(r)
}

/*
MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDelta(ctx _context.Context, calendarGroupId string, calendarId string) ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaRequest {
	return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaRequest{
		ApiService: a,
		ctx: ctx,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaExecute(r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/calendarView/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarGroupId string
	calendarId string
	eventId string
	user string
}


func (r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, calendarGroupId string, calendarId string, eventId string, user string) ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/calendarView/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarGroupId string
	calendarId string
	eventId string
}


func (r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaExecute(r)
}

/*
MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDelta(ctx _context.Context, calendarGroupId string, calendarId string, eventId string) ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaRequest {
	return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaExecute(r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/calendarView/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarGroupId string
	calendarId string
}


func (r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaExecute(r)
}

/*
MeCalendarGroupsCalendarGroupCalendarsCalendarEventsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarEventsDelta(ctx _context.Context, calendarGroupId string, calendarId string) ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaRequest {
	return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaExecute(r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarEventsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/events/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarGroupId string
	calendarId string
	eventId string
	user string
}


func (r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
MeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, calendarGroupId string, calendarId string, eventId string, user string) ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesExecute(r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/events/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarGroupId string
	calendarId string
	eventId string
}


func (r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaExecute(r)
}

/*
MeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarGroupId key: id of calendarGroup
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDelta(ctx _context.Context, calendarGroupId string, calendarId string, eventId string) ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaRequest {
	return ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		calendarGroupId: calendarGroupId,
		calendarId: calendarId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaExecute(r ApiMeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarGroupsCalendarGroupCalendarsCalendarEventsEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendarGroups/{calendarGroup-id}/calendars/{calendar-id}/events/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"calendarGroup-id"+"}", _neturl.PathEscape(parameterToString(r.calendarGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarViewDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeCalendarViewDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarViewDeltaExecute(r)
}

/*
MeCalendarViewDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeCalendarViewDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarViewDelta(ctx _context.Context) ApiMeCalendarViewDeltaRequest {
	return ApiMeCalendarViewDeltaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarViewDeltaExecute(r ApiMeCalendarViewDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarViewDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendarView/microsoft.graph.delta()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarViewEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	eventId string
	user string
}


func (r ApiMeCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
MeCalendarViewEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiMeCalendarViewEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *MeFunctionsApiService) MeCalendarViewEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, eventId string, user string) ApiMeCalendarViewEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiMeCalendarViewEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *MeFunctionsApiService) MeCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r ApiMeCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarViewEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendarView/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarViewEventCalendarCalendarViewDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	eventId string
}


func (r ApiMeCalendarViewEventCalendarCalendarViewDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarViewEventCalendarCalendarViewDeltaExecute(r)
}

/*
MeCalendarViewEventCalendarCalendarViewDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventId key: id of event
 @return ApiMeCalendarViewEventCalendarCalendarViewDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarViewEventCalendarCalendarViewDelta(ctx _context.Context, eventId string) ApiMeCalendarViewEventCalendarCalendarViewDeltaRequest {
	return ApiMeCalendarViewEventCalendarCalendarViewDeltaRequest{
		ApiService: a,
		ctx: ctx,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarViewEventCalendarCalendarViewDeltaExecute(r ApiMeCalendarViewEventCalendarCalendarViewDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarViewEventCalendarCalendarViewDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendarView/{event-id}/calendar/calendarView/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarViewEventCalendarEventsDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	eventId string
}


func (r ApiMeCalendarViewEventCalendarEventsDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarViewEventCalendarEventsDeltaExecute(r)
}

/*
MeCalendarViewEventCalendarEventsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventId key: id of event
 @return ApiMeCalendarViewEventCalendarEventsDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarViewEventCalendarEventsDelta(ctx _context.Context, eventId string) ApiMeCalendarViewEventCalendarEventsDeltaRequest {
	return ApiMeCalendarViewEventCalendarEventsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarViewEventCalendarEventsDeltaExecute(r ApiMeCalendarViewEventCalendarEventsDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarViewEventCalendarEventsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendarView/{event-id}/calendar/events/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarViewEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	eventId string
}


func (r ApiMeCalendarViewEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarViewEventInstancesDeltaExecute(r)
}

/*
MeCalendarViewEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventId key: id of event
 @return ApiMeCalendarViewEventInstancesDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarViewEventInstancesDelta(ctx _context.Context, eventId string) ApiMeCalendarViewEventInstancesDeltaRequest {
	return ApiMeCalendarViewEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarViewEventInstancesDeltaExecute(r ApiMeCalendarViewEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarViewEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendarView/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarsCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarId string
	user string
}


func (r ApiMeCalendarsCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarsCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
MeCalendarsCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarId key: id of calendar
 @param user Usage: User={User}
 @return ApiMeCalendarsCalendarAllowedCalendarSharingRolesRequest
*/
func (a *MeFunctionsApiService) MeCalendarsCalendarAllowedCalendarSharingRoles(ctx _context.Context, calendarId string, user string) ApiMeCalendarsCalendarAllowedCalendarSharingRolesRequest {
	return ApiMeCalendarsCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		calendarId: calendarId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *MeFunctionsApiService) MeCalendarsCalendarAllowedCalendarSharingRolesExecute(r ApiMeCalendarsCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarsCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendars/{calendar-id}/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarsCalendarCalendarViewDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarId string
}


func (r ApiMeCalendarsCalendarCalendarViewDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarsCalendarCalendarViewDeltaExecute(r)
}

/*
MeCalendarsCalendarCalendarViewDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarId key: id of calendar
 @return ApiMeCalendarsCalendarCalendarViewDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarsCalendarCalendarViewDelta(ctx _context.Context, calendarId string) ApiMeCalendarsCalendarCalendarViewDeltaRequest {
	return ApiMeCalendarsCalendarCalendarViewDeltaRequest{
		ApiService: a,
		ctx: ctx,
		calendarId: calendarId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarsCalendarCalendarViewDeltaExecute(r ApiMeCalendarsCalendarCalendarViewDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarsCalendarCalendarViewDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendars/{calendar-id}/calendarView/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarId string
	eventId string
	user string
}


func (r ApiMeCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
MeCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiMeCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *MeFunctionsApiService) MeCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, calendarId string, eventId string, user string) ApiMeCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiMeCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		calendarId: calendarId,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *MeFunctionsApiService) MeCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesExecute(r ApiMeCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarsCalendarCalendarViewEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendars/{calendar-id}/calendarView/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarsCalendarCalendarViewEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarId string
	eventId string
}


func (r ApiMeCalendarsCalendarCalendarViewEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarsCalendarCalendarViewEventInstancesDeltaExecute(r)
}

/*
MeCalendarsCalendarCalendarViewEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @return ApiMeCalendarsCalendarCalendarViewEventInstancesDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarsCalendarCalendarViewEventInstancesDelta(ctx _context.Context, calendarId string, eventId string) ApiMeCalendarsCalendarCalendarViewEventInstancesDeltaRequest {
	return ApiMeCalendarsCalendarCalendarViewEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		calendarId: calendarId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarsCalendarCalendarViewEventInstancesDeltaExecute(r ApiMeCalendarsCalendarCalendarViewEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarsCalendarCalendarViewEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendars/{calendar-id}/calendarView/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarsCalendarEventsDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarId string
}


func (r ApiMeCalendarsCalendarEventsDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarsCalendarEventsDeltaExecute(r)
}

/*
MeCalendarsCalendarEventsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarId key: id of calendar
 @return ApiMeCalendarsCalendarEventsDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarsCalendarEventsDelta(ctx _context.Context, calendarId string) ApiMeCalendarsCalendarEventsDeltaRequest {
	return ApiMeCalendarsCalendarEventsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		calendarId: calendarId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarsCalendarEventsDeltaExecute(r ApiMeCalendarsCalendarEventsDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarsCalendarEventsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendars/{calendar-id}/events/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarId string
	eventId string
	user string
}


func (r ApiMeCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
MeCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiMeCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *MeFunctionsApiService) MeCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, calendarId string, eventId string, user string) ApiMeCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiMeCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		calendarId: calendarId,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *MeFunctionsApiService) MeCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesExecute(r ApiMeCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarsCalendarEventsEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendars/{calendar-id}/events/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeCalendarsCalendarEventsEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	calendarId string
	eventId string
}


func (r ApiMeCalendarsCalendarEventsEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeCalendarsCalendarEventsEventInstancesDeltaExecute(r)
}

/*
MeCalendarsCalendarEventsEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param calendarId key: id of calendar
 @param eventId key: id of event
 @return ApiMeCalendarsCalendarEventsEventInstancesDeltaRequest
*/
func (a *MeFunctionsApiService) MeCalendarsCalendarEventsEventInstancesDelta(ctx _context.Context, calendarId string, eventId string) ApiMeCalendarsCalendarEventsEventInstancesDeltaRequest {
	return ApiMeCalendarsCalendarEventsEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		calendarId: calendarId,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeCalendarsCalendarEventsEventInstancesDeltaExecute(r ApiMeCalendarsCalendarEventsEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeCalendarsCalendarEventsEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/calendars/{calendar-id}/events/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"calendar-id"+"}", _neturl.PathEscape(parameterToString(r.calendarId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactFolderChildFoldersDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	contactFolderId string
}


func (r ApiMeContactFoldersContactFolderChildFoldersDeltaRequest) Execute() ([]MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactFolderChildFoldersDeltaExecute(r)
}

/*
MeContactFoldersContactFolderChildFoldersDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @return ApiMeContactFoldersContactFolderChildFoldersDeltaRequest
*/
func (a *MeFunctionsApiService) MeContactFoldersContactFolderChildFoldersDelta(ctx _context.Context, contactFolderId string) ApiMeContactFoldersContactFolderChildFoldersDeltaRequest {
	return ApiMeContactFoldersContactFolderChildFoldersDeltaRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphContactFolder
func (a *MeFunctionsApiService) MeContactFoldersContactFolderChildFoldersDeltaExecute(r ApiMeContactFoldersContactFolderChildFoldersDeltaRequest) ([]MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphContactFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeContactFoldersContactFolderChildFoldersDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/childFolders/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersContactFolderContactsDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	contactFolderId string
}


func (r ApiMeContactFoldersContactFolderContactsDeltaRequest) Execute() ([]MicrosoftGraphContact, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersContactFolderContactsDeltaExecute(r)
}

/*
MeContactFoldersContactFolderContactsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param contactFolderId key: id of contactFolder
 @return ApiMeContactFoldersContactFolderContactsDeltaRequest
*/
func (a *MeFunctionsApiService) MeContactFoldersContactFolderContactsDelta(ctx _context.Context, contactFolderId string) ApiMeContactFoldersContactFolderContactsDeltaRequest {
	return ApiMeContactFoldersContactFolderContactsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		contactFolderId: contactFolderId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphContact
func (a *MeFunctionsApiService) MeContactFoldersContactFolderContactsDeltaExecute(r ApiMeContactFoldersContactFolderContactsDeltaRequest) ([]MicrosoftGraphContact, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeContactFoldersContactFolderContactsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/{contactFolder-id}/contacts/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"contactFolder-id"+"}", _neturl.PathEscape(parameterToString(r.contactFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactFoldersDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeContactFoldersDeltaRequest) Execute() ([]MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	return r.ApiService.MeContactFoldersDeltaExecute(r)
}

/*
MeContactFoldersDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeContactFoldersDeltaRequest
*/
func (a *MeFunctionsApiService) MeContactFoldersDelta(ctx _context.Context) ApiMeContactFoldersDeltaRequest {
	return ApiMeContactFoldersDeltaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphContactFolder
func (a *MeFunctionsApiService) MeContactFoldersDeltaExecute(r ApiMeContactFoldersDeltaRequest) ([]MicrosoftGraphContactFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphContactFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeContactFoldersDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contactFolders/microsoft.graph.delta()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeContactsDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeContactsDeltaRequest) Execute() ([]MicrosoftGraphContact, *_nethttp.Response, error) {
	return r.ApiService.MeContactsDeltaExecute(r)
}

/*
MeContactsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeContactsDeltaRequest
*/
func (a *MeFunctionsApiService) MeContactsDelta(ctx _context.Context) ApiMeContactsDeltaRequest {
	return ApiMeContactsDeltaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphContact
func (a *MeFunctionsApiService) MeContactsDeltaExecute(r ApiMeContactsDeltaRequest) ([]MicrosoftGraphContact, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeContactsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/contacts/microsoft.graph.delta()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeEventsDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeEventsDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeEventsDeltaExecute(r)
}

/*
MeEventsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeEventsDeltaRequest
*/
func (a *MeFunctionsApiService) MeEventsDelta(ctx _context.Context) ApiMeEventsDeltaRequest {
	return ApiMeEventsDeltaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeEventsDeltaExecute(r ApiMeEventsDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeEventsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/events/microsoft.graph.delta()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeEventsEventCalendarAllowedCalendarSharingRolesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	eventId string
	user string
}


func (r ApiMeEventsEventCalendarAllowedCalendarSharingRolesRequest) Execute() ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	return r.ApiService.MeEventsEventCalendarAllowedCalendarSharingRolesExecute(r)
}

/*
MeEventsEventCalendarAllowedCalendarSharingRoles Invoke function allowedCalendarSharingRoles

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventId key: id of event
 @param user Usage: User={User}
 @return ApiMeEventsEventCalendarAllowedCalendarSharingRolesRequest
*/
func (a *MeFunctionsApiService) MeEventsEventCalendarAllowedCalendarSharingRoles(ctx _context.Context, eventId string, user string) ApiMeEventsEventCalendarAllowedCalendarSharingRolesRequest {
	return ApiMeEventsEventCalendarAllowedCalendarSharingRolesRequest{
		ApiService: a,
		ctx: ctx,
		eventId: eventId,
		user: user,
	}
}

// Execute executes the request
//  @return []AnyOfmicrosoftGraphCalendarRoleType
func (a *MeFunctionsApiService) MeEventsEventCalendarAllowedCalendarSharingRolesExecute(r ApiMeEventsEventCalendarAllowedCalendarSharingRolesRequest) ([]AnyOfmicrosoftGraphCalendarRoleType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AnyOfmicrosoftGraphCalendarRoleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeEventsEventCalendarAllowedCalendarSharingRoles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/events/{event-id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"User"+"}", _neturl.PathEscape(parameterToString(r.user, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeEventsEventCalendarCalendarViewDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	eventId string
}


func (r ApiMeEventsEventCalendarCalendarViewDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeEventsEventCalendarCalendarViewDeltaExecute(r)
}

/*
MeEventsEventCalendarCalendarViewDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventId key: id of event
 @return ApiMeEventsEventCalendarCalendarViewDeltaRequest
*/
func (a *MeFunctionsApiService) MeEventsEventCalendarCalendarViewDelta(ctx _context.Context, eventId string) ApiMeEventsEventCalendarCalendarViewDeltaRequest {
	return ApiMeEventsEventCalendarCalendarViewDeltaRequest{
		ApiService: a,
		ctx: ctx,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeEventsEventCalendarCalendarViewDeltaExecute(r ApiMeEventsEventCalendarCalendarViewDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeEventsEventCalendarCalendarViewDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/events/{event-id}/calendar/calendarView/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeEventsEventCalendarEventsDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	eventId string
}


func (r ApiMeEventsEventCalendarEventsDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeEventsEventCalendarEventsDeltaExecute(r)
}

/*
MeEventsEventCalendarEventsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventId key: id of event
 @return ApiMeEventsEventCalendarEventsDeltaRequest
*/
func (a *MeFunctionsApiService) MeEventsEventCalendarEventsDelta(ctx _context.Context, eventId string) ApiMeEventsEventCalendarEventsDeltaRequest {
	return ApiMeEventsEventCalendarEventsDeltaRequest{
		ApiService: a,
		ctx: ctx,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeEventsEventCalendarEventsDeltaExecute(r ApiMeEventsEventCalendarEventsDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeEventsEventCalendarEventsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/events/{event-id}/calendar/events/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeEventsEventInstancesDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	eventId string
}


func (r ApiMeEventsEventInstancesDeltaRequest) Execute() ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	return r.ApiService.MeEventsEventInstancesDeltaExecute(r)
}

/*
MeEventsEventInstancesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param eventId key: id of event
 @return ApiMeEventsEventInstancesDeltaRequest
*/
func (a *MeFunctionsApiService) MeEventsEventInstancesDelta(ctx _context.Context, eventId string) ApiMeEventsEventInstancesDeltaRequest {
	return ApiMeEventsEventInstancesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		eventId: eventId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphEvent
func (a *MeFunctionsApiService) MeEventsEventInstancesDeltaExecute(r ApiMeEventsEventInstancesDeltaRequest) ([]MicrosoftGraphEvent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeEventsEventInstancesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/events/{event-id}/instances/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"event-id"+"}", _neturl.PathEscape(parameterToString(r.eventId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeGetManagedAppDiagnosticStatusesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeGetManagedAppDiagnosticStatusesRequest) Execute() ([]*AnyOfmicrosoftGraphManagedAppDiagnosticStatus, *_nethttp.Response, error) {
	return r.ApiService.MeGetManagedAppDiagnosticStatusesExecute(r)
}

/*
MeGetManagedAppDiagnosticStatuses Invoke function getManagedAppDiagnosticStatuses

Gets diagnostics validation status for a given user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeGetManagedAppDiagnosticStatusesRequest
*/
func (a *MeFunctionsApiService) MeGetManagedAppDiagnosticStatuses(ctx _context.Context) ApiMeGetManagedAppDiagnosticStatusesRequest {
	return ApiMeGetManagedAppDiagnosticStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphManagedAppDiagnosticStatus
func (a *MeFunctionsApiService) MeGetManagedAppDiagnosticStatusesExecute(r ApiMeGetManagedAppDiagnosticStatusesRequest) ([]*AnyOfmicrosoftGraphManagedAppDiagnosticStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphManagedAppDiagnosticStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeGetManagedAppDiagnosticStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/microsoft.graph.getManagedAppDiagnosticStatuses()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeGetManagedAppPoliciesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeGetManagedAppPoliciesRequest) Execute() ([]*AnyOfmicrosoftGraphManagedAppPolicy, *_nethttp.Response, error) {
	return r.ApiService.MeGetManagedAppPoliciesExecute(r)
}

/*
MeGetManagedAppPolicies Invoke function getManagedAppPolicies

Gets app restrictions for a given user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeGetManagedAppPoliciesRequest
*/
func (a *MeFunctionsApiService) MeGetManagedAppPolicies(ctx _context.Context) ApiMeGetManagedAppPoliciesRequest {
	return ApiMeGetManagedAppPoliciesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphManagedAppPolicy
func (a *MeFunctionsApiService) MeGetManagedAppPoliciesExecute(r ApiMeGetManagedAppPoliciesRequest) ([]*AnyOfmicrosoftGraphManagedAppPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphManagedAppPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeGetManagedAppPolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/microsoft.graph.getManagedAppPolicies()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	anotherRange string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRect Invoke function boundingRect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRect(ctx _context.Context, sharedInsightId string, anotherRange string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRectRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeBoundingRect")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.boundingRect(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	row int32
	column int32
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCell(ctx _context.Context, sharedInsightId string, row int32, column int32) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	column int32
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumn Invoke function column

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param column Usage: column={column}
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumn(ctx _context.Context, sharedInsightId string, column int32) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.column(column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18 Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Request
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Request {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Request{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfter9c18")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.columnsAfter()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	count int32
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2a Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2a(ctx _context.Context, sharedInsightId string, count int32) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsAfterDb2a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.columnsAfter(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	count int32
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bca Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bca(ctx _context.Context, sharedInsightId string, count int32) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore1bca")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.columnsBefore(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4 Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Request
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Request {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Request{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeColumnsBefore72e4")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.columnsBefore()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumn Invoke function entireColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumn(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.entireColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRow Invoke function entireRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRow(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeEntireRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.entireRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	anotherRange string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersection Invoke function intersection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersection(ctx _context.Context, sharedInsightId string, anotherRange string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersectionRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeIntersection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.intersection(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCell Invoke function lastCell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCell(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.lastCell()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumn Invoke function lastColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumn(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.lastColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRow Invoke function lastRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRow(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeLastRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.lastRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	rowOffset int32
	columnOffset int32
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRange Invoke function offsetRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param rowOffset Usage: rowOffset={rowOffset}
 @param columnOffset Usage: columnOffset={columnOffset}
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRange(ctx _context.Context, sharedInsightId string, rowOffset int32, columnOffset int32) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		rowOffset: rowOffset,
		columnOffset: columnOffset,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeOffsetRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.offsetRange(rowOffset={rowOffset},columnOffset={columnOffset})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowOffset"+"}", _neturl.PathEscape(parameterToString(r.rowOffset, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"columnOffset"+"}", _neturl.PathEscape(parameterToString(r.columnOffset, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.rowOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("rowOffset must be greater than -2147483648")
	}
	if r.rowOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("rowOffset must be less than 2147483647")
	}
	if r.columnOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("columnOffset must be greater than -2147483648")
	}
	if r.columnOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("columnOffset must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	deltaRows int32
	deltaColumns int32
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRange Invoke function resizedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param deltaRows Usage: deltaRows={deltaRows}
 @param deltaColumns Usage: deltaColumns={deltaColumns}
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRange(ctx _context.Context, sharedInsightId string, deltaRows int32, deltaColumns int32) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		deltaRows: deltaRows,
		deltaColumns: deltaColumns,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeResizedRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.resizedRange(deltaRows={deltaRows},deltaColumns={deltaColumns})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaRows"+"}", _neturl.PathEscape(parameterToString(r.deltaRows, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaColumns"+"}", _neturl.PathEscape(parameterToString(r.deltaColumns, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.deltaRows < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaRows must be greater than -2147483648")
	}
	if r.deltaRows > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaRows must be less than 2147483647")
	}
	if r.deltaColumns < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaColumns must be greater than -2147483648")
	}
	if r.deltaColumns > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaColumns must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	row int32
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRow Invoke function row

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param row Usage: row={row}
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRow(ctx _context.Context, sharedInsightId string, row int32) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		row: row,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.row(row={row})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	count int32
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251e Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251e(ctx _context.Context, sharedInsightId string, count int32) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251eRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove251e")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.rowsAbove(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1 Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Request
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Request {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Request{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsAbove3ac1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.rowsAbove()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3c Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3c(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelow3b3c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.rowsBelow()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	count int32
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11 Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Request
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11(ctx _context.Context, sharedInsightId string, count int32) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Request {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Request{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeRowsBelowCb11")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.rowsBelow(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	valuesOnly bool
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206d(ctx _context.Context, sharedInsightId string, valuesOnly bool) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2c(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRange(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeViewRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRangeView/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewRequest) Execute() (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewExecute(r)
}

/*
MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleView Invoke function visibleView

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleView(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewRequest {
	return ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRangeView
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewExecute(r ApiMeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleViewRequest) (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRangeView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightLastSharedMethodMicrosoftGraphWorkbookRangeVisibleView")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/lastSharedMethod/microsoft.graph.workbookRange/microsoft.graph.visibleView()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	anotherRange string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRect Invoke function boundingRect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRect(ctx _context.Context, sharedInsightId string, anotherRange string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeBoundingRect")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.boundingRect(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	row int32
	column int32
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCell(ctx _context.Context, sharedInsightId string, row int32, column int32) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	column int32
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumn Invoke function column

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param column Usage: column={column}
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumn(ctx _context.Context, sharedInsightId string, column int32) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.column(column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18 Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsAfter()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	count int32
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a(ctx _context.Context, sharedInsightId string, count int32) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsAfter(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	count int32
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca(ctx _context.Context, sharedInsightId string, count int32) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsBefore(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4 Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsBefore()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumn Invoke function entireColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumn(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.entireColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRow Invoke function entireRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRow(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeEntireRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.entireRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	anotherRange string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersection Invoke function intersection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersection(ctx _context.Context, sharedInsightId string, anotherRange string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeIntersection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.intersection(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCell Invoke function lastCell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCell(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastCell()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumn Invoke function lastColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumn(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRow Invoke function lastRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRow(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeLastRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	rowOffset int32
	columnOffset int32
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRange Invoke function offsetRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param rowOffset Usage: rowOffset={rowOffset}
 @param columnOffset Usage: columnOffset={columnOffset}
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRange(ctx _context.Context, sharedInsightId string, rowOffset int32, columnOffset int32) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		rowOffset: rowOffset,
		columnOffset: columnOffset,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeOffsetRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.offsetRange(rowOffset={rowOffset},columnOffset={columnOffset})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowOffset"+"}", _neturl.PathEscape(parameterToString(r.rowOffset, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"columnOffset"+"}", _neturl.PathEscape(parameterToString(r.columnOffset, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.rowOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("rowOffset must be greater than -2147483648")
	}
	if r.rowOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("rowOffset must be less than 2147483647")
	}
	if r.columnOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("columnOffset must be greater than -2147483648")
	}
	if r.columnOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("columnOffset must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	deltaRows int32
	deltaColumns int32
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRange Invoke function resizedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param deltaRows Usage: deltaRows={deltaRows}
 @param deltaColumns Usage: deltaColumns={deltaColumns}
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRange(ctx _context.Context, sharedInsightId string, deltaRows int32, deltaColumns int32) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		deltaRows: deltaRows,
		deltaColumns: deltaColumns,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeResizedRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.resizedRange(deltaRows={deltaRows},deltaColumns={deltaColumns})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaRows"+"}", _neturl.PathEscape(parameterToString(r.deltaRows, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaColumns"+"}", _neturl.PathEscape(parameterToString(r.deltaColumns, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.deltaRows < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaRows must be greater than -2147483648")
	}
	if r.deltaRows > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaRows must be less than 2147483647")
	}
	if r.deltaColumns < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaColumns must be greater than -2147483648")
	}
	if r.deltaColumns > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaColumns must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	row int32
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRow Invoke function row

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param row Usage: row={row}
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRow(ctx _context.Context, sharedInsightId string, row int32) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		row: row,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.row(row={row})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	count int32
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251e Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251e(ctx _context.Context, sharedInsightId string, count int32) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251e")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsAbove(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1 Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsAbove()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsBelow()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	count int32
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11 Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param count Usage: count={count}
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11(ctx _context.Context, sharedInsightId string, count int32) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsBelow(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
	valuesOnly bool
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206d(ctx _context.Context, sharedInsightId string, valuesOnly bool) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRange(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeViewRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRangeView/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sharedInsightId string
}


func (r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest) Execute() (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewExecute(r)
}

/*
MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleView Invoke function visibleView

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedInsightId key: id of sharedInsight
 @return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest
*/
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleView(ctx _context.Context, sharedInsightId string) ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest {
	return ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest{
		ApiService: a,
		ctx: ctx,
		sharedInsightId: sharedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRangeView
func (a *MeFunctionsApiService) MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewExecute(r ApiMeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest) (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRangeView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsSharedSharedInsightResourceMicrosoftGraphWorkbookRangeVisibleView")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/shared/{sharedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.visibleView()"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.sharedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
	anotherRange string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRect Invoke function boundingRect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRect(ctx _context.Context, trendingId string, anotherRange string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRectRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeBoundingRect")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.boundingRect(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
	row int32
	column int32
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCell(ctx _context.Context, trendingId string, row int32, column int32) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
	column int32
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumn Invoke function column

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @param column Usage: column={column}
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumn(ctx _context.Context, trendingId string, column int32) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.column(column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18 Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18(ctx _context.Context, trendingId string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsAfter()"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
	count int32
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @param count Usage: count={count}
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a(ctx _context.Context, trendingId string, count int32) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsAfter(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
	count int32
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @param count Usage: count={count}
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca(ctx _context.Context, trendingId string, count int32) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsBefore(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4 Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4(ctx _context.Context, trendingId string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsBefore()"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumn Invoke function entireColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumn(ctx _context.Context, trendingId string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.entireColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRow Invoke function entireRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRow(ctx _context.Context, trendingId string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeEntireRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.entireRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
	anotherRange string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersection Invoke function intersection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersection(ctx _context.Context, trendingId string, anotherRange string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersectionRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeIntersection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.intersection(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCell Invoke function lastCell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCell(ctx _context.Context, trendingId string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastCell()"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumn Invoke function lastColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumn(ctx _context.Context, trendingId string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRow Invoke function lastRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRow(ctx _context.Context, trendingId string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeLastRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
	rowOffset int32
	columnOffset int32
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRange Invoke function offsetRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @param rowOffset Usage: rowOffset={rowOffset}
 @param columnOffset Usage: columnOffset={columnOffset}
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRange(ctx _context.Context, trendingId string, rowOffset int32, columnOffset int32) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
		rowOffset: rowOffset,
		columnOffset: columnOffset,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeOffsetRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.offsetRange(rowOffset={rowOffset},columnOffset={columnOffset})"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowOffset"+"}", _neturl.PathEscape(parameterToString(r.rowOffset, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"columnOffset"+"}", _neturl.PathEscape(parameterToString(r.columnOffset, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.rowOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("rowOffset must be greater than -2147483648")
	}
	if r.rowOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("rowOffset must be less than 2147483647")
	}
	if r.columnOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("columnOffset must be greater than -2147483648")
	}
	if r.columnOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("columnOffset must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
	deltaRows int32
	deltaColumns int32
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRange Invoke function resizedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @param deltaRows Usage: deltaRows={deltaRows}
 @param deltaColumns Usage: deltaColumns={deltaColumns}
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRange(ctx _context.Context, trendingId string, deltaRows int32, deltaColumns int32) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
		deltaRows: deltaRows,
		deltaColumns: deltaColumns,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeResizedRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.resizedRange(deltaRows={deltaRows},deltaColumns={deltaColumns})"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaRows"+"}", _neturl.PathEscape(parameterToString(r.deltaRows, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaColumns"+"}", _neturl.PathEscape(parameterToString(r.deltaColumns, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.deltaRows < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaRows must be greater than -2147483648")
	}
	if r.deltaRows > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaRows must be less than 2147483647")
	}
	if r.deltaColumns < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaColumns must be greater than -2147483648")
	}
	if r.deltaColumns > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaColumns must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
	row int32
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRow Invoke function row

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @param row Usage: row={row}
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRow(ctx _context.Context, trendingId string, row int32) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
		row: row,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.row(row={row})"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
	count int32
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251e Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @param count Usage: count={count}
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251e(ctx _context.Context, trendingId string, count int32) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove251e")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsAbove(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1 Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1(ctx _context.Context, trendingId string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsAbove()"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c(ctx _context.Context, trendingId string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsBelow()"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
	count int32
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11 Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @param count Usage: count={count}
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11(ctx _context.Context, trendingId string, count int32) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeRowsBelowCb11")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsBelow(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
	valuesOnly bool
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206d(ctx _context.Context, trendingId string, valuesOnly bool) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c(ctx _context.Context, trendingId string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRange(ctx _context.Context, trendingId string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeViewRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRangeView/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	trendingId string
}


func (r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewRequest) Execute() (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewExecute(r)
}

/*
MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleView Invoke function visibleView

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param trendingId key: id of trending
 @return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewRequest
*/
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleView(ctx _context.Context, trendingId string) ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewRequest {
	return ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewRequest{
		ApiService: a,
		ctx: ctx,
		trendingId: trendingId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRangeView
func (a *MeFunctionsApiService) MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewExecute(r ApiMeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleViewRequest) (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRangeView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsTrendingTrendingResourceMicrosoftGraphWorkbookRangeVisibleView")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/trending/{trending-id}/resource/microsoft.graph.workbookRange/microsoft.graph.visibleView()"
	localVarPath = strings.Replace(localVarPath, "{"+"trending-id"+"}", _neturl.PathEscape(parameterToString(r.trendingId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
	anotherRange string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRect Invoke function boundingRect

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRect(ctx _context.Context, usedInsightId string, anotherRange string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRectRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeBoundingRect")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.boundingRect(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
	row int32
	column int32
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCell(ctx _context.Context, usedInsightId string, row int32, column int32) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
	column int32
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumn Invoke function column

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @param column Usage: column={column}
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumn(ctx _context.Context, usedInsightId string, column int32) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.column(column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18 Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18(ctx _context.Context, usedInsightId string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Execute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfter9c18")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsAfter()"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
	count int32
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a Invoke function columnsAfter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @param count Usage: count={count}
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a(ctx _context.Context, usedInsightId string, count int32) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsAfterDb2a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsAfter(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
	count int32
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @param count Usage: count={count}
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca(ctx _context.Context, usedInsightId string, count int32) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bcaRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore1bca")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsBefore(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4 Invoke function columnsBefore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4(ctx _context.Context, usedInsightId string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Execute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeColumnsBefore72e4")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.columnsBefore()"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumn Invoke function entireColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumn(ctx _context.Context, usedInsightId string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.entireColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRow Invoke function entireRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRow(ctx _context.Context, usedInsightId string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeEntireRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.entireRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
	anotherRange string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersection Invoke function intersection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @param anotherRange Usage: anotherRange={anotherRange}
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersection(ctx _context.Context, usedInsightId string, anotherRange string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
		anotherRange: anotherRange,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersectionRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeIntersection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.intersection(anotherRange='{anotherRange}')"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"anotherRange"+"}", _neturl.PathEscape(parameterToString(r.anotherRange, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCell Invoke function lastCell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCell(ctx _context.Context, usedInsightId string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastCell()"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumn Invoke function lastColumn

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumn(ctx _context.Context, usedInsightId string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumnRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastColumn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastColumn()"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRow Invoke function lastRow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRow(ctx _context.Context, usedInsightId string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeLastRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.lastRow()"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
	rowOffset int32
	columnOffset int32
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRange Invoke function offsetRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @param rowOffset Usage: rowOffset={rowOffset}
 @param columnOffset Usage: columnOffset={columnOffset}
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRange(ctx _context.Context, usedInsightId string, rowOffset int32, columnOffset int32) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
		rowOffset: rowOffset,
		columnOffset: columnOffset,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeOffsetRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.offsetRange(rowOffset={rowOffset},columnOffset={columnOffset})"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rowOffset"+"}", _neturl.PathEscape(parameterToString(r.rowOffset, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"columnOffset"+"}", _neturl.PathEscape(parameterToString(r.columnOffset, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.rowOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("rowOffset must be greater than -2147483648")
	}
	if r.rowOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("rowOffset must be less than 2147483647")
	}
	if r.columnOffset < -2147483648 {
		return localVarReturnValue, nil, reportError("columnOffset must be greater than -2147483648")
	}
	if r.columnOffset > 2147483647 {
		return localVarReturnValue, nil, reportError("columnOffset must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
	deltaRows int32
	deltaColumns int32
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRange Invoke function resizedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @param deltaRows Usage: deltaRows={deltaRows}
 @param deltaColumns Usage: deltaColumns={deltaColumns}
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRange(ctx _context.Context, usedInsightId string, deltaRows int32, deltaColumns int32) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
		deltaRows: deltaRows,
		deltaColumns: deltaColumns,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeResizedRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.resizedRange(deltaRows={deltaRows},deltaColumns={deltaColumns})"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaRows"+"}", _neturl.PathEscape(parameterToString(r.deltaRows, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deltaColumns"+"}", _neturl.PathEscape(parameterToString(r.deltaColumns, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.deltaRows < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaRows must be greater than -2147483648")
	}
	if r.deltaRows > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaRows must be less than 2147483647")
	}
	if r.deltaColumns < -2147483648 {
		return localVarReturnValue, nil, reportError("deltaColumns must be greater than -2147483648")
	}
	if r.deltaColumns > 2147483647 {
		return localVarReturnValue, nil, reportError("deltaColumns must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
	row int32
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRow Invoke function row

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @param row Usage: row={row}
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRow(ctx _context.Context, usedInsightId string, row int32) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
		row: row,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRow")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.row(row={row})"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
	count int32
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251e Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @param count Usage: count={count}
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251e(ctx _context.Context, usedInsightId string, count int32) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251eRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove251e")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsAbove(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1 Invoke function rowsAbove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1(ctx _context.Context, usedInsightId string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Execute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsAbove3ac1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsAbove()"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c(ctx _context.Context, usedInsightId string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelow3b3c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsBelow()"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
	count int32
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11 Invoke function rowsBelow

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @param count Usage: count={count}
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11(ctx _context.Context, usedInsightId string, count int32) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
		count: count,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Execute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeRowsBelowCb11")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.rowsBelow(count={count})"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"count"+"}", _neturl.PathEscape(parameterToString(r.count, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.count < -2147483648 {
		return localVarReturnValue, nil, reportError("count must be greater than -2147483648")
	}
	if r.count > 2147483647 {
		return localVarReturnValue, nil, reportError("count must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
	valuesOnly bool
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206d(ctx _context.Context, usedInsightId string, valuesOnly bool) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c(ctx _context.Context, usedInsightId string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRange(ctx _context.Context, usedInsightId string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeViewRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRangeView/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	usedInsightId string
}


func (r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest) Execute() (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	return r.ApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewExecute(r)
}

/*
MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleView Invoke function visibleView

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param usedInsightId key: id of usedInsight
 @return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest
*/
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleView(ctx _context.Context, usedInsightId string) ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest {
	return ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest{
		ApiService: a,
		ctx: ctx,
		usedInsightId: usedInsightId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRangeView
func (a *MeFunctionsApiService) MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewExecute(r ApiMeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleViewRequest) (AnyOfmicrosoftGraphWorkbookRangeView, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRangeView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeInsightsUsedUsedInsightResourceMicrosoftGraphWorkbookRangeVisibleView")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/insights/used/{usedInsight-id}/resource/microsoft.graph.workbookRange/microsoft.graph.visibleView()"
	localVarPath = strings.Replace(localVarPath, "{"+"usedInsight-id"+"}", _neturl.PathEscape(parameterToString(r.usedInsightId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeMailFoldersDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeMailFoldersDeltaRequest) Execute() ([]MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	return r.ApiService.MeMailFoldersDeltaExecute(r)
}

/*
MeMailFoldersDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeMailFoldersDeltaRequest
*/
func (a *MeFunctionsApiService) MeMailFoldersDelta(ctx _context.Context) ApiMeMailFoldersDeltaRequest {
	return ApiMeMailFoldersDeltaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphMailFolder
func (a *MeFunctionsApiService) MeMailFoldersDeltaExecute(r ApiMeMailFoldersDeltaRequest) ([]MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphMailFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeMailFoldersDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/mailFolders/microsoft.graph.delta()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeMailFoldersMailFolderChildFoldersDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	mailFolderId string
}


func (r ApiMeMailFoldersMailFolderChildFoldersDeltaRequest) Execute() ([]MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	return r.ApiService.MeMailFoldersMailFolderChildFoldersDeltaExecute(r)
}

/*
MeMailFoldersMailFolderChildFoldersDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mailFolderId key: id of mailFolder
 @return ApiMeMailFoldersMailFolderChildFoldersDeltaRequest
*/
func (a *MeFunctionsApiService) MeMailFoldersMailFolderChildFoldersDelta(ctx _context.Context, mailFolderId string) ApiMeMailFoldersMailFolderChildFoldersDeltaRequest {
	return ApiMeMailFoldersMailFolderChildFoldersDeltaRequest{
		ApiService: a,
		ctx: ctx,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphMailFolder
func (a *MeFunctionsApiService) MeMailFoldersMailFolderChildFoldersDeltaExecute(r ApiMeMailFoldersMailFolderChildFoldersDeltaRequest) ([]MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphMailFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeMailFoldersMailFolderChildFoldersDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/mailFolders/{mailFolder-id}/childFolders/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeMailFoldersMailFolderMessagesDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	mailFolderId string
}


func (r ApiMeMailFoldersMailFolderMessagesDeltaRequest) Execute() ([]MicrosoftGraphMessage, *_nethttp.Response, error) {
	return r.ApiService.MeMailFoldersMailFolderMessagesDeltaExecute(r)
}

/*
MeMailFoldersMailFolderMessagesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mailFolderId key: id of mailFolder
 @return ApiMeMailFoldersMailFolderMessagesDeltaRequest
*/
func (a *MeFunctionsApiService) MeMailFoldersMailFolderMessagesDelta(ctx _context.Context, mailFolderId string) ApiMeMailFoldersMailFolderMessagesDeltaRequest {
	return ApiMeMailFoldersMailFolderMessagesDeltaRequest{
		ApiService: a,
		ctx: ctx,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphMessage
func (a *MeFunctionsApiService) MeMailFoldersMailFolderMessagesDeltaExecute(r ApiMeMailFoldersMailFolderMessagesDeltaRequest) ([]MicrosoftGraphMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeMailFoldersMailFolderMessagesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/mailFolders/{mailFolder-id}/messages/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationRequest) Execute() ([]*string, *_nethttp.Response, error) {
	return r.ApiService.MeManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationExecute(r)
}

/*
MeManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistration Invoke function getUserIdsWithFlaggedAppRegistration

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationRequest
*/
func (a *MeFunctionsApiService) MeManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistration(ctx _context.Context) ApiMeManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationRequest {
	return ApiMeManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []*string
func (a *MeFunctionsApiService) MeManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationExecute(r ApiMeManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistrationRequest) ([]*string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeManagedAppRegistrationsGetUserIdsWithFlaggedAppRegistration")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedAppRegistrations/microsoft.graph.getUserIdsWithFlaggedAppRegistration()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeMessagesDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeMessagesDeltaRequest) Execute() ([]MicrosoftGraphMessage, *_nethttp.Response, error) {
	return r.ApiService.MeMessagesDeltaExecute(r)
}

/*
MeMessagesDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeMessagesDeltaRequest
*/
func (a *MeFunctionsApiService) MeMessagesDelta(ctx _context.Context) ApiMeMessagesDeltaRequest {
	return ApiMeMessagesDeltaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphMessage
func (a *MeFunctionsApiService) MeMessagesDeltaExecute(r ApiMeMessagesDeltaRequest) ([]MicrosoftGraphMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeMessagesDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/messages/microsoft.graph.delta()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksGetRecentNotebooksRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	includePersonalNotebooks bool
}


func (r ApiMeOnenoteNotebooksGetRecentNotebooksRequest) Execute() ([]*AnyOfmicrosoftGraphRecentNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksGetRecentNotebooksExecute(r)
}

/*
MeOnenoteNotebooksGetRecentNotebooks Invoke function getRecentNotebooks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param includePersonalNotebooks Usage: includePersonalNotebooks={includePersonalNotebooks}
 @return ApiMeOnenoteNotebooksGetRecentNotebooksRequest
*/
func (a *MeFunctionsApiService) MeOnenoteNotebooksGetRecentNotebooks(ctx _context.Context, includePersonalNotebooks bool) ApiMeOnenoteNotebooksGetRecentNotebooksRequest {
	return ApiMeOnenoteNotebooksGetRecentNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		includePersonalNotebooks: includePersonalNotebooks,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphRecentNotebook
func (a *MeFunctionsApiService) MeOnenoteNotebooksGetRecentNotebooksExecute(r ApiMeOnenoteNotebooksGetRecentNotebooksRequest) ([]*AnyOfmicrosoftGraphRecentNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphRecentNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeOnenoteNotebooksGetRecentNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/microsoft.graph.getRecentNotebooks(includePersonalNotebooks={includePersonalNotebooks})"
	localVarPath = strings.Replace(localVarPath, "{"+"includePersonalNotebooks"+"}", _neturl.PathEscape(parameterToString(r.includePersonalNotebooks, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiMeOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
MeOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *MeFunctionsApiService) MeOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiMeOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *MeFunctionsApiService) MeOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiMeOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	notebookId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiMeOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
MeOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *MeFunctionsApiService) MeOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, notebookId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiMeOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *MeFunctionsApiService) MeOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiMeOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
}


func (r ApiMeOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
MeOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *MeFunctionsApiService) MeOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiMeOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiMeOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *MeFunctionsApiService) MeOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiMeOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
}


func (r ApiMeOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
MeOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *MeFunctionsApiService) MeOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiMeOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiMeOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *MeFunctionsApiService) MeOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiMeOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	onenotePageId string
	onenotePageId1 string
}


func (r ApiMeOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewExecute(r)
}

/*
MeOnenotePagesOnenotePageParentSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewRequest
*/
func (a *MeFunctionsApiService) MeOnenotePagesOnenotePageParentSectionPagesOnenotePagePreview(ctx _context.Context, onenotePageId string, onenotePageId1 string) ApiMeOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewRequest {
	return ApiMeOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *MeFunctionsApiService) MeOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewExecute(r ApiMeOnenotePagesOnenotePageParentSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeOnenotePagesOnenotePageParentSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	onenotePageId string
}


func (r ApiMeOnenotePagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesOnenotePagePreviewExecute(r)
}

/*
MeOnenotePagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesOnenotePagePreviewRequest
*/
func (a *MeFunctionsApiService) MeOnenotePagesOnenotePagePreview(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesOnenotePagePreviewRequest {
	return ApiMeOnenotePagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *MeFunctionsApiService) MeOnenotePagesOnenotePagePreviewExecute(r ApiMeOnenotePagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeOnenotePagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiMeOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
MeOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *MeFunctionsApiService) MeOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiMeOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *MeFunctionsApiService) MeOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiMeOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiMeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *MeFunctionsApiService) MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiMeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *MeFunctionsApiService) MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiMeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	onenoteSectionId string
	onenotePageId string
}


func (r ApiMeOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewRequest) Execute() (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r)
}

/*
MeOnenoteSectionsOnenoteSectionPagesOnenotePagePreview Invoke function preview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewRequest
*/
func (a *MeFunctionsApiService) MeOnenoteSectionsOnenoteSectionPagesOnenotePagePreview(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewRequest {
	return ApiMeOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenotePagePreview
func (a *MeFunctionsApiService) MeOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewExecute(r ApiMeOnenoteSectionsOnenoteSectionPagesOnenotePagePreviewRequest) (AnyOfmicrosoftGraphOnenotePagePreview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenotePagePreview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeOnenoteSectionsOnenoteSectionPagesOnenotePagePreview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.preview()"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOutlookSupportedLanguagesRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeOutlookSupportedLanguagesRequest) Execute() ([]MicrosoftGraphLocaleInfo, *_nethttp.Response, error) {
	return r.ApiService.MeOutlookSupportedLanguagesExecute(r)
}

/*
MeOutlookSupportedLanguages Invoke function supportedLanguages

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOutlookSupportedLanguagesRequest
*/
func (a *MeFunctionsApiService) MeOutlookSupportedLanguages(ctx _context.Context) ApiMeOutlookSupportedLanguagesRequest {
	return ApiMeOutlookSupportedLanguagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphLocaleInfo
func (a *MeFunctionsApiService) MeOutlookSupportedLanguagesExecute(r ApiMeOutlookSupportedLanguagesRequest) ([]MicrosoftGraphLocaleInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphLocaleInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeOutlookSupportedLanguages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/outlook/microsoft.graph.supportedLanguages()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOutlookSupportedTimeZones51c6Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	timeZoneStandard AnyOfmicrosoftGraphTimeZoneStandard
}


func (r ApiMeOutlookSupportedTimeZones51c6Request) Execute() ([]MicrosoftGraphTimeZoneInformation, *_nethttp.Response, error) {
	return r.ApiService.MeOutlookSupportedTimeZones51c6Execute(r)
}

/*
MeOutlookSupportedTimeZones51c6 Invoke function supportedTimeZones

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param timeZoneStandard Usage: TimeZoneStandard={TimeZoneStandard}
 @return ApiMeOutlookSupportedTimeZones51c6Request
*/
func (a *MeFunctionsApiService) MeOutlookSupportedTimeZones51c6(ctx _context.Context, timeZoneStandard AnyOfmicrosoftGraphTimeZoneStandard) ApiMeOutlookSupportedTimeZones51c6Request {
	return ApiMeOutlookSupportedTimeZones51c6Request{
		ApiService: a,
		ctx: ctx,
		timeZoneStandard: timeZoneStandard,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphTimeZoneInformation
func (a *MeFunctionsApiService) MeOutlookSupportedTimeZones51c6Execute(r ApiMeOutlookSupportedTimeZones51c6Request) ([]MicrosoftGraphTimeZoneInformation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphTimeZoneInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeOutlookSupportedTimeZones51c6")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/outlook/microsoft.graph.supportedTimeZones(TimeZoneStandard={TimeZoneStandard})"
	localVarPath = strings.Replace(localVarPath, "{"+"TimeZoneStandard"+"}", _neturl.PathEscape(parameterToString(r.timeZoneStandard, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOutlookSupportedTimeZonesEe48Request struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeOutlookSupportedTimeZonesEe48Request) Execute() ([]MicrosoftGraphTimeZoneInformation, *_nethttp.Response, error) {
	return r.ApiService.MeOutlookSupportedTimeZonesEe48Execute(r)
}

/*
MeOutlookSupportedTimeZonesEe48 Invoke function supportedTimeZones

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOutlookSupportedTimeZonesEe48Request
*/
func (a *MeFunctionsApiService) MeOutlookSupportedTimeZonesEe48(ctx _context.Context) ApiMeOutlookSupportedTimeZonesEe48Request {
	return ApiMeOutlookSupportedTimeZonesEe48Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphTimeZoneInformation
func (a *MeFunctionsApiService) MeOutlookSupportedTimeZonesEe48Execute(r ApiMeOutlookSupportedTimeZonesEe48Request) ([]MicrosoftGraphTimeZoneInformation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphTimeZoneInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeOutlookSupportedTimeZonesEe48")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/outlook/microsoft.graph.supportedTimeZones()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeReminderViewRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	startDateTime string
	endDateTime string
}


func (r ApiMeReminderViewRequest) Execute() ([]MicrosoftGraphReminder, *_nethttp.Response, error) {
	return r.ApiService.MeReminderViewExecute(r)
}

/*
MeReminderView Invoke function reminderView

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param startDateTime Usage: StartDateTime={StartDateTime}
 @param endDateTime Usage: EndDateTime={EndDateTime}
 @return ApiMeReminderViewRequest
*/
func (a *MeFunctionsApiService) MeReminderView(ctx _context.Context, startDateTime string, endDateTime string) ApiMeReminderViewRequest {
	return ApiMeReminderViewRequest{
		ApiService: a,
		ctx: ctx,
		startDateTime: startDateTime,
		endDateTime: endDateTime,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphReminder
func (a *MeFunctionsApiService) MeReminderViewExecute(r ApiMeReminderViewRequest) ([]MicrosoftGraphReminder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphReminder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeReminderView")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/microsoft.graph.reminderView(StartDateTime='{StartDateTime}',EndDateTime='{EndDateTime}')"
	localVarPath = strings.Replace(localVarPath, "{"+"StartDateTime"+"}", _neturl.PathEscape(parameterToString(r.startDateTime, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"EndDateTime"+"}", _neturl.PathEscape(parameterToString(r.endDateTime, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeTodoListsDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
}


func (r ApiMeTodoListsDeltaRequest) Execute() ([]*AnyOfmicrosoftGraphTodoTaskList, *_nethttp.Response, error) {
	return r.ApiService.MeTodoListsDeltaExecute(r)
}

/*
MeTodoListsDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeTodoListsDeltaRequest
*/
func (a *MeFunctionsApiService) MeTodoListsDelta(ctx _context.Context) ApiMeTodoListsDeltaRequest {
	return ApiMeTodoListsDeltaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphTodoTaskList
func (a *MeFunctionsApiService) MeTodoListsDeltaExecute(r ApiMeTodoListsDeltaRequest) ([]*AnyOfmicrosoftGraphTodoTaskList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphTodoTaskList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeTodoListsDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/todo/lists/microsoft.graph.delta()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeTodoListsTodoTaskListTasksDeltaRequest struct {
	ctx _context.Context
	ApiService *MeFunctionsApiService
	todoTaskListId string
}


func (r ApiMeTodoListsTodoTaskListTasksDeltaRequest) Execute() ([]*AnyOfmicrosoftGraphTodoTask, *_nethttp.Response, error) {
	return r.ApiService.MeTodoListsTodoTaskListTasksDeltaExecute(r)
}

/*
MeTodoListsTodoTaskListTasksDelta Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param todoTaskListId key: id of todoTaskList
 @return ApiMeTodoListsTodoTaskListTasksDeltaRequest
*/
func (a *MeFunctionsApiService) MeTodoListsTodoTaskListTasksDelta(ctx _context.Context, todoTaskListId string) ApiMeTodoListsTodoTaskListTasksDeltaRequest {
	return ApiMeTodoListsTodoTaskListTasksDeltaRequest{
		ApiService: a,
		ctx: ctx,
		todoTaskListId: todoTaskListId,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphTodoTask
func (a *MeFunctionsApiService) MeTodoListsTodoTaskListTasksDeltaExecute(r ApiMeTodoListsTodoTaskListTasksDeltaRequest) ([]*AnyOfmicrosoftGraphTodoTask, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphTodoTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeFunctionsApiService.MeTodoListsTodoTaskListTasksDelta")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/todo/lists/{todoTaskList-id}/tasks/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"todoTaskList-id"+"}", _neturl.PathEscape(parameterToString(r.todoTaskListId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
