/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementRoleDefinitionApiService DeviceManagementRoleDefinitionApi service
type DeviceManagementRoleDefinitionApiService service

type ApiDeviceManagementCreateRoleDefinitionsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	microsoftGraphRoleDefinition *MicrosoftGraphRoleDefinition
}

// New navigation property
func (r ApiDeviceManagementCreateRoleDefinitionsRequest) MicrosoftGraphRoleDefinition(microsoftGraphRoleDefinition MicrosoftGraphRoleDefinition) ApiDeviceManagementCreateRoleDefinitionsRequest {
	r.microsoftGraphRoleDefinition = &microsoftGraphRoleDefinition
	return r
}

func (r ApiDeviceManagementCreateRoleDefinitionsRequest) Execute() (MicrosoftGraphRoleDefinition, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementCreateRoleDefinitionsExecute(r)
}

/*
DeviceManagementCreateRoleDefinitions Create new navigation property to roleDefinitions for deviceManagement

The Role Definitions.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementCreateRoleDefinitionsRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementCreateRoleDefinitions(ctx _context.Context) ApiDeviceManagementCreateRoleDefinitionsRequest {
	return ApiDeviceManagementCreateRoleDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphRoleDefinition
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementCreateRoleDefinitionsExecute(r ApiDeviceManagementCreateRoleDefinitionsRequest) (MicrosoftGraphRoleDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphRoleDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementCreateRoleDefinitions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphRoleDefinition == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphRoleDefinition is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphRoleDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeleteRoleDefinitionsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	roleDefinitionId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeleteRoleDefinitionsRequest) IfMatch(ifMatch string) ApiDeviceManagementDeleteRoleDefinitionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeleteRoleDefinitionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeleteRoleDefinitionsExecute(r)
}

/*
DeviceManagementDeleteRoleDefinitions Delete navigation property roleDefinitions for deviceManagement

The Role Definitions.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleDefinitionId key: id of roleDefinition
 @return ApiDeviceManagementDeleteRoleDefinitionsRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementDeleteRoleDefinitions(ctx _context.Context, roleDefinitionId string) ApiDeviceManagementDeleteRoleDefinitionsRequest {
	return ApiDeviceManagementDeleteRoleDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		roleDefinitionId: roleDefinitionId,
	}
}

// Execute executes the request
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementDeleteRoleDefinitionsExecute(r ApiDeviceManagementDeleteRoleDefinitionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementDeleteRoleDefinitions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions/{roleDefinition-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"roleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.roleDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementGetRoleDefinitionsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	roleDefinitionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementGetRoleDefinitionsRequest) Select_(select_ []string) ApiDeviceManagementGetRoleDefinitionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementGetRoleDefinitionsRequest) Expand(expand []string) ApiDeviceManagementGetRoleDefinitionsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementGetRoleDefinitionsRequest) Execute() (MicrosoftGraphRoleDefinition, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementGetRoleDefinitionsExecute(r)
}

/*
DeviceManagementGetRoleDefinitions Get roleDefinitions from deviceManagement

The Role Definitions.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleDefinitionId key: id of roleDefinition
 @return ApiDeviceManagementGetRoleDefinitionsRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementGetRoleDefinitions(ctx _context.Context, roleDefinitionId string) ApiDeviceManagementGetRoleDefinitionsRequest {
	return ApiDeviceManagementGetRoleDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		roleDefinitionId: roleDefinitionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphRoleDefinition
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementGetRoleDefinitionsExecute(r ApiDeviceManagementGetRoleDefinitionsRequest) (MicrosoftGraphRoleDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphRoleDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementGetRoleDefinitions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions/{roleDefinition-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"roleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.roleDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementListRoleDefinitionsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementListRoleDefinitionsRequest) Top(top int32) ApiDeviceManagementListRoleDefinitionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementListRoleDefinitionsRequest) Skip(skip int32) ApiDeviceManagementListRoleDefinitionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementListRoleDefinitionsRequest) Search(search string) ApiDeviceManagementListRoleDefinitionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementListRoleDefinitionsRequest) Filter(filter string) ApiDeviceManagementListRoleDefinitionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementListRoleDefinitionsRequest) Count(count bool) ApiDeviceManagementListRoleDefinitionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementListRoleDefinitionsRequest) Orderby(orderby []string) ApiDeviceManagementListRoleDefinitionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementListRoleDefinitionsRequest) Select_(select_ []string) ApiDeviceManagementListRoleDefinitionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementListRoleDefinitionsRequest) Expand(expand []string) ApiDeviceManagementListRoleDefinitionsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementListRoleDefinitionsRequest) Execute() (CollectionOfRoleDefinition, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementListRoleDefinitionsExecute(r)
}

/*
DeviceManagementListRoleDefinitions Get roleDefinitions from deviceManagement

The Role Definitions.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementListRoleDefinitionsRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementListRoleDefinitions(ctx _context.Context) ApiDeviceManagementListRoleDefinitionsRequest {
	return ApiDeviceManagementListRoleDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfRoleDefinition
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementListRoleDefinitionsExecute(r ApiDeviceManagementListRoleDefinitionsRequest) (CollectionOfRoleDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfRoleDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementListRoleDefinitions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementRoleDefinitionsCreateRoleAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	roleDefinitionId string
	microsoftGraphRoleAssignment *MicrosoftGraphRoleAssignment
}

// New navigation property
func (r ApiDeviceManagementRoleDefinitionsCreateRoleAssignmentsRequest) MicrosoftGraphRoleAssignment(microsoftGraphRoleAssignment MicrosoftGraphRoleAssignment) ApiDeviceManagementRoleDefinitionsCreateRoleAssignmentsRequest {
	r.microsoftGraphRoleAssignment = &microsoftGraphRoleAssignment
	return r
}

func (r ApiDeviceManagementRoleDefinitionsCreateRoleAssignmentsRequest) Execute() (MicrosoftGraphRoleAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementRoleDefinitionsCreateRoleAssignmentsExecute(r)
}

/*
DeviceManagementRoleDefinitionsCreateRoleAssignments Create new navigation property to roleAssignments for deviceManagement

List of Role assignments for this role definition.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleDefinitionId key: id of roleDefinition
 @return ApiDeviceManagementRoleDefinitionsCreateRoleAssignmentsRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsCreateRoleAssignments(ctx _context.Context, roleDefinitionId string) ApiDeviceManagementRoleDefinitionsCreateRoleAssignmentsRequest {
	return ApiDeviceManagementRoleDefinitionsCreateRoleAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		roleDefinitionId: roleDefinitionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphRoleAssignment
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsCreateRoleAssignmentsExecute(r ApiDeviceManagementRoleDefinitionsCreateRoleAssignmentsRequest) (MicrosoftGraphRoleAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphRoleAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementRoleDefinitionsCreateRoleAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions/{roleDefinition-id}/roleAssignments"
	localVarPath = strings.Replace(localVarPath, "{"+"roleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.roleDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphRoleAssignment == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphRoleAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphRoleAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementRoleDefinitionsDeleteRoleAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	roleDefinitionId string
	roleAssignmentId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementRoleDefinitionsDeleteRoleAssignmentsRequest) IfMatch(ifMatch string) ApiDeviceManagementRoleDefinitionsDeleteRoleAssignmentsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementRoleDefinitionsDeleteRoleAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementRoleDefinitionsDeleteRoleAssignmentsExecute(r)
}

/*
DeviceManagementRoleDefinitionsDeleteRoleAssignments Delete navigation property roleAssignments for deviceManagement

List of Role assignments for this role definition.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleDefinitionId key: id of roleDefinition
 @param roleAssignmentId key: id of roleAssignment
 @return ApiDeviceManagementRoleDefinitionsDeleteRoleAssignmentsRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsDeleteRoleAssignments(ctx _context.Context, roleDefinitionId string, roleAssignmentId string) ApiDeviceManagementRoleDefinitionsDeleteRoleAssignmentsRequest {
	return ApiDeviceManagementRoleDefinitionsDeleteRoleAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		roleDefinitionId: roleDefinitionId,
		roleAssignmentId: roleAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsDeleteRoleAssignmentsExecute(r ApiDeviceManagementRoleDefinitionsDeleteRoleAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementRoleDefinitionsDeleteRoleAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions/{roleDefinition-id}/roleAssignments/{roleAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"roleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.roleDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roleAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.roleAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementRoleDefinitionsGetRoleAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	roleDefinitionId string
	roleAssignmentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementRoleDefinitionsGetRoleAssignmentsRequest) Select_(select_ []string) ApiDeviceManagementRoleDefinitionsGetRoleAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementRoleDefinitionsGetRoleAssignmentsRequest) Expand(expand []string) ApiDeviceManagementRoleDefinitionsGetRoleAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementRoleDefinitionsGetRoleAssignmentsRequest) Execute() (MicrosoftGraphRoleAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementRoleDefinitionsGetRoleAssignmentsExecute(r)
}

/*
DeviceManagementRoleDefinitionsGetRoleAssignments Get roleAssignments from deviceManagement

List of Role assignments for this role definition.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleDefinitionId key: id of roleDefinition
 @param roleAssignmentId key: id of roleAssignment
 @return ApiDeviceManagementRoleDefinitionsGetRoleAssignmentsRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsGetRoleAssignments(ctx _context.Context, roleDefinitionId string, roleAssignmentId string) ApiDeviceManagementRoleDefinitionsGetRoleAssignmentsRequest {
	return ApiDeviceManagementRoleDefinitionsGetRoleAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		roleDefinitionId: roleDefinitionId,
		roleAssignmentId: roleAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphRoleAssignment
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsGetRoleAssignmentsExecute(r ApiDeviceManagementRoleDefinitionsGetRoleAssignmentsRequest) (MicrosoftGraphRoleAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphRoleAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementRoleDefinitionsGetRoleAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions/{roleDefinition-id}/roleAssignments/{roleAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"roleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.roleDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roleAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.roleAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	roleDefinitionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest) Top(top int32) ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest) Skip(skip int32) ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest) Search(search string) ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest) Filter(filter string) ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest) Count(count bool) ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest) Orderby(orderby []string) ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest) Select_(select_ []string) ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest) Expand(expand []string) ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest) Execute() (CollectionOfRoleAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementRoleDefinitionsListRoleAssignmentsExecute(r)
}

/*
DeviceManagementRoleDefinitionsListRoleAssignments Get roleAssignments from deviceManagement

List of Role assignments for this role definition.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleDefinitionId key: id of roleDefinition
 @return ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsListRoleAssignments(ctx _context.Context, roleDefinitionId string) ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest {
	return ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		roleDefinitionId: roleDefinitionId,
	}
}

// Execute executes the request
//  @return CollectionOfRoleAssignment
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsListRoleAssignmentsExecute(r ApiDeviceManagementRoleDefinitionsListRoleAssignmentsRequest) (CollectionOfRoleAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfRoleAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementRoleDefinitionsListRoleAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions/{roleDefinition-id}/roleAssignments"
	localVarPath = strings.Replace(localVarPath, "{"+"roleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.roleDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementRoleDefinitionsRoleAssignmentsDeleteRefRoleDefinitionRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	roleDefinitionId string
	roleAssignmentId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementRoleDefinitionsRoleAssignmentsDeleteRefRoleDefinitionRequest) IfMatch(ifMatch string) ApiDeviceManagementRoleDefinitionsRoleAssignmentsDeleteRefRoleDefinitionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementRoleDefinitionsRoleAssignmentsDeleteRefRoleDefinitionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementRoleDefinitionsRoleAssignmentsDeleteRefRoleDefinitionExecute(r)
}

/*
DeviceManagementRoleDefinitionsRoleAssignmentsDeleteRefRoleDefinition Delete ref of navigation property roleDefinition for deviceManagement

Role definition this assignment is part of.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleDefinitionId key: id of roleDefinition
 @param roleAssignmentId key: id of roleAssignment
 @return ApiDeviceManagementRoleDefinitionsRoleAssignmentsDeleteRefRoleDefinitionRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsRoleAssignmentsDeleteRefRoleDefinition(ctx _context.Context, roleDefinitionId string, roleAssignmentId string) ApiDeviceManagementRoleDefinitionsRoleAssignmentsDeleteRefRoleDefinitionRequest {
	return ApiDeviceManagementRoleDefinitionsRoleAssignmentsDeleteRefRoleDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		roleDefinitionId: roleDefinitionId,
		roleAssignmentId: roleAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsRoleAssignmentsDeleteRefRoleDefinitionExecute(r ApiDeviceManagementRoleDefinitionsRoleAssignmentsDeleteRefRoleDefinitionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementRoleDefinitionsRoleAssignmentsDeleteRefRoleDefinition")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions/{roleDefinition-id}/roleAssignments/{roleAssignment-id}/roleDefinition/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"roleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.roleDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roleAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.roleAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRefRoleDefinitionRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	roleDefinitionId string
	roleAssignmentId string
}


func (r ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRefRoleDefinitionRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementRoleDefinitionsRoleAssignmentsGetRefRoleDefinitionExecute(r)
}

/*
DeviceManagementRoleDefinitionsRoleAssignmentsGetRefRoleDefinition Get ref of roleDefinition from deviceManagement

Role definition this assignment is part of.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleDefinitionId key: id of roleDefinition
 @param roleAssignmentId key: id of roleAssignment
 @return ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRefRoleDefinitionRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsRoleAssignmentsGetRefRoleDefinition(ctx _context.Context, roleDefinitionId string, roleAssignmentId string) ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRefRoleDefinitionRequest {
	return ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRefRoleDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		roleDefinitionId: roleDefinitionId,
		roleAssignmentId: roleAssignmentId,
	}
}

// Execute executes the request
//  @return string
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsRoleAssignmentsGetRefRoleDefinitionExecute(r ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRefRoleDefinitionRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementRoleDefinitionsRoleAssignmentsGetRefRoleDefinition")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions/{roleDefinition-id}/roleAssignments/{roleAssignment-id}/roleDefinition/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"roleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.roleDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roleAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.roleAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinitionRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	roleDefinitionId string
	roleAssignmentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinitionRequest) Select_(select_ []string) ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinitionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinitionRequest) Expand(expand []string) ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinitionRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinitionRequest) Execute() (MicrosoftGraphRoleDefinition, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinitionExecute(r)
}

/*
DeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinition Get roleDefinition from deviceManagement

Role definition this assignment is part of.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleDefinitionId key: id of roleDefinition
 @param roleAssignmentId key: id of roleAssignment
 @return ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinitionRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinition(ctx _context.Context, roleDefinitionId string, roleAssignmentId string) ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinitionRequest {
	return ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		roleDefinitionId: roleDefinitionId,
		roleAssignmentId: roleAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphRoleDefinition
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinitionExecute(r ApiDeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinitionRequest) (MicrosoftGraphRoleDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphRoleDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementRoleDefinitionsRoleAssignmentsGetRoleDefinition")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions/{roleDefinition-id}/roleAssignments/{roleAssignment-id}/roleDefinition"
	localVarPath = strings.Replace(localVarPath, "{"+"roleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.roleDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roleAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.roleAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementRoleDefinitionsRoleAssignmentsUpdateRefRoleDefinitionRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	roleDefinitionId string
	roleAssignmentId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiDeviceManagementRoleDefinitionsRoleAssignmentsUpdateRefRoleDefinitionRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiDeviceManagementRoleDefinitionsRoleAssignmentsUpdateRefRoleDefinitionRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiDeviceManagementRoleDefinitionsRoleAssignmentsUpdateRefRoleDefinitionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementRoleDefinitionsRoleAssignmentsUpdateRefRoleDefinitionExecute(r)
}

/*
DeviceManagementRoleDefinitionsRoleAssignmentsUpdateRefRoleDefinition Update the ref of navigation property roleDefinition in deviceManagement

Role definition this assignment is part of.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleDefinitionId key: id of roleDefinition
 @param roleAssignmentId key: id of roleAssignment
 @return ApiDeviceManagementRoleDefinitionsRoleAssignmentsUpdateRefRoleDefinitionRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsRoleAssignmentsUpdateRefRoleDefinition(ctx _context.Context, roleDefinitionId string, roleAssignmentId string) ApiDeviceManagementRoleDefinitionsRoleAssignmentsUpdateRefRoleDefinitionRequest {
	return ApiDeviceManagementRoleDefinitionsRoleAssignmentsUpdateRefRoleDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		roleDefinitionId: roleDefinitionId,
		roleAssignmentId: roleAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsRoleAssignmentsUpdateRefRoleDefinitionExecute(r ApiDeviceManagementRoleDefinitionsRoleAssignmentsUpdateRefRoleDefinitionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementRoleDefinitionsRoleAssignmentsUpdateRefRoleDefinition")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions/{roleDefinition-id}/roleAssignments/{roleAssignment-id}/roleDefinition/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"roleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.roleDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roleAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.roleAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementRoleDefinitionsUpdateRoleAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	roleDefinitionId string
	roleAssignmentId string
	microsoftGraphRoleAssignment *MicrosoftGraphRoleAssignment
}

// New navigation property values
func (r ApiDeviceManagementRoleDefinitionsUpdateRoleAssignmentsRequest) MicrosoftGraphRoleAssignment(microsoftGraphRoleAssignment MicrosoftGraphRoleAssignment) ApiDeviceManagementRoleDefinitionsUpdateRoleAssignmentsRequest {
	r.microsoftGraphRoleAssignment = &microsoftGraphRoleAssignment
	return r
}

func (r ApiDeviceManagementRoleDefinitionsUpdateRoleAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementRoleDefinitionsUpdateRoleAssignmentsExecute(r)
}

/*
DeviceManagementRoleDefinitionsUpdateRoleAssignments Update the navigation property roleAssignments in deviceManagement

List of Role assignments for this role definition.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleDefinitionId key: id of roleDefinition
 @param roleAssignmentId key: id of roleAssignment
 @return ApiDeviceManagementRoleDefinitionsUpdateRoleAssignmentsRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsUpdateRoleAssignments(ctx _context.Context, roleDefinitionId string, roleAssignmentId string) ApiDeviceManagementRoleDefinitionsUpdateRoleAssignmentsRequest {
	return ApiDeviceManagementRoleDefinitionsUpdateRoleAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		roleDefinitionId: roleDefinitionId,
		roleAssignmentId: roleAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementRoleDefinitionsUpdateRoleAssignmentsExecute(r ApiDeviceManagementRoleDefinitionsUpdateRoleAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementRoleDefinitionsUpdateRoleAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions/{roleDefinition-id}/roleAssignments/{roleAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"roleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.roleDefinitionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roleAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.roleAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphRoleAssignment == nil {
		return nil, reportError("microsoftGraphRoleAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphRoleAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementUpdateRoleDefinitionsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementRoleDefinitionApiService
	roleDefinitionId string
	microsoftGraphRoleDefinition *MicrosoftGraphRoleDefinition
}

// New navigation property values
func (r ApiDeviceManagementUpdateRoleDefinitionsRequest) MicrosoftGraphRoleDefinition(microsoftGraphRoleDefinition MicrosoftGraphRoleDefinition) ApiDeviceManagementUpdateRoleDefinitionsRequest {
	r.microsoftGraphRoleDefinition = &microsoftGraphRoleDefinition
	return r
}

func (r ApiDeviceManagementUpdateRoleDefinitionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementUpdateRoleDefinitionsExecute(r)
}

/*
DeviceManagementUpdateRoleDefinitions Update the navigation property roleDefinitions in deviceManagement

The Role Definitions.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roleDefinitionId key: id of roleDefinition
 @return ApiDeviceManagementUpdateRoleDefinitionsRequest
*/
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementUpdateRoleDefinitions(ctx _context.Context, roleDefinitionId string) ApiDeviceManagementUpdateRoleDefinitionsRequest {
	return ApiDeviceManagementUpdateRoleDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		roleDefinitionId: roleDefinitionId,
	}
}

// Execute executes the request
func (a *DeviceManagementRoleDefinitionApiService) DeviceManagementUpdateRoleDefinitionsExecute(r ApiDeviceManagementUpdateRoleDefinitionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementRoleDefinitionApiService.DeviceManagementUpdateRoleDefinitions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/roleDefinitions/{roleDefinition-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"roleDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.roleDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphRoleDefinition == nil {
		return nil, reportError("microsoftGraphRoleDefinition is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphRoleDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
