/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// MeUserActivityApiService MeUserActivityApi service
type MeUserActivityApiService service

type ApiMeActivitiesCreateHistoryItemsRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	userActivityId string
	microsoftGraphActivityHistoryItem *MicrosoftGraphActivityHistoryItem
}

// New navigation property
func (r ApiMeActivitiesCreateHistoryItemsRequest) MicrosoftGraphActivityHistoryItem(microsoftGraphActivityHistoryItem MicrosoftGraphActivityHistoryItem) ApiMeActivitiesCreateHistoryItemsRequest {
	r.microsoftGraphActivityHistoryItem = &microsoftGraphActivityHistoryItem
	return r
}

func (r ApiMeActivitiesCreateHistoryItemsRequest) Execute() (MicrosoftGraphActivityHistoryItem, *_nethttp.Response, error) {
	return r.ApiService.MeActivitiesCreateHistoryItemsExecute(r)
}

/*
MeActivitiesCreateHistoryItems Create new navigation property to historyItems for me

Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userActivityId key: id of userActivity
 @return ApiMeActivitiesCreateHistoryItemsRequest
*/
func (a *MeUserActivityApiService) MeActivitiesCreateHistoryItems(ctx _context.Context, userActivityId string) ApiMeActivitiesCreateHistoryItemsRequest {
	return ApiMeActivitiesCreateHistoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		userActivityId: userActivityId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphActivityHistoryItem
func (a *MeUserActivityApiService) MeActivitiesCreateHistoryItemsExecute(r ApiMeActivitiesCreateHistoryItemsRequest) (MicrosoftGraphActivityHistoryItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphActivityHistoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeActivitiesCreateHistoryItems")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities/{userActivity-id}/historyItems"
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphActivityHistoryItem == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphActivityHistoryItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphActivityHistoryItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeActivitiesDeleteHistoryItemsRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	userActivityId string
	activityHistoryItemId string
	ifMatch *string
}

// ETag
func (r ApiMeActivitiesDeleteHistoryItemsRequest) IfMatch(ifMatch string) ApiMeActivitiesDeleteHistoryItemsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeActivitiesDeleteHistoryItemsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeActivitiesDeleteHistoryItemsExecute(r)
}

/*
MeActivitiesDeleteHistoryItems Delete navigation property historyItems for me

Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiMeActivitiesDeleteHistoryItemsRequest
*/
func (a *MeUserActivityApiService) MeActivitiesDeleteHistoryItems(ctx _context.Context, userActivityId string, activityHistoryItemId string) ApiMeActivitiesDeleteHistoryItemsRequest {
	return ApiMeActivitiesDeleteHistoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
func (a *MeUserActivityApiService) MeActivitiesDeleteHistoryItemsExecute(r ApiMeActivitiesDeleteHistoryItemsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeActivitiesDeleteHistoryItems")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeActivitiesGetHistoryItemsRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	userActivityId string
	activityHistoryItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeActivitiesGetHistoryItemsRequest) Select_(select_ []string) ApiMeActivitiesGetHistoryItemsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeActivitiesGetHistoryItemsRequest) Expand(expand []string) ApiMeActivitiesGetHistoryItemsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeActivitiesGetHistoryItemsRequest) Execute() (MicrosoftGraphActivityHistoryItem, *_nethttp.Response, error) {
	return r.ApiService.MeActivitiesGetHistoryItemsExecute(r)
}

/*
MeActivitiesGetHistoryItems Get historyItems from me

Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiMeActivitiesGetHistoryItemsRequest
*/
func (a *MeUserActivityApiService) MeActivitiesGetHistoryItems(ctx _context.Context, userActivityId string, activityHistoryItemId string) ApiMeActivitiesGetHistoryItemsRequest {
	return ApiMeActivitiesGetHistoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphActivityHistoryItem
func (a *MeUserActivityApiService) MeActivitiesGetHistoryItemsExecute(r ApiMeActivitiesGetHistoryItemsRequest) (MicrosoftGraphActivityHistoryItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphActivityHistoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeActivitiesGetHistoryItems")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeActivitiesHistoryItemsDeleteRefActivityRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	userActivityId string
	activityHistoryItemId string
	ifMatch *string
}

// ETag
func (r ApiMeActivitiesHistoryItemsDeleteRefActivityRequest) IfMatch(ifMatch string) ApiMeActivitiesHistoryItemsDeleteRefActivityRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeActivitiesHistoryItemsDeleteRefActivityRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeActivitiesHistoryItemsDeleteRefActivityExecute(r)
}

/*
MeActivitiesHistoryItemsDeleteRefActivity Delete ref of navigation property activity for me

Optional. NavigationProperty/Containment; navigation property to the associated activity.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiMeActivitiesHistoryItemsDeleteRefActivityRequest
*/
func (a *MeUserActivityApiService) MeActivitiesHistoryItemsDeleteRefActivity(ctx _context.Context, userActivityId string, activityHistoryItemId string) ApiMeActivitiesHistoryItemsDeleteRefActivityRequest {
	return ApiMeActivitiesHistoryItemsDeleteRefActivityRequest{
		ApiService: a,
		ctx: ctx,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
func (a *MeUserActivityApiService) MeActivitiesHistoryItemsDeleteRefActivityExecute(r ApiMeActivitiesHistoryItemsDeleteRefActivityRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeActivitiesHistoryItemsDeleteRefActivity")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}/activity/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeActivitiesHistoryItemsGetActivityRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	userActivityId string
	activityHistoryItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeActivitiesHistoryItemsGetActivityRequest) Select_(select_ []string) ApiMeActivitiesHistoryItemsGetActivityRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeActivitiesHistoryItemsGetActivityRequest) Expand(expand []string) ApiMeActivitiesHistoryItemsGetActivityRequest {
	r.expand = &expand
	return r
}

func (r ApiMeActivitiesHistoryItemsGetActivityRequest) Execute() (MicrosoftGraphUserActivity, *_nethttp.Response, error) {
	return r.ApiService.MeActivitiesHistoryItemsGetActivityExecute(r)
}

/*
MeActivitiesHistoryItemsGetActivity Get activity from me

Optional. NavigationProperty/Containment; navigation property to the associated activity.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiMeActivitiesHistoryItemsGetActivityRequest
*/
func (a *MeUserActivityApiService) MeActivitiesHistoryItemsGetActivity(ctx _context.Context, userActivityId string, activityHistoryItemId string) ApiMeActivitiesHistoryItemsGetActivityRequest {
	return ApiMeActivitiesHistoryItemsGetActivityRequest{
		ApiService: a,
		ctx: ctx,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphUserActivity
func (a *MeUserActivityApiService) MeActivitiesHistoryItemsGetActivityExecute(r ApiMeActivitiesHistoryItemsGetActivityRequest) (MicrosoftGraphUserActivity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphUserActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeActivitiesHistoryItemsGetActivity")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}/activity"
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeActivitiesHistoryItemsGetRefActivityRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	userActivityId string
	activityHistoryItemId string
}


func (r ApiMeActivitiesHistoryItemsGetRefActivityRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.MeActivitiesHistoryItemsGetRefActivityExecute(r)
}

/*
MeActivitiesHistoryItemsGetRefActivity Get ref of activity from me

Optional. NavigationProperty/Containment; navigation property to the associated activity.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiMeActivitiesHistoryItemsGetRefActivityRequest
*/
func (a *MeUserActivityApiService) MeActivitiesHistoryItemsGetRefActivity(ctx _context.Context, userActivityId string, activityHistoryItemId string) ApiMeActivitiesHistoryItemsGetRefActivityRequest {
	return ApiMeActivitiesHistoryItemsGetRefActivityRequest{
		ApiService: a,
		ctx: ctx,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
//  @return string
func (a *MeUserActivityApiService) MeActivitiesHistoryItemsGetRefActivityExecute(r ApiMeActivitiesHistoryItemsGetRefActivityRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeActivitiesHistoryItemsGetRefActivity")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}/activity/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeActivitiesHistoryItemsUpdateRefActivityRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	userActivityId string
	activityHistoryItemId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiMeActivitiesHistoryItemsUpdateRefActivityRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiMeActivitiesHistoryItemsUpdateRefActivityRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiMeActivitiesHistoryItemsUpdateRefActivityRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeActivitiesHistoryItemsUpdateRefActivityExecute(r)
}

/*
MeActivitiesHistoryItemsUpdateRefActivity Update the ref of navigation property activity in me

Optional. NavigationProperty/Containment; navigation property to the associated activity.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiMeActivitiesHistoryItemsUpdateRefActivityRequest
*/
func (a *MeUserActivityApiService) MeActivitiesHistoryItemsUpdateRefActivity(ctx _context.Context, userActivityId string, activityHistoryItemId string) ApiMeActivitiesHistoryItemsUpdateRefActivityRequest {
	return ApiMeActivitiesHistoryItemsUpdateRefActivityRequest{
		ApiService: a,
		ctx: ctx,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
func (a *MeUserActivityApiService) MeActivitiesHistoryItemsUpdateRefActivityExecute(r ApiMeActivitiesHistoryItemsUpdateRefActivityRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeActivitiesHistoryItemsUpdateRefActivity")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}/activity/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeActivitiesListHistoryItemsRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	userActivityId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeActivitiesListHistoryItemsRequest) Top(top int32) ApiMeActivitiesListHistoryItemsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeActivitiesListHistoryItemsRequest) Skip(skip int32) ApiMeActivitiesListHistoryItemsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeActivitiesListHistoryItemsRequest) Search(search string) ApiMeActivitiesListHistoryItemsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeActivitiesListHistoryItemsRequest) Filter(filter string) ApiMeActivitiesListHistoryItemsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeActivitiesListHistoryItemsRequest) Count(count bool) ApiMeActivitiesListHistoryItemsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeActivitiesListHistoryItemsRequest) Orderby(orderby []string) ApiMeActivitiesListHistoryItemsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeActivitiesListHistoryItemsRequest) Select_(select_ []string) ApiMeActivitiesListHistoryItemsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeActivitiesListHistoryItemsRequest) Expand(expand []string) ApiMeActivitiesListHistoryItemsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeActivitiesListHistoryItemsRequest) Execute() (CollectionOfActivityHistoryItem, *_nethttp.Response, error) {
	return r.ApiService.MeActivitiesListHistoryItemsExecute(r)
}

/*
MeActivitiesListHistoryItems Get historyItems from me

Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userActivityId key: id of userActivity
 @return ApiMeActivitiesListHistoryItemsRequest
*/
func (a *MeUserActivityApiService) MeActivitiesListHistoryItems(ctx _context.Context, userActivityId string) ApiMeActivitiesListHistoryItemsRequest {
	return ApiMeActivitiesListHistoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		userActivityId: userActivityId,
	}
}

// Execute executes the request
//  @return CollectionOfActivityHistoryItem
func (a *MeUserActivityApiService) MeActivitiesListHistoryItemsExecute(r ApiMeActivitiesListHistoryItemsRequest) (CollectionOfActivityHistoryItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfActivityHistoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeActivitiesListHistoryItems")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities/{userActivity-id}/historyItems"
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeActivitiesUpdateHistoryItemsRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	userActivityId string
	activityHistoryItemId string
	microsoftGraphActivityHistoryItem *MicrosoftGraphActivityHistoryItem
}

// New navigation property values
func (r ApiMeActivitiesUpdateHistoryItemsRequest) MicrosoftGraphActivityHistoryItem(microsoftGraphActivityHistoryItem MicrosoftGraphActivityHistoryItem) ApiMeActivitiesUpdateHistoryItemsRequest {
	r.microsoftGraphActivityHistoryItem = &microsoftGraphActivityHistoryItem
	return r
}

func (r ApiMeActivitiesUpdateHistoryItemsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeActivitiesUpdateHistoryItemsExecute(r)
}

/*
MeActivitiesUpdateHistoryItems Update the navigation property historyItems in me

Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiMeActivitiesUpdateHistoryItemsRequest
*/
func (a *MeUserActivityApiService) MeActivitiesUpdateHistoryItems(ctx _context.Context, userActivityId string, activityHistoryItemId string) ApiMeActivitiesUpdateHistoryItemsRequest {
	return ApiMeActivitiesUpdateHistoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
func (a *MeUserActivityApiService) MeActivitiesUpdateHistoryItemsExecute(r ApiMeActivitiesUpdateHistoryItemsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeActivitiesUpdateHistoryItems")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphActivityHistoryItem == nil {
		return nil, reportError("microsoftGraphActivityHistoryItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphActivityHistoryItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeCreateActivitiesRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	microsoftGraphUserActivity *MicrosoftGraphUserActivity
}

// New navigation property
func (r ApiMeCreateActivitiesRequest) MicrosoftGraphUserActivity(microsoftGraphUserActivity MicrosoftGraphUserActivity) ApiMeCreateActivitiesRequest {
	r.microsoftGraphUserActivity = &microsoftGraphUserActivity
	return r
}

func (r ApiMeCreateActivitiesRequest) Execute() (MicrosoftGraphUserActivity, *_nethttp.Response, error) {
	return r.ApiService.MeCreateActivitiesExecute(r)
}

/*
MeCreateActivities Create new navigation property to activities for me

The user's activities across devices. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeCreateActivitiesRequest
*/
func (a *MeUserActivityApiService) MeCreateActivities(ctx _context.Context) ApiMeCreateActivitiesRequest {
	return ApiMeCreateActivitiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphUserActivity
func (a *MeUserActivityApiService) MeCreateActivitiesExecute(r ApiMeCreateActivitiesRequest) (MicrosoftGraphUserActivity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphUserActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeCreateActivities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphUserActivity == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphUserActivity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphUserActivity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeDeleteActivitiesRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	userActivityId string
	ifMatch *string
}

// ETag
func (r ApiMeDeleteActivitiesRequest) IfMatch(ifMatch string) ApiMeDeleteActivitiesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeDeleteActivitiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeDeleteActivitiesExecute(r)
}

/*
MeDeleteActivities Delete navigation property activities for me

The user's activities across devices. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userActivityId key: id of userActivity
 @return ApiMeDeleteActivitiesRequest
*/
func (a *MeUserActivityApiService) MeDeleteActivities(ctx _context.Context, userActivityId string) ApiMeDeleteActivitiesRequest {
	return ApiMeDeleteActivitiesRequest{
		ApiService: a,
		ctx: ctx,
		userActivityId: userActivityId,
	}
}

// Execute executes the request
func (a *MeUserActivityApiService) MeDeleteActivitiesExecute(r ApiMeDeleteActivitiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeDeleteActivities")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities/{userActivity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeGetActivitiesRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	userActivityId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeGetActivitiesRequest) Select_(select_ []string) ApiMeGetActivitiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeGetActivitiesRequest) Expand(expand []string) ApiMeGetActivitiesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeGetActivitiesRequest) Execute() (MicrosoftGraphUserActivity, *_nethttp.Response, error) {
	return r.ApiService.MeGetActivitiesExecute(r)
}

/*
MeGetActivities Get activities from me

The user's activities across devices. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userActivityId key: id of userActivity
 @return ApiMeGetActivitiesRequest
*/
func (a *MeUserActivityApiService) MeGetActivities(ctx _context.Context, userActivityId string) ApiMeGetActivitiesRequest {
	return ApiMeGetActivitiesRequest{
		ApiService: a,
		ctx: ctx,
		userActivityId: userActivityId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphUserActivity
func (a *MeUserActivityApiService) MeGetActivitiesExecute(r ApiMeGetActivitiesRequest) (MicrosoftGraphUserActivity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphUserActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeGetActivities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities/{userActivity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeListActivitiesRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeListActivitiesRequest) Top(top int32) ApiMeListActivitiesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeListActivitiesRequest) Skip(skip int32) ApiMeListActivitiesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeListActivitiesRequest) Search(search string) ApiMeListActivitiesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeListActivitiesRequest) Filter(filter string) ApiMeListActivitiesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeListActivitiesRequest) Count(count bool) ApiMeListActivitiesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeListActivitiesRequest) Orderby(orderby []string) ApiMeListActivitiesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeListActivitiesRequest) Select_(select_ []string) ApiMeListActivitiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeListActivitiesRequest) Expand(expand []string) ApiMeListActivitiesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeListActivitiesRequest) Execute() (CollectionOfUserActivity, *_nethttp.Response, error) {
	return r.ApiService.MeListActivitiesExecute(r)
}

/*
MeListActivities Get activities from me

The user's activities across devices. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeListActivitiesRequest
*/
func (a *MeUserActivityApiService) MeListActivities(ctx _context.Context) ApiMeListActivitiesRequest {
	return ApiMeListActivitiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfUserActivity
func (a *MeUserActivityApiService) MeListActivitiesExecute(r ApiMeListActivitiesRequest) (CollectionOfUserActivity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfUserActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeListActivities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeUpdateActivitiesRequest struct {
	ctx _context.Context
	ApiService *MeUserActivityApiService
	userActivityId string
	microsoftGraphUserActivity *MicrosoftGraphUserActivity
}

// New navigation property values
func (r ApiMeUpdateActivitiesRequest) MicrosoftGraphUserActivity(microsoftGraphUserActivity MicrosoftGraphUserActivity) ApiMeUpdateActivitiesRequest {
	r.microsoftGraphUserActivity = &microsoftGraphUserActivity
	return r
}

func (r ApiMeUpdateActivitiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeUpdateActivitiesExecute(r)
}

/*
MeUpdateActivities Update the navigation property activities in me

The user's activities across devices. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userActivityId key: id of userActivity
 @return ApiMeUpdateActivitiesRequest
*/
func (a *MeUserActivityApiService) MeUpdateActivities(ctx _context.Context, userActivityId string) ApiMeUpdateActivitiesRequest {
	return ApiMeUpdateActivitiesRequest{
		ApiService: a,
		ctx: ctx,
		userActivityId: userActivityId,
	}
}

// Execute executes the request
func (a *MeUserActivityApiService) MeUpdateActivitiesExecute(r ApiMeUpdateActivitiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeUserActivityApiService.MeUpdateActivities")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/activities/{userActivity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphUserActivity == nil {
		return nil, reportError("microsoftGraphUserActivity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphUserActivity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
