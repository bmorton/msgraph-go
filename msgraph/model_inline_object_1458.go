/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject1458 struct for InlineObject1458
type InlineObject1458 struct {
	Array AnyOfobject `json:"array,omitempty"`
	K AnyOfobject `json:"k,omitempty"`
}

// NewInlineObject1458 instantiates a new InlineObject1458 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1458() *InlineObject1458 {
	this := InlineObject1458{}
	return &this
}

// NewInlineObject1458WithDefaults instantiates a new InlineObject1458 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1458WithDefaults() *InlineObject1458 {
	this := InlineObject1458{}
	return &this
}

// GetArray returns the Array field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1458) GetArray() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Array
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1458) GetArrayOk() (*AnyOfobject, bool) {
	if o == nil || o.Array == nil {
		return nil, false
	}
	return &o.Array, true
}

// HasArray returns a boolean if a field has been set.
func (o *InlineObject1458) HasArray() bool {
	if o != nil && o.Array != nil {
		return true
	}

	return false
}

// SetArray gets a reference to the given AnyOfobject and assigns it to the Array field.
func (o *InlineObject1458) SetArray(v AnyOfobject) {
	o.Array = v
}

// GetK returns the K field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1458) GetK() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.K
}

// GetKOk returns a tuple with the K field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1458) GetKOk() (*AnyOfobject, bool) {
	if o == nil || o.K == nil {
		return nil, false
	}
	return &o.K, true
}

// HasK returns a boolean if a field has been set.
func (o *InlineObject1458) HasK() bool {
	if o != nil && o.K != nil {
		return true
	}

	return false
}

// SetK gets a reference to the given AnyOfobject and assigns it to the K field.
func (o *InlineObject1458) SetK(v AnyOfobject) {
	o.K = v
}

func (o InlineObject1458) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Array != nil {
		toSerialize["array"] = o.Array
	}
	if o.K != nil {
		toSerialize["k"] = o.K
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1458 struct {
	value *InlineObject1458
	isSet bool
}

func (v NullableInlineObject1458) Get() *InlineObject1458 {
	return v.value
}

func (v *NullableInlineObject1458) Set(val *InlineObject1458) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1458) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1458) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1458(val *InlineObject1458) *NullableInlineObject1458 {
	return &NullableInlineObject1458{value: val, isSet: true}
}

func (v NullableInlineObject1458) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1458) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


