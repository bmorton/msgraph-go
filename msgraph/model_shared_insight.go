/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SharedInsight struct for SharedInsight
type SharedInsight struct {
	// Details about the shared item. Read only.
	LastShared AnyOfmicrosoftGraphSharingDetail `json:"lastShared,omitempty"`
	// Reference properties of the shared document, such as the url and type of the document. Read-only
	ResourceReference AnyOfmicrosoftGraphResourceReference `json:"resourceReference,omitempty"`
	// Properties that you can use to visualize the document in your experience. Read-only
	ResourceVisualization AnyOfmicrosoftGraphResourceVisualization `json:"resourceVisualization,omitempty"`
	SharingHistory *[]*AnyOfmicrosoftGraphSharingDetail `json:"sharingHistory,omitempty"`
	LastSharedMethod AnyOfmicrosoftGraphEntity `json:"lastSharedMethod,omitempty"`
	// Used for navigating to the item that was shared. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem.
	Resource AnyOfmicrosoftGraphEntity `json:"resource,omitempty"`
}

// NewSharedInsight instantiates a new SharedInsight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedInsight() *SharedInsight {
	this := SharedInsight{}
	return &this
}

// NewSharedInsightWithDefaults instantiates a new SharedInsight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedInsightWithDefaults() *SharedInsight {
	this := SharedInsight{}
	return &this
}

// GetLastShared returns the LastShared field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharedInsight) GetLastShared() AnyOfmicrosoftGraphSharingDetail {
	if o == nil  {
		var ret AnyOfmicrosoftGraphSharingDetail
		return ret
	}
	return o.LastShared
}

// GetLastSharedOk returns a tuple with the LastShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharedInsight) GetLastSharedOk() (*AnyOfmicrosoftGraphSharingDetail, bool) {
	if o == nil || o.LastShared == nil {
		return nil, false
	}
	return &o.LastShared, true
}

// HasLastShared returns a boolean if a field has been set.
func (o *SharedInsight) HasLastShared() bool {
	if o != nil && o.LastShared != nil {
		return true
	}

	return false
}

// SetLastShared gets a reference to the given AnyOfmicrosoftGraphSharingDetail and assigns it to the LastShared field.
func (o *SharedInsight) SetLastShared(v AnyOfmicrosoftGraphSharingDetail) {
	o.LastShared = v
}

// GetResourceReference returns the ResourceReference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharedInsight) GetResourceReference() AnyOfmicrosoftGraphResourceReference {
	if o == nil  {
		var ret AnyOfmicrosoftGraphResourceReference
		return ret
	}
	return o.ResourceReference
}

// GetResourceReferenceOk returns a tuple with the ResourceReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharedInsight) GetResourceReferenceOk() (*AnyOfmicrosoftGraphResourceReference, bool) {
	if o == nil || o.ResourceReference == nil {
		return nil, false
	}
	return &o.ResourceReference, true
}

// HasResourceReference returns a boolean if a field has been set.
func (o *SharedInsight) HasResourceReference() bool {
	if o != nil && o.ResourceReference != nil {
		return true
	}

	return false
}

// SetResourceReference gets a reference to the given AnyOfmicrosoftGraphResourceReference and assigns it to the ResourceReference field.
func (o *SharedInsight) SetResourceReference(v AnyOfmicrosoftGraphResourceReference) {
	o.ResourceReference = v
}

// GetResourceVisualization returns the ResourceVisualization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharedInsight) GetResourceVisualization() AnyOfmicrosoftGraphResourceVisualization {
	if o == nil  {
		var ret AnyOfmicrosoftGraphResourceVisualization
		return ret
	}
	return o.ResourceVisualization
}

// GetResourceVisualizationOk returns a tuple with the ResourceVisualization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharedInsight) GetResourceVisualizationOk() (*AnyOfmicrosoftGraphResourceVisualization, bool) {
	if o == nil || o.ResourceVisualization == nil {
		return nil, false
	}
	return &o.ResourceVisualization, true
}

// HasResourceVisualization returns a boolean if a field has been set.
func (o *SharedInsight) HasResourceVisualization() bool {
	if o != nil && o.ResourceVisualization != nil {
		return true
	}

	return false
}

// SetResourceVisualization gets a reference to the given AnyOfmicrosoftGraphResourceVisualization and assigns it to the ResourceVisualization field.
func (o *SharedInsight) SetResourceVisualization(v AnyOfmicrosoftGraphResourceVisualization) {
	o.ResourceVisualization = v
}

// GetSharingHistory returns the SharingHistory field value if set, zero value otherwise.
func (o *SharedInsight) GetSharingHistory() []*AnyOfmicrosoftGraphSharingDetail {
	if o == nil || o.SharingHistory == nil {
		var ret []*AnyOfmicrosoftGraphSharingDetail
		return ret
	}
	return *o.SharingHistory
}

// GetSharingHistoryOk returns a tuple with the SharingHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedInsight) GetSharingHistoryOk() (*[]*AnyOfmicrosoftGraphSharingDetail, bool) {
	if o == nil || o.SharingHistory == nil {
		return nil, false
	}
	return o.SharingHistory, true
}

// HasSharingHistory returns a boolean if a field has been set.
func (o *SharedInsight) HasSharingHistory() bool {
	if o != nil && o.SharingHistory != nil {
		return true
	}

	return false
}

// SetSharingHistory gets a reference to the given []*AnyOfmicrosoftGraphSharingDetail and assigns it to the SharingHistory field.
func (o *SharedInsight) SetSharingHistory(v []*AnyOfmicrosoftGraphSharingDetail) {
	o.SharingHistory = &v
}

// GetLastSharedMethod returns the LastSharedMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharedInsight) GetLastSharedMethod() AnyOfmicrosoftGraphEntity {
	if o == nil  {
		var ret AnyOfmicrosoftGraphEntity
		return ret
	}
	return o.LastSharedMethod
}

// GetLastSharedMethodOk returns a tuple with the LastSharedMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharedInsight) GetLastSharedMethodOk() (*AnyOfmicrosoftGraphEntity, bool) {
	if o == nil || o.LastSharedMethod == nil {
		return nil, false
	}
	return &o.LastSharedMethod, true
}

// HasLastSharedMethod returns a boolean if a field has been set.
func (o *SharedInsight) HasLastSharedMethod() bool {
	if o != nil && o.LastSharedMethod != nil {
		return true
	}

	return false
}

// SetLastSharedMethod gets a reference to the given AnyOfmicrosoftGraphEntity and assigns it to the LastSharedMethod field.
func (o *SharedInsight) SetLastSharedMethod(v AnyOfmicrosoftGraphEntity) {
	o.LastSharedMethod = v
}

// GetResource returns the Resource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharedInsight) GetResource() AnyOfmicrosoftGraphEntity {
	if o == nil  {
		var ret AnyOfmicrosoftGraphEntity
		return ret
	}
	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharedInsight) GetResourceOk() (*AnyOfmicrosoftGraphEntity, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return &o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *SharedInsight) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given AnyOfmicrosoftGraphEntity and assigns it to the Resource field.
func (o *SharedInsight) SetResource(v AnyOfmicrosoftGraphEntity) {
	o.Resource = v
}

func (o SharedInsight) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LastShared != nil {
		toSerialize["lastShared"] = o.LastShared
	}
	if o.ResourceReference != nil {
		toSerialize["resourceReference"] = o.ResourceReference
	}
	if o.ResourceVisualization != nil {
		toSerialize["resourceVisualization"] = o.ResourceVisualization
	}
	if o.SharingHistory != nil {
		toSerialize["sharingHistory"] = o.SharingHistory
	}
	if o.LastSharedMethod != nil {
		toSerialize["lastSharedMethod"] = o.LastSharedMethod
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	return json.Marshal(toSerialize)
}

type NullableSharedInsight struct {
	value *SharedInsight
	isSet bool
}

func (v NullableSharedInsight) Get() *SharedInsight {
	return v.value
}

func (v *NullableSharedInsight) Set(val *SharedInsight) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedInsight) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedInsight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedInsight(val *SharedInsight) *NullableSharedInsight {
	return &NullableSharedInsight{value: val, isSet: true}
}

func (v NullableSharedInsight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedInsight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


