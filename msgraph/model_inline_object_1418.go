/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject1418 struct for InlineObject1418
type InlineObject1418 struct {
	LookupValue AnyOfobject `json:"lookupValue,omitempty"`
	LookupVector AnyOfobject `json:"lookupVector,omitempty"`
	ResultVector AnyOfobject `json:"resultVector,omitempty"`
}

// NewInlineObject1418 instantiates a new InlineObject1418 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1418() *InlineObject1418 {
	this := InlineObject1418{}
	return &this
}

// NewInlineObject1418WithDefaults instantiates a new InlineObject1418 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1418WithDefaults() *InlineObject1418 {
	this := InlineObject1418{}
	return &this
}

// GetLookupValue returns the LookupValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1418) GetLookupValue() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.LookupValue
}

// GetLookupValueOk returns a tuple with the LookupValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1418) GetLookupValueOk() (*AnyOfobject, bool) {
	if o == nil || o.LookupValue == nil {
		return nil, false
	}
	return &o.LookupValue, true
}

// HasLookupValue returns a boolean if a field has been set.
func (o *InlineObject1418) HasLookupValue() bool {
	if o != nil && o.LookupValue != nil {
		return true
	}

	return false
}

// SetLookupValue gets a reference to the given AnyOfobject and assigns it to the LookupValue field.
func (o *InlineObject1418) SetLookupValue(v AnyOfobject) {
	o.LookupValue = v
}

// GetLookupVector returns the LookupVector field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1418) GetLookupVector() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.LookupVector
}

// GetLookupVectorOk returns a tuple with the LookupVector field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1418) GetLookupVectorOk() (*AnyOfobject, bool) {
	if o == nil || o.LookupVector == nil {
		return nil, false
	}
	return &o.LookupVector, true
}

// HasLookupVector returns a boolean if a field has been set.
func (o *InlineObject1418) HasLookupVector() bool {
	if o != nil && o.LookupVector != nil {
		return true
	}

	return false
}

// SetLookupVector gets a reference to the given AnyOfobject and assigns it to the LookupVector field.
func (o *InlineObject1418) SetLookupVector(v AnyOfobject) {
	o.LookupVector = v
}

// GetResultVector returns the ResultVector field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1418) GetResultVector() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.ResultVector
}

// GetResultVectorOk returns a tuple with the ResultVector field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1418) GetResultVectorOk() (*AnyOfobject, bool) {
	if o == nil || o.ResultVector == nil {
		return nil, false
	}
	return &o.ResultVector, true
}

// HasResultVector returns a boolean if a field has been set.
func (o *InlineObject1418) HasResultVector() bool {
	if o != nil && o.ResultVector != nil {
		return true
	}

	return false
}

// SetResultVector gets a reference to the given AnyOfobject and assigns it to the ResultVector field.
func (o *InlineObject1418) SetResultVector(v AnyOfobject) {
	o.ResultVector = v
}

func (o InlineObject1418) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LookupValue != nil {
		toSerialize["lookupValue"] = o.LookupValue
	}
	if o.LookupVector != nil {
		toSerialize["lookupVector"] = o.LookupVector
	}
	if o.ResultVector != nil {
		toSerialize["resultVector"] = o.ResultVector
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1418 struct {
	value *InlineObject1418
	isSet bool
}

func (v NullableInlineObject1418) Get() *InlineObject1418 {
	return v.value
}

func (v *NullableInlineObject1418) Set(val *InlineObject1418) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1418) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1418) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1418(val *InlineObject1418) *NullableInlineObject1418 {
	return &NullableInlineObject1418{value: val, isSet: true}
}

func (v NullableInlineObject1418) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1418) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


