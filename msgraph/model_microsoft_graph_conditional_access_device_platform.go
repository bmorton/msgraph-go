/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphConditionalAccessDevicePlatform the model 'MicrosoftGraphConditionalAccessDevicePlatform'
type MicrosoftGraphConditionalAccessDevicePlatform string

// List of microsoft.graph.conditionalAccessDevicePlatform
const (
	ANDROID MicrosoftGraphConditionalAccessDevicePlatform = "android"
	I_OS MicrosoftGraphConditionalAccessDevicePlatform = "iOS"
	WINDOWS MicrosoftGraphConditionalAccessDevicePlatform = "windows"
	WINDOWS_PHONE MicrosoftGraphConditionalAccessDevicePlatform = "windowsPhone"
	MAC_OS MicrosoftGraphConditionalAccessDevicePlatform = "macOS"
	ALL MicrosoftGraphConditionalAccessDevicePlatform = "all"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphConditionalAccessDevicePlatform = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphConditionalAccessDevicePlatform enum
var AllowedMicrosoftGraphConditionalAccessDevicePlatformEnumValues = []MicrosoftGraphConditionalAccessDevicePlatform{
	"android",
	"iOS",
	"windows",
	"windowsPhone",
	"macOS",
	"all",
	"unknownFutureValue",
}

func (v *MicrosoftGraphConditionalAccessDevicePlatform) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphConditionalAccessDevicePlatform(value)
	for _, existing := range AllowedMicrosoftGraphConditionalAccessDevicePlatformEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphConditionalAccessDevicePlatform", value)
}

// NewMicrosoftGraphConditionalAccessDevicePlatformFromValue returns a pointer to a valid MicrosoftGraphConditionalAccessDevicePlatform
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphConditionalAccessDevicePlatformFromValue(v string) (*MicrosoftGraphConditionalAccessDevicePlatform, error) {
	ev := MicrosoftGraphConditionalAccessDevicePlatform(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphConditionalAccessDevicePlatform: valid values are %v", v, AllowedMicrosoftGraphConditionalAccessDevicePlatformEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphConditionalAccessDevicePlatform) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphConditionalAccessDevicePlatformEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.conditionalAccessDevicePlatform value
func (v MicrosoftGraphConditionalAccessDevicePlatform) Ptr() *MicrosoftGraphConditionalAccessDevicePlatform {
	return &v
}

type NullableMicrosoftGraphConditionalAccessDevicePlatform struct {
	value *MicrosoftGraphConditionalAccessDevicePlatform
	isSet bool
}

func (v NullableMicrosoftGraphConditionalAccessDevicePlatform) Get() *MicrosoftGraphConditionalAccessDevicePlatform {
	return v.value
}

func (v *NullableMicrosoftGraphConditionalAccessDevicePlatform) Set(val *MicrosoftGraphConditionalAccessDevicePlatform) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphConditionalAccessDevicePlatform) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphConditionalAccessDevicePlatform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphConditionalAccessDevicePlatform(val *MicrosoftGraphConditionalAccessDevicePlatform) *NullableMicrosoftGraphConditionalAccessDevicePlatform {
	return &NullableMicrosoftGraphConditionalAccessDevicePlatform{value: val, isSet: true}
}

func (v NullableMicrosoftGraphConditionalAccessDevicePlatform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphConditionalAccessDevicePlatform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

