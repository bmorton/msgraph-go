/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphThreatCategory the model 'MicrosoftGraphThreatCategory'
type MicrosoftGraphThreatCategory string

// List of microsoft.graph.threatCategory
const (
	UNDEFINED MicrosoftGraphThreatCategory = "undefined"
	SPAM MicrosoftGraphThreatCategory = "spam"
	PHISHING MicrosoftGraphThreatCategory = "phishing"
	MALWARE MicrosoftGraphThreatCategory = "malware"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphThreatCategory = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphThreatCategory enum
var AllowedMicrosoftGraphThreatCategoryEnumValues = []MicrosoftGraphThreatCategory{
	"undefined",
	"spam",
	"phishing",
	"malware",
	"unknownFutureValue",
}

func (v *MicrosoftGraphThreatCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphThreatCategory(value)
	for _, existing := range AllowedMicrosoftGraphThreatCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphThreatCategory", value)
}

// NewMicrosoftGraphThreatCategoryFromValue returns a pointer to a valid MicrosoftGraphThreatCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphThreatCategoryFromValue(v string) (*MicrosoftGraphThreatCategory, error) {
	ev := MicrosoftGraphThreatCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphThreatCategory: valid values are %v", v, AllowedMicrosoftGraphThreatCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphThreatCategory) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphThreatCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.threatCategory value
func (v MicrosoftGraphThreatCategory) Ptr() *MicrosoftGraphThreatCategory {
	return &v
}

type NullableMicrosoftGraphThreatCategory struct {
	value *MicrosoftGraphThreatCategory
	isSet bool
}

func (v NullableMicrosoftGraphThreatCategory) Get() *MicrosoftGraphThreatCategory {
	return v.value
}

func (v *NullableMicrosoftGraphThreatCategory) Set(val *MicrosoftGraphThreatCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphThreatCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphThreatCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphThreatCategory(val *MicrosoftGraphThreatCategory) *NullableMicrosoftGraphThreatCategory {
	return &NullableMicrosoftGraphThreatCategory{value: val, isSet: true}
}

func (v NullableMicrosoftGraphThreatCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphThreatCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

