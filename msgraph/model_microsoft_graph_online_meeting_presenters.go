/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphOnlineMeetingPresenters the model 'MicrosoftGraphOnlineMeetingPresenters'
type MicrosoftGraphOnlineMeetingPresenters string

// List of microsoft.graph.onlineMeetingPresenters
const (
	EVERYONE MicrosoftGraphOnlineMeetingPresenters = "everyone"
	ORGANIZATION MicrosoftGraphOnlineMeetingPresenters = "organization"
	ROLE_IS_PRESENTER MicrosoftGraphOnlineMeetingPresenters = "roleIsPresenter"
	ORGANIZER MicrosoftGraphOnlineMeetingPresenters = "organizer"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphOnlineMeetingPresenters = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphOnlineMeetingPresenters enum
var AllowedMicrosoftGraphOnlineMeetingPresentersEnumValues = []MicrosoftGraphOnlineMeetingPresenters{
	"everyone",
	"organization",
	"roleIsPresenter",
	"organizer",
	"unknownFutureValue",
}

func (v *MicrosoftGraphOnlineMeetingPresenters) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphOnlineMeetingPresenters(value)
	for _, existing := range AllowedMicrosoftGraphOnlineMeetingPresentersEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphOnlineMeetingPresenters", value)
}

// NewMicrosoftGraphOnlineMeetingPresentersFromValue returns a pointer to a valid MicrosoftGraphOnlineMeetingPresenters
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphOnlineMeetingPresentersFromValue(v string) (*MicrosoftGraphOnlineMeetingPresenters, error) {
	ev := MicrosoftGraphOnlineMeetingPresenters(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphOnlineMeetingPresenters: valid values are %v", v, AllowedMicrosoftGraphOnlineMeetingPresentersEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphOnlineMeetingPresenters) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphOnlineMeetingPresentersEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.onlineMeetingPresenters value
func (v MicrosoftGraphOnlineMeetingPresenters) Ptr() *MicrosoftGraphOnlineMeetingPresenters {
	return &v
}

type NullableMicrosoftGraphOnlineMeetingPresenters struct {
	value *MicrosoftGraphOnlineMeetingPresenters
	isSet bool
}

func (v NullableMicrosoftGraphOnlineMeetingPresenters) Get() *MicrosoftGraphOnlineMeetingPresenters {
	return v.value
}

func (v *NullableMicrosoftGraphOnlineMeetingPresenters) Set(val *MicrosoftGraphOnlineMeetingPresenters) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphOnlineMeetingPresenters) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphOnlineMeetingPresenters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphOnlineMeetingPresenters(val *MicrosoftGraphOnlineMeetingPresenters) *NullableMicrosoftGraphOnlineMeetingPresenters {
	return &NullableMicrosoftGraphOnlineMeetingPresenters{value: val, isSet: true}
}

func (v NullableMicrosoftGraphOnlineMeetingPresenters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphOnlineMeetingPresenters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

