/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AppCatalogsTeamsAppApiService AppCatalogsTeamsAppApi service
type AppCatalogsTeamsAppApiService service

type ApiAppCatalogsCreateTeamsAppsRequest struct {
	ctx _context.Context
	ApiService *AppCatalogsTeamsAppApiService
	microsoftGraphTeamsApp *MicrosoftGraphTeamsApp
}

// New navigation property
func (r ApiAppCatalogsCreateTeamsAppsRequest) MicrosoftGraphTeamsApp(microsoftGraphTeamsApp MicrosoftGraphTeamsApp) ApiAppCatalogsCreateTeamsAppsRequest {
	r.microsoftGraphTeamsApp = &microsoftGraphTeamsApp
	return r
}

func (r ApiAppCatalogsCreateTeamsAppsRequest) Execute() (MicrosoftGraphTeamsApp, *_nethttp.Response, error) {
	return r.ApiService.AppCatalogsCreateTeamsAppsExecute(r)
}

/*
AppCatalogsCreateTeamsApps Create new navigation property to teamsApps for appCatalogs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppCatalogsCreateTeamsAppsRequest
*/
func (a *AppCatalogsTeamsAppApiService) AppCatalogsCreateTeamsApps(ctx _context.Context) ApiAppCatalogsCreateTeamsAppsRequest {
	return ApiAppCatalogsCreateTeamsAppsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsApp
func (a *AppCatalogsTeamsAppApiService) AppCatalogsCreateTeamsAppsExecute(r ApiAppCatalogsCreateTeamsAppsRequest) (MicrosoftGraphTeamsApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCatalogsTeamsAppApiService.AppCatalogsCreateTeamsApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appCatalogs/teamsApps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTeamsApp == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphTeamsApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTeamsApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppCatalogsDeleteTeamsAppsRequest struct {
	ctx _context.Context
	ApiService *AppCatalogsTeamsAppApiService
	teamsAppId string
	ifMatch *string
}

// ETag
func (r ApiAppCatalogsDeleteTeamsAppsRequest) IfMatch(ifMatch string) ApiAppCatalogsDeleteTeamsAppsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAppCatalogsDeleteTeamsAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AppCatalogsDeleteTeamsAppsExecute(r)
}

/*
AppCatalogsDeleteTeamsApps Delete navigation property teamsApps for appCatalogs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamsAppId key: id of teamsApp
 @return ApiAppCatalogsDeleteTeamsAppsRequest
*/
func (a *AppCatalogsTeamsAppApiService) AppCatalogsDeleteTeamsApps(ctx _context.Context, teamsAppId string) ApiAppCatalogsDeleteTeamsAppsRequest {
	return ApiAppCatalogsDeleteTeamsAppsRequest{
		ApiService: a,
		ctx: ctx,
		teamsAppId: teamsAppId,
	}
}

// Execute executes the request
func (a *AppCatalogsTeamsAppApiService) AppCatalogsDeleteTeamsAppsExecute(r ApiAppCatalogsDeleteTeamsAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCatalogsTeamsAppApiService.AppCatalogsDeleteTeamsApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appCatalogs/teamsApps/{teamsApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"teamsApp-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppCatalogsGetTeamsAppsRequest struct {
	ctx _context.Context
	ApiService *AppCatalogsTeamsAppApiService
	teamsAppId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAppCatalogsGetTeamsAppsRequest) Select_(select_ []string) ApiAppCatalogsGetTeamsAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAppCatalogsGetTeamsAppsRequest) Expand(expand []string) ApiAppCatalogsGetTeamsAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiAppCatalogsGetTeamsAppsRequest) Execute() (MicrosoftGraphTeamsApp, *_nethttp.Response, error) {
	return r.ApiService.AppCatalogsGetTeamsAppsExecute(r)
}

/*
AppCatalogsGetTeamsApps Get teamsApps from appCatalogs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamsAppId key: id of teamsApp
 @return ApiAppCatalogsGetTeamsAppsRequest
*/
func (a *AppCatalogsTeamsAppApiService) AppCatalogsGetTeamsApps(ctx _context.Context, teamsAppId string) ApiAppCatalogsGetTeamsAppsRequest {
	return ApiAppCatalogsGetTeamsAppsRequest{
		ApiService: a,
		ctx: ctx,
		teamsAppId: teamsAppId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsApp
func (a *AppCatalogsTeamsAppApiService) AppCatalogsGetTeamsAppsExecute(r ApiAppCatalogsGetTeamsAppsRequest) (MicrosoftGraphTeamsApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCatalogsTeamsAppApiService.AppCatalogsGetTeamsApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appCatalogs/teamsApps/{teamsApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"teamsApp-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppCatalogsListTeamsAppsRequest struct {
	ctx _context.Context
	ApiService *AppCatalogsTeamsAppApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiAppCatalogsListTeamsAppsRequest) Top(top int32) ApiAppCatalogsListTeamsAppsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiAppCatalogsListTeamsAppsRequest) Skip(skip int32) ApiAppCatalogsListTeamsAppsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiAppCatalogsListTeamsAppsRequest) Search(search string) ApiAppCatalogsListTeamsAppsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiAppCatalogsListTeamsAppsRequest) Filter(filter string) ApiAppCatalogsListTeamsAppsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiAppCatalogsListTeamsAppsRequest) Count(count bool) ApiAppCatalogsListTeamsAppsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiAppCatalogsListTeamsAppsRequest) Orderby(orderby []string) ApiAppCatalogsListTeamsAppsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiAppCatalogsListTeamsAppsRequest) Select_(select_ []string) ApiAppCatalogsListTeamsAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAppCatalogsListTeamsAppsRequest) Expand(expand []string) ApiAppCatalogsListTeamsAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiAppCatalogsListTeamsAppsRequest) Execute() (CollectionOfTeamsApp, *_nethttp.Response, error) {
	return r.ApiService.AppCatalogsListTeamsAppsExecute(r)
}

/*
AppCatalogsListTeamsApps Get teamsApps from appCatalogs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppCatalogsListTeamsAppsRequest
*/
func (a *AppCatalogsTeamsAppApiService) AppCatalogsListTeamsApps(ctx _context.Context) ApiAppCatalogsListTeamsAppsRequest {
	return ApiAppCatalogsListTeamsAppsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfTeamsApp
func (a *AppCatalogsTeamsAppApiService) AppCatalogsListTeamsAppsExecute(r ApiAppCatalogsListTeamsAppsRequest) (CollectionOfTeamsApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfTeamsApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCatalogsTeamsAppApiService.AppCatalogsListTeamsApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appCatalogs/teamsApps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppCatalogsTeamsAppsAppDefinitionsDeleteBotRequest struct {
	ctx _context.Context
	ApiService *AppCatalogsTeamsAppApiService
	teamsAppId string
	teamsAppDefinitionId string
	ifMatch *string
}

// ETag
func (r ApiAppCatalogsTeamsAppsAppDefinitionsDeleteBotRequest) IfMatch(ifMatch string) ApiAppCatalogsTeamsAppsAppDefinitionsDeleteBotRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAppCatalogsTeamsAppsAppDefinitionsDeleteBotRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AppCatalogsTeamsAppsAppDefinitionsDeleteBotExecute(r)
}

/*
AppCatalogsTeamsAppsAppDefinitionsDeleteBot Delete navigation property bot for appCatalogs

The details of the bot specified in the Teams app manifest.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamsAppId key: id of teamsApp
 @param teamsAppDefinitionId key: id of teamsAppDefinition
 @return ApiAppCatalogsTeamsAppsAppDefinitionsDeleteBotRequest
*/
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsAppDefinitionsDeleteBot(ctx _context.Context, teamsAppId string, teamsAppDefinitionId string) ApiAppCatalogsTeamsAppsAppDefinitionsDeleteBotRequest {
	return ApiAppCatalogsTeamsAppsAppDefinitionsDeleteBotRequest{
		ApiService: a,
		ctx: ctx,
		teamsAppId: teamsAppId,
		teamsAppDefinitionId: teamsAppDefinitionId,
	}
}

// Execute executes the request
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsAppDefinitionsDeleteBotExecute(r ApiAppCatalogsTeamsAppsAppDefinitionsDeleteBotRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCatalogsTeamsAppApiService.AppCatalogsTeamsAppsAppDefinitionsDeleteBot")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appCatalogs/teamsApps/{teamsApp-id}/appDefinitions/{teamsAppDefinition-id}/bot"
	localVarPath = strings.Replace(localVarPath, "{"+"teamsApp-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppCatalogsTeamsAppsAppDefinitionsGetBotRequest struct {
	ctx _context.Context
	ApiService *AppCatalogsTeamsAppApiService
	teamsAppId string
	teamsAppDefinitionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAppCatalogsTeamsAppsAppDefinitionsGetBotRequest) Select_(select_ []string) ApiAppCatalogsTeamsAppsAppDefinitionsGetBotRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAppCatalogsTeamsAppsAppDefinitionsGetBotRequest) Expand(expand []string) ApiAppCatalogsTeamsAppsAppDefinitionsGetBotRequest {
	r.expand = &expand
	return r
}

func (r ApiAppCatalogsTeamsAppsAppDefinitionsGetBotRequest) Execute() (MicrosoftGraphTeamworkBot, *_nethttp.Response, error) {
	return r.ApiService.AppCatalogsTeamsAppsAppDefinitionsGetBotExecute(r)
}

/*
AppCatalogsTeamsAppsAppDefinitionsGetBot Get bot from appCatalogs

The details of the bot specified in the Teams app manifest.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamsAppId key: id of teamsApp
 @param teamsAppDefinitionId key: id of teamsAppDefinition
 @return ApiAppCatalogsTeamsAppsAppDefinitionsGetBotRequest
*/
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsAppDefinitionsGetBot(ctx _context.Context, teamsAppId string, teamsAppDefinitionId string) ApiAppCatalogsTeamsAppsAppDefinitionsGetBotRequest {
	return ApiAppCatalogsTeamsAppsAppDefinitionsGetBotRequest{
		ApiService: a,
		ctx: ctx,
		teamsAppId: teamsAppId,
		teamsAppDefinitionId: teamsAppDefinitionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamworkBot
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsAppDefinitionsGetBotExecute(r ApiAppCatalogsTeamsAppsAppDefinitionsGetBotRequest) (MicrosoftGraphTeamworkBot, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamworkBot
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCatalogsTeamsAppApiService.AppCatalogsTeamsAppsAppDefinitionsGetBot")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appCatalogs/teamsApps/{teamsApp-id}/appDefinitions/{teamsAppDefinition-id}/bot"
	localVarPath = strings.Replace(localVarPath, "{"+"teamsApp-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppCatalogsTeamsAppsAppDefinitionsUpdateBotRequest struct {
	ctx _context.Context
	ApiService *AppCatalogsTeamsAppApiService
	teamsAppId string
	teamsAppDefinitionId string
	microsoftGraphTeamworkBot *MicrosoftGraphTeamworkBot
}

// New navigation property values
func (r ApiAppCatalogsTeamsAppsAppDefinitionsUpdateBotRequest) MicrosoftGraphTeamworkBot(microsoftGraphTeamworkBot MicrosoftGraphTeamworkBot) ApiAppCatalogsTeamsAppsAppDefinitionsUpdateBotRequest {
	r.microsoftGraphTeamworkBot = &microsoftGraphTeamworkBot
	return r
}

func (r ApiAppCatalogsTeamsAppsAppDefinitionsUpdateBotRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AppCatalogsTeamsAppsAppDefinitionsUpdateBotExecute(r)
}

/*
AppCatalogsTeamsAppsAppDefinitionsUpdateBot Update the navigation property bot in appCatalogs

The details of the bot specified in the Teams app manifest.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamsAppId key: id of teamsApp
 @param teamsAppDefinitionId key: id of teamsAppDefinition
 @return ApiAppCatalogsTeamsAppsAppDefinitionsUpdateBotRequest
*/
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsAppDefinitionsUpdateBot(ctx _context.Context, teamsAppId string, teamsAppDefinitionId string) ApiAppCatalogsTeamsAppsAppDefinitionsUpdateBotRequest {
	return ApiAppCatalogsTeamsAppsAppDefinitionsUpdateBotRequest{
		ApiService: a,
		ctx: ctx,
		teamsAppId: teamsAppId,
		teamsAppDefinitionId: teamsAppDefinitionId,
	}
}

// Execute executes the request
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsAppDefinitionsUpdateBotExecute(r ApiAppCatalogsTeamsAppsAppDefinitionsUpdateBotRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCatalogsTeamsAppApiService.AppCatalogsTeamsAppsAppDefinitionsUpdateBot")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appCatalogs/teamsApps/{teamsApp-id}/appDefinitions/{teamsAppDefinition-id}/bot"
	localVarPath = strings.Replace(localVarPath, "{"+"teamsApp-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTeamworkBot == nil {
		return nil, reportError("microsoftGraphTeamworkBot is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTeamworkBot
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppCatalogsTeamsAppsCreateAppDefinitionsRequest struct {
	ctx _context.Context
	ApiService *AppCatalogsTeamsAppApiService
	teamsAppId string
	microsoftGraphTeamsAppDefinition *MicrosoftGraphTeamsAppDefinition
}

// New navigation property
func (r ApiAppCatalogsTeamsAppsCreateAppDefinitionsRequest) MicrosoftGraphTeamsAppDefinition(microsoftGraphTeamsAppDefinition MicrosoftGraphTeamsAppDefinition) ApiAppCatalogsTeamsAppsCreateAppDefinitionsRequest {
	r.microsoftGraphTeamsAppDefinition = &microsoftGraphTeamsAppDefinition
	return r
}

func (r ApiAppCatalogsTeamsAppsCreateAppDefinitionsRequest) Execute() (MicrosoftGraphTeamsAppDefinition, *_nethttp.Response, error) {
	return r.ApiService.AppCatalogsTeamsAppsCreateAppDefinitionsExecute(r)
}

/*
AppCatalogsTeamsAppsCreateAppDefinitions Create new navigation property to appDefinitions for appCatalogs

The details for each version of the app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamsAppId key: id of teamsApp
 @return ApiAppCatalogsTeamsAppsCreateAppDefinitionsRequest
*/
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsCreateAppDefinitions(ctx _context.Context, teamsAppId string) ApiAppCatalogsTeamsAppsCreateAppDefinitionsRequest {
	return ApiAppCatalogsTeamsAppsCreateAppDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		teamsAppId: teamsAppId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsAppDefinition
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsCreateAppDefinitionsExecute(r ApiAppCatalogsTeamsAppsCreateAppDefinitionsRequest) (MicrosoftGraphTeamsAppDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsAppDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCatalogsTeamsAppApiService.AppCatalogsTeamsAppsCreateAppDefinitions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appCatalogs/teamsApps/{teamsApp-id}/appDefinitions"
	localVarPath = strings.Replace(localVarPath, "{"+"teamsApp-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTeamsAppDefinition == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphTeamsAppDefinition is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTeamsAppDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppCatalogsTeamsAppsDeleteAppDefinitionsRequest struct {
	ctx _context.Context
	ApiService *AppCatalogsTeamsAppApiService
	teamsAppId string
	teamsAppDefinitionId string
	ifMatch *string
}

// ETag
func (r ApiAppCatalogsTeamsAppsDeleteAppDefinitionsRequest) IfMatch(ifMatch string) ApiAppCatalogsTeamsAppsDeleteAppDefinitionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAppCatalogsTeamsAppsDeleteAppDefinitionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AppCatalogsTeamsAppsDeleteAppDefinitionsExecute(r)
}

/*
AppCatalogsTeamsAppsDeleteAppDefinitions Delete navigation property appDefinitions for appCatalogs

The details for each version of the app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamsAppId key: id of teamsApp
 @param teamsAppDefinitionId key: id of teamsAppDefinition
 @return ApiAppCatalogsTeamsAppsDeleteAppDefinitionsRequest
*/
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsDeleteAppDefinitions(ctx _context.Context, teamsAppId string, teamsAppDefinitionId string) ApiAppCatalogsTeamsAppsDeleteAppDefinitionsRequest {
	return ApiAppCatalogsTeamsAppsDeleteAppDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		teamsAppId: teamsAppId,
		teamsAppDefinitionId: teamsAppDefinitionId,
	}
}

// Execute executes the request
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsDeleteAppDefinitionsExecute(r ApiAppCatalogsTeamsAppsDeleteAppDefinitionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCatalogsTeamsAppApiService.AppCatalogsTeamsAppsDeleteAppDefinitions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appCatalogs/teamsApps/{teamsApp-id}/appDefinitions/{teamsAppDefinition-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"teamsApp-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppCatalogsTeamsAppsGetAppDefinitionsRequest struct {
	ctx _context.Context
	ApiService *AppCatalogsTeamsAppApiService
	teamsAppId string
	teamsAppDefinitionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAppCatalogsTeamsAppsGetAppDefinitionsRequest) Select_(select_ []string) ApiAppCatalogsTeamsAppsGetAppDefinitionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAppCatalogsTeamsAppsGetAppDefinitionsRequest) Expand(expand []string) ApiAppCatalogsTeamsAppsGetAppDefinitionsRequest {
	r.expand = &expand
	return r
}

func (r ApiAppCatalogsTeamsAppsGetAppDefinitionsRequest) Execute() (MicrosoftGraphTeamsAppDefinition, *_nethttp.Response, error) {
	return r.ApiService.AppCatalogsTeamsAppsGetAppDefinitionsExecute(r)
}

/*
AppCatalogsTeamsAppsGetAppDefinitions Get appDefinitions from appCatalogs

The details for each version of the app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamsAppId key: id of teamsApp
 @param teamsAppDefinitionId key: id of teamsAppDefinition
 @return ApiAppCatalogsTeamsAppsGetAppDefinitionsRequest
*/
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsGetAppDefinitions(ctx _context.Context, teamsAppId string, teamsAppDefinitionId string) ApiAppCatalogsTeamsAppsGetAppDefinitionsRequest {
	return ApiAppCatalogsTeamsAppsGetAppDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		teamsAppId: teamsAppId,
		teamsAppDefinitionId: teamsAppDefinitionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsAppDefinition
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsGetAppDefinitionsExecute(r ApiAppCatalogsTeamsAppsGetAppDefinitionsRequest) (MicrosoftGraphTeamsAppDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsAppDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCatalogsTeamsAppApiService.AppCatalogsTeamsAppsGetAppDefinitions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appCatalogs/teamsApps/{teamsApp-id}/appDefinitions/{teamsAppDefinition-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"teamsApp-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppCatalogsTeamsAppsListAppDefinitionsRequest struct {
	ctx _context.Context
	ApiService *AppCatalogsTeamsAppApiService
	teamsAppId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiAppCatalogsTeamsAppsListAppDefinitionsRequest) Top(top int32) ApiAppCatalogsTeamsAppsListAppDefinitionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiAppCatalogsTeamsAppsListAppDefinitionsRequest) Skip(skip int32) ApiAppCatalogsTeamsAppsListAppDefinitionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiAppCatalogsTeamsAppsListAppDefinitionsRequest) Search(search string) ApiAppCatalogsTeamsAppsListAppDefinitionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiAppCatalogsTeamsAppsListAppDefinitionsRequest) Filter(filter string) ApiAppCatalogsTeamsAppsListAppDefinitionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiAppCatalogsTeamsAppsListAppDefinitionsRequest) Count(count bool) ApiAppCatalogsTeamsAppsListAppDefinitionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiAppCatalogsTeamsAppsListAppDefinitionsRequest) Orderby(orderby []string) ApiAppCatalogsTeamsAppsListAppDefinitionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiAppCatalogsTeamsAppsListAppDefinitionsRequest) Select_(select_ []string) ApiAppCatalogsTeamsAppsListAppDefinitionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAppCatalogsTeamsAppsListAppDefinitionsRequest) Expand(expand []string) ApiAppCatalogsTeamsAppsListAppDefinitionsRequest {
	r.expand = &expand
	return r
}

func (r ApiAppCatalogsTeamsAppsListAppDefinitionsRequest) Execute() (CollectionOfTeamsAppDefinition, *_nethttp.Response, error) {
	return r.ApiService.AppCatalogsTeamsAppsListAppDefinitionsExecute(r)
}

/*
AppCatalogsTeamsAppsListAppDefinitions Get appDefinitions from appCatalogs

The details for each version of the app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamsAppId key: id of teamsApp
 @return ApiAppCatalogsTeamsAppsListAppDefinitionsRequest
*/
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsListAppDefinitions(ctx _context.Context, teamsAppId string) ApiAppCatalogsTeamsAppsListAppDefinitionsRequest {
	return ApiAppCatalogsTeamsAppsListAppDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		teamsAppId: teamsAppId,
	}
}

// Execute executes the request
//  @return CollectionOfTeamsAppDefinition
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsListAppDefinitionsExecute(r ApiAppCatalogsTeamsAppsListAppDefinitionsRequest) (CollectionOfTeamsAppDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfTeamsAppDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCatalogsTeamsAppApiService.AppCatalogsTeamsAppsListAppDefinitions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appCatalogs/teamsApps/{teamsApp-id}/appDefinitions"
	localVarPath = strings.Replace(localVarPath, "{"+"teamsApp-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppCatalogsTeamsAppsUpdateAppDefinitionsRequest struct {
	ctx _context.Context
	ApiService *AppCatalogsTeamsAppApiService
	teamsAppId string
	teamsAppDefinitionId string
	microsoftGraphTeamsAppDefinition *MicrosoftGraphTeamsAppDefinition
}

// New navigation property values
func (r ApiAppCatalogsTeamsAppsUpdateAppDefinitionsRequest) MicrosoftGraphTeamsAppDefinition(microsoftGraphTeamsAppDefinition MicrosoftGraphTeamsAppDefinition) ApiAppCatalogsTeamsAppsUpdateAppDefinitionsRequest {
	r.microsoftGraphTeamsAppDefinition = &microsoftGraphTeamsAppDefinition
	return r
}

func (r ApiAppCatalogsTeamsAppsUpdateAppDefinitionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AppCatalogsTeamsAppsUpdateAppDefinitionsExecute(r)
}

/*
AppCatalogsTeamsAppsUpdateAppDefinitions Update the navigation property appDefinitions in appCatalogs

The details for each version of the app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamsAppId key: id of teamsApp
 @param teamsAppDefinitionId key: id of teamsAppDefinition
 @return ApiAppCatalogsTeamsAppsUpdateAppDefinitionsRequest
*/
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsUpdateAppDefinitions(ctx _context.Context, teamsAppId string, teamsAppDefinitionId string) ApiAppCatalogsTeamsAppsUpdateAppDefinitionsRequest {
	return ApiAppCatalogsTeamsAppsUpdateAppDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		teamsAppId: teamsAppId,
		teamsAppDefinitionId: teamsAppDefinitionId,
	}
}

// Execute executes the request
func (a *AppCatalogsTeamsAppApiService) AppCatalogsTeamsAppsUpdateAppDefinitionsExecute(r ApiAppCatalogsTeamsAppsUpdateAppDefinitionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCatalogsTeamsAppApiService.AppCatalogsTeamsAppsUpdateAppDefinitions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appCatalogs/teamsApps/{teamsApp-id}/appDefinitions/{teamsAppDefinition-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"teamsApp-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppDefinition-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppDefinitionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTeamsAppDefinition == nil {
		return nil, reportError("microsoftGraphTeamsAppDefinition is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTeamsAppDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppCatalogsUpdateTeamsAppsRequest struct {
	ctx _context.Context
	ApiService *AppCatalogsTeamsAppApiService
	teamsAppId string
	microsoftGraphTeamsApp *MicrosoftGraphTeamsApp
}

// New navigation property values
func (r ApiAppCatalogsUpdateTeamsAppsRequest) MicrosoftGraphTeamsApp(microsoftGraphTeamsApp MicrosoftGraphTeamsApp) ApiAppCatalogsUpdateTeamsAppsRequest {
	r.microsoftGraphTeamsApp = &microsoftGraphTeamsApp
	return r
}

func (r ApiAppCatalogsUpdateTeamsAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AppCatalogsUpdateTeamsAppsExecute(r)
}

/*
AppCatalogsUpdateTeamsApps Update the navigation property teamsApps in appCatalogs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamsAppId key: id of teamsApp
 @return ApiAppCatalogsUpdateTeamsAppsRequest
*/
func (a *AppCatalogsTeamsAppApiService) AppCatalogsUpdateTeamsApps(ctx _context.Context, teamsAppId string) ApiAppCatalogsUpdateTeamsAppsRequest {
	return ApiAppCatalogsUpdateTeamsAppsRequest{
		ApiService: a,
		ctx: ctx,
		teamsAppId: teamsAppId,
	}
}

// Execute executes the request
func (a *AppCatalogsTeamsAppApiService) AppCatalogsUpdateTeamsAppsExecute(r ApiAppCatalogsUpdateTeamsAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCatalogsTeamsAppApiService.AppCatalogsUpdateTeamsApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/appCatalogs/teamsApps/{teamsApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"teamsApp-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTeamsApp == nil {
		return nil, reportError("microsoftGraphTeamsApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTeamsApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
