/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphChatMessageType the model 'MicrosoftGraphChatMessageType'
type MicrosoftGraphChatMessageType string

// List of microsoft.graph.chatMessageType
const (
	MESSAGE MicrosoftGraphChatMessageType = "message"
	CHAT_EVENT MicrosoftGraphChatMessageType = "chatEvent"
	TYPING MicrosoftGraphChatMessageType = "typing"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphChatMessageType = "unknownFutureValue"
	SYSTEM_EVENT_MESSAGE MicrosoftGraphChatMessageType = "systemEventMessage"
)

// All allowed values of MicrosoftGraphChatMessageType enum
var AllowedMicrosoftGraphChatMessageTypeEnumValues = []MicrosoftGraphChatMessageType{
	"message",
	"chatEvent",
	"typing",
	"unknownFutureValue",
	"systemEventMessage",
}

func (v *MicrosoftGraphChatMessageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphChatMessageType(value)
	for _, existing := range AllowedMicrosoftGraphChatMessageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphChatMessageType", value)
}

// NewMicrosoftGraphChatMessageTypeFromValue returns a pointer to a valid MicrosoftGraphChatMessageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphChatMessageTypeFromValue(v string) (*MicrosoftGraphChatMessageType, error) {
	ev := MicrosoftGraphChatMessageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphChatMessageType: valid values are %v", v, AllowedMicrosoftGraphChatMessageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphChatMessageType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphChatMessageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.chatMessageType value
func (v MicrosoftGraphChatMessageType) Ptr() *MicrosoftGraphChatMessageType {
	return &v
}

type NullableMicrosoftGraphChatMessageType struct {
	value *MicrosoftGraphChatMessageType
	isSet bool
}

func (v NullableMicrosoftGraphChatMessageType) Get() *MicrosoftGraphChatMessageType {
	return v.value
}

func (v *NullableMicrosoftGraphChatMessageType) Set(val *MicrosoftGraphChatMessageType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphChatMessageType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphChatMessageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphChatMessageType(val *MicrosoftGraphChatMessageType) *NullableMicrosoftGraphChatMessageType {
	return &NullableMicrosoftGraphChatMessageType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphChatMessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphChatMessageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

