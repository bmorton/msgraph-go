/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MicrosoftGraphPersonType struct for MicrosoftGraphPersonType
type MicrosoftGraphPersonType struct {
	// The type of data source, such as Person.
	Class NullableString `json:"class,omitempty"`
	// The secondary type of data source, such as OrganizationUser.
	Subclass NullableString `json:"subclass,omitempty"`
}

// NewMicrosoftGraphPersonType instantiates a new MicrosoftGraphPersonType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphPersonType() *MicrosoftGraphPersonType {
	this := MicrosoftGraphPersonType{}
	return &this
}

// NewMicrosoftGraphPersonTypeWithDefaults instantiates a new MicrosoftGraphPersonType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphPersonTypeWithDefaults() *MicrosoftGraphPersonType {
	this := MicrosoftGraphPersonType{}
	return &this
}

// GetClass returns the Class field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPersonType) GetClass() string {
	if o == nil || o.Class.Get() == nil {
		var ret string
		return ret
	}
	return *o.Class.Get()
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPersonType) GetClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Class.Get(), o.Class.IsSet()
}

// HasClass returns a boolean if a field has been set.
func (o *MicrosoftGraphPersonType) HasClass() bool {
	if o != nil && o.Class.IsSet() {
		return true
	}

	return false
}

// SetClass gets a reference to the given NullableString and assigns it to the Class field.
func (o *MicrosoftGraphPersonType) SetClass(v string) {
	o.Class.Set(&v)
}
// SetClassNil sets the value for Class to be an explicit nil
func (o *MicrosoftGraphPersonType) SetClassNil() {
	o.Class.Set(nil)
}

// UnsetClass ensures that no value is present for Class, not even an explicit nil
func (o *MicrosoftGraphPersonType) UnsetClass() {
	o.Class.Unset()
}

// GetSubclass returns the Subclass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPersonType) GetSubclass() string {
	if o == nil || o.Subclass.Get() == nil {
		var ret string
		return ret
	}
	return *o.Subclass.Get()
}

// GetSubclassOk returns a tuple with the Subclass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPersonType) GetSubclassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Subclass.Get(), o.Subclass.IsSet()
}

// HasSubclass returns a boolean if a field has been set.
func (o *MicrosoftGraphPersonType) HasSubclass() bool {
	if o != nil && o.Subclass.IsSet() {
		return true
	}

	return false
}

// SetSubclass gets a reference to the given NullableString and assigns it to the Subclass field.
func (o *MicrosoftGraphPersonType) SetSubclass(v string) {
	o.Subclass.Set(&v)
}
// SetSubclassNil sets the value for Subclass to be an explicit nil
func (o *MicrosoftGraphPersonType) SetSubclassNil() {
	o.Subclass.Set(nil)
}

// UnsetSubclass ensures that no value is present for Subclass, not even an explicit nil
func (o *MicrosoftGraphPersonType) UnsetSubclass() {
	o.Subclass.Unset()
}

func (o MicrosoftGraphPersonType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Class.IsSet() {
		toSerialize["class"] = o.Class.Get()
	}
	if o.Subclass.IsSet() {
		toSerialize["subclass"] = o.Subclass.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphPersonType struct {
	value *MicrosoftGraphPersonType
	isSet bool
}

func (v NullableMicrosoftGraphPersonType) Get() *MicrosoftGraphPersonType {
	return v.value
}

func (v *NullableMicrosoftGraphPersonType) Set(val *MicrosoftGraphPersonType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPersonType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPersonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPersonType(val *MicrosoftGraphPersonType) *NullableMicrosoftGraphPersonType {
	return &NullableMicrosoftGraphPersonType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPersonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPersonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


