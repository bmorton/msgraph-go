/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphCallDirection the model 'MicrosoftGraphCallDirection'
type MicrosoftGraphCallDirection string

// List of microsoft.graph.callDirection
const (
	INCOMING MicrosoftGraphCallDirection = "incoming"
	OUTGOING MicrosoftGraphCallDirection = "outgoing"
)

// All allowed values of MicrosoftGraphCallDirection enum
var AllowedMicrosoftGraphCallDirectionEnumValues = []MicrosoftGraphCallDirection{
	"incoming",
	"outgoing",
}

func (v *MicrosoftGraphCallDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphCallDirection(value)
	for _, existing := range AllowedMicrosoftGraphCallDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphCallDirection", value)
}

// NewMicrosoftGraphCallDirectionFromValue returns a pointer to a valid MicrosoftGraphCallDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphCallDirectionFromValue(v string) (*MicrosoftGraphCallDirection, error) {
	ev := MicrosoftGraphCallDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphCallDirection: valid values are %v", v, AllowedMicrosoftGraphCallDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphCallDirection) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphCallDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.callDirection value
func (v MicrosoftGraphCallDirection) Ptr() *MicrosoftGraphCallDirection {
	return &v
}

type NullableMicrosoftGraphCallDirection struct {
	value *MicrosoftGraphCallDirection
	isSet bool
}

func (v NullableMicrosoftGraphCallDirection) Get() *MicrosoftGraphCallDirection {
	return v.value
}

func (v *NullableMicrosoftGraphCallDirection) Set(val *MicrosoftGraphCallDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphCallDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphCallDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphCallDirection(val *MicrosoftGraphCallDirection) *NullableMicrosoftGraphCallDirection {
	return &NullableMicrosoftGraphCallDirection{value: val, isSet: true}
}

func (v NullableMicrosoftGraphCallDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphCallDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

