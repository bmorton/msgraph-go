/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// OrganizationCertificateBasedAuthConfigurationApiService OrganizationCertificateBasedAuthConfigurationApi service
type OrganizationCertificateBasedAuthConfigurationApiService service

type ApiOrganizationCreateRefCertificateBasedAuthConfigurationRequest struct {
	ctx _context.Context
	ApiService *OrganizationCertificateBasedAuthConfigurationApiService
	organizationId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref value
func (r ApiOrganizationCreateRefCertificateBasedAuthConfigurationRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiOrganizationCreateRefCertificateBasedAuthConfigurationRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiOrganizationCreateRefCertificateBasedAuthConfigurationRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.OrganizationCreateRefCertificateBasedAuthConfigurationExecute(r)
}

/*
OrganizationCreateRefCertificateBasedAuthConfiguration Create new navigation property ref to certificateBasedAuthConfiguration for organization

Navigation property to manage certificate-based authentication configuration. Only a single instance of certificateBasedAuthConfiguration can be created in the collection.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId key: id of organization
 @return ApiOrganizationCreateRefCertificateBasedAuthConfigurationRequest
*/
func (a *OrganizationCertificateBasedAuthConfigurationApiService) OrganizationCreateRefCertificateBasedAuthConfiguration(ctx _context.Context, organizationId string) ApiOrganizationCreateRefCertificateBasedAuthConfigurationRequest {
	return ApiOrganizationCreateRefCertificateBasedAuthConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *OrganizationCertificateBasedAuthConfigurationApiService) OrganizationCreateRefCertificateBasedAuthConfigurationExecute(r ApiOrganizationCreateRefCertificateBasedAuthConfigurationRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationCertificateBasedAuthConfigurationApiService.OrganizationCreateRefCertificateBasedAuthConfiguration")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organization/{organization-id}/certificateBasedAuthConfiguration/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"organization-id"+"}", _neturl.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationListCertificateBasedAuthConfigurationRequest struct {
	ctx _context.Context
	ApiService *OrganizationCertificateBasedAuthConfigurationApiService
	organizationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiOrganizationListCertificateBasedAuthConfigurationRequest) Top(top int32) ApiOrganizationListCertificateBasedAuthConfigurationRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiOrganizationListCertificateBasedAuthConfigurationRequest) Skip(skip int32) ApiOrganizationListCertificateBasedAuthConfigurationRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiOrganizationListCertificateBasedAuthConfigurationRequest) Search(search string) ApiOrganizationListCertificateBasedAuthConfigurationRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiOrganizationListCertificateBasedAuthConfigurationRequest) Filter(filter string) ApiOrganizationListCertificateBasedAuthConfigurationRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiOrganizationListCertificateBasedAuthConfigurationRequest) Count(count bool) ApiOrganizationListCertificateBasedAuthConfigurationRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiOrganizationListCertificateBasedAuthConfigurationRequest) Orderby(orderby []string) ApiOrganizationListCertificateBasedAuthConfigurationRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiOrganizationListCertificateBasedAuthConfigurationRequest) Select_(select_ []string) ApiOrganizationListCertificateBasedAuthConfigurationRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiOrganizationListCertificateBasedAuthConfigurationRequest) Expand(expand []string) ApiOrganizationListCertificateBasedAuthConfigurationRequest {
	r.expand = &expand
	return r
}

func (r ApiOrganizationListCertificateBasedAuthConfigurationRequest) Execute() (CollectionOfCertificateBasedAuthConfiguration, *_nethttp.Response, error) {
	return r.ApiService.OrganizationListCertificateBasedAuthConfigurationExecute(r)
}

/*
OrganizationListCertificateBasedAuthConfiguration Get certificateBasedAuthConfiguration from organization

Navigation property to manage certificate-based authentication configuration. Only a single instance of certificateBasedAuthConfiguration can be created in the collection.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId key: id of organization
 @return ApiOrganizationListCertificateBasedAuthConfigurationRequest
*/
func (a *OrganizationCertificateBasedAuthConfigurationApiService) OrganizationListCertificateBasedAuthConfiguration(ctx _context.Context, organizationId string) ApiOrganizationListCertificateBasedAuthConfigurationRequest {
	return ApiOrganizationListCertificateBasedAuthConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return CollectionOfCertificateBasedAuthConfiguration
func (a *OrganizationCertificateBasedAuthConfigurationApiService) OrganizationListCertificateBasedAuthConfigurationExecute(r ApiOrganizationListCertificateBasedAuthConfigurationRequest) (CollectionOfCertificateBasedAuthConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfCertificateBasedAuthConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationCertificateBasedAuthConfigurationApiService.OrganizationListCertificateBasedAuthConfiguration")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organization/{organization-id}/certificateBasedAuthConfiguration"
	localVarPath = strings.Replace(localVarPath, "{"+"organization-id"+"}", _neturl.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrganizationListRefCertificateBasedAuthConfigurationRequest struct {
	ctx _context.Context
	ApiService *OrganizationCertificateBasedAuthConfigurationApiService
	organizationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
}

// Show only the first n items
func (r ApiOrganizationListRefCertificateBasedAuthConfigurationRequest) Top(top int32) ApiOrganizationListRefCertificateBasedAuthConfigurationRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiOrganizationListRefCertificateBasedAuthConfigurationRequest) Skip(skip int32) ApiOrganizationListRefCertificateBasedAuthConfigurationRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiOrganizationListRefCertificateBasedAuthConfigurationRequest) Search(search string) ApiOrganizationListRefCertificateBasedAuthConfigurationRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiOrganizationListRefCertificateBasedAuthConfigurationRequest) Filter(filter string) ApiOrganizationListRefCertificateBasedAuthConfigurationRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiOrganizationListRefCertificateBasedAuthConfigurationRequest) Count(count bool) ApiOrganizationListRefCertificateBasedAuthConfigurationRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiOrganizationListRefCertificateBasedAuthConfigurationRequest) Orderby(orderby []string) ApiOrganizationListRefCertificateBasedAuthConfigurationRequest {
	r.orderby = &orderby
	return r
}

func (r ApiOrganizationListRefCertificateBasedAuthConfigurationRequest) Execute() (CollectionOfLinksOfCertificateBasedAuthConfiguration, *_nethttp.Response, error) {
	return r.ApiService.OrganizationListRefCertificateBasedAuthConfigurationExecute(r)
}

/*
OrganizationListRefCertificateBasedAuthConfiguration Get ref of certificateBasedAuthConfiguration from organization

Navigation property to manage certificate-based authentication configuration. Only a single instance of certificateBasedAuthConfiguration can be created in the collection.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationId key: id of organization
 @return ApiOrganizationListRefCertificateBasedAuthConfigurationRequest
*/
func (a *OrganizationCertificateBasedAuthConfigurationApiService) OrganizationListRefCertificateBasedAuthConfiguration(ctx _context.Context, organizationId string) ApiOrganizationListRefCertificateBasedAuthConfigurationRequest {
	return ApiOrganizationListRefCertificateBasedAuthConfigurationRequest{
		ApiService: a,
		ctx: ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//  @return CollectionOfLinksOfCertificateBasedAuthConfiguration
func (a *OrganizationCertificateBasedAuthConfigurationApiService) OrganizationListRefCertificateBasedAuthConfigurationExecute(r ApiOrganizationListRefCertificateBasedAuthConfigurationRequest) (CollectionOfLinksOfCertificateBasedAuthConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfLinksOfCertificateBasedAuthConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationCertificateBasedAuthConfigurationApiService.OrganizationListRefCertificateBasedAuthConfiguration")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organization/{organization-id}/certificateBasedAuthConfiguration/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"organization-id"+"}", _neturl.PathEscape(parameterToString(r.organizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
