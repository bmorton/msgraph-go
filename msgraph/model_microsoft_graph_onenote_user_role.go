/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphOnenoteUserRole the model 'MicrosoftGraphOnenoteUserRole'
type MicrosoftGraphOnenoteUserRole string

// List of microsoft.graph.onenoteUserRole
const (
	NONE MicrosoftGraphOnenoteUserRole = "None"
	OWNER MicrosoftGraphOnenoteUserRole = "Owner"
	CONTRIBUTOR MicrosoftGraphOnenoteUserRole = "Contributor"
	READER MicrosoftGraphOnenoteUserRole = "Reader"
)

// All allowed values of MicrosoftGraphOnenoteUserRole enum
var AllowedMicrosoftGraphOnenoteUserRoleEnumValues = []MicrosoftGraphOnenoteUserRole{
	"None",
	"Owner",
	"Contributor",
	"Reader",
}

func (v *MicrosoftGraphOnenoteUserRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphOnenoteUserRole(value)
	for _, existing := range AllowedMicrosoftGraphOnenoteUserRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphOnenoteUserRole", value)
}

// NewMicrosoftGraphOnenoteUserRoleFromValue returns a pointer to a valid MicrosoftGraphOnenoteUserRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphOnenoteUserRoleFromValue(v string) (*MicrosoftGraphOnenoteUserRole, error) {
	ev := MicrosoftGraphOnenoteUserRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphOnenoteUserRole: valid values are %v", v, AllowedMicrosoftGraphOnenoteUserRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphOnenoteUserRole) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphOnenoteUserRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.onenoteUserRole value
func (v MicrosoftGraphOnenoteUserRole) Ptr() *MicrosoftGraphOnenoteUserRole {
	return &v
}

type NullableMicrosoftGraphOnenoteUserRole struct {
	value *MicrosoftGraphOnenoteUserRole
	isSet bool
}

func (v NullableMicrosoftGraphOnenoteUserRole) Get() *MicrosoftGraphOnenoteUserRole {
	return v.value
}

func (v *NullableMicrosoftGraphOnenoteUserRole) Set(val *MicrosoftGraphOnenoteUserRole) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphOnenoteUserRole) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphOnenoteUserRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphOnenoteUserRole(val *MicrosoftGraphOnenoteUserRole) *NullableMicrosoftGraphOnenoteUserRole {
	return &NullableMicrosoftGraphOnenoteUserRole{value: val, isSet: true}
}

func (v NullableMicrosoftGraphOnenoteUserRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphOnenoteUserRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

