/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MicrosoftGraphDateTimeColumn struct for MicrosoftGraphDateTimeColumn
type MicrosoftGraphDateTimeColumn struct {
	// How the value should be presented in the UX. Must be one of default, friendly, or standard. See below for more details. If unspecified, treated as default.
	DisplayAs NullableString `json:"displayAs,omitempty"`
	// Indicates whether the value should be presented as a date only or a date and time. Must be one of dateOnly or dateTime
	Format NullableString `json:"format,omitempty"`
}

// NewMicrosoftGraphDateTimeColumn instantiates a new MicrosoftGraphDateTimeColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphDateTimeColumn() *MicrosoftGraphDateTimeColumn {
	this := MicrosoftGraphDateTimeColumn{}
	return &this
}

// NewMicrosoftGraphDateTimeColumnWithDefaults instantiates a new MicrosoftGraphDateTimeColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphDateTimeColumnWithDefaults() *MicrosoftGraphDateTimeColumn {
	this := MicrosoftGraphDateTimeColumn{}
	return &this
}

// GetDisplayAs returns the DisplayAs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphDateTimeColumn) GetDisplayAs() string {
	if o == nil || o.DisplayAs.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayAs.Get()
}

// GetDisplayAsOk returns a tuple with the DisplayAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphDateTimeColumn) GetDisplayAsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayAs.Get(), o.DisplayAs.IsSet()
}

// HasDisplayAs returns a boolean if a field has been set.
func (o *MicrosoftGraphDateTimeColumn) HasDisplayAs() bool {
	if o != nil && o.DisplayAs.IsSet() {
		return true
	}

	return false
}

// SetDisplayAs gets a reference to the given NullableString and assigns it to the DisplayAs field.
func (o *MicrosoftGraphDateTimeColumn) SetDisplayAs(v string) {
	o.DisplayAs.Set(&v)
}
// SetDisplayAsNil sets the value for DisplayAs to be an explicit nil
func (o *MicrosoftGraphDateTimeColumn) SetDisplayAsNil() {
	o.DisplayAs.Set(nil)
}

// UnsetDisplayAs ensures that no value is present for DisplayAs, not even an explicit nil
func (o *MicrosoftGraphDateTimeColumn) UnsetDisplayAs() {
	o.DisplayAs.Unset()
}

// GetFormat returns the Format field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphDateTimeColumn) GetFormat() string {
	if o == nil || o.Format.Get() == nil {
		var ret string
		return ret
	}
	return *o.Format.Get()
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphDateTimeColumn) GetFormatOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Format.Get(), o.Format.IsSet()
}

// HasFormat returns a boolean if a field has been set.
func (o *MicrosoftGraphDateTimeColumn) HasFormat() bool {
	if o != nil && o.Format.IsSet() {
		return true
	}

	return false
}

// SetFormat gets a reference to the given NullableString and assigns it to the Format field.
func (o *MicrosoftGraphDateTimeColumn) SetFormat(v string) {
	o.Format.Set(&v)
}
// SetFormatNil sets the value for Format to be an explicit nil
func (o *MicrosoftGraphDateTimeColumn) SetFormatNil() {
	o.Format.Set(nil)
}

// UnsetFormat ensures that no value is present for Format, not even an explicit nil
func (o *MicrosoftGraphDateTimeColumn) UnsetFormat() {
	o.Format.Unset()
}

func (o MicrosoftGraphDateTimeColumn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayAs.IsSet() {
		toSerialize["displayAs"] = o.DisplayAs.Get()
	}
	if o.Format.IsSet() {
		toSerialize["format"] = o.Format.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphDateTimeColumn struct {
	value *MicrosoftGraphDateTimeColumn
	isSet bool
}

func (v NullableMicrosoftGraphDateTimeColumn) Get() *MicrosoftGraphDateTimeColumn {
	return v.value
}

func (v *NullableMicrosoftGraphDateTimeColumn) Set(val *MicrosoftGraphDateTimeColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphDateTimeColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphDateTimeColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphDateTimeColumn(val *MicrosoftGraphDateTimeColumn) *NullableMicrosoftGraphDateTimeColumn {
	return &NullableMicrosoftGraphDateTimeColumn{value: val, isSet: true}
}

func (v NullableMicrosoftGraphDateTimeColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphDateTimeColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


