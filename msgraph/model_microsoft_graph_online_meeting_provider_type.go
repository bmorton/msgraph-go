/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphOnlineMeetingProviderType the model 'MicrosoftGraphOnlineMeetingProviderType'
type MicrosoftGraphOnlineMeetingProviderType string

// List of microsoft.graph.onlineMeetingProviderType
const (
	UNKNOWN MicrosoftGraphOnlineMeetingProviderType = "unknown"
	SKYPE_FOR_BUSINESS MicrosoftGraphOnlineMeetingProviderType = "skypeForBusiness"
	SKYPE_FOR_CONSUMER MicrosoftGraphOnlineMeetingProviderType = "skypeForConsumer"
	TEAMS_FOR_BUSINESS MicrosoftGraphOnlineMeetingProviderType = "teamsForBusiness"
)

// All allowed values of MicrosoftGraphOnlineMeetingProviderType enum
var AllowedMicrosoftGraphOnlineMeetingProviderTypeEnumValues = []MicrosoftGraphOnlineMeetingProviderType{
	"unknown",
	"skypeForBusiness",
	"skypeForConsumer",
	"teamsForBusiness",
}

func (v *MicrosoftGraphOnlineMeetingProviderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphOnlineMeetingProviderType(value)
	for _, existing := range AllowedMicrosoftGraphOnlineMeetingProviderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphOnlineMeetingProviderType", value)
}

// NewMicrosoftGraphOnlineMeetingProviderTypeFromValue returns a pointer to a valid MicrosoftGraphOnlineMeetingProviderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphOnlineMeetingProviderTypeFromValue(v string) (*MicrosoftGraphOnlineMeetingProviderType, error) {
	ev := MicrosoftGraphOnlineMeetingProviderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphOnlineMeetingProviderType: valid values are %v", v, AllowedMicrosoftGraphOnlineMeetingProviderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphOnlineMeetingProviderType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphOnlineMeetingProviderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.onlineMeetingProviderType value
func (v MicrosoftGraphOnlineMeetingProviderType) Ptr() *MicrosoftGraphOnlineMeetingProviderType {
	return &v
}

type NullableMicrosoftGraphOnlineMeetingProviderType struct {
	value *MicrosoftGraphOnlineMeetingProviderType
	isSet bool
}

func (v NullableMicrosoftGraphOnlineMeetingProviderType) Get() *MicrosoftGraphOnlineMeetingProviderType {
	return v.value
}

func (v *NullableMicrosoftGraphOnlineMeetingProviderType) Set(val *MicrosoftGraphOnlineMeetingProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphOnlineMeetingProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphOnlineMeetingProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphOnlineMeetingProviderType(val *MicrosoftGraphOnlineMeetingProviderType) *NullableMicrosoftGraphOnlineMeetingProviderType {
	return &NullableMicrosoftGraphOnlineMeetingProviderType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphOnlineMeetingProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphOnlineMeetingProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

