/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// UsersUserActivityApiService UsersUserActivityApi service
type UsersUserActivityApiService service

type ApiUsersActivitiesCreateHistoryItemsRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	userActivityId string
	microsoftGraphActivityHistoryItem *MicrosoftGraphActivityHistoryItem
}

// New navigation property
func (r ApiUsersActivitiesCreateHistoryItemsRequest) MicrosoftGraphActivityHistoryItem(microsoftGraphActivityHistoryItem MicrosoftGraphActivityHistoryItem) ApiUsersActivitiesCreateHistoryItemsRequest {
	r.microsoftGraphActivityHistoryItem = &microsoftGraphActivityHistoryItem
	return r
}

func (r ApiUsersActivitiesCreateHistoryItemsRequest) Execute() (MicrosoftGraphActivityHistoryItem, *_nethttp.Response, error) {
	return r.ApiService.UsersActivitiesCreateHistoryItemsExecute(r)
}

/*
UsersActivitiesCreateHistoryItems Create new navigation property to historyItems for users

Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userActivityId key: id of userActivity
 @return ApiUsersActivitiesCreateHistoryItemsRequest
*/
func (a *UsersUserActivityApiService) UsersActivitiesCreateHistoryItems(ctx _context.Context, userId string, userActivityId string) ApiUsersActivitiesCreateHistoryItemsRequest {
	return ApiUsersActivitiesCreateHistoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userActivityId: userActivityId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphActivityHistoryItem
func (a *UsersUserActivityApiService) UsersActivitiesCreateHistoryItemsExecute(r ApiUsersActivitiesCreateHistoryItemsRequest) (MicrosoftGraphActivityHistoryItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphActivityHistoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersActivitiesCreateHistoryItems")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities/{userActivity-id}/historyItems"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphActivityHistoryItem == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphActivityHistoryItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphActivityHistoryItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersActivitiesDeleteHistoryItemsRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	userActivityId string
	activityHistoryItemId string
	ifMatch *string
}

// ETag
func (r ApiUsersActivitiesDeleteHistoryItemsRequest) IfMatch(ifMatch string) ApiUsersActivitiesDeleteHistoryItemsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersActivitiesDeleteHistoryItemsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersActivitiesDeleteHistoryItemsExecute(r)
}

/*
UsersActivitiesDeleteHistoryItems Delete navigation property historyItems for users

Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiUsersActivitiesDeleteHistoryItemsRequest
*/
func (a *UsersUserActivityApiService) UsersActivitiesDeleteHistoryItems(ctx _context.Context, userId string, userActivityId string, activityHistoryItemId string) ApiUsersActivitiesDeleteHistoryItemsRequest {
	return ApiUsersActivitiesDeleteHistoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
func (a *UsersUserActivityApiService) UsersActivitiesDeleteHistoryItemsExecute(r ApiUsersActivitiesDeleteHistoryItemsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersActivitiesDeleteHistoryItems")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersActivitiesGetHistoryItemsRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	userActivityId string
	activityHistoryItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersActivitiesGetHistoryItemsRequest) Select_(select_ []string) ApiUsersActivitiesGetHistoryItemsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersActivitiesGetHistoryItemsRequest) Expand(expand []string) ApiUsersActivitiesGetHistoryItemsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersActivitiesGetHistoryItemsRequest) Execute() (MicrosoftGraphActivityHistoryItem, *_nethttp.Response, error) {
	return r.ApiService.UsersActivitiesGetHistoryItemsExecute(r)
}

/*
UsersActivitiesGetHistoryItems Get historyItems from users

Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiUsersActivitiesGetHistoryItemsRequest
*/
func (a *UsersUserActivityApiService) UsersActivitiesGetHistoryItems(ctx _context.Context, userId string, userActivityId string, activityHistoryItemId string) ApiUsersActivitiesGetHistoryItemsRequest {
	return ApiUsersActivitiesGetHistoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphActivityHistoryItem
func (a *UsersUserActivityApiService) UsersActivitiesGetHistoryItemsExecute(r ApiUsersActivitiesGetHistoryItemsRequest) (MicrosoftGraphActivityHistoryItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphActivityHistoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersActivitiesGetHistoryItems")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersActivitiesHistoryItemsDeleteRefActivityRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	userActivityId string
	activityHistoryItemId string
	ifMatch *string
}

// ETag
func (r ApiUsersActivitiesHistoryItemsDeleteRefActivityRequest) IfMatch(ifMatch string) ApiUsersActivitiesHistoryItemsDeleteRefActivityRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersActivitiesHistoryItemsDeleteRefActivityRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersActivitiesHistoryItemsDeleteRefActivityExecute(r)
}

/*
UsersActivitiesHistoryItemsDeleteRefActivity Delete ref of navigation property activity for users

Optional. NavigationProperty/Containment; navigation property to the associated activity.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiUsersActivitiesHistoryItemsDeleteRefActivityRequest
*/
func (a *UsersUserActivityApiService) UsersActivitiesHistoryItemsDeleteRefActivity(ctx _context.Context, userId string, userActivityId string, activityHistoryItemId string) ApiUsersActivitiesHistoryItemsDeleteRefActivityRequest {
	return ApiUsersActivitiesHistoryItemsDeleteRefActivityRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
func (a *UsersUserActivityApiService) UsersActivitiesHistoryItemsDeleteRefActivityExecute(r ApiUsersActivitiesHistoryItemsDeleteRefActivityRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersActivitiesHistoryItemsDeleteRefActivity")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}/activity/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersActivitiesHistoryItemsGetActivityRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	userActivityId string
	activityHistoryItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersActivitiesHistoryItemsGetActivityRequest) Select_(select_ []string) ApiUsersActivitiesHistoryItemsGetActivityRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersActivitiesHistoryItemsGetActivityRequest) Expand(expand []string) ApiUsersActivitiesHistoryItemsGetActivityRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersActivitiesHistoryItemsGetActivityRequest) Execute() (MicrosoftGraphUserActivity, *_nethttp.Response, error) {
	return r.ApiService.UsersActivitiesHistoryItemsGetActivityExecute(r)
}

/*
UsersActivitiesHistoryItemsGetActivity Get activity from users

Optional. NavigationProperty/Containment; navigation property to the associated activity.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiUsersActivitiesHistoryItemsGetActivityRequest
*/
func (a *UsersUserActivityApiService) UsersActivitiesHistoryItemsGetActivity(ctx _context.Context, userId string, userActivityId string, activityHistoryItemId string) ApiUsersActivitiesHistoryItemsGetActivityRequest {
	return ApiUsersActivitiesHistoryItemsGetActivityRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphUserActivity
func (a *UsersUserActivityApiService) UsersActivitiesHistoryItemsGetActivityExecute(r ApiUsersActivitiesHistoryItemsGetActivityRequest) (MicrosoftGraphUserActivity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphUserActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersActivitiesHistoryItemsGetActivity")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}/activity"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersActivitiesHistoryItemsGetRefActivityRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	userActivityId string
	activityHistoryItemId string
}


func (r ApiUsersActivitiesHistoryItemsGetRefActivityRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.UsersActivitiesHistoryItemsGetRefActivityExecute(r)
}

/*
UsersActivitiesHistoryItemsGetRefActivity Get ref of activity from users

Optional. NavigationProperty/Containment; navigation property to the associated activity.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiUsersActivitiesHistoryItemsGetRefActivityRequest
*/
func (a *UsersUserActivityApiService) UsersActivitiesHistoryItemsGetRefActivity(ctx _context.Context, userId string, userActivityId string, activityHistoryItemId string) ApiUsersActivitiesHistoryItemsGetRefActivityRequest {
	return ApiUsersActivitiesHistoryItemsGetRefActivityRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
//  @return string
func (a *UsersUserActivityApiService) UsersActivitiesHistoryItemsGetRefActivityExecute(r ApiUsersActivitiesHistoryItemsGetRefActivityRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersActivitiesHistoryItemsGetRefActivity")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}/activity/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersActivitiesHistoryItemsUpdateRefActivityRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	userActivityId string
	activityHistoryItemId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiUsersActivitiesHistoryItemsUpdateRefActivityRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiUsersActivitiesHistoryItemsUpdateRefActivityRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiUsersActivitiesHistoryItemsUpdateRefActivityRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersActivitiesHistoryItemsUpdateRefActivityExecute(r)
}

/*
UsersActivitiesHistoryItemsUpdateRefActivity Update the ref of navigation property activity in users

Optional. NavigationProperty/Containment; navigation property to the associated activity.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiUsersActivitiesHistoryItemsUpdateRefActivityRequest
*/
func (a *UsersUserActivityApiService) UsersActivitiesHistoryItemsUpdateRefActivity(ctx _context.Context, userId string, userActivityId string, activityHistoryItemId string) ApiUsersActivitiesHistoryItemsUpdateRefActivityRequest {
	return ApiUsersActivitiesHistoryItemsUpdateRefActivityRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
func (a *UsersUserActivityApiService) UsersActivitiesHistoryItemsUpdateRefActivityExecute(r ApiUsersActivitiesHistoryItemsUpdateRefActivityRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersActivitiesHistoryItemsUpdateRefActivity")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}/activity/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersActivitiesListHistoryItemsRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	userActivityId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersActivitiesListHistoryItemsRequest) Top(top int32) ApiUsersActivitiesListHistoryItemsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersActivitiesListHistoryItemsRequest) Skip(skip int32) ApiUsersActivitiesListHistoryItemsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersActivitiesListHistoryItemsRequest) Search(search string) ApiUsersActivitiesListHistoryItemsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersActivitiesListHistoryItemsRequest) Filter(filter string) ApiUsersActivitiesListHistoryItemsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersActivitiesListHistoryItemsRequest) Count(count bool) ApiUsersActivitiesListHistoryItemsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersActivitiesListHistoryItemsRequest) Orderby(orderby []string) ApiUsersActivitiesListHistoryItemsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersActivitiesListHistoryItemsRequest) Select_(select_ []string) ApiUsersActivitiesListHistoryItemsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersActivitiesListHistoryItemsRequest) Expand(expand []string) ApiUsersActivitiesListHistoryItemsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersActivitiesListHistoryItemsRequest) Execute() (CollectionOfActivityHistoryItem, *_nethttp.Response, error) {
	return r.ApiService.UsersActivitiesListHistoryItemsExecute(r)
}

/*
UsersActivitiesListHistoryItems Get historyItems from users

Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userActivityId key: id of userActivity
 @return ApiUsersActivitiesListHistoryItemsRequest
*/
func (a *UsersUserActivityApiService) UsersActivitiesListHistoryItems(ctx _context.Context, userId string, userActivityId string) ApiUsersActivitiesListHistoryItemsRequest {
	return ApiUsersActivitiesListHistoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userActivityId: userActivityId,
	}
}

// Execute executes the request
//  @return CollectionOfActivityHistoryItem
func (a *UsersUserActivityApiService) UsersActivitiesListHistoryItemsExecute(r ApiUsersActivitiesListHistoryItemsRequest) (CollectionOfActivityHistoryItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfActivityHistoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersActivitiesListHistoryItems")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities/{userActivity-id}/historyItems"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersActivitiesUpdateHistoryItemsRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	userActivityId string
	activityHistoryItemId string
	microsoftGraphActivityHistoryItem *MicrosoftGraphActivityHistoryItem
}

// New navigation property values
func (r ApiUsersActivitiesUpdateHistoryItemsRequest) MicrosoftGraphActivityHistoryItem(microsoftGraphActivityHistoryItem MicrosoftGraphActivityHistoryItem) ApiUsersActivitiesUpdateHistoryItemsRequest {
	r.microsoftGraphActivityHistoryItem = &microsoftGraphActivityHistoryItem
	return r
}

func (r ApiUsersActivitiesUpdateHistoryItemsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersActivitiesUpdateHistoryItemsExecute(r)
}

/*
UsersActivitiesUpdateHistoryItems Update the navigation property historyItems in users

Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userActivityId key: id of userActivity
 @param activityHistoryItemId key: id of activityHistoryItem
 @return ApiUsersActivitiesUpdateHistoryItemsRequest
*/
func (a *UsersUserActivityApiService) UsersActivitiesUpdateHistoryItems(ctx _context.Context, userId string, userActivityId string, activityHistoryItemId string) ApiUsersActivitiesUpdateHistoryItemsRequest {
	return ApiUsersActivitiesUpdateHistoryItemsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userActivityId: userActivityId,
		activityHistoryItemId: activityHistoryItemId,
	}
}

// Execute executes the request
func (a *UsersUserActivityApiService) UsersActivitiesUpdateHistoryItemsExecute(r ApiUsersActivitiesUpdateHistoryItemsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersActivitiesUpdateHistoryItems")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities/{userActivity-id}/historyItems/{activityHistoryItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"activityHistoryItem-id"+"}", _neturl.PathEscape(parameterToString(r.activityHistoryItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphActivityHistoryItem == nil {
		return nil, reportError("microsoftGraphActivityHistoryItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphActivityHistoryItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersCreateActivitiesRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	microsoftGraphUserActivity *MicrosoftGraphUserActivity
}

// New navigation property
func (r ApiUsersCreateActivitiesRequest) MicrosoftGraphUserActivity(microsoftGraphUserActivity MicrosoftGraphUserActivity) ApiUsersCreateActivitiesRequest {
	r.microsoftGraphUserActivity = &microsoftGraphUserActivity
	return r
}

func (r ApiUsersCreateActivitiesRequest) Execute() (MicrosoftGraphUserActivity, *_nethttp.Response, error) {
	return r.ApiService.UsersCreateActivitiesExecute(r)
}

/*
UsersCreateActivities Create new navigation property to activities for users

The user's activities across devices. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersCreateActivitiesRequest
*/
func (a *UsersUserActivityApiService) UsersCreateActivities(ctx _context.Context, userId string) ApiUsersCreateActivitiesRequest {
	return ApiUsersCreateActivitiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphUserActivity
func (a *UsersUserActivityApiService) UsersCreateActivitiesExecute(r ApiUsersCreateActivitiesRequest) (MicrosoftGraphUserActivity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphUserActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersCreateActivities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphUserActivity == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphUserActivity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphUserActivity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersDeleteActivitiesRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	userActivityId string
	ifMatch *string
}

// ETag
func (r ApiUsersDeleteActivitiesRequest) IfMatch(ifMatch string) ApiUsersDeleteActivitiesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersDeleteActivitiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersDeleteActivitiesExecute(r)
}

/*
UsersDeleteActivities Delete navigation property activities for users

The user's activities across devices. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userActivityId key: id of userActivity
 @return ApiUsersDeleteActivitiesRequest
*/
func (a *UsersUserActivityApiService) UsersDeleteActivities(ctx _context.Context, userId string, userActivityId string) ApiUsersDeleteActivitiesRequest {
	return ApiUsersDeleteActivitiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userActivityId: userActivityId,
	}
}

// Execute executes the request
func (a *UsersUserActivityApiService) UsersDeleteActivitiesExecute(r ApiUsersDeleteActivitiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersDeleteActivities")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities/{userActivity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersGetActivitiesRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	userActivityId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersGetActivitiesRequest) Select_(select_ []string) ApiUsersGetActivitiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersGetActivitiesRequest) Expand(expand []string) ApiUsersGetActivitiesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersGetActivitiesRequest) Execute() (MicrosoftGraphUserActivity, *_nethttp.Response, error) {
	return r.ApiService.UsersGetActivitiesExecute(r)
}

/*
UsersGetActivities Get activities from users

The user's activities across devices. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userActivityId key: id of userActivity
 @return ApiUsersGetActivitiesRequest
*/
func (a *UsersUserActivityApiService) UsersGetActivities(ctx _context.Context, userId string, userActivityId string) ApiUsersGetActivitiesRequest {
	return ApiUsersGetActivitiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userActivityId: userActivityId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphUserActivity
func (a *UsersUserActivityApiService) UsersGetActivitiesExecute(r ApiUsersGetActivitiesRequest) (MicrosoftGraphUserActivity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphUserActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersGetActivities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities/{userActivity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersListActivitiesRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersListActivitiesRequest) Top(top int32) ApiUsersListActivitiesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersListActivitiesRequest) Skip(skip int32) ApiUsersListActivitiesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersListActivitiesRequest) Search(search string) ApiUsersListActivitiesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersListActivitiesRequest) Filter(filter string) ApiUsersListActivitiesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersListActivitiesRequest) Count(count bool) ApiUsersListActivitiesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersListActivitiesRequest) Orderby(orderby []string) ApiUsersListActivitiesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersListActivitiesRequest) Select_(select_ []string) ApiUsersListActivitiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersListActivitiesRequest) Expand(expand []string) ApiUsersListActivitiesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersListActivitiesRequest) Execute() (CollectionOfUserActivity, *_nethttp.Response, error) {
	return r.ApiService.UsersListActivitiesExecute(r)
}

/*
UsersListActivities Get activities from users

The user's activities across devices. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersListActivitiesRequest
*/
func (a *UsersUserActivityApiService) UsersListActivities(ctx _context.Context, userId string) ApiUsersListActivitiesRequest {
	return ApiUsersListActivitiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfUserActivity
func (a *UsersUserActivityApiService) UsersListActivitiesExecute(r ApiUsersListActivitiesRequest) (CollectionOfUserActivity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfUserActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersListActivities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUpdateActivitiesRequest struct {
	ctx _context.Context
	ApiService *UsersUserActivityApiService
	userId string
	userActivityId string
	microsoftGraphUserActivity *MicrosoftGraphUserActivity
}

// New navigation property values
func (r ApiUsersUpdateActivitiesRequest) MicrosoftGraphUserActivity(microsoftGraphUserActivity MicrosoftGraphUserActivity) ApiUsersUpdateActivitiesRequest {
	r.microsoftGraphUserActivity = &microsoftGraphUserActivity
	return r
}

func (r ApiUsersUpdateActivitiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersUpdateActivitiesExecute(r)
}

/*
UsersUpdateActivities Update the navigation property activities in users

The user's activities across devices. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userActivityId key: id of userActivity
 @return ApiUsersUpdateActivitiesRequest
*/
func (a *UsersUserActivityApiService) UsersUpdateActivities(ctx _context.Context, userId string, userActivityId string) ApiUsersUpdateActivitiesRequest {
	return ApiUsersUpdateActivitiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userActivityId: userActivityId,
	}
}

// Execute executes the request
func (a *UsersUserActivityApiService) UsersUpdateActivitiesExecute(r ApiUsersUpdateActivitiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserActivityApiService.UsersUpdateActivities")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/activities/{userActivity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userActivity-id"+"}", _neturl.PathEscape(parameterToString(r.userActivityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphUserActivity == nil {
		return nil, reportError("microsoftGraphUserActivity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphUserActivity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
