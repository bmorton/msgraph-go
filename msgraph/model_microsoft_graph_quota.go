/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MicrosoftGraphQuota struct for MicrosoftGraphQuota
type MicrosoftGraphQuota struct {
	// Total space consumed by files in the recycle bin, in bytes. Read-only.
	Deleted NullableInt64 `json:"deleted,omitempty"`
	// Total space remaining before reaching the quota limit, in bytes. Read-only.
	Remaining NullableInt64 `json:"remaining,omitempty"`
	// Enumeration value that indicates the state of the storage space. Read-only.
	State NullableString `json:"state,omitempty"`
	// Information about the drive's storage quota plans. Only in Personal OneDrive.
	StoragePlanInformation AnyOfmicrosoftGraphStoragePlanInformation `json:"storagePlanInformation,omitempty"`
	// Total allowed storage space, in bytes. Read-only.
	Total NullableInt64 `json:"total,omitempty"`
	// Total space used, in bytes. Read-only.
	Used NullableInt64 `json:"used,omitempty"`
}

// NewMicrosoftGraphQuota instantiates a new MicrosoftGraphQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphQuota() *MicrosoftGraphQuota {
	this := MicrosoftGraphQuota{}
	return &this
}

// NewMicrosoftGraphQuotaWithDefaults instantiates a new MicrosoftGraphQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphQuotaWithDefaults() *MicrosoftGraphQuota {
	this := MicrosoftGraphQuota{}
	return &this
}

// GetDeleted returns the Deleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphQuota) GetDeleted() int64 {
	if o == nil || o.Deleted.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Deleted.Get()
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphQuota) GetDeletedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Deleted.Get(), o.Deleted.IsSet()
}

// HasDeleted returns a boolean if a field has been set.
func (o *MicrosoftGraphQuota) HasDeleted() bool {
	if o != nil && o.Deleted.IsSet() {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given NullableInt64 and assigns it to the Deleted field.
func (o *MicrosoftGraphQuota) SetDeleted(v int64) {
	o.Deleted.Set(&v)
}
// SetDeletedNil sets the value for Deleted to be an explicit nil
func (o *MicrosoftGraphQuota) SetDeletedNil() {
	o.Deleted.Set(nil)
}

// UnsetDeleted ensures that no value is present for Deleted, not even an explicit nil
func (o *MicrosoftGraphQuota) UnsetDeleted() {
	o.Deleted.Unset()
}

// GetRemaining returns the Remaining field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphQuota) GetRemaining() int64 {
	if o == nil || o.Remaining.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Remaining.Get()
}

// GetRemainingOk returns a tuple with the Remaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphQuota) GetRemainingOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Remaining.Get(), o.Remaining.IsSet()
}

// HasRemaining returns a boolean if a field has been set.
func (o *MicrosoftGraphQuota) HasRemaining() bool {
	if o != nil && o.Remaining.IsSet() {
		return true
	}

	return false
}

// SetRemaining gets a reference to the given NullableInt64 and assigns it to the Remaining field.
func (o *MicrosoftGraphQuota) SetRemaining(v int64) {
	o.Remaining.Set(&v)
}
// SetRemainingNil sets the value for Remaining to be an explicit nil
func (o *MicrosoftGraphQuota) SetRemainingNil() {
	o.Remaining.Set(nil)
}

// UnsetRemaining ensures that no value is present for Remaining, not even an explicit nil
func (o *MicrosoftGraphQuota) UnsetRemaining() {
	o.Remaining.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphQuota) GetState() string {
	if o == nil || o.State.Get() == nil {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphQuota) GetStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *MicrosoftGraphQuota) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *MicrosoftGraphQuota) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *MicrosoftGraphQuota) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *MicrosoftGraphQuota) UnsetState() {
	o.State.Unset()
}

// GetStoragePlanInformation returns the StoragePlanInformation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphQuota) GetStoragePlanInformation() AnyOfmicrosoftGraphStoragePlanInformation {
	if o == nil  {
		var ret AnyOfmicrosoftGraphStoragePlanInformation
		return ret
	}
	return o.StoragePlanInformation
}

// GetStoragePlanInformationOk returns a tuple with the StoragePlanInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphQuota) GetStoragePlanInformationOk() (*AnyOfmicrosoftGraphStoragePlanInformation, bool) {
	if o == nil || o.StoragePlanInformation == nil {
		return nil, false
	}
	return &o.StoragePlanInformation, true
}

// HasStoragePlanInformation returns a boolean if a field has been set.
func (o *MicrosoftGraphQuota) HasStoragePlanInformation() bool {
	if o != nil && o.StoragePlanInformation != nil {
		return true
	}

	return false
}

// SetStoragePlanInformation gets a reference to the given AnyOfmicrosoftGraphStoragePlanInformation and assigns it to the StoragePlanInformation field.
func (o *MicrosoftGraphQuota) SetStoragePlanInformation(v AnyOfmicrosoftGraphStoragePlanInformation) {
	o.StoragePlanInformation = v
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphQuota) GetTotal() int64 {
	if o == nil || o.Total.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphQuota) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *MicrosoftGraphQuota) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableInt64 and assigns it to the Total field.
func (o *MicrosoftGraphQuota) SetTotal(v int64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *MicrosoftGraphQuota) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *MicrosoftGraphQuota) UnsetTotal() {
	o.Total.Unset()
}

// GetUsed returns the Used field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphQuota) GetUsed() int64 {
	if o == nil || o.Used.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Used.Get()
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphQuota) GetUsedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Used.Get(), o.Used.IsSet()
}

// HasUsed returns a boolean if a field has been set.
func (o *MicrosoftGraphQuota) HasUsed() bool {
	if o != nil && o.Used.IsSet() {
		return true
	}

	return false
}

// SetUsed gets a reference to the given NullableInt64 and assigns it to the Used field.
func (o *MicrosoftGraphQuota) SetUsed(v int64) {
	o.Used.Set(&v)
}
// SetUsedNil sets the value for Used to be an explicit nil
func (o *MicrosoftGraphQuota) SetUsedNil() {
	o.Used.Set(nil)
}

// UnsetUsed ensures that no value is present for Used, not even an explicit nil
func (o *MicrosoftGraphQuota) UnsetUsed() {
	o.Used.Unset()
}

func (o MicrosoftGraphQuota) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Deleted.IsSet() {
		toSerialize["deleted"] = o.Deleted.Get()
	}
	if o.Remaining.IsSet() {
		toSerialize["remaining"] = o.Remaining.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if o.StoragePlanInformation != nil {
		toSerialize["storagePlanInformation"] = o.StoragePlanInformation
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if o.Used.IsSet() {
		toSerialize["used"] = o.Used.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphQuota struct {
	value *MicrosoftGraphQuota
	isSet bool
}

func (v NullableMicrosoftGraphQuota) Get() *MicrosoftGraphQuota {
	return v.value
}

func (v *NullableMicrosoftGraphQuota) Set(val *MicrosoftGraphQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphQuota(val *MicrosoftGraphQuota) *NullableMicrosoftGraphQuota {
	return &NullableMicrosoftGraphQuota{value: val, isSet: true}
}

func (v NullableMicrosoftGraphQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


