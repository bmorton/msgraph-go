/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphCallTranscriptionState the model 'MicrosoftGraphCallTranscriptionState'
type MicrosoftGraphCallTranscriptionState string

// List of microsoft.graph.callTranscriptionState
const (
	NOT_STARTED MicrosoftGraphCallTranscriptionState = "notStarted"
	ACTIVE MicrosoftGraphCallTranscriptionState = "active"
	INACTIVE MicrosoftGraphCallTranscriptionState = "inactive"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphCallTranscriptionState = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphCallTranscriptionState enum
var AllowedMicrosoftGraphCallTranscriptionStateEnumValues = []MicrosoftGraphCallTranscriptionState{
	"notStarted",
	"active",
	"inactive",
	"unknownFutureValue",
}

func (v *MicrosoftGraphCallTranscriptionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphCallTranscriptionState(value)
	for _, existing := range AllowedMicrosoftGraphCallTranscriptionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphCallTranscriptionState", value)
}

// NewMicrosoftGraphCallTranscriptionStateFromValue returns a pointer to a valid MicrosoftGraphCallTranscriptionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphCallTranscriptionStateFromValue(v string) (*MicrosoftGraphCallTranscriptionState, error) {
	ev := MicrosoftGraphCallTranscriptionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphCallTranscriptionState: valid values are %v", v, AllowedMicrosoftGraphCallTranscriptionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphCallTranscriptionState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphCallTranscriptionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.callTranscriptionState value
func (v MicrosoftGraphCallTranscriptionState) Ptr() *MicrosoftGraphCallTranscriptionState {
	return &v
}

type NullableMicrosoftGraphCallTranscriptionState struct {
	value *MicrosoftGraphCallTranscriptionState
	isSet bool
}

func (v NullableMicrosoftGraphCallTranscriptionState) Get() *MicrosoftGraphCallTranscriptionState {
	return v.value
}

func (v *NullableMicrosoftGraphCallTranscriptionState) Set(val *MicrosoftGraphCallTranscriptionState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphCallTranscriptionState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphCallTranscriptionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphCallTranscriptionState(val *MicrosoftGraphCallTranscriptionState) *NullableMicrosoftGraphCallTranscriptionState {
	return &NullableMicrosoftGraphCallTranscriptionState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphCallTranscriptionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphCallTranscriptionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

