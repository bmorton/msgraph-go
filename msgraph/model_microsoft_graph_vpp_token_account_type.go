/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphVppTokenAccountType Possible types of an Apple Volume Purchase Program token.
type MicrosoftGraphVppTokenAccountType string

// List of microsoft.graph.vppTokenAccountType
const (
	BUSINESS MicrosoftGraphVppTokenAccountType = "business"
	EDUCATION MicrosoftGraphVppTokenAccountType = "education"
)

// All allowed values of MicrosoftGraphVppTokenAccountType enum
var AllowedMicrosoftGraphVppTokenAccountTypeEnumValues = []MicrosoftGraphVppTokenAccountType{
	"business",
	"education",
}

func (v *MicrosoftGraphVppTokenAccountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphVppTokenAccountType(value)
	for _, existing := range AllowedMicrosoftGraphVppTokenAccountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphVppTokenAccountType", value)
}

// NewMicrosoftGraphVppTokenAccountTypeFromValue returns a pointer to a valid MicrosoftGraphVppTokenAccountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphVppTokenAccountTypeFromValue(v string) (*MicrosoftGraphVppTokenAccountType, error) {
	ev := MicrosoftGraphVppTokenAccountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphVppTokenAccountType: valid values are %v", v, AllowedMicrosoftGraphVppTokenAccountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphVppTokenAccountType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphVppTokenAccountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.vppTokenAccountType value
func (v MicrosoftGraphVppTokenAccountType) Ptr() *MicrosoftGraphVppTokenAccountType {
	return &v
}

type NullableMicrosoftGraphVppTokenAccountType struct {
	value *MicrosoftGraphVppTokenAccountType
	isSet bool
}

func (v NullableMicrosoftGraphVppTokenAccountType) Get() *MicrosoftGraphVppTokenAccountType {
	return v.value
}

func (v *NullableMicrosoftGraphVppTokenAccountType) Set(val *MicrosoftGraphVppTokenAccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphVppTokenAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphVppTokenAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphVppTokenAccountType(val *MicrosoftGraphVppTokenAccountType) *NullableMicrosoftGraphVppTokenAccountType {
	return &NullableMicrosoftGraphVppTokenAccountType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphVppTokenAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphVppTokenAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

