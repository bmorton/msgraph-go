/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphChatMessagePolicyViolation struct for MicrosoftGraphChatMessagePolicyViolation
type MicrosoftGraphChatMessagePolicyViolation struct {
	// The action taken by the DLP provider on the message with sensitive content. Supported values are: NoneNotifySender -- Inform the sender of the violation but allow readers to read the message.BlockAccess -- Block readers from reading the message.BlockAccessExternal -- Block users outside the organization from reading the message, while allowing users within the organization to read the message.
	DlpAction AnyOfmicrosoftGraphChatMessagePolicyViolationDlpActionTypes `json:"dlpAction,omitempty"`
	// Justification text provided by the sender of the message when overriding a policy violation.
	JustificationText NullableString `json:"justificationText,omitempty"`
	// Information to display to the message sender about why the message was flagged as a violation.
	PolicyTip AnyOfmicrosoftGraphChatMessagePolicyViolationPolicyTip `json:"policyTip,omitempty"`
	// Indicates the action taken by the user on a message blocked by the DLP provider. Supported values are: NoneOverrideReportFalsePositiveWhen the DLP provider is updating the message for blocking sensitive content, userAction is not required.
	UserAction AnyOfmicrosoftGraphChatMessagePolicyViolationUserActionTypes `json:"userAction,omitempty"`
	// Indicates what actions the sender may take in response to the policy violation. Supported values are: NoneAllowFalsePositiveOverride -- Allows the sender to declare the policyViolation to be an error in the DLP app and its rules, and allow readers to see the message again if the dlpAction had hidden it.AllowOverrideWithoutJustification -- Allows the sender to overriide the DLP violation and allow readers to see the message again if the dlpAction had hidden it, without needing to provide an explanation for doing so. AllowOverrideWithJustification -- Allows the sender to overriide the DLP violation and allow readers to see the message again if the dlpAction had hidden it, after providing an explanation for doing so.AllowOverrideWithoutJustification and AllowOverrideWithJustification are mutually exclusive.
	VerdictDetails AnyOfmicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes `json:"verdictDetails,omitempty"`
}

// NewMicrosoftGraphChatMessagePolicyViolation instantiates a new MicrosoftGraphChatMessagePolicyViolation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphChatMessagePolicyViolation() *MicrosoftGraphChatMessagePolicyViolation {
	this := MicrosoftGraphChatMessagePolicyViolation{}
	return &this
}

// NewMicrosoftGraphChatMessagePolicyViolationWithDefaults instantiates a new MicrosoftGraphChatMessagePolicyViolation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphChatMessagePolicyViolationWithDefaults() *MicrosoftGraphChatMessagePolicyViolation {
	this := MicrosoftGraphChatMessagePolicyViolation{}
	return &this
}

// GetDlpAction returns the DlpAction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphChatMessagePolicyViolation) GetDlpAction() AnyOfmicrosoftGraphChatMessagePolicyViolationDlpActionTypes {
	if o == nil  {
		var ret AnyOfmicrosoftGraphChatMessagePolicyViolationDlpActionTypes
		return ret
	}
	return o.DlpAction
}

// GetDlpActionOk returns a tuple with the DlpAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphChatMessagePolicyViolation) GetDlpActionOk() (*AnyOfmicrosoftGraphChatMessagePolicyViolationDlpActionTypes, bool) {
	if o == nil || o.DlpAction == nil {
		return nil, false
	}
	return &o.DlpAction, true
}

// HasDlpAction returns a boolean if a field has been set.
func (o *MicrosoftGraphChatMessagePolicyViolation) HasDlpAction() bool {
	if o != nil && o.DlpAction != nil {
		return true
	}

	return false
}

// SetDlpAction gets a reference to the given AnyOfmicrosoftGraphChatMessagePolicyViolationDlpActionTypes and assigns it to the DlpAction field.
func (o *MicrosoftGraphChatMessagePolicyViolation) SetDlpAction(v AnyOfmicrosoftGraphChatMessagePolicyViolationDlpActionTypes) {
	o.DlpAction = v
}

// GetJustificationText returns the JustificationText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphChatMessagePolicyViolation) GetJustificationText() string {
	if o == nil || o.JustificationText.Get() == nil {
		var ret string
		return ret
	}
	return *o.JustificationText.Get()
}

// GetJustificationTextOk returns a tuple with the JustificationText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphChatMessagePolicyViolation) GetJustificationTextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JustificationText.Get(), o.JustificationText.IsSet()
}

// HasJustificationText returns a boolean if a field has been set.
func (o *MicrosoftGraphChatMessagePolicyViolation) HasJustificationText() bool {
	if o != nil && o.JustificationText.IsSet() {
		return true
	}

	return false
}

// SetJustificationText gets a reference to the given NullableString and assigns it to the JustificationText field.
func (o *MicrosoftGraphChatMessagePolicyViolation) SetJustificationText(v string) {
	o.JustificationText.Set(&v)
}
// SetJustificationTextNil sets the value for JustificationText to be an explicit nil
func (o *MicrosoftGraphChatMessagePolicyViolation) SetJustificationTextNil() {
	o.JustificationText.Set(nil)
}

// UnsetJustificationText ensures that no value is present for JustificationText, not even an explicit nil
func (o *MicrosoftGraphChatMessagePolicyViolation) UnsetJustificationText() {
	o.JustificationText.Unset()
}

// GetPolicyTip returns the PolicyTip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphChatMessagePolicyViolation) GetPolicyTip() AnyOfmicrosoftGraphChatMessagePolicyViolationPolicyTip {
	if o == nil  {
		var ret AnyOfmicrosoftGraphChatMessagePolicyViolationPolicyTip
		return ret
	}
	return o.PolicyTip
}

// GetPolicyTipOk returns a tuple with the PolicyTip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphChatMessagePolicyViolation) GetPolicyTipOk() (*AnyOfmicrosoftGraphChatMessagePolicyViolationPolicyTip, bool) {
	if o == nil || o.PolicyTip == nil {
		return nil, false
	}
	return &o.PolicyTip, true
}

// HasPolicyTip returns a boolean if a field has been set.
func (o *MicrosoftGraphChatMessagePolicyViolation) HasPolicyTip() bool {
	if o != nil && o.PolicyTip != nil {
		return true
	}

	return false
}

// SetPolicyTip gets a reference to the given AnyOfmicrosoftGraphChatMessagePolicyViolationPolicyTip and assigns it to the PolicyTip field.
func (o *MicrosoftGraphChatMessagePolicyViolation) SetPolicyTip(v AnyOfmicrosoftGraphChatMessagePolicyViolationPolicyTip) {
	o.PolicyTip = v
}

// GetUserAction returns the UserAction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphChatMessagePolicyViolation) GetUserAction() AnyOfmicrosoftGraphChatMessagePolicyViolationUserActionTypes {
	if o == nil  {
		var ret AnyOfmicrosoftGraphChatMessagePolicyViolationUserActionTypes
		return ret
	}
	return o.UserAction
}

// GetUserActionOk returns a tuple with the UserAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphChatMessagePolicyViolation) GetUserActionOk() (*AnyOfmicrosoftGraphChatMessagePolicyViolationUserActionTypes, bool) {
	if o == nil || o.UserAction == nil {
		return nil, false
	}
	return &o.UserAction, true
}

// HasUserAction returns a boolean if a field has been set.
func (o *MicrosoftGraphChatMessagePolicyViolation) HasUserAction() bool {
	if o != nil && o.UserAction != nil {
		return true
	}

	return false
}

// SetUserAction gets a reference to the given AnyOfmicrosoftGraphChatMessagePolicyViolationUserActionTypes and assigns it to the UserAction field.
func (o *MicrosoftGraphChatMessagePolicyViolation) SetUserAction(v AnyOfmicrosoftGraphChatMessagePolicyViolationUserActionTypes) {
	o.UserAction = v
}

// GetVerdictDetails returns the VerdictDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphChatMessagePolicyViolation) GetVerdictDetails() AnyOfmicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes {
	if o == nil  {
		var ret AnyOfmicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
		return ret
	}
	return o.VerdictDetails
}

// GetVerdictDetailsOk returns a tuple with the VerdictDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphChatMessagePolicyViolation) GetVerdictDetailsOk() (*AnyOfmicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes, bool) {
	if o == nil || o.VerdictDetails == nil {
		return nil, false
	}
	return &o.VerdictDetails, true
}

// HasVerdictDetails returns a boolean if a field has been set.
func (o *MicrosoftGraphChatMessagePolicyViolation) HasVerdictDetails() bool {
	if o != nil && o.VerdictDetails != nil {
		return true
	}

	return false
}

// SetVerdictDetails gets a reference to the given AnyOfmicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes and assigns it to the VerdictDetails field.
func (o *MicrosoftGraphChatMessagePolicyViolation) SetVerdictDetails(v AnyOfmicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes) {
	o.VerdictDetails = v
}

func (o MicrosoftGraphChatMessagePolicyViolation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DlpAction != nil {
		toSerialize["dlpAction"] = o.DlpAction
	}
	if o.JustificationText.IsSet() {
		toSerialize["justificationText"] = o.JustificationText.Get()
	}
	if o.PolicyTip != nil {
		toSerialize["policyTip"] = o.PolicyTip
	}
	if o.UserAction != nil {
		toSerialize["userAction"] = o.UserAction
	}
	if o.VerdictDetails != nil {
		toSerialize["verdictDetails"] = o.VerdictDetails
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphChatMessagePolicyViolation struct {
	value *MicrosoftGraphChatMessagePolicyViolation
	isSet bool
}

func (v NullableMicrosoftGraphChatMessagePolicyViolation) Get() *MicrosoftGraphChatMessagePolicyViolation {
	return v.value
}

func (v *NullableMicrosoftGraphChatMessagePolicyViolation) Set(val *MicrosoftGraphChatMessagePolicyViolation) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphChatMessagePolicyViolation) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphChatMessagePolicyViolation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphChatMessagePolicyViolation(val *MicrosoftGraphChatMessagePolicyViolation) *NullableMicrosoftGraphChatMessagePolicyViolation {
	return &NullableMicrosoftGraphChatMessagePolicyViolation{value: val, isSet: true}
}

func (v NullableMicrosoftGraphChatMessagePolicyViolation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphChatMessagePolicyViolation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


