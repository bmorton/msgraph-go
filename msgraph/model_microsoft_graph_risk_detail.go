/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphRiskDetail the model 'MicrosoftGraphRiskDetail'
type MicrosoftGraphRiskDetail string

// List of microsoft.graph.riskDetail
const (
	NONE MicrosoftGraphRiskDetail = "none"
	ADMIN_GENERATED_TEMPORARY_PASSWORD MicrosoftGraphRiskDetail = "adminGeneratedTemporaryPassword"
	USER_PERFORMED_SECURED_PASSWORD_CHANGE MicrosoftGraphRiskDetail = "userPerformedSecuredPasswordChange"
	USER_PERFORMED_SECURED_PASSWORD_RESET MicrosoftGraphRiskDetail = "userPerformedSecuredPasswordReset"
	ADMIN_CONFIRMED_SIGNIN_SAFE MicrosoftGraphRiskDetail = "adminConfirmedSigninSafe"
	AI_CONFIRMED_SIGNIN_SAFE MicrosoftGraphRiskDetail = "aiConfirmedSigninSafe"
	USER_PASSED_MFA_DRIVEN_BY_RISK_BASED_POLICY MicrosoftGraphRiskDetail = "userPassedMFADrivenByRiskBasedPolicy"
	ADMIN_DISMISSED_ALL_RISK_FOR_USER MicrosoftGraphRiskDetail = "adminDismissedAllRiskForUser"
	ADMIN_CONFIRMED_SIGNIN_COMPROMISED MicrosoftGraphRiskDetail = "adminConfirmedSigninCompromised"
	HIDDEN MicrosoftGraphRiskDetail = "hidden"
	ADMIN_CONFIRMED_USER_COMPROMISED MicrosoftGraphRiskDetail = "adminConfirmedUserCompromised"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphRiskDetail = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphRiskDetail enum
var AllowedMicrosoftGraphRiskDetailEnumValues = []MicrosoftGraphRiskDetail{
	"none",
	"adminGeneratedTemporaryPassword",
	"userPerformedSecuredPasswordChange",
	"userPerformedSecuredPasswordReset",
	"adminConfirmedSigninSafe",
	"aiConfirmedSigninSafe",
	"userPassedMFADrivenByRiskBasedPolicy",
	"adminDismissedAllRiskForUser",
	"adminConfirmedSigninCompromised",
	"hidden",
	"adminConfirmedUserCompromised",
	"unknownFutureValue",
}

func (v *MicrosoftGraphRiskDetail) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphRiskDetail(value)
	for _, existing := range AllowedMicrosoftGraphRiskDetailEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphRiskDetail", value)
}

// NewMicrosoftGraphRiskDetailFromValue returns a pointer to a valid MicrosoftGraphRiskDetail
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphRiskDetailFromValue(v string) (*MicrosoftGraphRiskDetail, error) {
	ev := MicrosoftGraphRiskDetail(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphRiskDetail: valid values are %v", v, AllowedMicrosoftGraphRiskDetailEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphRiskDetail) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphRiskDetailEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.riskDetail value
func (v MicrosoftGraphRiskDetail) Ptr() *MicrosoftGraphRiskDetail {
	return &v
}

type NullableMicrosoftGraphRiskDetail struct {
	value *MicrosoftGraphRiskDetail
	isSet bool
}

func (v NullableMicrosoftGraphRiskDetail) Get() *MicrosoftGraphRiskDetail {
	return v.value
}

func (v *NullableMicrosoftGraphRiskDetail) Set(val *MicrosoftGraphRiskDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphRiskDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphRiskDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphRiskDetail(val *MicrosoftGraphRiskDetail) *NullableMicrosoftGraphRiskDetail {
	return &NullableMicrosoftGraphRiskDetail{value: val, isSet: true}
}

func (v NullableMicrosoftGraphRiskDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphRiskDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

