/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// UsersMailFolderApiService UsersMailFolderApi service
type UsersMailFolderApiService service

type ApiUsersCreateMailFoldersRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	microsoftGraphMailFolder *MicrosoftGraphMailFolder
}

// New navigation property
func (r ApiUsersCreateMailFoldersRequest) MicrosoftGraphMailFolder(microsoftGraphMailFolder MicrosoftGraphMailFolder) ApiUsersCreateMailFoldersRequest {
	r.microsoftGraphMailFolder = &microsoftGraphMailFolder
	return r
}

func (r ApiUsersCreateMailFoldersRequest) Execute() (MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	return r.ApiService.UsersCreateMailFoldersExecute(r)
}

/*
UsersCreateMailFolders Create new navigation property to mailFolders for users

The user's mail folders. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersCreateMailFoldersRequest
*/
func (a *UsersMailFolderApiService) UsersCreateMailFolders(ctx _context.Context, userId string) ApiUsersCreateMailFoldersRequest {
	return ApiUsersCreateMailFoldersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMailFolder
func (a *UsersMailFolderApiService) UsersCreateMailFoldersExecute(r ApiUsersCreateMailFoldersRequest) (MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMailFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersCreateMailFolders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMailFolder == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphMailFolder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMailFolder
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersDeleteMailFoldersRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	ifMatch *string
}

// ETag
func (r ApiUsersDeleteMailFoldersRequest) IfMatch(ifMatch string) ApiUsersDeleteMailFoldersRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersDeleteMailFoldersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersDeleteMailFoldersExecute(r)
}

/*
UsersDeleteMailFolders Delete navigation property mailFolders for users

The user's mail folders. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersDeleteMailFoldersRequest
*/
func (a *UsersMailFolderApiService) UsersDeleteMailFolders(ctx _context.Context, userId string, mailFolderId string) ApiUsersDeleteMailFoldersRequest {
	return ApiUsersDeleteMailFoldersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersDeleteMailFoldersExecute(r ApiUsersDeleteMailFoldersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersDeleteMailFolders")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersGetMailFoldersRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	select_ *[]string
}

// Select properties to be returned
func (r ApiUsersGetMailFoldersRequest) Select_(select_ []string) ApiUsersGetMailFoldersRequest {
	r.select_ = &select_
	return r
}

func (r ApiUsersGetMailFoldersRequest) Execute() (MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	return r.ApiService.UsersGetMailFoldersExecute(r)
}

/*
UsersGetMailFolders Get mailFolders from users

The user's mail folders. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersGetMailFoldersRequest
*/
func (a *UsersMailFolderApiService) UsersGetMailFolders(ctx _context.Context, userId string, mailFolderId string) ApiUsersGetMailFoldersRequest {
	return ApiUsersGetMailFoldersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMailFolder
func (a *UsersMailFolderApiService) UsersGetMailFoldersExecute(r ApiUsersGetMailFoldersRequest) (MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMailFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersGetMailFolders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersListMailFoldersRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	top *int32
	skip *int32
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
}

// Show only the first n items
func (r ApiUsersListMailFoldersRequest) Top(top int32) ApiUsersListMailFoldersRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersListMailFoldersRequest) Skip(skip int32) ApiUsersListMailFoldersRequest {
	r.skip = &skip
	return r
}
// Filter items by property values
func (r ApiUsersListMailFoldersRequest) Filter(filter string) ApiUsersListMailFoldersRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersListMailFoldersRequest) Count(count bool) ApiUsersListMailFoldersRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersListMailFoldersRequest) Orderby(orderby []string) ApiUsersListMailFoldersRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersListMailFoldersRequest) Select_(select_ []string) ApiUsersListMailFoldersRequest {
	r.select_ = &select_
	return r
}

func (r ApiUsersListMailFoldersRequest) Execute() (CollectionOfMailFolder, *_nethttp.Response, error) {
	return r.ApiService.UsersListMailFoldersExecute(r)
}

/*
UsersListMailFolders Get mailFolders from users

The user's mail folders. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersListMailFoldersRequest
*/
func (a *UsersMailFolderApiService) UsersListMailFolders(ctx _context.Context, userId string) ApiUsersListMailFoldersRequest {
	return ApiUsersListMailFoldersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfMailFolder
func (a *UsersMailFolderApiService) UsersListMailFoldersExecute(r ApiUsersListMailFoldersRequest) (CollectionOfMailFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfMailFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersListMailFolders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersCreateChildFoldersRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	microsoftGraphMailFolder *MicrosoftGraphMailFolder
}

// New navigation property
func (r ApiUsersMailFoldersCreateChildFoldersRequest) MicrosoftGraphMailFolder(microsoftGraphMailFolder MicrosoftGraphMailFolder) ApiUsersMailFoldersCreateChildFoldersRequest {
	r.microsoftGraphMailFolder = &microsoftGraphMailFolder
	return r
}

func (r ApiUsersMailFoldersCreateChildFoldersRequest) Execute() (MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersCreateChildFoldersExecute(r)
}

/*
UsersMailFoldersCreateChildFolders Create new navigation property to childFolders for users

The collection of child folders in the mailFolder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersMailFoldersCreateChildFoldersRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersCreateChildFolders(ctx _context.Context, userId string, mailFolderId string) ApiUsersMailFoldersCreateChildFoldersRequest {
	return ApiUsersMailFoldersCreateChildFoldersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMailFolder
func (a *UsersMailFolderApiService) UsersMailFoldersCreateChildFoldersExecute(r ApiUsersMailFoldersCreateChildFoldersRequest) (MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMailFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersCreateChildFolders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/childFolders"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMailFolder == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphMailFolder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMailFolder
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersCreateMessageRulesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	microsoftGraphMessageRule *MicrosoftGraphMessageRule
}

// New navigation property
func (r ApiUsersMailFoldersCreateMessageRulesRequest) MicrosoftGraphMessageRule(microsoftGraphMessageRule MicrosoftGraphMessageRule) ApiUsersMailFoldersCreateMessageRulesRequest {
	r.microsoftGraphMessageRule = &microsoftGraphMessageRule
	return r
}

func (r ApiUsersMailFoldersCreateMessageRulesRequest) Execute() (MicrosoftGraphMessageRule, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersCreateMessageRulesExecute(r)
}

/*
UsersMailFoldersCreateMessageRules Create new navigation property to messageRules for users

The collection of rules that apply to the user's Inbox folder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersMailFoldersCreateMessageRulesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersCreateMessageRules(ctx _context.Context, userId string, mailFolderId string) ApiUsersMailFoldersCreateMessageRulesRequest {
	return ApiUsersMailFoldersCreateMessageRulesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMessageRule
func (a *UsersMailFolderApiService) UsersMailFoldersCreateMessageRulesExecute(r ApiUsersMailFoldersCreateMessageRulesRequest) (MicrosoftGraphMessageRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMessageRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersCreateMessageRules")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messageRules"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMessageRule == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphMessageRule is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMessageRule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersCreateMessagesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	microsoftGraphMessage *MicrosoftGraphMessage
}

// New navigation property
func (r ApiUsersMailFoldersCreateMessagesRequest) MicrosoftGraphMessage(microsoftGraphMessage MicrosoftGraphMessage) ApiUsersMailFoldersCreateMessagesRequest {
	r.microsoftGraphMessage = &microsoftGraphMessage
	return r
}

func (r ApiUsersMailFoldersCreateMessagesRequest) Execute() (MicrosoftGraphMessage, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersCreateMessagesExecute(r)
}

/*
UsersMailFoldersCreateMessages Create new navigation property to messages for users

The collection of messages in the mailFolder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersMailFoldersCreateMessagesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersCreateMessages(ctx _context.Context, userId string, mailFolderId string) ApiUsersMailFoldersCreateMessagesRequest {
	return ApiUsersMailFoldersCreateMessagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMessage
func (a *UsersMailFolderApiService) UsersMailFoldersCreateMessagesExecute(r ApiUsersMailFoldersCreateMessagesRequest) (MicrosoftGraphMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersCreateMessages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMessage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphMessage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMessage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersCreateMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	microsoftGraphMultiValueLegacyExtendedProperty *MicrosoftGraphMultiValueLegacyExtendedProperty
}

// New navigation property
func (r ApiUsersMailFoldersCreateMultiValueExtendedPropertiesRequest) MicrosoftGraphMultiValueLegacyExtendedProperty(microsoftGraphMultiValueLegacyExtendedProperty MicrosoftGraphMultiValueLegacyExtendedProperty) ApiUsersMailFoldersCreateMultiValueExtendedPropertiesRequest {
	r.microsoftGraphMultiValueLegacyExtendedProperty = &microsoftGraphMultiValueLegacyExtendedProperty
	return r
}

func (r ApiUsersMailFoldersCreateMultiValueExtendedPropertiesRequest) Execute() (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersCreateMultiValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersCreateMultiValueExtendedProperties Create new navigation property to multiValueExtendedProperties for users

The collection of multi-value extended properties defined for the mailFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersMailFoldersCreateMultiValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersCreateMultiValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string) ApiUsersMailFoldersCreateMultiValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersCreateMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMultiValueLegacyExtendedProperty
func (a *UsersMailFolderApiService) UsersMailFoldersCreateMultiValueExtendedPropertiesExecute(r ApiUsersMailFoldersCreateMultiValueExtendedPropertiesRequest) (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMultiValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersCreateMultiValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/multiValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMultiValueLegacyExtendedProperty == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphMultiValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMultiValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersCreateSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	microsoftGraphSingleValueLegacyExtendedProperty *MicrosoftGraphSingleValueLegacyExtendedProperty
}

// New navigation property
func (r ApiUsersMailFoldersCreateSingleValueExtendedPropertiesRequest) MicrosoftGraphSingleValueLegacyExtendedProperty(microsoftGraphSingleValueLegacyExtendedProperty MicrosoftGraphSingleValueLegacyExtendedProperty) ApiUsersMailFoldersCreateSingleValueExtendedPropertiesRequest {
	r.microsoftGraphSingleValueLegacyExtendedProperty = &microsoftGraphSingleValueLegacyExtendedProperty
	return r
}

func (r ApiUsersMailFoldersCreateSingleValueExtendedPropertiesRequest) Execute() (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersCreateSingleValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersCreateSingleValueExtendedProperties Create new navigation property to singleValueExtendedProperties for users

The collection of single-value extended properties defined for the mailFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersMailFoldersCreateSingleValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersCreateSingleValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string) ApiUsersMailFoldersCreateSingleValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersCreateSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSingleValueLegacyExtendedProperty
func (a *UsersMailFolderApiService) UsersMailFoldersCreateSingleValueExtendedPropertiesExecute(r ApiUsersMailFoldersCreateSingleValueExtendedPropertiesRequest) (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSingleValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersCreateSingleValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/singleValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSingleValueLegacyExtendedProperty == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSingleValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSingleValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersDeleteChildFoldersRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	mailFolderId1 string
	ifMatch *string
}

// ETag
func (r ApiUsersMailFoldersDeleteChildFoldersRequest) IfMatch(ifMatch string) ApiUsersMailFoldersDeleteChildFoldersRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersMailFoldersDeleteChildFoldersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersDeleteChildFoldersExecute(r)
}

/*
UsersMailFoldersDeleteChildFolders Delete navigation property childFolders for users

The collection of child folders in the mailFolder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param mailFolderId1 key: id of mailFolder
 @return ApiUsersMailFoldersDeleteChildFoldersRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersDeleteChildFolders(ctx _context.Context, userId string, mailFolderId string, mailFolderId1 string) ApiUsersMailFoldersDeleteChildFoldersRequest {
	return ApiUsersMailFoldersDeleteChildFoldersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		mailFolderId1: mailFolderId1,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersDeleteChildFoldersExecute(r ApiUsersMailFoldersDeleteChildFoldersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersDeleteChildFolders")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/childFolders/{mailFolder-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id1"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersDeleteMessageRulesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageRuleId string
	ifMatch *string
}

// ETag
func (r ApiUsersMailFoldersDeleteMessageRulesRequest) IfMatch(ifMatch string) ApiUsersMailFoldersDeleteMessageRulesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersMailFoldersDeleteMessageRulesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersDeleteMessageRulesExecute(r)
}

/*
UsersMailFoldersDeleteMessageRules Delete navigation property messageRules for users

The collection of rules that apply to the user's Inbox folder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageRuleId key: id of messageRule
 @return ApiUsersMailFoldersDeleteMessageRulesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersDeleteMessageRules(ctx _context.Context, userId string, mailFolderId string, messageRuleId string) ApiUsersMailFoldersDeleteMessageRulesRequest {
	return ApiUsersMailFoldersDeleteMessageRulesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageRuleId: messageRuleId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersDeleteMessageRulesExecute(r ApiUsersMailFoldersDeleteMessageRulesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersDeleteMessageRules")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messageRules/{messageRule-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"messageRule-id"+"}", _neturl.PathEscape(parameterToString(r.messageRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersDeleteMessagesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	ifMatch *string
}

// ETag
func (r ApiUsersMailFoldersDeleteMessagesRequest) IfMatch(ifMatch string) ApiUsersMailFoldersDeleteMessagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersMailFoldersDeleteMessagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersDeleteMessagesExecute(r)
}

/*
UsersMailFoldersDeleteMessages Delete navigation property messages for users

The collection of messages in the mailFolder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @return ApiUsersMailFoldersDeleteMessagesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersDeleteMessages(ctx _context.Context, userId string, mailFolderId string, messageId string) ApiUsersMailFoldersDeleteMessagesRequest {
	return ApiUsersMailFoldersDeleteMessagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersDeleteMessagesExecute(r ApiUsersMailFoldersDeleteMessagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersDeleteMessages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersDeleteMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	multiValueLegacyExtendedPropertyId string
	ifMatch *string
}

// ETag
func (r ApiUsersMailFoldersDeleteMultiValueExtendedPropertiesRequest) IfMatch(ifMatch string) ApiUsersMailFoldersDeleteMultiValueExtendedPropertiesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersMailFoldersDeleteMultiValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersDeleteMultiValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersDeleteMultiValueExtendedProperties Delete navigation property multiValueExtendedProperties for users

The collection of multi-value extended properties defined for the mailFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty
 @return ApiUsersMailFoldersDeleteMultiValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersDeleteMultiValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, multiValueLegacyExtendedPropertyId string) ApiUsersMailFoldersDeleteMultiValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersDeleteMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		multiValueLegacyExtendedPropertyId: multiValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersDeleteMultiValueExtendedPropertiesExecute(r ApiUsersMailFoldersDeleteMultiValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersDeleteMultiValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"multiValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.multiValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersDeleteSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	singleValueLegacyExtendedPropertyId string
	ifMatch *string
}

// ETag
func (r ApiUsersMailFoldersDeleteSingleValueExtendedPropertiesRequest) IfMatch(ifMatch string) ApiUsersMailFoldersDeleteSingleValueExtendedPropertiesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersMailFoldersDeleteSingleValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersDeleteSingleValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersDeleteSingleValueExtendedProperties Delete navigation property singleValueExtendedProperties for users

The collection of single-value extended properties defined for the mailFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty
 @return ApiUsersMailFoldersDeleteSingleValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersDeleteSingleValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, singleValueLegacyExtendedPropertyId string) ApiUsersMailFoldersDeleteSingleValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersDeleteSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		singleValueLegacyExtendedPropertyId: singleValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersDeleteSingleValueExtendedPropertiesExecute(r ApiUsersMailFoldersDeleteSingleValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersDeleteSingleValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"singleValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.singleValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersGetChildFoldersRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	mailFolderId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersMailFoldersGetChildFoldersRequest) Select_(select_ []string) ApiUsersMailFoldersGetChildFoldersRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersGetChildFoldersRequest) Expand(expand []string) ApiUsersMailFoldersGetChildFoldersRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersGetChildFoldersRequest) Execute() (MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersGetChildFoldersExecute(r)
}

/*
UsersMailFoldersGetChildFolders Get childFolders from users

The collection of child folders in the mailFolder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param mailFolderId1 key: id of mailFolder
 @return ApiUsersMailFoldersGetChildFoldersRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersGetChildFolders(ctx _context.Context, userId string, mailFolderId string, mailFolderId1 string) ApiUsersMailFoldersGetChildFoldersRequest {
	return ApiUsersMailFoldersGetChildFoldersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		mailFolderId1: mailFolderId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMailFolder
func (a *UsersMailFolderApiService) UsersMailFoldersGetChildFoldersExecute(r ApiUsersMailFoldersGetChildFoldersRequest) (MicrosoftGraphMailFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMailFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersGetChildFolders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/childFolders/{mailFolder-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id1"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersGetMessageRulesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageRuleId string
	select_ *[]string
}

// Select properties to be returned
func (r ApiUsersMailFoldersGetMessageRulesRequest) Select_(select_ []string) ApiUsersMailFoldersGetMessageRulesRequest {
	r.select_ = &select_
	return r
}

func (r ApiUsersMailFoldersGetMessageRulesRequest) Execute() (MicrosoftGraphMessageRule, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersGetMessageRulesExecute(r)
}

/*
UsersMailFoldersGetMessageRules Get messageRules from users

The collection of rules that apply to the user's Inbox folder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageRuleId key: id of messageRule
 @return ApiUsersMailFoldersGetMessageRulesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersGetMessageRules(ctx _context.Context, userId string, mailFolderId string, messageRuleId string) ApiUsersMailFoldersGetMessageRulesRequest {
	return ApiUsersMailFoldersGetMessageRulesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageRuleId: messageRuleId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMessageRule
func (a *UsersMailFolderApiService) UsersMailFoldersGetMessageRulesExecute(r ApiUsersMailFoldersGetMessageRulesRequest) (MicrosoftGraphMessageRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMessageRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersGetMessageRules")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messageRules/{messageRule-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"messageRule-id"+"}", _neturl.PathEscape(parameterToString(r.messageRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersGetMessagesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersMailFoldersGetMessagesRequest) Select_(select_ []string) ApiUsersMailFoldersGetMessagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersGetMessagesRequest) Expand(expand []string) ApiUsersMailFoldersGetMessagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersGetMessagesRequest) Execute() (MicrosoftGraphMessage, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersGetMessagesExecute(r)
}

/*
UsersMailFoldersGetMessages Get messages from users

The collection of messages in the mailFolder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @return ApiUsersMailFoldersGetMessagesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersGetMessages(ctx _context.Context, userId string, mailFolderId string, messageId string) ApiUsersMailFoldersGetMessagesRequest {
	return ApiUsersMailFoldersGetMessagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMessage
func (a *UsersMailFolderApiService) UsersMailFoldersGetMessagesExecute(r ApiUsersMailFoldersGetMessagesRequest) (MicrosoftGraphMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersGetMessages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersGetMessagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
}


func (r ApiUsersMailFoldersGetMessagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersGetMessagesContentExecute(r)
}

/*
UsersMailFoldersGetMessagesContent Get media content for the navigation property messages from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @return ApiUsersMailFoldersGetMessagesContentRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersGetMessagesContent(ctx _context.Context, userId string, mailFolderId string, messageId string) ApiUsersMailFoldersGetMessagesContentRequest {
	return ApiUsersMailFoldersGetMessagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *UsersMailFolderApiService) UsersMailFoldersGetMessagesContentExecute(r ApiUsersMailFoldersGetMessagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersGetMessagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/$value"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersGetMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	multiValueLegacyExtendedPropertyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersMailFoldersGetMultiValueExtendedPropertiesRequest) Select_(select_ []string) ApiUsersMailFoldersGetMultiValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersGetMultiValueExtendedPropertiesRequest) Expand(expand []string) ApiUsersMailFoldersGetMultiValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersGetMultiValueExtendedPropertiesRequest) Execute() (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersGetMultiValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersGetMultiValueExtendedProperties Get multiValueExtendedProperties from users

The collection of multi-value extended properties defined for the mailFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty
 @return ApiUsersMailFoldersGetMultiValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersGetMultiValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, multiValueLegacyExtendedPropertyId string) ApiUsersMailFoldersGetMultiValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersGetMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		multiValueLegacyExtendedPropertyId: multiValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMultiValueLegacyExtendedProperty
func (a *UsersMailFolderApiService) UsersMailFoldersGetMultiValueExtendedPropertiesExecute(r ApiUsersMailFoldersGetMultiValueExtendedPropertiesRequest) (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMultiValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersGetMultiValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"multiValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.multiValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersGetSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	singleValueLegacyExtendedPropertyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersMailFoldersGetSingleValueExtendedPropertiesRequest) Select_(select_ []string) ApiUsersMailFoldersGetSingleValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersGetSingleValueExtendedPropertiesRequest) Expand(expand []string) ApiUsersMailFoldersGetSingleValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersGetSingleValueExtendedPropertiesRequest) Execute() (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersGetSingleValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersGetSingleValueExtendedProperties Get singleValueExtendedProperties from users

The collection of single-value extended properties defined for the mailFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty
 @return ApiUsersMailFoldersGetSingleValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersGetSingleValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, singleValueLegacyExtendedPropertyId string) ApiUsersMailFoldersGetSingleValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersGetSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		singleValueLegacyExtendedPropertyId: singleValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSingleValueLegacyExtendedProperty
func (a *UsersMailFolderApiService) UsersMailFoldersGetSingleValueExtendedPropertiesExecute(r ApiUsersMailFoldersGetSingleValueExtendedPropertiesRequest) (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSingleValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersGetSingleValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"singleValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.singleValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersListChildFoldersRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	top *int32
	skip *int32
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersMailFoldersListChildFoldersRequest) Top(top int32) ApiUsersMailFoldersListChildFoldersRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersMailFoldersListChildFoldersRequest) Skip(skip int32) ApiUsersMailFoldersListChildFoldersRequest {
	r.skip = &skip
	return r
}
// Filter items by property values
func (r ApiUsersMailFoldersListChildFoldersRequest) Filter(filter string) ApiUsersMailFoldersListChildFoldersRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersMailFoldersListChildFoldersRequest) Count(count bool) ApiUsersMailFoldersListChildFoldersRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersMailFoldersListChildFoldersRequest) Orderby(orderby []string) ApiUsersMailFoldersListChildFoldersRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersMailFoldersListChildFoldersRequest) Select_(select_ []string) ApiUsersMailFoldersListChildFoldersRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersListChildFoldersRequest) Expand(expand []string) ApiUsersMailFoldersListChildFoldersRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersListChildFoldersRequest) Execute() (CollectionOfMailFolder, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersListChildFoldersExecute(r)
}

/*
UsersMailFoldersListChildFolders Get childFolders from users

The collection of child folders in the mailFolder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersMailFoldersListChildFoldersRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersListChildFolders(ctx _context.Context, userId string, mailFolderId string) ApiUsersMailFoldersListChildFoldersRequest {
	return ApiUsersMailFoldersListChildFoldersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return CollectionOfMailFolder
func (a *UsersMailFolderApiService) UsersMailFoldersListChildFoldersExecute(r ApiUsersMailFoldersListChildFoldersRequest) (CollectionOfMailFolder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfMailFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersListChildFolders")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/childFolders"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersListMessageRulesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	top *int32
	skip *int32
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
}

// Show only the first n items
func (r ApiUsersMailFoldersListMessageRulesRequest) Top(top int32) ApiUsersMailFoldersListMessageRulesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersMailFoldersListMessageRulesRequest) Skip(skip int32) ApiUsersMailFoldersListMessageRulesRequest {
	r.skip = &skip
	return r
}
// Filter items by property values
func (r ApiUsersMailFoldersListMessageRulesRequest) Filter(filter string) ApiUsersMailFoldersListMessageRulesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersMailFoldersListMessageRulesRequest) Count(count bool) ApiUsersMailFoldersListMessageRulesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersMailFoldersListMessageRulesRequest) Orderby(orderby []string) ApiUsersMailFoldersListMessageRulesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersMailFoldersListMessageRulesRequest) Select_(select_ []string) ApiUsersMailFoldersListMessageRulesRequest {
	r.select_ = &select_
	return r
}

func (r ApiUsersMailFoldersListMessageRulesRequest) Execute() (CollectionOfMessageRule, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersListMessageRulesExecute(r)
}

/*
UsersMailFoldersListMessageRules Get messageRules from users

The collection of rules that apply to the user's Inbox folder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersMailFoldersListMessageRulesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersListMessageRules(ctx _context.Context, userId string, mailFolderId string) ApiUsersMailFoldersListMessageRulesRequest {
	return ApiUsersMailFoldersListMessageRulesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return CollectionOfMessageRule
func (a *UsersMailFolderApiService) UsersMailFoldersListMessageRulesExecute(r ApiUsersMailFoldersListMessageRulesRequest) (CollectionOfMessageRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfMessageRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersListMessageRules")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messageRules"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersListMessagesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersMailFoldersListMessagesRequest) Top(top int32) ApiUsersMailFoldersListMessagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersMailFoldersListMessagesRequest) Skip(skip int32) ApiUsersMailFoldersListMessagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersMailFoldersListMessagesRequest) Search(search string) ApiUsersMailFoldersListMessagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersMailFoldersListMessagesRequest) Filter(filter string) ApiUsersMailFoldersListMessagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersMailFoldersListMessagesRequest) Count(count bool) ApiUsersMailFoldersListMessagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersMailFoldersListMessagesRequest) Orderby(orderby []string) ApiUsersMailFoldersListMessagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersMailFoldersListMessagesRequest) Select_(select_ []string) ApiUsersMailFoldersListMessagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersListMessagesRequest) Expand(expand []string) ApiUsersMailFoldersListMessagesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersListMessagesRequest) Execute() (CollectionOfMessage, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersListMessagesExecute(r)
}

/*
UsersMailFoldersListMessages Get messages from users

The collection of messages in the mailFolder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersMailFoldersListMessagesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersListMessages(ctx _context.Context, userId string, mailFolderId string) ApiUsersMailFoldersListMessagesRequest {
	return ApiUsersMailFoldersListMessagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return CollectionOfMessage
func (a *UsersMailFolderApiService) UsersMailFoldersListMessagesExecute(r ApiUsersMailFoldersListMessagesRequest) (CollectionOfMessage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersListMessages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest) Top(top int32) ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest) Skip(skip int32) ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest) Search(search string) ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest) Filter(filter string) ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest) Count(count bool) ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest) Orderby(orderby []string) ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest) Select_(select_ []string) ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest) Expand(expand []string) ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest) Execute() (CollectionOfMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersListMultiValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersListMultiValueExtendedProperties Get multiValueExtendedProperties from users

The collection of multi-value extended properties defined for the mailFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersListMultiValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string) ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return CollectionOfMultiValueLegacyExtendedProperty
func (a *UsersMailFolderApiService) UsersMailFoldersListMultiValueExtendedPropertiesExecute(r ApiUsersMailFoldersListMultiValueExtendedPropertiesRequest) (CollectionOfMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfMultiValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersListMultiValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/multiValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest) Top(top int32) ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest) Skip(skip int32) ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest) Search(search string) ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest) Filter(filter string) ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest) Count(count bool) ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest) Orderby(orderby []string) ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest) Select_(select_ []string) ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest) Expand(expand []string) ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest) Execute() (CollectionOfSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersListSingleValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersListSingleValueExtendedProperties Get singleValueExtendedProperties from users

The collection of single-value extended properties defined for the mailFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersListSingleValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string) ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
//  @return CollectionOfSingleValueLegacyExtendedProperty
func (a *UsersMailFolderApiService) UsersMailFoldersListSingleValueExtendedPropertiesExecute(r ApiUsersMailFoldersListSingleValueExtendedPropertiesRequest) (CollectionOfSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSingleValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersListSingleValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/singleValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesCreateAttachmentsRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	microsoftGraphAttachment *MicrosoftGraphAttachment
}

// New navigation property
func (r ApiUsersMailFoldersMessagesCreateAttachmentsRequest) MicrosoftGraphAttachment(microsoftGraphAttachment MicrosoftGraphAttachment) ApiUsersMailFoldersMessagesCreateAttachmentsRequest {
	r.microsoftGraphAttachment = &microsoftGraphAttachment
	return r
}

func (r ApiUsersMailFoldersMessagesCreateAttachmentsRequest) Execute() (MicrosoftGraphAttachment, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesCreateAttachmentsExecute(r)
}

/*
UsersMailFoldersMessagesCreateAttachments Create new navigation property to attachments for users

The fileAttachment and itemAttachment attachments for the message.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @return ApiUsersMailFoldersMessagesCreateAttachmentsRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesCreateAttachments(ctx _context.Context, userId string, mailFolderId string, messageId string) ApiUsersMailFoldersMessagesCreateAttachmentsRequest {
	return ApiUsersMailFoldersMessagesCreateAttachmentsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAttachment
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesCreateAttachmentsExecute(r ApiUsersMailFoldersMessagesCreateAttachmentsRequest) (MicrosoftGraphAttachment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesCreateAttachments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAttachment == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAttachment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAttachment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesCreateExtensionsRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	microsoftGraphExtension *MicrosoftGraphExtension
}

// New navigation property
func (r ApiUsersMailFoldersMessagesCreateExtensionsRequest) MicrosoftGraphExtension(microsoftGraphExtension MicrosoftGraphExtension) ApiUsersMailFoldersMessagesCreateExtensionsRequest {
	r.microsoftGraphExtension = &microsoftGraphExtension
	return r
}

func (r ApiUsersMailFoldersMessagesCreateExtensionsRequest) Execute() (MicrosoftGraphExtension, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesCreateExtensionsExecute(r)
}

/*
UsersMailFoldersMessagesCreateExtensions Create new navigation property to extensions for users

The collection of open extensions defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @return ApiUsersMailFoldersMessagesCreateExtensionsRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesCreateExtensions(ctx _context.Context, userId string, mailFolderId string, messageId string) ApiUsersMailFoldersMessagesCreateExtensionsRequest {
	return ApiUsersMailFoldersMessagesCreateExtensionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphExtension
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesCreateExtensionsExecute(r ApiUsersMailFoldersMessagesCreateExtensionsRequest) (MicrosoftGraphExtension, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphExtension
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesCreateExtensions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/extensions"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphExtension == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphExtension is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphExtension
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesCreateMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	microsoftGraphMultiValueLegacyExtendedProperty *MicrosoftGraphMultiValueLegacyExtendedProperty
}

// New navigation property
func (r ApiUsersMailFoldersMessagesCreateMultiValueExtendedPropertiesRequest) MicrosoftGraphMultiValueLegacyExtendedProperty(microsoftGraphMultiValueLegacyExtendedProperty MicrosoftGraphMultiValueLegacyExtendedProperty) ApiUsersMailFoldersMessagesCreateMultiValueExtendedPropertiesRequest {
	r.microsoftGraphMultiValueLegacyExtendedProperty = &microsoftGraphMultiValueLegacyExtendedProperty
	return r
}

func (r ApiUsersMailFoldersMessagesCreateMultiValueExtendedPropertiesRequest) Execute() (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesCreateMultiValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersMessagesCreateMultiValueExtendedProperties Create new navigation property to multiValueExtendedProperties for users

The collection of multi-value extended properties defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @return ApiUsersMailFoldersMessagesCreateMultiValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesCreateMultiValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, messageId string) ApiUsersMailFoldersMessagesCreateMultiValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersMessagesCreateMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMultiValueLegacyExtendedProperty
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesCreateMultiValueExtendedPropertiesExecute(r ApiUsersMailFoldersMessagesCreateMultiValueExtendedPropertiesRequest) (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMultiValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesCreateMultiValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/multiValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMultiValueLegacyExtendedProperty == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphMultiValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMultiValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesCreateSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	microsoftGraphSingleValueLegacyExtendedProperty *MicrosoftGraphSingleValueLegacyExtendedProperty
}

// New navigation property
func (r ApiUsersMailFoldersMessagesCreateSingleValueExtendedPropertiesRequest) MicrosoftGraphSingleValueLegacyExtendedProperty(microsoftGraphSingleValueLegacyExtendedProperty MicrosoftGraphSingleValueLegacyExtendedProperty) ApiUsersMailFoldersMessagesCreateSingleValueExtendedPropertiesRequest {
	r.microsoftGraphSingleValueLegacyExtendedProperty = &microsoftGraphSingleValueLegacyExtendedProperty
	return r
}

func (r ApiUsersMailFoldersMessagesCreateSingleValueExtendedPropertiesRequest) Execute() (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesCreateSingleValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersMessagesCreateSingleValueExtendedProperties Create new navigation property to singleValueExtendedProperties for users

The collection of single-value extended properties defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @return ApiUsersMailFoldersMessagesCreateSingleValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesCreateSingleValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, messageId string) ApiUsersMailFoldersMessagesCreateSingleValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersMessagesCreateSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSingleValueLegacyExtendedProperty
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesCreateSingleValueExtendedPropertiesExecute(r ApiUsersMailFoldersMessagesCreateSingleValueExtendedPropertiesRequest) (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSingleValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesCreateSingleValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/singleValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSingleValueLegacyExtendedProperty == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSingleValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSingleValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesDeleteAttachmentsRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	attachmentId string
	ifMatch *string
}

// ETag
func (r ApiUsersMailFoldersMessagesDeleteAttachmentsRequest) IfMatch(ifMatch string) ApiUsersMailFoldersMessagesDeleteAttachmentsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersMailFoldersMessagesDeleteAttachmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesDeleteAttachmentsExecute(r)
}

/*
UsersMailFoldersMessagesDeleteAttachments Delete navigation property attachments for users

The fileAttachment and itemAttachment attachments for the message.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @param attachmentId key: id of attachment
 @return ApiUsersMailFoldersMessagesDeleteAttachmentsRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesDeleteAttachments(ctx _context.Context, userId string, mailFolderId string, messageId string, attachmentId string) ApiUsersMailFoldersMessagesDeleteAttachmentsRequest {
	return ApiUsersMailFoldersMessagesDeleteAttachmentsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
		attachmentId: attachmentId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesDeleteAttachmentsExecute(r ApiUsersMailFoldersMessagesDeleteAttachmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesDeleteAttachments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/attachments/{attachment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attachment-id"+"}", _neturl.PathEscape(parameterToString(r.attachmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesDeleteExtensionsRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	extensionId string
	ifMatch *string
}

// ETag
func (r ApiUsersMailFoldersMessagesDeleteExtensionsRequest) IfMatch(ifMatch string) ApiUsersMailFoldersMessagesDeleteExtensionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersMailFoldersMessagesDeleteExtensionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesDeleteExtensionsExecute(r)
}

/*
UsersMailFoldersMessagesDeleteExtensions Delete navigation property extensions for users

The collection of open extensions defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @param extensionId key: id of extension
 @return ApiUsersMailFoldersMessagesDeleteExtensionsRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesDeleteExtensions(ctx _context.Context, userId string, mailFolderId string, messageId string, extensionId string) ApiUsersMailFoldersMessagesDeleteExtensionsRequest {
	return ApiUsersMailFoldersMessagesDeleteExtensionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
		extensionId: extensionId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesDeleteExtensionsExecute(r ApiUsersMailFoldersMessagesDeleteExtensionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesDeleteExtensions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/extensions/{extension-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extension-id"+"}", _neturl.PathEscape(parameterToString(r.extensionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesDeleteMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	multiValueLegacyExtendedPropertyId string
	ifMatch *string
}

// ETag
func (r ApiUsersMailFoldersMessagesDeleteMultiValueExtendedPropertiesRequest) IfMatch(ifMatch string) ApiUsersMailFoldersMessagesDeleteMultiValueExtendedPropertiesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersMailFoldersMessagesDeleteMultiValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesDeleteMultiValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersMessagesDeleteMultiValueExtendedProperties Delete navigation property multiValueExtendedProperties for users

The collection of multi-value extended properties defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty
 @return ApiUsersMailFoldersMessagesDeleteMultiValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesDeleteMultiValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, messageId string, multiValueLegacyExtendedPropertyId string) ApiUsersMailFoldersMessagesDeleteMultiValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersMessagesDeleteMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
		multiValueLegacyExtendedPropertyId: multiValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesDeleteMultiValueExtendedPropertiesExecute(r ApiUsersMailFoldersMessagesDeleteMultiValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesDeleteMultiValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"multiValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.multiValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesDeleteSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	singleValueLegacyExtendedPropertyId string
	ifMatch *string
}

// ETag
func (r ApiUsersMailFoldersMessagesDeleteSingleValueExtendedPropertiesRequest) IfMatch(ifMatch string) ApiUsersMailFoldersMessagesDeleteSingleValueExtendedPropertiesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersMailFoldersMessagesDeleteSingleValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesDeleteSingleValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersMessagesDeleteSingleValueExtendedProperties Delete navigation property singleValueExtendedProperties for users

The collection of single-value extended properties defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty
 @return ApiUsersMailFoldersMessagesDeleteSingleValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesDeleteSingleValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, messageId string, singleValueLegacyExtendedPropertyId string) ApiUsersMailFoldersMessagesDeleteSingleValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersMessagesDeleteSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
		singleValueLegacyExtendedPropertyId: singleValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesDeleteSingleValueExtendedPropertiesExecute(r ApiUsersMailFoldersMessagesDeleteSingleValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesDeleteSingleValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"singleValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.singleValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesGetAttachmentsRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	attachmentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersMailFoldersMessagesGetAttachmentsRequest) Select_(select_ []string) ApiUsersMailFoldersMessagesGetAttachmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersMessagesGetAttachmentsRequest) Expand(expand []string) ApiUsersMailFoldersMessagesGetAttachmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersMessagesGetAttachmentsRequest) Execute() (MicrosoftGraphAttachment, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesGetAttachmentsExecute(r)
}

/*
UsersMailFoldersMessagesGetAttachments Get attachments from users

The fileAttachment and itemAttachment attachments for the message.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @param attachmentId key: id of attachment
 @return ApiUsersMailFoldersMessagesGetAttachmentsRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesGetAttachments(ctx _context.Context, userId string, mailFolderId string, messageId string, attachmentId string) ApiUsersMailFoldersMessagesGetAttachmentsRequest {
	return ApiUsersMailFoldersMessagesGetAttachmentsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
		attachmentId: attachmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAttachment
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesGetAttachmentsExecute(r ApiUsersMailFoldersMessagesGetAttachmentsRequest) (MicrosoftGraphAttachment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesGetAttachments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/attachments/{attachment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attachment-id"+"}", _neturl.PathEscape(parameterToString(r.attachmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesGetExtensionsRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	extensionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersMailFoldersMessagesGetExtensionsRequest) Select_(select_ []string) ApiUsersMailFoldersMessagesGetExtensionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersMessagesGetExtensionsRequest) Expand(expand []string) ApiUsersMailFoldersMessagesGetExtensionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersMessagesGetExtensionsRequest) Execute() (MicrosoftGraphExtension, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesGetExtensionsExecute(r)
}

/*
UsersMailFoldersMessagesGetExtensions Get extensions from users

The collection of open extensions defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @param extensionId key: id of extension
 @return ApiUsersMailFoldersMessagesGetExtensionsRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesGetExtensions(ctx _context.Context, userId string, mailFolderId string, messageId string, extensionId string) ApiUsersMailFoldersMessagesGetExtensionsRequest {
	return ApiUsersMailFoldersMessagesGetExtensionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
		extensionId: extensionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphExtension
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesGetExtensionsExecute(r ApiUsersMailFoldersMessagesGetExtensionsRequest) (MicrosoftGraphExtension, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphExtension
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesGetExtensions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/extensions/{extension-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extension-id"+"}", _neturl.PathEscape(parameterToString(r.extensionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesGetMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	multiValueLegacyExtendedPropertyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersMailFoldersMessagesGetMultiValueExtendedPropertiesRequest) Select_(select_ []string) ApiUsersMailFoldersMessagesGetMultiValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersMessagesGetMultiValueExtendedPropertiesRequest) Expand(expand []string) ApiUsersMailFoldersMessagesGetMultiValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersMessagesGetMultiValueExtendedPropertiesRequest) Execute() (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesGetMultiValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersMessagesGetMultiValueExtendedProperties Get multiValueExtendedProperties from users

The collection of multi-value extended properties defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty
 @return ApiUsersMailFoldersMessagesGetMultiValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesGetMultiValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, messageId string, multiValueLegacyExtendedPropertyId string) ApiUsersMailFoldersMessagesGetMultiValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersMessagesGetMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
		multiValueLegacyExtendedPropertyId: multiValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMultiValueLegacyExtendedProperty
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesGetMultiValueExtendedPropertiesExecute(r ApiUsersMailFoldersMessagesGetMultiValueExtendedPropertiesRequest) (MicrosoftGraphMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMultiValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesGetMultiValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"multiValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.multiValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesGetSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	singleValueLegacyExtendedPropertyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersMailFoldersMessagesGetSingleValueExtendedPropertiesRequest) Select_(select_ []string) ApiUsersMailFoldersMessagesGetSingleValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersMessagesGetSingleValueExtendedPropertiesRequest) Expand(expand []string) ApiUsersMailFoldersMessagesGetSingleValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersMessagesGetSingleValueExtendedPropertiesRequest) Execute() (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesGetSingleValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersMessagesGetSingleValueExtendedProperties Get singleValueExtendedProperties from users

The collection of single-value extended properties defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty
 @return ApiUsersMailFoldersMessagesGetSingleValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesGetSingleValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, messageId string, singleValueLegacyExtendedPropertyId string) ApiUsersMailFoldersMessagesGetSingleValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersMessagesGetSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
		singleValueLegacyExtendedPropertyId: singleValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSingleValueLegacyExtendedProperty
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesGetSingleValueExtendedPropertiesExecute(r ApiUsersMailFoldersMessagesGetSingleValueExtendedPropertiesRequest) (MicrosoftGraphSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSingleValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesGetSingleValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"singleValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.singleValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesListAttachmentsRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	top *int32
	skip *int32
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersMailFoldersMessagesListAttachmentsRequest) Top(top int32) ApiUsersMailFoldersMessagesListAttachmentsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersMailFoldersMessagesListAttachmentsRequest) Skip(skip int32) ApiUsersMailFoldersMessagesListAttachmentsRequest {
	r.skip = &skip
	return r
}
// Filter items by property values
func (r ApiUsersMailFoldersMessagesListAttachmentsRequest) Filter(filter string) ApiUsersMailFoldersMessagesListAttachmentsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersMailFoldersMessagesListAttachmentsRequest) Count(count bool) ApiUsersMailFoldersMessagesListAttachmentsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersMailFoldersMessagesListAttachmentsRequest) Orderby(orderby []string) ApiUsersMailFoldersMessagesListAttachmentsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersMailFoldersMessagesListAttachmentsRequest) Select_(select_ []string) ApiUsersMailFoldersMessagesListAttachmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersMessagesListAttachmentsRequest) Expand(expand []string) ApiUsersMailFoldersMessagesListAttachmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersMessagesListAttachmentsRequest) Execute() (CollectionOfAttachment, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesListAttachmentsExecute(r)
}

/*
UsersMailFoldersMessagesListAttachments Get attachments from users

The fileAttachment and itemAttachment attachments for the message.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @return ApiUsersMailFoldersMessagesListAttachmentsRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesListAttachments(ctx _context.Context, userId string, mailFolderId string, messageId string) ApiUsersMailFoldersMessagesListAttachmentsRequest {
	return ApiUsersMailFoldersMessagesListAttachmentsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return CollectionOfAttachment
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesListAttachmentsExecute(r ApiUsersMailFoldersMessagesListAttachmentsRequest) (CollectionOfAttachment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesListAttachments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesListExtensionsRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	top *int32
	skip *int32
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersMailFoldersMessagesListExtensionsRequest) Top(top int32) ApiUsersMailFoldersMessagesListExtensionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersMailFoldersMessagesListExtensionsRequest) Skip(skip int32) ApiUsersMailFoldersMessagesListExtensionsRequest {
	r.skip = &skip
	return r
}
// Filter items by property values
func (r ApiUsersMailFoldersMessagesListExtensionsRequest) Filter(filter string) ApiUsersMailFoldersMessagesListExtensionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersMailFoldersMessagesListExtensionsRequest) Count(count bool) ApiUsersMailFoldersMessagesListExtensionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersMailFoldersMessagesListExtensionsRequest) Orderby(orderby []string) ApiUsersMailFoldersMessagesListExtensionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersMailFoldersMessagesListExtensionsRequest) Select_(select_ []string) ApiUsersMailFoldersMessagesListExtensionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersMessagesListExtensionsRequest) Expand(expand []string) ApiUsersMailFoldersMessagesListExtensionsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersMessagesListExtensionsRequest) Execute() (CollectionOfExtension, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesListExtensionsExecute(r)
}

/*
UsersMailFoldersMessagesListExtensions Get extensions from users

The collection of open extensions defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @return ApiUsersMailFoldersMessagesListExtensionsRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesListExtensions(ctx _context.Context, userId string, mailFolderId string, messageId string) ApiUsersMailFoldersMessagesListExtensionsRequest {
	return ApiUsersMailFoldersMessagesListExtensionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return CollectionOfExtension
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesListExtensionsExecute(r ApiUsersMailFoldersMessagesListExtensionsRequest) (CollectionOfExtension, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfExtension
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesListExtensions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/extensions"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest) Top(top int32) ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest) Skip(skip int32) ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest) Search(search string) ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest) Filter(filter string) ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest) Count(count bool) ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest) Orderby(orderby []string) ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest) Select_(select_ []string) ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest) Expand(expand []string) ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest) Execute() (CollectionOfMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesListMultiValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersMessagesListMultiValueExtendedProperties Get multiValueExtendedProperties from users

The collection of multi-value extended properties defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @return ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesListMultiValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, messageId string) ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return CollectionOfMultiValueLegacyExtendedProperty
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesListMultiValueExtendedPropertiesExecute(r ApiUsersMailFoldersMessagesListMultiValueExtendedPropertiesRequest) (CollectionOfMultiValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfMultiValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesListMultiValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/multiValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest) Top(top int32) ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest) Skip(skip int32) ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest) Search(search string) ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest) Filter(filter string) ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest) Count(count bool) ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest) Orderby(orderby []string) ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest) Select_(select_ []string) ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest) Expand(expand []string) ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest) Execute() (CollectionOfSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesListSingleValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersMessagesListSingleValueExtendedProperties Get singleValueExtendedProperties from users

The collection of single-value extended properties defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @return ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesListSingleValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, messageId string) ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
	}
}

// Execute executes the request
//  @return CollectionOfSingleValueLegacyExtendedProperty
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesListSingleValueExtendedPropertiesExecute(r ApiUsersMailFoldersMessagesListSingleValueExtendedPropertiesRequest) (CollectionOfSingleValueLegacyExtendedProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSingleValueLegacyExtendedProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesListSingleValueExtendedProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/singleValueExtendedProperties"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesUpdateAttachmentsRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	attachmentId string
	microsoftGraphAttachment *MicrosoftGraphAttachment
}

// New navigation property values
func (r ApiUsersMailFoldersMessagesUpdateAttachmentsRequest) MicrosoftGraphAttachment(microsoftGraphAttachment MicrosoftGraphAttachment) ApiUsersMailFoldersMessagesUpdateAttachmentsRequest {
	r.microsoftGraphAttachment = &microsoftGraphAttachment
	return r
}

func (r ApiUsersMailFoldersMessagesUpdateAttachmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesUpdateAttachmentsExecute(r)
}

/*
UsersMailFoldersMessagesUpdateAttachments Update the navigation property attachments in users

The fileAttachment and itemAttachment attachments for the message.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @param attachmentId key: id of attachment
 @return ApiUsersMailFoldersMessagesUpdateAttachmentsRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesUpdateAttachments(ctx _context.Context, userId string, mailFolderId string, messageId string, attachmentId string) ApiUsersMailFoldersMessagesUpdateAttachmentsRequest {
	return ApiUsersMailFoldersMessagesUpdateAttachmentsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
		attachmentId: attachmentId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesUpdateAttachmentsExecute(r ApiUsersMailFoldersMessagesUpdateAttachmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesUpdateAttachments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/attachments/{attachment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attachment-id"+"}", _neturl.PathEscape(parameterToString(r.attachmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAttachment == nil {
		return nil, reportError("microsoftGraphAttachment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAttachment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesUpdateExtensionsRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	extensionId string
	microsoftGraphExtension *MicrosoftGraphExtension
}

// New navigation property values
func (r ApiUsersMailFoldersMessagesUpdateExtensionsRequest) MicrosoftGraphExtension(microsoftGraphExtension MicrosoftGraphExtension) ApiUsersMailFoldersMessagesUpdateExtensionsRequest {
	r.microsoftGraphExtension = &microsoftGraphExtension
	return r
}

func (r ApiUsersMailFoldersMessagesUpdateExtensionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesUpdateExtensionsExecute(r)
}

/*
UsersMailFoldersMessagesUpdateExtensions Update the navigation property extensions in users

The collection of open extensions defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @param extensionId key: id of extension
 @return ApiUsersMailFoldersMessagesUpdateExtensionsRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesUpdateExtensions(ctx _context.Context, userId string, mailFolderId string, messageId string, extensionId string) ApiUsersMailFoldersMessagesUpdateExtensionsRequest {
	return ApiUsersMailFoldersMessagesUpdateExtensionsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
		extensionId: extensionId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesUpdateExtensionsExecute(r ApiUsersMailFoldersMessagesUpdateExtensionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesUpdateExtensions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/extensions/{extension-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extension-id"+"}", _neturl.PathEscape(parameterToString(r.extensionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphExtension == nil {
		return nil, reportError("microsoftGraphExtension is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphExtension
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesUpdateMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	multiValueLegacyExtendedPropertyId string
	microsoftGraphMultiValueLegacyExtendedProperty *MicrosoftGraphMultiValueLegacyExtendedProperty
}

// New navigation property values
func (r ApiUsersMailFoldersMessagesUpdateMultiValueExtendedPropertiesRequest) MicrosoftGraphMultiValueLegacyExtendedProperty(microsoftGraphMultiValueLegacyExtendedProperty MicrosoftGraphMultiValueLegacyExtendedProperty) ApiUsersMailFoldersMessagesUpdateMultiValueExtendedPropertiesRequest {
	r.microsoftGraphMultiValueLegacyExtendedProperty = &microsoftGraphMultiValueLegacyExtendedProperty
	return r
}

func (r ApiUsersMailFoldersMessagesUpdateMultiValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesUpdateMultiValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersMessagesUpdateMultiValueExtendedProperties Update the navigation property multiValueExtendedProperties in users

The collection of multi-value extended properties defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty
 @return ApiUsersMailFoldersMessagesUpdateMultiValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesUpdateMultiValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, messageId string, multiValueLegacyExtendedPropertyId string) ApiUsersMailFoldersMessagesUpdateMultiValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersMessagesUpdateMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
		multiValueLegacyExtendedPropertyId: multiValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesUpdateMultiValueExtendedPropertiesExecute(r ApiUsersMailFoldersMessagesUpdateMultiValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesUpdateMultiValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"multiValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.multiValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMultiValueLegacyExtendedProperty == nil {
		return nil, reportError("microsoftGraphMultiValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMultiValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersMessagesUpdateSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	singleValueLegacyExtendedPropertyId string
	microsoftGraphSingleValueLegacyExtendedProperty *MicrosoftGraphSingleValueLegacyExtendedProperty
}

// New navigation property values
func (r ApiUsersMailFoldersMessagesUpdateSingleValueExtendedPropertiesRequest) MicrosoftGraphSingleValueLegacyExtendedProperty(microsoftGraphSingleValueLegacyExtendedProperty MicrosoftGraphSingleValueLegacyExtendedProperty) ApiUsersMailFoldersMessagesUpdateSingleValueExtendedPropertiesRequest {
	r.microsoftGraphSingleValueLegacyExtendedProperty = &microsoftGraphSingleValueLegacyExtendedProperty
	return r
}

func (r ApiUsersMailFoldersMessagesUpdateSingleValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersMessagesUpdateSingleValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersMessagesUpdateSingleValueExtendedProperties Update the navigation property singleValueExtendedProperties in users

The collection of single-value extended properties defined for the message. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty
 @return ApiUsersMailFoldersMessagesUpdateSingleValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesUpdateSingleValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, messageId string, singleValueLegacyExtendedPropertyId string) ApiUsersMailFoldersMessagesUpdateSingleValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersMessagesUpdateSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
		singleValueLegacyExtendedPropertyId: singleValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersMessagesUpdateSingleValueExtendedPropertiesExecute(r ApiUsersMailFoldersMessagesUpdateSingleValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersMessagesUpdateSingleValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"singleValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.singleValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSingleValueLegacyExtendedProperty == nil {
		return nil, reportError("microsoftGraphSingleValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSingleValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersUpdateChildFoldersRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	mailFolderId1 string
	microsoftGraphMailFolder *MicrosoftGraphMailFolder
}

// New navigation property values
func (r ApiUsersMailFoldersUpdateChildFoldersRequest) MicrosoftGraphMailFolder(microsoftGraphMailFolder MicrosoftGraphMailFolder) ApiUsersMailFoldersUpdateChildFoldersRequest {
	r.microsoftGraphMailFolder = &microsoftGraphMailFolder
	return r
}

func (r ApiUsersMailFoldersUpdateChildFoldersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersUpdateChildFoldersExecute(r)
}

/*
UsersMailFoldersUpdateChildFolders Update the navigation property childFolders in users

The collection of child folders in the mailFolder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param mailFolderId1 key: id of mailFolder
 @return ApiUsersMailFoldersUpdateChildFoldersRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersUpdateChildFolders(ctx _context.Context, userId string, mailFolderId string, mailFolderId1 string) ApiUsersMailFoldersUpdateChildFoldersRequest {
	return ApiUsersMailFoldersUpdateChildFoldersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		mailFolderId1: mailFolderId1,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersUpdateChildFoldersExecute(r ApiUsersMailFoldersUpdateChildFoldersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersUpdateChildFolders")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/childFolders/{mailFolder-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id1"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMailFolder == nil {
		return nil, reportError("microsoftGraphMailFolder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMailFolder
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersUpdateMessageRulesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageRuleId string
	microsoftGraphMessageRule *MicrosoftGraphMessageRule
}

// New navigation property values
func (r ApiUsersMailFoldersUpdateMessageRulesRequest) MicrosoftGraphMessageRule(microsoftGraphMessageRule MicrosoftGraphMessageRule) ApiUsersMailFoldersUpdateMessageRulesRequest {
	r.microsoftGraphMessageRule = &microsoftGraphMessageRule
	return r
}

func (r ApiUsersMailFoldersUpdateMessageRulesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersUpdateMessageRulesExecute(r)
}

/*
UsersMailFoldersUpdateMessageRules Update the navigation property messageRules in users

The collection of rules that apply to the user's Inbox folder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageRuleId key: id of messageRule
 @return ApiUsersMailFoldersUpdateMessageRulesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersUpdateMessageRules(ctx _context.Context, userId string, mailFolderId string, messageRuleId string) ApiUsersMailFoldersUpdateMessageRulesRequest {
	return ApiUsersMailFoldersUpdateMessageRulesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageRuleId: messageRuleId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersUpdateMessageRulesExecute(r ApiUsersMailFoldersUpdateMessageRulesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersUpdateMessageRules")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messageRules/{messageRule-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"messageRule-id"+"}", _neturl.PathEscape(parameterToString(r.messageRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMessageRule == nil {
		return nil, reportError("microsoftGraphMessageRule is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMessageRule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersUpdateMessagesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	microsoftGraphMessage *MicrosoftGraphMessage
}

// New navigation property values
func (r ApiUsersMailFoldersUpdateMessagesRequest) MicrosoftGraphMessage(microsoftGraphMessage MicrosoftGraphMessage) ApiUsersMailFoldersUpdateMessagesRequest {
	r.microsoftGraphMessage = &microsoftGraphMessage
	return r
}

func (r ApiUsersMailFoldersUpdateMessagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersUpdateMessagesExecute(r)
}

/*
UsersMailFoldersUpdateMessages Update the navigation property messages in users

The collection of messages in the mailFolder.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @return ApiUsersMailFoldersUpdateMessagesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersUpdateMessages(ctx _context.Context, userId string, mailFolderId string, messageId string) ApiUsersMailFoldersUpdateMessagesRequest {
	return ApiUsersMailFoldersUpdateMessagesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersUpdateMessagesExecute(r ApiUsersMailFoldersUpdateMessagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersUpdateMessages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMessage == nil {
		return nil, reportError("microsoftGraphMessage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMessage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersUpdateMessagesContentRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	messageId string
	body **os.File
}

// New media content.
func (r ApiUsersMailFoldersUpdateMessagesContentRequest) Body(body *os.File) ApiUsersMailFoldersUpdateMessagesContentRequest {
	r.body = &body
	return r
}

func (r ApiUsersMailFoldersUpdateMessagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersUpdateMessagesContentExecute(r)
}

/*
UsersMailFoldersUpdateMessagesContent Update media content for the navigation property messages in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param messageId key: id of message
 @return ApiUsersMailFoldersUpdateMessagesContentRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersUpdateMessagesContent(ctx _context.Context, userId string, mailFolderId string, messageId string) ApiUsersMailFoldersUpdateMessagesContentRequest {
	return ApiUsersMailFoldersUpdateMessagesContentRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		messageId: messageId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersUpdateMessagesContentExecute(r ApiUsersMailFoldersUpdateMessagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersUpdateMessagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/messages/{message-id}/$value"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"message-id"+"}", _neturl.PathEscape(parameterToString(r.messageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersUpdateMultiValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	multiValueLegacyExtendedPropertyId string
	microsoftGraphMultiValueLegacyExtendedProperty *MicrosoftGraphMultiValueLegacyExtendedProperty
}

// New navigation property values
func (r ApiUsersMailFoldersUpdateMultiValueExtendedPropertiesRequest) MicrosoftGraphMultiValueLegacyExtendedProperty(microsoftGraphMultiValueLegacyExtendedProperty MicrosoftGraphMultiValueLegacyExtendedProperty) ApiUsersMailFoldersUpdateMultiValueExtendedPropertiesRequest {
	r.microsoftGraphMultiValueLegacyExtendedProperty = &microsoftGraphMultiValueLegacyExtendedProperty
	return r
}

func (r ApiUsersMailFoldersUpdateMultiValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersUpdateMultiValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersUpdateMultiValueExtendedProperties Update the navigation property multiValueExtendedProperties in users

The collection of multi-value extended properties defined for the mailFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param multiValueLegacyExtendedPropertyId key: id of multiValueLegacyExtendedProperty
 @return ApiUsersMailFoldersUpdateMultiValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersUpdateMultiValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, multiValueLegacyExtendedPropertyId string) ApiUsersMailFoldersUpdateMultiValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersUpdateMultiValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		multiValueLegacyExtendedPropertyId: multiValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersUpdateMultiValueExtendedPropertiesExecute(r ApiUsersMailFoldersUpdateMultiValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersUpdateMultiValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/multiValueExtendedProperties/{multiValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"multiValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.multiValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMultiValueLegacyExtendedProperty == nil {
		return nil, reportError("microsoftGraphMultiValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMultiValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersMailFoldersUpdateSingleValueExtendedPropertiesRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	singleValueLegacyExtendedPropertyId string
	microsoftGraphSingleValueLegacyExtendedProperty *MicrosoftGraphSingleValueLegacyExtendedProperty
}

// New navigation property values
func (r ApiUsersMailFoldersUpdateSingleValueExtendedPropertiesRequest) MicrosoftGraphSingleValueLegacyExtendedProperty(microsoftGraphSingleValueLegacyExtendedProperty MicrosoftGraphSingleValueLegacyExtendedProperty) ApiUsersMailFoldersUpdateSingleValueExtendedPropertiesRequest {
	r.microsoftGraphSingleValueLegacyExtendedProperty = &microsoftGraphSingleValueLegacyExtendedProperty
	return r
}

func (r ApiUsersMailFoldersUpdateSingleValueExtendedPropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersMailFoldersUpdateSingleValueExtendedPropertiesExecute(r)
}

/*
UsersMailFoldersUpdateSingleValueExtendedProperties Update the navigation property singleValueExtendedProperties in users

The collection of single-value extended properties defined for the mailFolder. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @param singleValueLegacyExtendedPropertyId key: id of singleValueLegacyExtendedProperty
 @return ApiUsersMailFoldersUpdateSingleValueExtendedPropertiesRequest
*/
func (a *UsersMailFolderApiService) UsersMailFoldersUpdateSingleValueExtendedProperties(ctx _context.Context, userId string, mailFolderId string, singleValueLegacyExtendedPropertyId string) ApiUsersMailFoldersUpdateSingleValueExtendedPropertiesRequest {
	return ApiUsersMailFoldersUpdateSingleValueExtendedPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
		singleValueLegacyExtendedPropertyId: singleValueLegacyExtendedPropertyId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersMailFoldersUpdateSingleValueExtendedPropertiesExecute(r ApiUsersMailFoldersUpdateSingleValueExtendedPropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersMailFoldersUpdateSingleValueExtendedProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}/singleValueExtendedProperties/{singleValueLegacyExtendedProperty-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"singleValueLegacyExtendedProperty-id"+"}", _neturl.PathEscape(parameterToString(r.singleValueLegacyExtendedPropertyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSingleValueLegacyExtendedProperty == nil {
		return nil, reportError("microsoftGraphSingleValueLegacyExtendedProperty is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSingleValueLegacyExtendedProperty
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersUpdateMailFoldersRequest struct {
	ctx _context.Context
	ApiService *UsersMailFolderApiService
	userId string
	mailFolderId string
	microsoftGraphMailFolder *MicrosoftGraphMailFolder
}

// New navigation property values
func (r ApiUsersUpdateMailFoldersRequest) MicrosoftGraphMailFolder(microsoftGraphMailFolder MicrosoftGraphMailFolder) ApiUsersUpdateMailFoldersRequest {
	r.microsoftGraphMailFolder = &microsoftGraphMailFolder
	return r
}

func (r ApiUsersUpdateMailFoldersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersUpdateMailFoldersExecute(r)
}

/*
UsersUpdateMailFolders Update the navigation property mailFolders in users

The user's mail folders. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param mailFolderId key: id of mailFolder
 @return ApiUsersUpdateMailFoldersRequest
*/
func (a *UsersMailFolderApiService) UsersUpdateMailFolders(ctx _context.Context, userId string, mailFolderId string) ApiUsersUpdateMailFoldersRequest {
	return ApiUsersUpdateMailFoldersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		mailFolderId: mailFolderId,
	}
}

// Execute executes the request
func (a *UsersMailFolderApiService) UsersUpdateMailFoldersExecute(r ApiUsersUpdateMailFoldersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersMailFolderApiService.UsersUpdateMailFolders")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/mailFolders/{mailFolder-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mailFolder-id"+"}", _neturl.PathEscape(parameterToString(r.mailFolderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMailFolder == nil {
		return nil, reportError("microsoftGraphMailFolder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMailFolder
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
