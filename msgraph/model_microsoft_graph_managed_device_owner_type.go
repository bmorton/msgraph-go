/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphManagedDeviceOwnerType Owner type of device.
type MicrosoftGraphManagedDeviceOwnerType string

// List of microsoft.graph.managedDeviceOwnerType
const (
	UNKNOWN MicrosoftGraphManagedDeviceOwnerType = "unknown"
	COMPANY MicrosoftGraphManagedDeviceOwnerType = "company"
	PERSONAL MicrosoftGraphManagedDeviceOwnerType = "personal"
)

// All allowed values of MicrosoftGraphManagedDeviceOwnerType enum
var AllowedMicrosoftGraphManagedDeviceOwnerTypeEnumValues = []MicrosoftGraphManagedDeviceOwnerType{
	"unknown",
	"company",
	"personal",
}

func (v *MicrosoftGraphManagedDeviceOwnerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphManagedDeviceOwnerType(value)
	for _, existing := range AllowedMicrosoftGraphManagedDeviceOwnerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphManagedDeviceOwnerType", value)
}

// NewMicrosoftGraphManagedDeviceOwnerTypeFromValue returns a pointer to a valid MicrosoftGraphManagedDeviceOwnerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphManagedDeviceOwnerTypeFromValue(v string) (*MicrosoftGraphManagedDeviceOwnerType, error) {
	ev := MicrosoftGraphManagedDeviceOwnerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphManagedDeviceOwnerType: valid values are %v", v, AllowedMicrosoftGraphManagedDeviceOwnerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphManagedDeviceOwnerType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphManagedDeviceOwnerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.managedDeviceOwnerType value
func (v MicrosoftGraphManagedDeviceOwnerType) Ptr() *MicrosoftGraphManagedDeviceOwnerType {
	return &v
}

type NullableMicrosoftGraphManagedDeviceOwnerType struct {
	value *MicrosoftGraphManagedDeviceOwnerType
	isSet bool
}

func (v NullableMicrosoftGraphManagedDeviceOwnerType) Get() *MicrosoftGraphManagedDeviceOwnerType {
	return v.value
}

func (v *NullableMicrosoftGraphManagedDeviceOwnerType) Set(val *MicrosoftGraphManagedDeviceOwnerType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphManagedDeviceOwnerType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphManagedDeviceOwnerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphManagedDeviceOwnerType(val *MicrosoftGraphManagedDeviceOwnerType) *NullableMicrosoftGraphManagedDeviceOwnerType {
	return &NullableMicrosoftGraphManagedDeviceOwnerType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphManagedDeviceOwnerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphManagedDeviceOwnerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

