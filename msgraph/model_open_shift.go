/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OpenShift struct for OpenShift
type OpenShift struct {
	// An unpublished open shift.
	DraftOpenShift AnyOfmicrosoftGraphOpenShiftItem `json:"draftOpenShift,omitempty"`
	// ID for the scheduling group that the open shift belongs to.
	SchedulingGroupId NullableString `json:"schedulingGroupId,omitempty"`
	// A published open shift.
	SharedOpenShift AnyOfmicrosoftGraphOpenShiftItem `json:"sharedOpenShift,omitempty"`
}

// NewOpenShift instantiates a new OpenShift object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenShift() *OpenShift {
	this := OpenShift{}
	return &this
}

// NewOpenShiftWithDefaults instantiates a new OpenShift object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenShiftWithDefaults() *OpenShift {
	this := OpenShift{}
	return &this
}

// GetDraftOpenShift returns the DraftOpenShift field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenShift) GetDraftOpenShift() AnyOfmicrosoftGraphOpenShiftItem {
	if o == nil  {
		var ret AnyOfmicrosoftGraphOpenShiftItem
		return ret
	}
	return o.DraftOpenShift
}

// GetDraftOpenShiftOk returns a tuple with the DraftOpenShift field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenShift) GetDraftOpenShiftOk() (*AnyOfmicrosoftGraphOpenShiftItem, bool) {
	if o == nil || o.DraftOpenShift == nil {
		return nil, false
	}
	return &o.DraftOpenShift, true
}

// HasDraftOpenShift returns a boolean if a field has been set.
func (o *OpenShift) HasDraftOpenShift() bool {
	if o != nil && o.DraftOpenShift != nil {
		return true
	}

	return false
}

// SetDraftOpenShift gets a reference to the given AnyOfmicrosoftGraphOpenShiftItem and assigns it to the DraftOpenShift field.
func (o *OpenShift) SetDraftOpenShift(v AnyOfmicrosoftGraphOpenShiftItem) {
	o.DraftOpenShift = v
}

// GetSchedulingGroupId returns the SchedulingGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenShift) GetSchedulingGroupId() string {
	if o == nil || o.SchedulingGroupId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SchedulingGroupId.Get()
}

// GetSchedulingGroupIdOk returns a tuple with the SchedulingGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenShift) GetSchedulingGroupIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SchedulingGroupId.Get(), o.SchedulingGroupId.IsSet()
}

// HasSchedulingGroupId returns a boolean if a field has been set.
func (o *OpenShift) HasSchedulingGroupId() bool {
	if o != nil && o.SchedulingGroupId.IsSet() {
		return true
	}

	return false
}

// SetSchedulingGroupId gets a reference to the given NullableString and assigns it to the SchedulingGroupId field.
func (o *OpenShift) SetSchedulingGroupId(v string) {
	o.SchedulingGroupId.Set(&v)
}
// SetSchedulingGroupIdNil sets the value for SchedulingGroupId to be an explicit nil
func (o *OpenShift) SetSchedulingGroupIdNil() {
	o.SchedulingGroupId.Set(nil)
}

// UnsetSchedulingGroupId ensures that no value is present for SchedulingGroupId, not even an explicit nil
func (o *OpenShift) UnsetSchedulingGroupId() {
	o.SchedulingGroupId.Unset()
}

// GetSharedOpenShift returns the SharedOpenShift field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenShift) GetSharedOpenShift() AnyOfmicrosoftGraphOpenShiftItem {
	if o == nil  {
		var ret AnyOfmicrosoftGraphOpenShiftItem
		return ret
	}
	return o.SharedOpenShift
}

// GetSharedOpenShiftOk returns a tuple with the SharedOpenShift field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenShift) GetSharedOpenShiftOk() (*AnyOfmicrosoftGraphOpenShiftItem, bool) {
	if o == nil || o.SharedOpenShift == nil {
		return nil, false
	}
	return &o.SharedOpenShift, true
}

// HasSharedOpenShift returns a boolean if a field has been set.
func (o *OpenShift) HasSharedOpenShift() bool {
	if o != nil && o.SharedOpenShift != nil {
		return true
	}

	return false
}

// SetSharedOpenShift gets a reference to the given AnyOfmicrosoftGraphOpenShiftItem and assigns it to the SharedOpenShift field.
func (o *OpenShift) SetSharedOpenShift(v AnyOfmicrosoftGraphOpenShiftItem) {
	o.SharedOpenShift = v
}

func (o OpenShift) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DraftOpenShift != nil {
		toSerialize["draftOpenShift"] = o.DraftOpenShift
	}
	if o.SchedulingGroupId.IsSet() {
		toSerialize["schedulingGroupId"] = o.SchedulingGroupId.Get()
	}
	if o.SharedOpenShift != nil {
		toSerialize["sharedOpenShift"] = o.SharedOpenShift
	}
	return json.Marshal(toSerialize)
}

type NullableOpenShift struct {
	value *OpenShift
	isSet bool
}

func (v NullableOpenShift) Get() *OpenShift {
	return v.value
}

func (v *NullableOpenShift) Set(val *OpenShift) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenShift) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenShift) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenShift(val *OpenShift) *NullableOpenShift {
	return &NullableOpenShift{value: val, isSet: true}
}

func (v NullableOpenShift) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenShift) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


