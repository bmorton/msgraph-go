/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphLicenseAssignmentState struct for MicrosoftGraphLicenseAssignmentState
type MicrosoftGraphLicenseAssignmentState struct {
	// The id of the group that assigns this license. If the assignment is a direct-assigned license, this field will be Null. Read-Only.
	AssignedByGroup NullableString `json:"assignedByGroup,omitempty"`
	// The service plans that are disabled in this assignment. Read-Only.
	DisabledPlans *[]*string `json:"disabledPlans,omitempty"`
	// License assignment failure error. If the license is assigned successfully, this field will be Null. Read-Only. Possible values: CountViolation, MutuallyExclusiveViolation, DependencyViolation, ProhibitedInUsageLocationViolation, UniquenessViolation, and Others. For more information on how to identify and resolve license assignment errors see here.
	Error NullableString `json:"error,omitempty"`
	// The unique identifier for the SKU. Read-Only.
	SkuId NullableString `json:"skuId,omitempty"`
	// Indicate the current state of this assignment. Read-Only. Possible values: Active, ActiveWithError, Disabled and Error.
	State NullableString `json:"state,omitempty"`
}

// NewMicrosoftGraphLicenseAssignmentState instantiates a new MicrosoftGraphLicenseAssignmentState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphLicenseAssignmentState() *MicrosoftGraphLicenseAssignmentState {
	this := MicrosoftGraphLicenseAssignmentState{}
	return &this
}

// NewMicrosoftGraphLicenseAssignmentStateWithDefaults instantiates a new MicrosoftGraphLicenseAssignmentState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphLicenseAssignmentStateWithDefaults() *MicrosoftGraphLicenseAssignmentState {
	this := MicrosoftGraphLicenseAssignmentState{}
	return &this
}

// GetAssignedByGroup returns the AssignedByGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphLicenseAssignmentState) GetAssignedByGroup() string {
	if o == nil || o.AssignedByGroup.Get() == nil {
		var ret string
		return ret
	}
	return *o.AssignedByGroup.Get()
}

// GetAssignedByGroupOk returns a tuple with the AssignedByGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphLicenseAssignmentState) GetAssignedByGroupOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AssignedByGroup.Get(), o.AssignedByGroup.IsSet()
}

// HasAssignedByGroup returns a boolean if a field has been set.
func (o *MicrosoftGraphLicenseAssignmentState) HasAssignedByGroup() bool {
	if o != nil && o.AssignedByGroup.IsSet() {
		return true
	}

	return false
}

// SetAssignedByGroup gets a reference to the given NullableString and assigns it to the AssignedByGroup field.
func (o *MicrosoftGraphLicenseAssignmentState) SetAssignedByGroup(v string) {
	o.AssignedByGroup.Set(&v)
}
// SetAssignedByGroupNil sets the value for AssignedByGroup to be an explicit nil
func (o *MicrosoftGraphLicenseAssignmentState) SetAssignedByGroupNil() {
	o.AssignedByGroup.Set(nil)
}

// UnsetAssignedByGroup ensures that no value is present for AssignedByGroup, not even an explicit nil
func (o *MicrosoftGraphLicenseAssignmentState) UnsetAssignedByGroup() {
	o.AssignedByGroup.Unset()
}

// GetDisabledPlans returns the DisabledPlans field value if set, zero value otherwise.
func (o *MicrosoftGraphLicenseAssignmentState) GetDisabledPlans() []*string {
	if o == nil || o.DisabledPlans == nil {
		var ret []*string
		return ret
	}
	return *o.DisabledPlans
}

// GetDisabledPlansOk returns a tuple with the DisabledPlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphLicenseAssignmentState) GetDisabledPlansOk() (*[]*string, bool) {
	if o == nil || o.DisabledPlans == nil {
		return nil, false
	}
	return o.DisabledPlans, true
}

// HasDisabledPlans returns a boolean if a field has been set.
func (o *MicrosoftGraphLicenseAssignmentState) HasDisabledPlans() bool {
	if o != nil && o.DisabledPlans != nil {
		return true
	}

	return false
}

// SetDisabledPlans gets a reference to the given []*string and assigns it to the DisabledPlans field.
func (o *MicrosoftGraphLicenseAssignmentState) SetDisabledPlans(v []*string) {
	o.DisabledPlans = &v
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphLicenseAssignmentState) GetError() string {
	if o == nil || o.Error.Get() == nil {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphLicenseAssignmentState) GetErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *MicrosoftGraphLicenseAssignmentState) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *MicrosoftGraphLicenseAssignmentState) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *MicrosoftGraphLicenseAssignmentState) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *MicrosoftGraphLicenseAssignmentState) UnsetError() {
	o.Error.Unset()
}

// GetSkuId returns the SkuId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphLicenseAssignmentState) GetSkuId() string {
	if o == nil || o.SkuId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SkuId.Get()
}

// GetSkuIdOk returns a tuple with the SkuId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphLicenseAssignmentState) GetSkuIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkuId.Get(), o.SkuId.IsSet()
}

// HasSkuId returns a boolean if a field has been set.
func (o *MicrosoftGraphLicenseAssignmentState) HasSkuId() bool {
	if o != nil && o.SkuId.IsSet() {
		return true
	}

	return false
}

// SetSkuId gets a reference to the given NullableString and assigns it to the SkuId field.
func (o *MicrosoftGraphLicenseAssignmentState) SetSkuId(v string) {
	o.SkuId.Set(&v)
}
// SetSkuIdNil sets the value for SkuId to be an explicit nil
func (o *MicrosoftGraphLicenseAssignmentState) SetSkuIdNil() {
	o.SkuId.Set(nil)
}

// UnsetSkuId ensures that no value is present for SkuId, not even an explicit nil
func (o *MicrosoftGraphLicenseAssignmentState) UnsetSkuId() {
	o.SkuId.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphLicenseAssignmentState) GetState() string {
	if o == nil || o.State.Get() == nil {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphLicenseAssignmentState) GetStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *MicrosoftGraphLicenseAssignmentState) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *MicrosoftGraphLicenseAssignmentState) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *MicrosoftGraphLicenseAssignmentState) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *MicrosoftGraphLicenseAssignmentState) UnsetState() {
	o.State.Unset()
}

func (o MicrosoftGraphLicenseAssignmentState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssignedByGroup.IsSet() {
		toSerialize["assignedByGroup"] = o.AssignedByGroup.Get()
	}
	if o.DisabledPlans != nil {
		toSerialize["disabledPlans"] = o.DisabledPlans
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.SkuId.IsSet() {
		toSerialize["skuId"] = o.SkuId.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphLicenseAssignmentState struct {
	value *MicrosoftGraphLicenseAssignmentState
	isSet bool
}

func (v NullableMicrosoftGraphLicenseAssignmentState) Get() *MicrosoftGraphLicenseAssignmentState {
	return v.value
}

func (v *NullableMicrosoftGraphLicenseAssignmentState) Set(val *MicrosoftGraphLicenseAssignmentState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphLicenseAssignmentState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphLicenseAssignmentState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphLicenseAssignmentState(val *MicrosoftGraphLicenseAssignmentState) *NullableMicrosoftGraphLicenseAssignmentState {
	return &NullableMicrosoftGraphLicenseAssignmentState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphLicenseAssignmentState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphLicenseAssignmentState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


