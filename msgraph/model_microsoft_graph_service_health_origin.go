/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphServiceHealthOrigin the model 'MicrosoftGraphServiceHealthOrigin'
type MicrosoftGraphServiceHealthOrigin string

// List of microsoft.graph.serviceHealthOrigin
const (
	MICROSOFT MicrosoftGraphServiceHealthOrigin = "microsoft"
	THIRD_PARTY MicrosoftGraphServiceHealthOrigin = "thirdParty"
	CUSTOMER MicrosoftGraphServiceHealthOrigin = "customer"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphServiceHealthOrigin = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphServiceHealthOrigin enum
var AllowedMicrosoftGraphServiceHealthOriginEnumValues = []MicrosoftGraphServiceHealthOrigin{
	"microsoft",
	"thirdParty",
	"customer",
	"unknownFutureValue",
}

func (v *MicrosoftGraphServiceHealthOrigin) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphServiceHealthOrigin(value)
	for _, existing := range AllowedMicrosoftGraphServiceHealthOriginEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphServiceHealthOrigin", value)
}

// NewMicrosoftGraphServiceHealthOriginFromValue returns a pointer to a valid MicrosoftGraphServiceHealthOrigin
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphServiceHealthOriginFromValue(v string) (*MicrosoftGraphServiceHealthOrigin, error) {
	ev := MicrosoftGraphServiceHealthOrigin(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphServiceHealthOrigin: valid values are %v", v, AllowedMicrosoftGraphServiceHealthOriginEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphServiceHealthOrigin) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphServiceHealthOriginEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.serviceHealthOrigin value
func (v MicrosoftGraphServiceHealthOrigin) Ptr() *MicrosoftGraphServiceHealthOrigin {
	return &v
}

type NullableMicrosoftGraphServiceHealthOrigin struct {
	value *MicrosoftGraphServiceHealthOrigin
	isSet bool
}

func (v NullableMicrosoftGraphServiceHealthOrigin) Get() *MicrosoftGraphServiceHealthOrigin {
	return v.value
}

func (v *NullableMicrosoftGraphServiceHealthOrigin) Set(val *MicrosoftGraphServiceHealthOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphServiceHealthOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphServiceHealthOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphServiceHealthOrigin(val *MicrosoftGraphServiceHealthOrigin) *NullableMicrosoftGraphServiceHealthOrigin {
	return &NullableMicrosoftGraphServiceHealthOrigin{value: val, isSet: true}
}

func (v NullableMicrosoftGraphServiceHealthOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphServiceHealthOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

