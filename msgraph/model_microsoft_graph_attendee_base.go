/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MicrosoftGraphAttendeeBase struct for MicrosoftGraphAttendeeBase
type MicrosoftGraphAttendeeBase struct {
	// The recipient's email address.
	EmailAddress AnyOfmicrosoftGraphEmailAddress `json:"emailAddress,omitempty"`
	// The type of attendee. The possible values are: required, optional, resource. Currently if the attendee is a person, findMeetingTimes always considers the person is of the Required type.
	Type AnyOfmicrosoftGraphAttendeeType `json:"type,omitempty"`
}

// NewMicrosoftGraphAttendeeBase instantiates a new MicrosoftGraphAttendeeBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphAttendeeBase() *MicrosoftGraphAttendeeBase {
	this := MicrosoftGraphAttendeeBase{}
	return &this
}

// NewMicrosoftGraphAttendeeBaseWithDefaults instantiates a new MicrosoftGraphAttendeeBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphAttendeeBaseWithDefaults() *MicrosoftGraphAttendeeBase {
	this := MicrosoftGraphAttendeeBase{}
	return &this
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAttendeeBase) GetEmailAddress() AnyOfmicrosoftGraphEmailAddress {
	if o == nil  {
		var ret AnyOfmicrosoftGraphEmailAddress
		return ret
	}
	return o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAttendeeBase) GetEmailAddressOk() (*AnyOfmicrosoftGraphEmailAddress, bool) {
	if o == nil || o.EmailAddress == nil {
		return nil, false
	}
	return &o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *MicrosoftGraphAttendeeBase) HasEmailAddress() bool {
	if o != nil && o.EmailAddress != nil {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given AnyOfmicrosoftGraphEmailAddress and assigns it to the EmailAddress field.
func (o *MicrosoftGraphAttendeeBase) SetEmailAddress(v AnyOfmicrosoftGraphEmailAddress) {
	o.EmailAddress = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAttendeeBase) GetType() AnyOfmicrosoftGraphAttendeeType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphAttendeeType
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAttendeeBase) GetTypeOk() (*AnyOfmicrosoftGraphAttendeeType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return &o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MicrosoftGraphAttendeeBase) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given AnyOfmicrosoftGraphAttendeeType and assigns it to the Type field.
func (o *MicrosoftGraphAttendeeBase) SetType(v AnyOfmicrosoftGraphAttendeeType) {
	o.Type = v
}

func (o MicrosoftGraphAttendeeBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EmailAddress != nil {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphAttendeeBase struct {
	value *MicrosoftGraphAttendeeBase
	isSet bool
}

func (v NullableMicrosoftGraphAttendeeBase) Get() *MicrosoftGraphAttendeeBase {
	return v.value
}

func (v *NullableMicrosoftGraphAttendeeBase) Set(val *MicrosoftGraphAttendeeBase) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAttendeeBase) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAttendeeBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAttendeeBase(val *MicrosoftGraphAttendeeBase) *NullableMicrosoftGraphAttendeeBase {
	return &NullableMicrosoftGraphAttendeeBase{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAttendeeBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAttendeeBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


