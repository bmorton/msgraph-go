/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// PrintPrintServiceApiService PrintPrintServiceApi service
type PrintPrintServiceApiService service

type ApiPrintCreateServicesRequest struct {
	ctx _context.Context
	ApiService *PrintPrintServiceApiService
	microsoftGraphPrintService *MicrosoftGraphPrintService
}

// New navigation property
func (r ApiPrintCreateServicesRequest) MicrosoftGraphPrintService(microsoftGraphPrintService MicrosoftGraphPrintService) ApiPrintCreateServicesRequest {
	r.microsoftGraphPrintService = &microsoftGraphPrintService
	return r
}

func (r ApiPrintCreateServicesRequest) Execute() (MicrosoftGraphPrintService, *_nethttp.Response, error) {
	return r.ApiService.PrintCreateServicesExecute(r)
}

/*
PrintCreateServices Create new navigation property to services for print

The list of available Universal Print service endpoints.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPrintCreateServicesRequest
*/
func (a *PrintPrintServiceApiService) PrintCreateServices(ctx _context.Context) ApiPrintCreateServicesRequest {
	return ApiPrintCreateServicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintService
func (a *PrintPrintServiceApiService) PrintCreateServicesExecute(r ApiPrintCreateServicesRequest) (MicrosoftGraphPrintService, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintServiceApiService.PrintCreateServices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/services"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintService == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphPrintService is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintService
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintDeleteServicesRequest struct {
	ctx _context.Context
	ApiService *PrintPrintServiceApiService
	printServiceId string
	ifMatch *string
}

// ETag
func (r ApiPrintDeleteServicesRequest) IfMatch(ifMatch string) ApiPrintDeleteServicesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiPrintDeleteServicesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintDeleteServicesExecute(r)
}

/*
PrintDeleteServices Delete navigation property services for print

The list of available Universal Print service endpoints.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printServiceId key: id of printService
 @return ApiPrintDeleteServicesRequest
*/
func (a *PrintPrintServiceApiService) PrintDeleteServices(ctx _context.Context, printServiceId string) ApiPrintDeleteServicesRequest {
	return ApiPrintDeleteServicesRequest{
		ApiService: a,
		ctx: ctx,
		printServiceId: printServiceId,
	}
}

// Execute executes the request
func (a *PrintPrintServiceApiService) PrintDeleteServicesExecute(r ApiPrintDeleteServicesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintServiceApiService.PrintDeleteServices")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/services/{printService-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printService-id"+"}", _neturl.PathEscape(parameterToString(r.printServiceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrintGetServicesRequest struct {
	ctx _context.Context
	ApiService *PrintPrintServiceApiService
	printServiceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiPrintGetServicesRequest) Select_(select_ []string) ApiPrintGetServicesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintGetServicesRequest) Expand(expand []string) ApiPrintGetServicesRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintGetServicesRequest) Execute() (MicrosoftGraphPrintService, *_nethttp.Response, error) {
	return r.ApiService.PrintGetServicesExecute(r)
}

/*
PrintGetServices Get services from print

The list of available Universal Print service endpoints.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printServiceId key: id of printService
 @return ApiPrintGetServicesRequest
*/
func (a *PrintPrintServiceApiService) PrintGetServices(ctx _context.Context, printServiceId string) ApiPrintGetServicesRequest {
	return ApiPrintGetServicesRequest{
		ApiService: a,
		ctx: ctx,
		printServiceId: printServiceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintService
func (a *PrintPrintServiceApiService) PrintGetServicesExecute(r ApiPrintGetServicesRequest) (MicrosoftGraphPrintService, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintServiceApiService.PrintGetServices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/services/{printService-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printService-id"+"}", _neturl.PathEscape(parameterToString(r.printServiceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintListServicesRequest struct {
	ctx _context.Context
	ApiService *PrintPrintServiceApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiPrintListServicesRequest) Top(top int32) ApiPrintListServicesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiPrintListServicesRequest) Skip(skip int32) ApiPrintListServicesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiPrintListServicesRequest) Search(search string) ApiPrintListServicesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiPrintListServicesRequest) Filter(filter string) ApiPrintListServicesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiPrintListServicesRequest) Count(count bool) ApiPrintListServicesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiPrintListServicesRequest) Orderby(orderby []string) ApiPrintListServicesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiPrintListServicesRequest) Select_(select_ []string) ApiPrintListServicesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintListServicesRequest) Expand(expand []string) ApiPrintListServicesRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintListServicesRequest) Execute() (CollectionOfPrintService, *_nethttp.Response, error) {
	return r.ApiService.PrintListServicesExecute(r)
}

/*
PrintListServices Get services from print

The list of available Universal Print service endpoints.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPrintListServicesRequest
*/
func (a *PrintPrintServiceApiService) PrintListServices(ctx _context.Context) ApiPrintListServicesRequest {
	return ApiPrintListServicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfPrintService
func (a *PrintPrintServiceApiService) PrintListServicesExecute(r ApiPrintListServicesRequest) (CollectionOfPrintService, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfPrintService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintServiceApiService.PrintListServices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/services"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintServicesCreateEndpointsRequest struct {
	ctx _context.Context
	ApiService *PrintPrintServiceApiService
	printServiceId string
	microsoftGraphPrintServiceEndpoint *MicrosoftGraphPrintServiceEndpoint
}

// New navigation property
func (r ApiPrintServicesCreateEndpointsRequest) MicrosoftGraphPrintServiceEndpoint(microsoftGraphPrintServiceEndpoint MicrosoftGraphPrintServiceEndpoint) ApiPrintServicesCreateEndpointsRequest {
	r.microsoftGraphPrintServiceEndpoint = &microsoftGraphPrintServiceEndpoint
	return r
}

func (r ApiPrintServicesCreateEndpointsRequest) Execute() (MicrosoftGraphPrintServiceEndpoint, *_nethttp.Response, error) {
	return r.ApiService.PrintServicesCreateEndpointsExecute(r)
}

/*
PrintServicesCreateEndpoints Create new navigation property to endpoints for print

Endpoints that can be used to access the service. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printServiceId key: id of printService
 @return ApiPrintServicesCreateEndpointsRequest
*/
func (a *PrintPrintServiceApiService) PrintServicesCreateEndpoints(ctx _context.Context, printServiceId string) ApiPrintServicesCreateEndpointsRequest {
	return ApiPrintServicesCreateEndpointsRequest{
		ApiService: a,
		ctx: ctx,
		printServiceId: printServiceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintServiceEndpoint
func (a *PrintPrintServiceApiService) PrintServicesCreateEndpointsExecute(r ApiPrintServicesCreateEndpointsRequest) (MicrosoftGraphPrintServiceEndpoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintServiceEndpoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintServiceApiService.PrintServicesCreateEndpoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/services/{printService-id}/endpoints"
	localVarPath = strings.Replace(localVarPath, "{"+"printService-id"+"}", _neturl.PathEscape(parameterToString(r.printServiceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintServiceEndpoint == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphPrintServiceEndpoint is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintServiceEndpoint
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintServicesDeleteEndpointsRequest struct {
	ctx _context.Context
	ApiService *PrintPrintServiceApiService
	printServiceId string
	printServiceEndpointId string
	ifMatch *string
}

// ETag
func (r ApiPrintServicesDeleteEndpointsRequest) IfMatch(ifMatch string) ApiPrintServicesDeleteEndpointsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiPrintServicesDeleteEndpointsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintServicesDeleteEndpointsExecute(r)
}

/*
PrintServicesDeleteEndpoints Delete navigation property endpoints for print

Endpoints that can be used to access the service. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printServiceId key: id of printService
 @param printServiceEndpointId key: id of printServiceEndpoint
 @return ApiPrintServicesDeleteEndpointsRequest
*/
func (a *PrintPrintServiceApiService) PrintServicesDeleteEndpoints(ctx _context.Context, printServiceId string, printServiceEndpointId string) ApiPrintServicesDeleteEndpointsRequest {
	return ApiPrintServicesDeleteEndpointsRequest{
		ApiService: a,
		ctx: ctx,
		printServiceId: printServiceId,
		printServiceEndpointId: printServiceEndpointId,
	}
}

// Execute executes the request
func (a *PrintPrintServiceApiService) PrintServicesDeleteEndpointsExecute(r ApiPrintServicesDeleteEndpointsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintServiceApiService.PrintServicesDeleteEndpoints")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/services/{printService-id}/endpoints/{printServiceEndpoint-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printService-id"+"}", _neturl.PathEscape(parameterToString(r.printServiceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printServiceEndpoint-id"+"}", _neturl.PathEscape(parameterToString(r.printServiceEndpointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrintServicesGetEndpointsRequest struct {
	ctx _context.Context
	ApiService *PrintPrintServiceApiService
	printServiceId string
	printServiceEndpointId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiPrintServicesGetEndpointsRequest) Select_(select_ []string) ApiPrintServicesGetEndpointsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintServicesGetEndpointsRequest) Expand(expand []string) ApiPrintServicesGetEndpointsRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintServicesGetEndpointsRequest) Execute() (MicrosoftGraphPrintServiceEndpoint, *_nethttp.Response, error) {
	return r.ApiService.PrintServicesGetEndpointsExecute(r)
}

/*
PrintServicesGetEndpoints Get endpoints from print

Endpoints that can be used to access the service. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printServiceId key: id of printService
 @param printServiceEndpointId key: id of printServiceEndpoint
 @return ApiPrintServicesGetEndpointsRequest
*/
func (a *PrintPrintServiceApiService) PrintServicesGetEndpoints(ctx _context.Context, printServiceId string, printServiceEndpointId string) ApiPrintServicesGetEndpointsRequest {
	return ApiPrintServicesGetEndpointsRequest{
		ApiService: a,
		ctx: ctx,
		printServiceId: printServiceId,
		printServiceEndpointId: printServiceEndpointId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintServiceEndpoint
func (a *PrintPrintServiceApiService) PrintServicesGetEndpointsExecute(r ApiPrintServicesGetEndpointsRequest) (MicrosoftGraphPrintServiceEndpoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintServiceEndpoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintServiceApiService.PrintServicesGetEndpoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/services/{printService-id}/endpoints/{printServiceEndpoint-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printService-id"+"}", _neturl.PathEscape(parameterToString(r.printServiceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printServiceEndpoint-id"+"}", _neturl.PathEscape(parameterToString(r.printServiceEndpointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintServicesListEndpointsRequest struct {
	ctx _context.Context
	ApiService *PrintPrintServiceApiService
	printServiceId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiPrintServicesListEndpointsRequest) Top(top int32) ApiPrintServicesListEndpointsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiPrintServicesListEndpointsRequest) Skip(skip int32) ApiPrintServicesListEndpointsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiPrintServicesListEndpointsRequest) Search(search string) ApiPrintServicesListEndpointsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiPrintServicesListEndpointsRequest) Filter(filter string) ApiPrintServicesListEndpointsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiPrintServicesListEndpointsRequest) Count(count bool) ApiPrintServicesListEndpointsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiPrintServicesListEndpointsRequest) Orderby(orderby []string) ApiPrintServicesListEndpointsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiPrintServicesListEndpointsRequest) Select_(select_ []string) ApiPrintServicesListEndpointsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiPrintServicesListEndpointsRequest) Expand(expand []string) ApiPrintServicesListEndpointsRequest {
	r.expand = &expand
	return r
}

func (r ApiPrintServicesListEndpointsRequest) Execute() (CollectionOfPrintServiceEndpoint, *_nethttp.Response, error) {
	return r.ApiService.PrintServicesListEndpointsExecute(r)
}

/*
PrintServicesListEndpoints Get endpoints from print

Endpoints that can be used to access the service. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printServiceId key: id of printService
 @return ApiPrintServicesListEndpointsRequest
*/
func (a *PrintPrintServiceApiService) PrintServicesListEndpoints(ctx _context.Context, printServiceId string) ApiPrintServicesListEndpointsRequest {
	return ApiPrintServicesListEndpointsRequest{
		ApiService: a,
		ctx: ctx,
		printServiceId: printServiceId,
	}
}

// Execute executes the request
//  @return CollectionOfPrintServiceEndpoint
func (a *PrintPrintServiceApiService) PrintServicesListEndpointsExecute(r ApiPrintServicesListEndpointsRequest) (CollectionOfPrintServiceEndpoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfPrintServiceEndpoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintServiceApiService.PrintServicesListEndpoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/services/{printService-id}/endpoints"
	localVarPath = strings.Replace(localVarPath, "{"+"printService-id"+"}", _neturl.PathEscape(parameterToString(r.printServiceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPrintServicesUpdateEndpointsRequest struct {
	ctx _context.Context
	ApiService *PrintPrintServiceApiService
	printServiceId string
	printServiceEndpointId string
	microsoftGraphPrintServiceEndpoint *MicrosoftGraphPrintServiceEndpoint
}

// New navigation property values
func (r ApiPrintServicesUpdateEndpointsRequest) MicrosoftGraphPrintServiceEndpoint(microsoftGraphPrintServiceEndpoint MicrosoftGraphPrintServiceEndpoint) ApiPrintServicesUpdateEndpointsRequest {
	r.microsoftGraphPrintServiceEndpoint = &microsoftGraphPrintServiceEndpoint
	return r
}

func (r ApiPrintServicesUpdateEndpointsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintServicesUpdateEndpointsExecute(r)
}

/*
PrintServicesUpdateEndpoints Update the navigation property endpoints in print

Endpoints that can be used to access the service. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printServiceId key: id of printService
 @param printServiceEndpointId key: id of printServiceEndpoint
 @return ApiPrintServicesUpdateEndpointsRequest
*/
func (a *PrintPrintServiceApiService) PrintServicesUpdateEndpoints(ctx _context.Context, printServiceId string, printServiceEndpointId string) ApiPrintServicesUpdateEndpointsRequest {
	return ApiPrintServicesUpdateEndpointsRequest{
		ApiService: a,
		ctx: ctx,
		printServiceId: printServiceId,
		printServiceEndpointId: printServiceEndpointId,
	}
}

// Execute executes the request
func (a *PrintPrintServiceApiService) PrintServicesUpdateEndpointsExecute(r ApiPrintServicesUpdateEndpointsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintServiceApiService.PrintServicesUpdateEndpoints")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/services/{printService-id}/endpoints/{printServiceEndpoint-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printService-id"+"}", _neturl.PathEscape(parameterToString(r.printServiceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"printServiceEndpoint-id"+"}", _neturl.PathEscape(parameterToString(r.printServiceEndpointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintServiceEndpoint == nil {
		return nil, reportError("microsoftGraphPrintServiceEndpoint is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintServiceEndpoint
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPrintUpdateServicesRequest struct {
	ctx _context.Context
	ApiService *PrintPrintServiceApiService
	printServiceId string
	microsoftGraphPrintService *MicrosoftGraphPrintService
}

// New navigation property values
func (r ApiPrintUpdateServicesRequest) MicrosoftGraphPrintService(microsoftGraphPrintService MicrosoftGraphPrintService) ApiPrintUpdateServicesRequest {
	r.microsoftGraphPrintService = &microsoftGraphPrintService
	return r
}

func (r ApiPrintUpdateServicesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PrintUpdateServicesExecute(r)
}

/*
PrintUpdateServices Update the navigation property services in print

The list of available Universal Print service endpoints.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printServiceId key: id of printService
 @return ApiPrintUpdateServicesRequest
*/
func (a *PrintPrintServiceApiService) PrintUpdateServices(ctx _context.Context, printServiceId string) ApiPrintUpdateServicesRequest {
	return ApiPrintUpdateServicesRequest{
		ApiService: a,
		ctx: ctx,
		printServiceId: printServiceId,
	}
}

// Execute executes the request
func (a *PrintPrintServiceApiService) PrintUpdateServicesExecute(r ApiPrintUpdateServicesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrintPrintServiceApiService.PrintUpdateServices")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/print/services/{printService-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printService-id"+"}", _neturl.PathEscape(parameterToString(r.printServiceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintService == nil {
		return nil, reportError("microsoftGraphPrintService is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintService
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
