/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Drive struct for Drive
type Drive struct {
	// Describes the type of drive represented by this resource. OneDrive personal drives will return personal. OneDrive for Business will return business. SharePoint document libraries will return documentLibrary. Read-only.
	DriveType NullableString `json:"driveType,omitempty"`
	// Optional. The user account that owns the drive. Read-only.
	Owner AnyOfmicrosoftGraphIdentitySet `json:"owner,omitempty"`
	// Optional. Information about the drive's storage space quota. Read-only.
	Quota AnyOfmicrosoftGraphQuota `json:"quota,omitempty"`
	SharePointIds AnyOfmicrosoftGraphSharepointIds `json:"sharePointIds,omitempty"`
	// If present, indicates that this is a system-managed drive. Read-only.
	System AnyOfobject `json:"system,omitempty"`
	// Collection of [bundles][bundle] (albums and multi-select-shared sets of items). Only in personal OneDrive.
	Bundles *[]MicrosoftGraphDriveItem `json:"bundles,omitempty"`
	// The list of items the user is following. Only in OneDrive for Business.
	Following *[]MicrosoftGraphDriveItem `json:"following,omitempty"`
	// All items contained in the drive. Read-only. Nullable.
	Items *[]MicrosoftGraphDriveItem `json:"items,omitempty"`
	// For drives in SharePoint, the underlying document library list. Read-only. Nullable.
	List AnyOfmicrosoftGraphList `json:"list,omitempty"`
	// The root folder of the drive. Read-only.
	Root AnyOfmicrosoftGraphDriveItem `json:"root,omitempty"`
	// Collection of common folders available in OneDrive. Read-only. Nullable.
	Special *[]MicrosoftGraphDriveItem `json:"special,omitempty"`
}

// NewDrive instantiates a new Drive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDrive() *Drive {
	this := Drive{}
	return &this
}

// NewDriveWithDefaults instantiates a new Drive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriveWithDefaults() *Drive {
	this := Drive{}
	return &this
}

// GetDriveType returns the DriveType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Drive) GetDriveType() string {
	if o == nil || o.DriveType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DriveType.Get()
}

// GetDriveTypeOk returns a tuple with the DriveType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Drive) GetDriveTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DriveType.Get(), o.DriveType.IsSet()
}

// HasDriveType returns a boolean if a field has been set.
func (o *Drive) HasDriveType() bool {
	if o != nil && o.DriveType.IsSet() {
		return true
	}

	return false
}

// SetDriveType gets a reference to the given NullableString and assigns it to the DriveType field.
func (o *Drive) SetDriveType(v string) {
	o.DriveType.Set(&v)
}
// SetDriveTypeNil sets the value for DriveType to be an explicit nil
func (o *Drive) SetDriveTypeNil() {
	o.DriveType.Set(nil)
}

// UnsetDriveType ensures that no value is present for DriveType, not even an explicit nil
func (o *Drive) UnsetDriveType() {
	o.DriveType.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Drive) GetOwner() AnyOfmicrosoftGraphIdentitySet {
	if o == nil  {
		var ret AnyOfmicrosoftGraphIdentitySet
		return ret
	}
	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Drive) GetOwnerOk() (*AnyOfmicrosoftGraphIdentitySet, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return &o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Drive) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given AnyOfmicrosoftGraphIdentitySet and assigns it to the Owner field.
func (o *Drive) SetOwner(v AnyOfmicrosoftGraphIdentitySet) {
	o.Owner = v
}

// GetQuota returns the Quota field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Drive) GetQuota() AnyOfmicrosoftGraphQuota {
	if o == nil  {
		var ret AnyOfmicrosoftGraphQuota
		return ret
	}
	return o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Drive) GetQuotaOk() (*AnyOfmicrosoftGraphQuota, bool) {
	if o == nil || o.Quota == nil {
		return nil, false
	}
	return &o.Quota, true
}

// HasQuota returns a boolean if a field has been set.
func (o *Drive) HasQuota() bool {
	if o != nil && o.Quota != nil {
		return true
	}

	return false
}

// SetQuota gets a reference to the given AnyOfmicrosoftGraphQuota and assigns it to the Quota field.
func (o *Drive) SetQuota(v AnyOfmicrosoftGraphQuota) {
	o.Quota = v
}

// GetSharePointIds returns the SharePointIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Drive) GetSharePointIds() AnyOfmicrosoftGraphSharepointIds {
	if o == nil  {
		var ret AnyOfmicrosoftGraphSharepointIds
		return ret
	}
	return o.SharePointIds
}

// GetSharePointIdsOk returns a tuple with the SharePointIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Drive) GetSharePointIdsOk() (*AnyOfmicrosoftGraphSharepointIds, bool) {
	if o == nil || o.SharePointIds == nil {
		return nil, false
	}
	return &o.SharePointIds, true
}

// HasSharePointIds returns a boolean if a field has been set.
func (o *Drive) HasSharePointIds() bool {
	if o != nil && o.SharePointIds != nil {
		return true
	}

	return false
}

// SetSharePointIds gets a reference to the given AnyOfmicrosoftGraphSharepointIds and assigns it to the SharePointIds field.
func (o *Drive) SetSharePointIds(v AnyOfmicrosoftGraphSharepointIds) {
	o.SharePointIds = v
}

// GetSystem returns the System field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Drive) GetSystem() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Drive) GetSystemOk() (*AnyOfobject, bool) {
	if o == nil || o.System == nil {
		return nil, false
	}
	return &o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *Drive) HasSystem() bool {
	if o != nil && o.System != nil {
		return true
	}

	return false
}

// SetSystem gets a reference to the given AnyOfobject and assigns it to the System field.
func (o *Drive) SetSystem(v AnyOfobject) {
	o.System = v
}

// GetBundles returns the Bundles field value if set, zero value otherwise.
func (o *Drive) GetBundles() []MicrosoftGraphDriveItem {
	if o == nil || o.Bundles == nil {
		var ret []MicrosoftGraphDriveItem
		return ret
	}
	return *o.Bundles
}

// GetBundlesOk returns a tuple with the Bundles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetBundlesOk() (*[]MicrosoftGraphDriveItem, bool) {
	if o == nil || o.Bundles == nil {
		return nil, false
	}
	return o.Bundles, true
}

// HasBundles returns a boolean if a field has been set.
func (o *Drive) HasBundles() bool {
	if o != nil && o.Bundles != nil {
		return true
	}

	return false
}

// SetBundles gets a reference to the given []MicrosoftGraphDriveItem and assigns it to the Bundles field.
func (o *Drive) SetBundles(v []MicrosoftGraphDriveItem) {
	o.Bundles = &v
}

// GetFollowing returns the Following field value if set, zero value otherwise.
func (o *Drive) GetFollowing() []MicrosoftGraphDriveItem {
	if o == nil || o.Following == nil {
		var ret []MicrosoftGraphDriveItem
		return ret
	}
	return *o.Following
}

// GetFollowingOk returns a tuple with the Following field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetFollowingOk() (*[]MicrosoftGraphDriveItem, bool) {
	if o == nil || o.Following == nil {
		return nil, false
	}
	return o.Following, true
}

// HasFollowing returns a boolean if a field has been set.
func (o *Drive) HasFollowing() bool {
	if o != nil && o.Following != nil {
		return true
	}

	return false
}

// SetFollowing gets a reference to the given []MicrosoftGraphDriveItem and assigns it to the Following field.
func (o *Drive) SetFollowing(v []MicrosoftGraphDriveItem) {
	o.Following = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Drive) GetItems() []MicrosoftGraphDriveItem {
	if o == nil || o.Items == nil {
		var ret []MicrosoftGraphDriveItem
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetItemsOk() (*[]MicrosoftGraphDriveItem, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Drive) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []MicrosoftGraphDriveItem and assigns it to the Items field.
func (o *Drive) SetItems(v []MicrosoftGraphDriveItem) {
	o.Items = &v
}

// GetList returns the List field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Drive) GetList() AnyOfmicrosoftGraphList {
	if o == nil  {
		var ret AnyOfmicrosoftGraphList
		return ret
	}
	return o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Drive) GetListOk() (*AnyOfmicrosoftGraphList, bool) {
	if o == nil || o.List == nil {
		return nil, false
	}
	return &o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *Drive) HasList() bool {
	if o != nil && o.List != nil {
		return true
	}

	return false
}

// SetList gets a reference to the given AnyOfmicrosoftGraphList and assigns it to the List field.
func (o *Drive) SetList(v AnyOfmicrosoftGraphList) {
	o.List = v
}

// GetRoot returns the Root field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Drive) GetRoot() AnyOfmicrosoftGraphDriveItem {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDriveItem
		return ret
	}
	return o.Root
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Drive) GetRootOk() (*AnyOfmicrosoftGraphDriveItem, bool) {
	if o == nil || o.Root == nil {
		return nil, false
	}
	return &o.Root, true
}

// HasRoot returns a boolean if a field has been set.
func (o *Drive) HasRoot() bool {
	if o != nil && o.Root != nil {
		return true
	}

	return false
}

// SetRoot gets a reference to the given AnyOfmicrosoftGraphDriveItem and assigns it to the Root field.
func (o *Drive) SetRoot(v AnyOfmicrosoftGraphDriveItem) {
	o.Root = v
}

// GetSpecial returns the Special field value if set, zero value otherwise.
func (o *Drive) GetSpecial() []MicrosoftGraphDriveItem {
	if o == nil || o.Special == nil {
		var ret []MicrosoftGraphDriveItem
		return ret
	}
	return *o.Special
}

// GetSpecialOk returns a tuple with the Special field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetSpecialOk() (*[]MicrosoftGraphDriveItem, bool) {
	if o == nil || o.Special == nil {
		return nil, false
	}
	return o.Special, true
}

// HasSpecial returns a boolean if a field has been set.
func (o *Drive) HasSpecial() bool {
	if o != nil && o.Special != nil {
		return true
	}

	return false
}

// SetSpecial gets a reference to the given []MicrosoftGraphDriveItem and assigns it to the Special field.
func (o *Drive) SetSpecial(v []MicrosoftGraphDriveItem) {
	o.Special = &v
}

func (o Drive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DriveType.IsSet() {
		toSerialize["driveType"] = o.DriveType.Get()
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Quota != nil {
		toSerialize["quota"] = o.Quota
	}
	if o.SharePointIds != nil {
		toSerialize["sharePointIds"] = o.SharePointIds
	}
	if o.System != nil {
		toSerialize["system"] = o.System
	}
	if o.Bundles != nil {
		toSerialize["bundles"] = o.Bundles
	}
	if o.Following != nil {
		toSerialize["following"] = o.Following
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.List != nil {
		toSerialize["list"] = o.List
	}
	if o.Root != nil {
		toSerialize["root"] = o.Root
	}
	if o.Special != nil {
		toSerialize["special"] = o.Special
	}
	return json.Marshal(toSerialize)
}

type NullableDrive struct {
	value *Drive
	isSet bool
}

func (v NullableDrive) Get() *Drive {
	return v.value
}

func (v *NullableDrive) Set(val *Drive) {
	v.value = val
	v.isSet = true
}

func (v NullableDrive) IsSet() bool {
	return v.isSet
}

func (v *NullableDrive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDrive(val *Drive) *NullableDrive {
	return &NullableDrive{value: val, isSet: true}
}

func (v NullableDrive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDrive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


