/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphEducationRoot struct for MicrosoftGraphEducationRoot
type MicrosoftGraphEducationRoot struct {
	Classes *[]MicrosoftGraphEducationClass `json:"classes,omitempty"`
	Me AnyOfmicrosoftGraphEducationUser `json:"me,omitempty"`
	Schools *[]MicrosoftGraphEducationSchool `json:"schools,omitempty"`
	Users *[]MicrosoftGraphEducationUser `json:"users,omitempty"`
}

// NewMicrosoftGraphEducationRoot instantiates a new MicrosoftGraphEducationRoot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphEducationRoot() *MicrosoftGraphEducationRoot {
	this := MicrosoftGraphEducationRoot{}
	return &this
}

// NewMicrosoftGraphEducationRootWithDefaults instantiates a new MicrosoftGraphEducationRoot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphEducationRootWithDefaults() *MicrosoftGraphEducationRoot {
	this := MicrosoftGraphEducationRoot{}
	return &this
}

// GetClasses returns the Classes field value if set, zero value otherwise.
func (o *MicrosoftGraphEducationRoot) GetClasses() []MicrosoftGraphEducationClass {
	if o == nil || o.Classes == nil {
		var ret []MicrosoftGraphEducationClass
		return ret
	}
	return *o.Classes
}

// GetClassesOk returns a tuple with the Classes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphEducationRoot) GetClassesOk() (*[]MicrosoftGraphEducationClass, bool) {
	if o == nil || o.Classes == nil {
		return nil, false
	}
	return o.Classes, true
}

// HasClasses returns a boolean if a field has been set.
func (o *MicrosoftGraphEducationRoot) HasClasses() bool {
	if o != nil && o.Classes != nil {
		return true
	}

	return false
}

// SetClasses gets a reference to the given []MicrosoftGraphEducationClass and assigns it to the Classes field.
func (o *MicrosoftGraphEducationRoot) SetClasses(v []MicrosoftGraphEducationClass) {
	o.Classes = &v
}

// GetMe returns the Me field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphEducationRoot) GetMe() AnyOfmicrosoftGraphEducationUser {
	if o == nil  {
		var ret AnyOfmicrosoftGraphEducationUser
		return ret
	}
	return o.Me
}

// GetMeOk returns a tuple with the Me field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphEducationRoot) GetMeOk() (*AnyOfmicrosoftGraphEducationUser, bool) {
	if o == nil || o.Me == nil {
		return nil, false
	}
	return &o.Me, true
}

// HasMe returns a boolean if a field has been set.
func (o *MicrosoftGraphEducationRoot) HasMe() bool {
	if o != nil && o.Me != nil {
		return true
	}

	return false
}

// SetMe gets a reference to the given AnyOfmicrosoftGraphEducationUser and assigns it to the Me field.
func (o *MicrosoftGraphEducationRoot) SetMe(v AnyOfmicrosoftGraphEducationUser) {
	o.Me = v
}

// GetSchools returns the Schools field value if set, zero value otherwise.
func (o *MicrosoftGraphEducationRoot) GetSchools() []MicrosoftGraphEducationSchool {
	if o == nil || o.Schools == nil {
		var ret []MicrosoftGraphEducationSchool
		return ret
	}
	return *o.Schools
}

// GetSchoolsOk returns a tuple with the Schools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphEducationRoot) GetSchoolsOk() (*[]MicrosoftGraphEducationSchool, bool) {
	if o == nil || o.Schools == nil {
		return nil, false
	}
	return o.Schools, true
}

// HasSchools returns a boolean if a field has been set.
func (o *MicrosoftGraphEducationRoot) HasSchools() bool {
	if o != nil && o.Schools != nil {
		return true
	}

	return false
}

// SetSchools gets a reference to the given []MicrosoftGraphEducationSchool and assigns it to the Schools field.
func (o *MicrosoftGraphEducationRoot) SetSchools(v []MicrosoftGraphEducationSchool) {
	o.Schools = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *MicrosoftGraphEducationRoot) GetUsers() []MicrosoftGraphEducationUser {
	if o == nil || o.Users == nil {
		var ret []MicrosoftGraphEducationUser
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphEducationRoot) GetUsersOk() (*[]MicrosoftGraphEducationUser, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *MicrosoftGraphEducationRoot) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []MicrosoftGraphEducationUser and assigns it to the Users field.
func (o *MicrosoftGraphEducationRoot) SetUsers(v []MicrosoftGraphEducationUser) {
	o.Users = &v
}

func (o MicrosoftGraphEducationRoot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Classes != nil {
		toSerialize["classes"] = o.Classes
	}
	if o.Me != nil {
		toSerialize["me"] = o.Me
	}
	if o.Schools != nil {
		toSerialize["schools"] = o.Schools
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphEducationRoot struct {
	value *MicrosoftGraphEducationRoot
	isSet bool
}

func (v NullableMicrosoftGraphEducationRoot) Get() *MicrosoftGraphEducationRoot {
	return v.value
}

func (v *NullableMicrosoftGraphEducationRoot) Set(val *MicrosoftGraphEducationRoot) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphEducationRoot) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphEducationRoot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphEducationRoot(val *MicrosoftGraphEducationRoot) *NullableMicrosoftGraphEducationRoot {
	return &NullableMicrosoftGraphEducationRoot{value: val, isSet: true}
}

func (v NullableMicrosoftGraphEducationRoot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphEducationRoot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


