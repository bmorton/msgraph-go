/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// UsersManagedDeviceApiService UsersManagedDeviceApi service
type UsersManagedDeviceApiService service

type ApiUsersCreateManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	microsoftGraphManagedDevice *MicrosoftGraphManagedDevice
}

// New navigation property
func (r ApiUsersCreateManagedDevicesRequest) MicrosoftGraphManagedDevice(microsoftGraphManagedDevice MicrosoftGraphManagedDevice) ApiUsersCreateManagedDevicesRequest {
	r.microsoftGraphManagedDevice = &microsoftGraphManagedDevice
	return r
}

func (r ApiUsersCreateManagedDevicesRequest) Execute() (MicrosoftGraphManagedDevice, *_nethttp.Response, error) {
	return r.ApiService.UsersCreateManagedDevicesExecute(r)
}

/*
UsersCreateManagedDevices Create new navigation property to managedDevices for users

The managed devices associated with the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersCreateManagedDevicesRequest
*/
func (a *UsersManagedDeviceApiService) UsersCreateManagedDevices(ctx _context.Context, userId string) ApiUsersCreateManagedDevicesRequest {
	return ApiUsersCreateManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDevice
func (a *UsersManagedDeviceApiService) UsersCreateManagedDevicesExecute(r ApiUsersCreateManagedDevicesRequest) (MicrosoftGraphManagedDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersCreateManagedDevices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDevice == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedDevice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDevice
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersDeleteManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	ifMatch *string
}

// ETag
func (r ApiUsersDeleteManagedDevicesRequest) IfMatch(ifMatch string) ApiUsersDeleteManagedDevicesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersDeleteManagedDevicesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersDeleteManagedDevicesExecute(r)
}

/*
UsersDeleteManagedDevices Delete navigation property managedDevices for users

The managed devices associated with the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @return ApiUsersDeleteManagedDevicesRequest
*/
func (a *UsersManagedDeviceApiService) UsersDeleteManagedDevices(ctx _context.Context, userId string, managedDeviceId string) ApiUsersDeleteManagedDevicesRequest {
	return ApiUsersDeleteManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
func (a *UsersManagedDeviceApiService) UsersDeleteManagedDevicesExecute(r ApiUsersDeleteManagedDevicesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersDeleteManagedDevices")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersGetManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersGetManagedDevicesRequest) Select_(select_ []string) ApiUsersGetManagedDevicesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersGetManagedDevicesRequest) Expand(expand []string) ApiUsersGetManagedDevicesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersGetManagedDevicesRequest) Execute() (MicrosoftGraphManagedDevice, *_nethttp.Response, error) {
	return r.ApiService.UsersGetManagedDevicesExecute(r)
}

/*
UsersGetManagedDevices Get managedDevices from users

The managed devices associated with the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @return ApiUsersGetManagedDevicesRequest
*/
func (a *UsersManagedDeviceApiService) UsersGetManagedDevices(ctx _context.Context, userId string, managedDeviceId string) ApiUsersGetManagedDevicesRequest {
	return ApiUsersGetManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDevice
func (a *UsersManagedDeviceApiService) UsersGetManagedDevicesExecute(r ApiUsersGetManagedDevicesRequest) (MicrosoftGraphManagedDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersGetManagedDevices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersListManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersListManagedDevicesRequest) Top(top int32) ApiUsersListManagedDevicesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersListManagedDevicesRequest) Skip(skip int32) ApiUsersListManagedDevicesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersListManagedDevicesRequest) Search(search string) ApiUsersListManagedDevicesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersListManagedDevicesRequest) Filter(filter string) ApiUsersListManagedDevicesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersListManagedDevicesRequest) Count(count bool) ApiUsersListManagedDevicesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersListManagedDevicesRequest) Orderby(orderby []string) ApiUsersListManagedDevicesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersListManagedDevicesRequest) Select_(select_ []string) ApiUsersListManagedDevicesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersListManagedDevicesRequest) Expand(expand []string) ApiUsersListManagedDevicesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersListManagedDevicesRequest) Execute() (CollectionOfManagedDevice, *_nethttp.Response, error) {
	return r.ApiService.UsersListManagedDevicesExecute(r)
}

/*
UsersListManagedDevices Get managedDevices from users

The managed devices associated with the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersListManagedDevicesRequest
*/
func (a *UsersManagedDeviceApiService) UsersListManagedDevices(ctx _context.Context, userId string) ApiUsersListManagedDevicesRequest {
	return ApiUsersListManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfManagedDevice
func (a *UsersManagedDeviceApiService) UsersListManagedDevicesExecute(r ApiUsersListManagedDevicesRequest) (CollectionOfManagedDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersListManagedDevices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersManagedDevicesCreateDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	microsoftGraphDeviceCompliancePolicyState *MicrosoftGraphDeviceCompliancePolicyState
}

// New navigation property
func (r ApiUsersManagedDevicesCreateDeviceCompliancePolicyStatesRequest) MicrosoftGraphDeviceCompliancePolicyState(microsoftGraphDeviceCompliancePolicyState MicrosoftGraphDeviceCompliancePolicyState) ApiUsersManagedDevicesCreateDeviceCompliancePolicyStatesRequest {
	r.microsoftGraphDeviceCompliancePolicyState = &microsoftGraphDeviceCompliancePolicyState
	return r
}

func (r ApiUsersManagedDevicesCreateDeviceCompliancePolicyStatesRequest) Execute() (MicrosoftGraphDeviceCompliancePolicyState, *_nethttp.Response, error) {
	return r.ApiService.UsersManagedDevicesCreateDeviceCompliancePolicyStatesExecute(r)
}

/*
UsersManagedDevicesCreateDeviceCompliancePolicyStates Create new navigation property to deviceCompliancePolicyStates for users

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @return ApiUsersManagedDevicesCreateDeviceCompliancePolicyStatesRequest
*/
func (a *UsersManagedDeviceApiService) UsersManagedDevicesCreateDeviceCompliancePolicyStates(ctx _context.Context, userId string, managedDeviceId string) ApiUsersManagedDevicesCreateDeviceCompliancePolicyStatesRequest {
	return ApiUsersManagedDevicesCreateDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCompliancePolicyState
func (a *UsersManagedDeviceApiService) UsersManagedDevicesCreateDeviceCompliancePolicyStatesExecute(r ApiUsersManagedDevicesCreateDeviceCompliancePolicyStatesRequest) (MicrosoftGraphDeviceCompliancePolicyState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCompliancePolicyState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersManagedDevicesCreateDeviceCompliancePolicyStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCompliancePolicyState == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceCompliancePolicyState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCompliancePolicyState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersManagedDevicesCreateDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	microsoftGraphDeviceConfigurationState *MicrosoftGraphDeviceConfigurationState
}

// New navigation property
func (r ApiUsersManagedDevicesCreateDeviceConfigurationStatesRequest) MicrosoftGraphDeviceConfigurationState(microsoftGraphDeviceConfigurationState MicrosoftGraphDeviceConfigurationState) ApiUsersManagedDevicesCreateDeviceConfigurationStatesRequest {
	r.microsoftGraphDeviceConfigurationState = &microsoftGraphDeviceConfigurationState
	return r
}

func (r ApiUsersManagedDevicesCreateDeviceConfigurationStatesRequest) Execute() (MicrosoftGraphDeviceConfigurationState, *_nethttp.Response, error) {
	return r.ApiService.UsersManagedDevicesCreateDeviceConfigurationStatesExecute(r)
}

/*
UsersManagedDevicesCreateDeviceConfigurationStates Create new navigation property to deviceConfigurationStates for users

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @return ApiUsersManagedDevicesCreateDeviceConfigurationStatesRequest
*/
func (a *UsersManagedDeviceApiService) UsersManagedDevicesCreateDeviceConfigurationStates(ctx _context.Context, userId string, managedDeviceId string) ApiUsersManagedDevicesCreateDeviceConfigurationStatesRequest {
	return ApiUsersManagedDevicesCreateDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationState
func (a *UsersManagedDeviceApiService) UsersManagedDevicesCreateDeviceConfigurationStatesExecute(r ApiUsersManagedDevicesCreateDeviceConfigurationStatesRequest) (MicrosoftGraphDeviceConfigurationState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersManagedDevicesCreateDeviceConfigurationStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}/deviceConfigurationStates"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationState == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceConfigurationState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersManagedDevicesDeleteDeviceCategoryRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	ifMatch *string
}

// ETag
func (r ApiUsersManagedDevicesDeleteDeviceCategoryRequest) IfMatch(ifMatch string) ApiUsersManagedDevicesDeleteDeviceCategoryRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersManagedDevicesDeleteDeviceCategoryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersManagedDevicesDeleteDeviceCategoryExecute(r)
}

/*
UsersManagedDevicesDeleteDeviceCategory Delete navigation property deviceCategory for users

Device category

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @return ApiUsersManagedDevicesDeleteDeviceCategoryRequest
*/
func (a *UsersManagedDeviceApiService) UsersManagedDevicesDeleteDeviceCategory(ctx _context.Context, userId string, managedDeviceId string) ApiUsersManagedDevicesDeleteDeviceCategoryRequest {
	return ApiUsersManagedDevicesDeleteDeviceCategoryRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
func (a *UsersManagedDeviceApiService) UsersManagedDevicesDeleteDeviceCategoryExecute(r ApiUsersManagedDevicesDeleteDeviceCategoryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersManagedDevicesDeleteDeviceCategory")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}/deviceCategory"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersManagedDevicesDeleteDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	deviceCompliancePolicyStateId string
	ifMatch *string
}

// ETag
func (r ApiUsersManagedDevicesDeleteDeviceCompliancePolicyStatesRequest) IfMatch(ifMatch string) ApiUsersManagedDevicesDeleteDeviceCompliancePolicyStatesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersManagedDevicesDeleteDeviceCompliancePolicyStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersManagedDevicesDeleteDeviceCompliancePolicyStatesExecute(r)
}

/*
UsersManagedDevicesDeleteDeviceCompliancePolicyStates Delete navigation property deviceCompliancePolicyStates for users

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @param deviceCompliancePolicyStateId key: id of deviceCompliancePolicyState
 @return ApiUsersManagedDevicesDeleteDeviceCompliancePolicyStatesRequest
*/
func (a *UsersManagedDeviceApiService) UsersManagedDevicesDeleteDeviceCompliancePolicyStates(ctx _context.Context, userId string, managedDeviceId string, deviceCompliancePolicyStateId string) ApiUsersManagedDevicesDeleteDeviceCompliancePolicyStatesRequest {
	return ApiUsersManagedDevicesDeleteDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
		deviceCompliancePolicyStateId: deviceCompliancePolicyStateId,
	}
}

// Execute executes the request
func (a *UsersManagedDeviceApiService) UsersManagedDevicesDeleteDeviceCompliancePolicyStatesExecute(r ApiUsersManagedDevicesDeleteDeviceCompliancePolicyStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersManagedDevicesDeleteDeviceCompliancePolicyStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates/{deviceCompliancePolicyState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicyState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersManagedDevicesDeleteDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	deviceConfigurationStateId string
	ifMatch *string
}

// ETag
func (r ApiUsersManagedDevicesDeleteDeviceConfigurationStatesRequest) IfMatch(ifMatch string) ApiUsersManagedDevicesDeleteDeviceConfigurationStatesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersManagedDevicesDeleteDeviceConfigurationStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersManagedDevicesDeleteDeviceConfigurationStatesExecute(r)
}

/*
UsersManagedDevicesDeleteDeviceConfigurationStates Delete navigation property deviceConfigurationStates for users

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @param deviceConfigurationStateId key: id of deviceConfigurationState
 @return ApiUsersManagedDevicesDeleteDeviceConfigurationStatesRequest
*/
func (a *UsersManagedDeviceApiService) UsersManagedDevicesDeleteDeviceConfigurationStates(ctx _context.Context, userId string, managedDeviceId string, deviceConfigurationStateId string) ApiUsersManagedDevicesDeleteDeviceConfigurationStatesRequest {
	return ApiUsersManagedDevicesDeleteDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
		deviceConfigurationStateId: deviceConfigurationStateId,
	}
}

// Execute executes the request
func (a *UsersManagedDeviceApiService) UsersManagedDevicesDeleteDeviceConfigurationStatesExecute(r ApiUsersManagedDevicesDeleteDeviceConfigurationStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersManagedDevicesDeleteDeviceConfigurationStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}/deviceConfigurationStates/{deviceConfigurationState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersManagedDevicesGetDeviceCategoryRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersManagedDevicesGetDeviceCategoryRequest) Select_(select_ []string) ApiUsersManagedDevicesGetDeviceCategoryRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersManagedDevicesGetDeviceCategoryRequest) Expand(expand []string) ApiUsersManagedDevicesGetDeviceCategoryRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersManagedDevicesGetDeviceCategoryRequest) Execute() (MicrosoftGraphDeviceCategory, *_nethttp.Response, error) {
	return r.ApiService.UsersManagedDevicesGetDeviceCategoryExecute(r)
}

/*
UsersManagedDevicesGetDeviceCategory Get deviceCategory from users

Device category

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @return ApiUsersManagedDevicesGetDeviceCategoryRequest
*/
func (a *UsersManagedDeviceApiService) UsersManagedDevicesGetDeviceCategory(ctx _context.Context, userId string, managedDeviceId string) ApiUsersManagedDevicesGetDeviceCategoryRequest {
	return ApiUsersManagedDevicesGetDeviceCategoryRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCategory
func (a *UsersManagedDeviceApiService) UsersManagedDevicesGetDeviceCategoryExecute(r ApiUsersManagedDevicesGetDeviceCategoryRequest) (MicrosoftGraphDeviceCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersManagedDevicesGetDeviceCategory")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}/deviceCategory"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersManagedDevicesGetDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	deviceCompliancePolicyStateId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersManagedDevicesGetDeviceCompliancePolicyStatesRequest) Select_(select_ []string) ApiUsersManagedDevicesGetDeviceCompliancePolicyStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersManagedDevicesGetDeviceCompliancePolicyStatesRequest) Expand(expand []string) ApiUsersManagedDevicesGetDeviceCompliancePolicyStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersManagedDevicesGetDeviceCompliancePolicyStatesRequest) Execute() (MicrosoftGraphDeviceCompliancePolicyState, *_nethttp.Response, error) {
	return r.ApiService.UsersManagedDevicesGetDeviceCompliancePolicyStatesExecute(r)
}

/*
UsersManagedDevicesGetDeviceCompliancePolicyStates Get deviceCompliancePolicyStates from users

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @param deviceCompliancePolicyStateId key: id of deviceCompliancePolicyState
 @return ApiUsersManagedDevicesGetDeviceCompliancePolicyStatesRequest
*/
func (a *UsersManagedDeviceApiService) UsersManagedDevicesGetDeviceCompliancePolicyStates(ctx _context.Context, userId string, managedDeviceId string, deviceCompliancePolicyStateId string) ApiUsersManagedDevicesGetDeviceCompliancePolicyStatesRequest {
	return ApiUsersManagedDevicesGetDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
		deviceCompliancePolicyStateId: deviceCompliancePolicyStateId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCompliancePolicyState
func (a *UsersManagedDeviceApiService) UsersManagedDevicesGetDeviceCompliancePolicyStatesExecute(r ApiUsersManagedDevicesGetDeviceCompliancePolicyStatesRequest) (MicrosoftGraphDeviceCompliancePolicyState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCompliancePolicyState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersManagedDevicesGetDeviceCompliancePolicyStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates/{deviceCompliancePolicyState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicyState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersManagedDevicesGetDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	deviceConfigurationStateId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersManagedDevicesGetDeviceConfigurationStatesRequest) Select_(select_ []string) ApiUsersManagedDevicesGetDeviceConfigurationStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersManagedDevicesGetDeviceConfigurationStatesRequest) Expand(expand []string) ApiUsersManagedDevicesGetDeviceConfigurationStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersManagedDevicesGetDeviceConfigurationStatesRequest) Execute() (MicrosoftGraphDeviceConfigurationState, *_nethttp.Response, error) {
	return r.ApiService.UsersManagedDevicesGetDeviceConfigurationStatesExecute(r)
}

/*
UsersManagedDevicesGetDeviceConfigurationStates Get deviceConfigurationStates from users

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @param deviceConfigurationStateId key: id of deviceConfigurationState
 @return ApiUsersManagedDevicesGetDeviceConfigurationStatesRequest
*/
func (a *UsersManagedDeviceApiService) UsersManagedDevicesGetDeviceConfigurationStates(ctx _context.Context, userId string, managedDeviceId string, deviceConfigurationStateId string) ApiUsersManagedDevicesGetDeviceConfigurationStatesRequest {
	return ApiUsersManagedDevicesGetDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
		deviceConfigurationStateId: deviceConfigurationStateId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationState
func (a *UsersManagedDeviceApiService) UsersManagedDevicesGetDeviceConfigurationStatesExecute(r ApiUsersManagedDevicesGetDeviceConfigurationStatesRequest) (MicrosoftGraphDeviceConfigurationState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersManagedDevicesGetDeviceConfigurationStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}/deviceConfigurationStates/{deviceConfigurationState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest) Top(top int32) ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest) Skip(skip int32) ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest) Search(search string) ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest) Filter(filter string) ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest) Count(count bool) ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest) Orderby(orderby []string) ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest) Select_(select_ []string) ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest) Expand(expand []string) ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest) Execute() (CollectionOfDeviceCompliancePolicyState, *_nethttp.Response, error) {
	return r.ApiService.UsersManagedDevicesListDeviceCompliancePolicyStatesExecute(r)
}

/*
UsersManagedDevicesListDeviceCompliancePolicyStates Get deviceCompliancePolicyStates from users

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @return ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest
*/
func (a *UsersManagedDeviceApiService) UsersManagedDevicesListDeviceCompliancePolicyStates(ctx _context.Context, userId string, managedDeviceId string) ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest {
	return ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceCompliancePolicyState
func (a *UsersManagedDeviceApiService) UsersManagedDevicesListDeviceCompliancePolicyStatesExecute(r ApiUsersManagedDevicesListDeviceCompliancePolicyStatesRequest) (CollectionOfDeviceCompliancePolicyState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceCompliancePolicyState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersManagedDevicesListDeviceCompliancePolicyStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersManagedDevicesListDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersManagedDevicesListDeviceConfigurationStatesRequest) Top(top int32) ApiUsersManagedDevicesListDeviceConfigurationStatesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersManagedDevicesListDeviceConfigurationStatesRequest) Skip(skip int32) ApiUsersManagedDevicesListDeviceConfigurationStatesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersManagedDevicesListDeviceConfigurationStatesRequest) Search(search string) ApiUsersManagedDevicesListDeviceConfigurationStatesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersManagedDevicesListDeviceConfigurationStatesRequest) Filter(filter string) ApiUsersManagedDevicesListDeviceConfigurationStatesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersManagedDevicesListDeviceConfigurationStatesRequest) Count(count bool) ApiUsersManagedDevicesListDeviceConfigurationStatesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersManagedDevicesListDeviceConfigurationStatesRequest) Orderby(orderby []string) ApiUsersManagedDevicesListDeviceConfigurationStatesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersManagedDevicesListDeviceConfigurationStatesRequest) Select_(select_ []string) ApiUsersManagedDevicesListDeviceConfigurationStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersManagedDevicesListDeviceConfigurationStatesRequest) Expand(expand []string) ApiUsersManagedDevicesListDeviceConfigurationStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersManagedDevicesListDeviceConfigurationStatesRequest) Execute() (CollectionOfDeviceConfigurationState, *_nethttp.Response, error) {
	return r.ApiService.UsersManagedDevicesListDeviceConfigurationStatesExecute(r)
}

/*
UsersManagedDevicesListDeviceConfigurationStates Get deviceConfigurationStates from users

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @return ApiUsersManagedDevicesListDeviceConfigurationStatesRequest
*/
func (a *UsersManagedDeviceApiService) UsersManagedDevicesListDeviceConfigurationStates(ctx _context.Context, userId string, managedDeviceId string) ApiUsersManagedDevicesListDeviceConfigurationStatesRequest {
	return ApiUsersManagedDevicesListDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceConfigurationState
func (a *UsersManagedDeviceApiService) UsersManagedDevicesListDeviceConfigurationStatesExecute(r ApiUsersManagedDevicesListDeviceConfigurationStatesRequest) (CollectionOfDeviceConfigurationState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceConfigurationState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersManagedDevicesListDeviceConfigurationStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}/deviceConfigurationStates"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersManagedDevicesUpdateDeviceCategoryRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	microsoftGraphDeviceCategory *MicrosoftGraphDeviceCategory
}

// New navigation property values
func (r ApiUsersManagedDevicesUpdateDeviceCategoryRequest) MicrosoftGraphDeviceCategory(microsoftGraphDeviceCategory MicrosoftGraphDeviceCategory) ApiUsersManagedDevicesUpdateDeviceCategoryRequest {
	r.microsoftGraphDeviceCategory = &microsoftGraphDeviceCategory
	return r
}

func (r ApiUsersManagedDevicesUpdateDeviceCategoryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersManagedDevicesUpdateDeviceCategoryExecute(r)
}

/*
UsersManagedDevicesUpdateDeviceCategory Update the navigation property deviceCategory in users

Device category

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @return ApiUsersManagedDevicesUpdateDeviceCategoryRequest
*/
func (a *UsersManagedDeviceApiService) UsersManagedDevicesUpdateDeviceCategory(ctx _context.Context, userId string, managedDeviceId string) ApiUsersManagedDevicesUpdateDeviceCategoryRequest {
	return ApiUsersManagedDevicesUpdateDeviceCategoryRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
func (a *UsersManagedDeviceApiService) UsersManagedDevicesUpdateDeviceCategoryExecute(r ApiUsersManagedDevicesUpdateDeviceCategoryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersManagedDevicesUpdateDeviceCategory")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}/deviceCategory"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCategory == nil {
		return nil, reportError("microsoftGraphDeviceCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersManagedDevicesUpdateDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	deviceCompliancePolicyStateId string
	microsoftGraphDeviceCompliancePolicyState *MicrosoftGraphDeviceCompliancePolicyState
}

// New navigation property values
func (r ApiUsersManagedDevicesUpdateDeviceCompliancePolicyStatesRequest) MicrosoftGraphDeviceCompliancePolicyState(microsoftGraphDeviceCompliancePolicyState MicrosoftGraphDeviceCompliancePolicyState) ApiUsersManagedDevicesUpdateDeviceCompliancePolicyStatesRequest {
	r.microsoftGraphDeviceCompliancePolicyState = &microsoftGraphDeviceCompliancePolicyState
	return r
}

func (r ApiUsersManagedDevicesUpdateDeviceCompliancePolicyStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersManagedDevicesUpdateDeviceCompliancePolicyStatesExecute(r)
}

/*
UsersManagedDevicesUpdateDeviceCompliancePolicyStates Update the navigation property deviceCompliancePolicyStates in users

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @param deviceCompliancePolicyStateId key: id of deviceCompliancePolicyState
 @return ApiUsersManagedDevicesUpdateDeviceCompliancePolicyStatesRequest
*/
func (a *UsersManagedDeviceApiService) UsersManagedDevicesUpdateDeviceCompliancePolicyStates(ctx _context.Context, userId string, managedDeviceId string, deviceCompliancePolicyStateId string) ApiUsersManagedDevicesUpdateDeviceCompliancePolicyStatesRequest {
	return ApiUsersManagedDevicesUpdateDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
		deviceCompliancePolicyStateId: deviceCompliancePolicyStateId,
	}
}

// Execute executes the request
func (a *UsersManagedDeviceApiService) UsersManagedDevicesUpdateDeviceCompliancePolicyStatesExecute(r ApiUsersManagedDevicesUpdateDeviceCompliancePolicyStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersManagedDevicesUpdateDeviceCompliancePolicyStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates/{deviceCompliancePolicyState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicyState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCompliancePolicyState == nil {
		return nil, reportError("microsoftGraphDeviceCompliancePolicyState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCompliancePolicyState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersManagedDevicesUpdateDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	deviceConfigurationStateId string
	microsoftGraphDeviceConfigurationState *MicrosoftGraphDeviceConfigurationState
}

// New navigation property values
func (r ApiUsersManagedDevicesUpdateDeviceConfigurationStatesRequest) MicrosoftGraphDeviceConfigurationState(microsoftGraphDeviceConfigurationState MicrosoftGraphDeviceConfigurationState) ApiUsersManagedDevicesUpdateDeviceConfigurationStatesRequest {
	r.microsoftGraphDeviceConfigurationState = &microsoftGraphDeviceConfigurationState
	return r
}

func (r ApiUsersManagedDevicesUpdateDeviceConfigurationStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersManagedDevicesUpdateDeviceConfigurationStatesExecute(r)
}

/*
UsersManagedDevicesUpdateDeviceConfigurationStates Update the navigation property deviceConfigurationStates in users

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @param deviceConfigurationStateId key: id of deviceConfigurationState
 @return ApiUsersManagedDevicesUpdateDeviceConfigurationStatesRequest
*/
func (a *UsersManagedDeviceApiService) UsersManagedDevicesUpdateDeviceConfigurationStates(ctx _context.Context, userId string, managedDeviceId string, deviceConfigurationStateId string) ApiUsersManagedDevicesUpdateDeviceConfigurationStatesRequest {
	return ApiUsersManagedDevicesUpdateDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
		deviceConfigurationStateId: deviceConfigurationStateId,
	}
}

// Execute executes the request
func (a *UsersManagedDeviceApiService) UsersManagedDevicesUpdateDeviceConfigurationStatesExecute(r ApiUsersManagedDevicesUpdateDeviceConfigurationStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersManagedDevicesUpdateDeviceConfigurationStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}/deviceConfigurationStates/{deviceConfigurationState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationState == nil {
		return nil, reportError("microsoftGraphDeviceConfigurationState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersUpdateManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *UsersManagedDeviceApiService
	userId string
	managedDeviceId string
	microsoftGraphManagedDevice *MicrosoftGraphManagedDevice
}

// New navigation property values
func (r ApiUsersUpdateManagedDevicesRequest) MicrosoftGraphManagedDevice(microsoftGraphManagedDevice MicrosoftGraphManagedDevice) ApiUsersUpdateManagedDevicesRequest {
	r.microsoftGraphManagedDevice = &microsoftGraphManagedDevice
	return r
}

func (r ApiUsersUpdateManagedDevicesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersUpdateManagedDevicesExecute(r)
}

/*
UsersUpdateManagedDevices Update the navigation property managedDevices in users

The managed devices associated with the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param managedDeviceId key: id of managedDevice
 @return ApiUsersUpdateManagedDevicesRequest
*/
func (a *UsersManagedDeviceApiService) UsersUpdateManagedDevices(ctx _context.Context, userId string, managedDeviceId string) ApiUsersUpdateManagedDevicesRequest {
	return ApiUsersUpdateManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
func (a *UsersManagedDeviceApiService) UsersUpdateManagedDevicesExecute(r ApiUsersUpdateManagedDevicesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersManagedDeviceApiService.UsersUpdateManagedDevices")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/managedDevices/{managedDevice-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDevice == nil {
		return nil, reportError("microsoftGraphManagedDevice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDevice
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
