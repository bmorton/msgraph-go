/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// TimeOffReason struct for TimeOffReason
type TimeOffReason struct {
	// The name of the timeOffReason. Required.
	DisplayName NullableString `json:"displayName,omitempty"`
	// Supported icon types: none; car; calendar; running; plane; firstAid; doctor; notWorking; clock; juryDuty; globe; cup; phone; weather; umbrella; piggyBank; dog; cake; trafficCone; pin; sunny. Required.
	IconType AnyOfmicrosoftGraphTimeOffReasonIconType `json:"iconType,omitempty"`
	// Indicates whether the timeOffReason can be used when creating new entities or updating existing ones. Required.
	IsActive NullableBool `json:"isActive,omitempty"`
}

// NewTimeOffReason instantiates a new TimeOffReason object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeOffReason() *TimeOffReason {
	this := TimeOffReason{}
	return &this
}

// NewTimeOffReasonWithDefaults instantiates a new TimeOffReason object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeOffReasonWithDefaults() *TimeOffReason {
	this := TimeOffReason{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeOffReason) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeOffReason) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *TimeOffReason) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *TimeOffReason) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *TimeOffReason) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *TimeOffReason) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetIconType returns the IconType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeOffReason) GetIconType() AnyOfmicrosoftGraphTimeOffReasonIconType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphTimeOffReasonIconType
		return ret
	}
	return o.IconType
}

// GetIconTypeOk returns a tuple with the IconType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeOffReason) GetIconTypeOk() (*AnyOfmicrosoftGraphTimeOffReasonIconType, bool) {
	if o == nil || o.IconType == nil {
		return nil, false
	}
	return &o.IconType, true
}

// HasIconType returns a boolean if a field has been set.
func (o *TimeOffReason) HasIconType() bool {
	if o != nil && o.IconType != nil {
		return true
	}

	return false
}

// SetIconType gets a reference to the given AnyOfmicrosoftGraphTimeOffReasonIconType and assigns it to the IconType field.
func (o *TimeOffReason) SetIconType(v AnyOfmicrosoftGraphTimeOffReasonIconType) {
	o.IconType = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeOffReason) GetIsActive() bool {
	if o == nil || o.IsActive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsActive.Get()
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeOffReason) GetIsActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsActive.Get(), o.IsActive.IsSet()
}

// HasIsActive returns a boolean if a field has been set.
func (o *TimeOffReason) HasIsActive() bool {
	if o != nil && o.IsActive.IsSet() {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given NullableBool and assigns it to the IsActive field.
func (o *TimeOffReason) SetIsActive(v bool) {
	o.IsActive.Set(&v)
}
// SetIsActiveNil sets the value for IsActive to be an explicit nil
func (o *TimeOffReason) SetIsActiveNil() {
	o.IsActive.Set(nil)
}

// UnsetIsActive ensures that no value is present for IsActive, not even an explicit nil
func (o *TimeOffReason) UnsetIsActive() {
	o.IsActive.Unset()
}

func (o TimeOffReason) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.IconType != nil {
		toSerialize["iconType"] = o.IconType
	}
	if o.IsActive.IsSet() {
		toSerialize["isActive"] = o.IsActive.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTimeOffReason struct {
	value *TimeOffReason
	isSet bool
}

func (v NullableTimeOffReason) Get() *TimeOffReason {
	return v.value
}

func (v *NullableTimeOffReason) Set(val *TimeOffReason) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeOffReason) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeOffReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeOffReason(val *TimeOffReason) *NullableTimeOffReason {
	return &NullableTimeOffReason{value: val, isSet: true}
}

func (v NullableTimeOffReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeOffReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


