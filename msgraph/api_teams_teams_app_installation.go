/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// TeamsTeamsAppInstallationApiService TeamsTeamsAppInstallationApi service
type TeamsTeamsAppInstallationApiService service

type ApiTeamsCreateInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *TeamsTeamsAppInstallationApiService
	teamId string
	microsoftGraphTeamsAppInstallation *MicrosoftGraphTeamsAppInstallation
}

// New navigation property
func (r ApiTeamsCreateInstalledAppsRequest) MicrosoftGraphTeamsAppInstallation(microsoftGraphTeamsAppInstallation MicrosoftGraphTeamsAppInstallation) ApiTeamsCreateInstalledAppsRequest {
	r.microsoftGraphTeamsAppInstallation = &microsoftGraphTeamsAppInstallation
	return r
}

func (r ApiTeamsCreateInstalledAppsRequest) Execute() (MicrosoftGraphTeamsAppInstallation, *_nethttp.Response, error) {
	return r.ApiService.TeamsCreateInstalledAppsExecute(r)
}

/*
TeamsCreateInstalledApps Create new navigation property to installedApps for teams

The apps installed in this team.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamId key: id of team
 @return ApiTeamsCreateInstalledAppsRequest
*/
func (a *TeamsTeamsAppInstallationApiService) TeamsCreateInstalledApps(ctx _context.Context, teamId string) ApiTeamsCreateInstalledAppsRequest {
	return ApiTeamsCreateInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		teamId: teamId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsAppInstallation
func (a *TeamsTeamsAppInstallationApiService) TeamsCreateInstalledAppsExecute(r ApiTeamsCreateInstalledAppsRequest) (MicrosoftGraphTeamsAppInstallation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsAppInstallation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamsTeamsAppInstallationApiService.TeamsCreateInstalledApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{team-id}/installedApps"
	localVarPath = strings.Replace(localVarPath, "{"+"team-id"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTeamsAppInstallation == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphTeamsAppInstallation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTeamsAppInstallation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamsDeleteInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *TeamsTeamsAppInstallationApiService
	teamId string
	teamsAppInstallationId string
	ifMatch *string
}

// ETag
func (r ApiTeamsDeleteInstalledAppsRequest) IfMatch(ifMatch string) ApiTeamsDeleteInstalledAppsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiTeamsDeleteInstalledAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.TeamsDeleteInstalledAppsExecute(r)
}

/*
TeamsDeleteInstalledApps Delete navigation property installedApps for teams

The apps installed in this team.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamId key: id of team
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiTeamsDeleteInstalledAppsRequest
*/
func (a *TeamsTeamsAppInstallationApiService) TeamsDeleteInstalledApps(ctx _context.Context, teamId string, teamsAppInstallationId string) ApiTeamsDeleteInstalledAppsRequest {
	return ApiTeamsDeleteInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		teamId: teamId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
func (a *TeamsTeamsAppInstallationApiService) TeamsDeleteInstalledAppsExecute(r ApiTeamsDeleteInstalledAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamsTeamsAppInstallationApiService.TeamsDeleteInstalledApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{team-id}/installedApps/{teamsAppInstallation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team-id"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiTeamsGetInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *TeamsTeamsAppInstallationApiService
	teamId string
	teamsAppInstallationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiTeamsGetInstalledAppsRequest) Select_(select_ []string) ApiTeamsGetInstalledAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiTeamsGetInstalledAppsRequest) Expand(expand []string) ApiTeamsGetInstalledAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiTeamsGetInstalledAppsRequest) Execute() (MicrosoftGraphTeamsAppInstallation, *_nethttp.Response, error) {
	return r.ApiService.TeamsGetInstalledAppsExecute(r)
}

/*
TeamsGetInstalledApps Get installedApps from teams

The apps installed in this team.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamId key: id of team
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiTeamsGetInstalledAppsRequest
*/
func (a *TeamsTeamsAppInstallationApiService) TeamsGetInstalledApps(ctx _context.Context, teamId string, teamsAppInstallationId string) ApiTeamsGetInstalledAppsRequest {
	return ApiTeamsGetInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		teamId: teamId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsAppInstallation
func (a *TeamsTeamsAppInstallationApiService) TeamsGetInstalledAppsExecute(r ApiTeamsGetInstalledAppsRequest) (MicrosoftGraphTeamsAppInstallation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsAppInstallation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamsTeamsAppInstallationApiService.TeamsGetInstalledApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{team-id}/installedApps/{teamsAppInstallation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team-id"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamsInstalledAppsDeleteRefTeamsAppRequest struct {
	ctx _context.Context
	ApiService *TeamsTeamsAppInstallationApiService
	teamId string
	teamsAppInstallationId string
	ifMatch *string
}

// ETag
func (r ApiTeamsInstalledAppsDeleteRefTeamsAppRequest) IfMatch(ifMatch string) ApiTeamsInstalledAppsDeleteRefTeamsAppRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiTeamsInstalledAppsDeleteRefTeamsAppRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.TeamsInstalledAppsDeleteRefTeamsAppExecute(r)
}

/*
TeamsInstalledAppsDeleteRefTeamsApp Delete ref of navigation property teamsApp for teams

The app that is installed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamId key: id of team
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiTeamsInstalledAppsDeleteRefTeamsAppRequest
*/
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsDeleteRefTeamsApp(ctx _context.Context, teamId string, teamsAppInstallationId string) ApiTeamsInstalledAppsDeleteRefTeamsAppRequest {
	return ApiTeamsInstalledAppsDeleteRefTeamsAppRequest{
		ApiService: a,
		ctx: ctx,
		teamId: teamId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsDeleteRefTeamsAppExecute(r ApiTeamsInstalledAppsDeleteRefTeamsAppRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamsTeamsAppInstallationApiService.TeamsInstalledAppsDeleteRefTeamsApp")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{team-id}/installedApps/{teamsAppInstallation-id}/teamsApp/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"team-id"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiTeamsInstalledAppsDeleteRefTeamsAppDefinitionRequest struct {
	ctx _context.Context
	ApiService *TeamsTeamsAppInstallationApiService
	teamId string
	teamsAppInstallationId string
	ifMatch *string
}

// ETag
func (r ApiTeamsInstalledAppsDeleteRefTeamsAppDefinitionRequest) IfMatch(ifMatch string) ApiTeamsInstalledAppsDeleteRefTeamsAppDefinitionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiTeamsInstalledAppsDeleteRefTeamsAppDefinitionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.TeamsInstalledAppsDeleteRefTeamsAppDefinitionExecute(r)
}

/*
TeamsInstalledAppsDeleteRefTeamsAppDefinition Delete ref of navigation property teamsAppDefinition for teams

The details of this version of the app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamId key: id of team
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiTeamsInstalledAppsDeleteRefTeamsAppDefinitionRequest
*/
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsDeleteRefTeamsAppDefinition(ctx _context.Context, teamId string, teamsAppInstallationId string) ApiTeamsInstalledAppsDeleteRefTeamsAppDefinitionRequest {
	return ApiTeamsInstalledAppsDeleteRefTeamsAppDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		teamId: teamId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsDeleteRefTeamsAppDefinitionExecute(r ApiTeamsInstalledAppsDeleteRefTeamsAppDefinitionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamsTeamsAppInstallationApiService.TeamsInstalledAppsDeleteRefTeamsAppDefinition")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{team-id}/installedApps/{teamsAppInstallation-id}/teamsAppDefinition/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"team-id"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiTeamsInstalledAppsGetRefTeamsAppRequest struct {
	ctx _context.Context
	ApiService *TeamsTeamsAppInstallationApiService
	teamId string
	teamsAppInstallationId string
}


func (r ApiTeamsInstalledAppsGetRefTeamsAppRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.TeamsInstalledAppsGetRefTeamsAppExecute(r)
}

/*
TeamsInstalledAppsGetRefTeamsApp Get ref of teamsApp from teams

The app that is installed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamId key: id of team
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiTeamsInstalledAppsGetRefTeamsAppRequest
*/
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsGetRefTeamsApp(ctx _context.Context, teamId string, teamsAppInstallationId string) ApiTeamsInstalledAppsGetRefTeamsAppRequest {
	return ApiTeamsInstalledAppsGetRefTeamsAppRequest{
		ApiService: a,
		ctx: ctx,
		teamId: teamId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
//  @return string
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsGetRefTeamsAppExecute(r ApiTeamsInstalledAppsGetRefTeamsAppRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamsTeamsAppInstallationApiService.TeamsInstalledAppsGetRefTeamsApp")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{team-id}/installedApps/{teamsAppInstallation-id}/teamsApp/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"team-id"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamsInstalledAppsGetRefTeamsAppDefinitionRequest struct {
	ctx _context.Context
	ApiService *TeamsTeamsAppInstallationApiService
	teamId string
	teamsAppInstallationId string
}


func (r ApiTeamsInstalledAppsGetRefTeamsAppDefinitionRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.TeamsInstalledAppsGetRefTeamsAppDefinitionExecute(r)
}

/*
TeamsInstalledAppsGetRefTeamsAppDefinition Get ref of teamsAppDefinition from teams

The details of this version of the app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamId key: id of team
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiTeamsInstalledAppsGetRefTeamsAppDefinitionRequest
*/
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsGetRefTeamsAppDefinition(ctx _context.Context, teamId string, teamsAppInstallationId string) ApiTeamsInstalledAppsGetRefTeamsAppDefinitionRequest {
	return ApiTeamsInstalledAppsGetRefTeamsAppDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		teamId: teamId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
//  @return string
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsGetRefTeamsAppDefinitionExecute(r ApiTeamsInstalledAppsGetRefTeamsAppDefinitionRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamsTeamsAppInstallationApiService.TeamsInstalledAppsGetRefTeamsAppDefinition")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{team-id}/installedApps/{teamsAppInstallation-id}/teamsAppDefinition/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"team-id"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamsInstalledAppsGetTeamsAppRequest struct {
	ctx _context.Context
	ApiService *TeamsTeamsAppInstallationApiService
	teamId string
	teamsAppInstallationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiTeamsInstalledAppsGetTeamsAppRequest) Select_(select_ []string) ApiTeamsInstalledAppsGetTeamsAppRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiTeamsInstalledAppsGetTeamsAppRequest) Expand(expand []string) ApiTeamsInstalledAppsGetTeamsAppRequest {
	r.expand = &expand
	return r
}

func (r ApiTeamsInstalledAppsGetTeamsAppRequest) Execute() (MicrosoftGraphTeamsApp, *_nethttp.Response, error) {
	return r.ApiService.TeamsInstalledAppsGetTeamsAppExecute(r)
}

/*
TeamsInstalledAppsGetTeamsApp Get teamsApp from teams

The app that is installed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamId key: id of team
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiTeamsInstalledAppsGetTeamsAppRequest
*/
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsGetTeamsApp(ctx _context.Context, teamId string, teamsAppInstallationId string) ApiTeamsInstalledAppsGetTeamsAppRequest {
	return ApiTeamsInstalledAppsGetTeamsAppRequest{
		ApiService: a,
		ctx: ctx,
		teamId: teamId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsApp
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsGetTeamsAppExecute(r ApiTeamsInstalledAppsGetTeamsAppRequest) (MicrosoftGraphTeamsApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamsTeamsAppInstallationApiService.TeamsInstalledAppsGetTeamsApp")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{team-id}/installedApps/{teamsAppInstallation-id}/teamsApp"
	localVarPath = strings.Replace(localVarPath, "{"+"team-id"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamsInstalledAppsGetTeamsAppDefinitionRequest struct {
	ctx _context.Context
	ApiService *TeamsTeamsAppInstallationApiService
	teamId string
	teamsAppInstallationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiTeamsInstalledAppsGetTeamsAppDefinitionRequest) Select_(select_ []string) ApiTeamsInstalledAppsGetTeamsAppDefinitionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiTeamsInstalledAppsGetTeamsAppDefinitionRequest) Expand(expand []string) ApiTeamsInstalledAppsGetTeamsAppDefinitionRequest {
	r.expand = &expand
	return r
}

func (r ApiTeamsInstalledAppsGetTeamsAppDefinitionRequest) Execute() (MicrosoftGraphTeamsAppDefinition, *_nethttp.Response, error) {
	return r.ApiService.TeamsInstalledAppsGetTeamsAppDefinitionExecute(r)
}

/*
TeamsInstalledAppsGetTeamsAppDefinition Get teamsAppDefinition from teams

The details of this version of the app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamId key: id of team
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiTeamsInstalledAppsGetTeamsAppDefinitionRequest
*/
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsGetTeamsAppDefinition(ctx _context.Context, teamId string, teamsAppInstallationId string) ApiTeamsInstalledAppsGetTeamsAppDefinitionRequest {
	return ApiTeamsInstalledAppsGetTeamsAppDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		teamId: teamId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTeamsAppDefinition
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsGetTeamsAppDefinitionExecute(r ApiTeamsInstalledAppsGetTeamsAppDefinitionRequest) (MicrosoftGraphTeamsAppDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTeamsAppDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamsTeamsAppInstallationApiService.TeamsInstalledAppsGetTeamsAppDefinition")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{team-id}/installedApps/{teamsAppInstallation-id}/teamsAppDefinition"
	localVarPath = strings.Replace(localVarPath, "{"+"team-id"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamsInstalledAppsUpdateRefTeamsAppRequest struct {
	ctx _context.Context
	ApiService *TeamsTeamsAppInstallationApiService
	teamId string
	teamsAppInstallationId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiTeamsInstalledAppsUpdateRefTeamsAppRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiTeamsInstalledAppsUpdateRefTeamsAppRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiTeamsInstalledAppsUpdateRefTeamsAppRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.TeamsInstalledAppsUpdateRefTeamsAppExecute(r)
}

/*
TeamsInstalledAppsUpdateRefTeamsApp Update the ref of navigation property teamsApp in teams

The app that is installed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamId key: id of team
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiTeamsInstalledAppsUpdateRefTeamsAppRequest
*/
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsUpdateRefTeamsApp(ctx _context.Context, teamId string, teamsAppInstallationId string) ApiTeamsInstalledAppsUpdateRefTeamsAppRequest {
	return ApiTeamsInstalledAppsUpdateRefTeamsAppRequest{
		ApiService: a,
		ctx: ctx,
		teamId: teamId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsUpdateRefTeamsAppExecute(r ApiTeamsInstalledAppsUpdateRefTeamsAppRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamsTeamsAppInstallationApiService.TeamsInstalledAppsUpdateRefTeamsApp")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{team-id}/installedApps/{teamsAppInstallation-id}/teamsApp/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"team-id"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiTeamsInstalledAppsUpdateRefTeamsAppDefinitionRequest struct {
	ctx _context.Context
	ApiService *TeamsTeamsAppInstallationApiService
	teamId string
	teamsAppInstallationId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiTeamsInstalledAppsUpdateRefTeamsAppDefinitionRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiTeamsInstalledAppsUpdateRefTeamsAppDefinitionRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiTeamsInstalledAppsUpdateRefTeamsAppDefinitionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.TeamsInstalledAppsUpdateRefTeamsAppDefinitionExecute(r)
}

/*
TeamsInstalledAppsUpdateRefTeamsAppDefinition Update the ref of navigation property teamsAppDefinition in teams

The details of this version of the app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamId key: id of team
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiTeamsInstalledAppsUpdateRefTeamsAppDefinitionRequest
*/
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsUpdateRefTeamsAppDefinition(ctx _context.Context, teamId string, teamsAppInstallationId string) ApiTeamsInstalledAppsUpdateRefTeamsAppDefinitionRequest {
	return ApiTeamsInstalledAppsUpdateRefTeamsAppDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		teamId: teamId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
func (a *TeamsTeamsAppInstallationApiService) TeamsInstalledAppsUpdateRefTeamsAppDefinitionExecute(r ApiTeamsInstalledAppsUpdateRefTeamsAppDefinitionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamsTeamsAppInstallationApiService.TeamsInstalledAppsUpdateRefTeamsAppDefinition")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{team-id}/installedApps/{teamsAppInstallation-id}/teamsAppDefinition/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"team-id"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiTeamsListInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *TeamsTeamsAppInstallationApiService
	teamId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiTeamsListInstalledAppsRequest) Top(top int32) ApiTeamsListInstalledAppsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiTeamsListInstalledAppsRequest) Skip(skip int32) ApiTeamsListInstalledAppsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiTeamsListInstalledAppsRequest) Search(search string) ApiTeamsListInstalledAppsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiTeamsListInstalledAppsRequest) Filter(filter string) ApiTeamsListInstalledAppsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiTeamsListInstalledAppsRequest) Count(count bool) ApiTeamsListInstalledAppsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiTeamsListInstalledAppsRequest) Orderby(orderby []string) ApiTeamsListInstalledAppsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiTeamsListInstalledAppsRequest) Select_(select_ []string) ApiTeamsListInstalledAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiTeamsListInstalledAppsRequest) Expand(expand []string) ApiTeamsListInstalledAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiTeamsListInstalledAppsRequest) Execute() (CollectionOfTeamsAppInstallation, *_nethttp.Response, error) {
	return r.ApiService.TeamsListInstalledAppsExecute(r)
}

/*
TeamsListInstalledApps Get installedApps from teams

The apps installed in this team.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamId key: id of team
 @return ApiTeamsListInstalledAppsRequest
*/
func (a *TeamsTeamsAppInstallationApiService) TeamsListInstalledApps(ctx _context.Context, teamId string) ApiTeamsListInstalledAppsRequest {
	return ApiTeamsListInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		teamId: teamId,
	}
}

// Execute executes the request
//  @return CollectionOfTeamsAppInstallation
func (a *TeamsTeamsAppInstallationApiService) TeamsListInstalledAppsExecute(r ApiTeamsListInstalledAppsRequest) (CollectionOfTeamsAppInstallation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfTeamsAppInstallation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamsTeamsAppInstallationApiService.TeamsListInstalledApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{team-id}/installedApps"
	localVarPath = strings.Replace(localVarPath, "{"+"team-id"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamsUpdateInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *TeamsTeamsAppInstallationApiService
	teamId string
	teamsAppInstallationId string
	microsoftGraphTeamsAppInstallation *MicrosoftGraphTeamsAppInstallation
}

// New navigation property values
func (r ApiTeamsUpdateInstalledAppsRequest) MicrosoftGraphTeamsAppInstallation(microsoftGraphTeamsAppInstallation MicrosoftGraphTeamsAppInstallation) ApiTeamsUpdateInstalledAppsRequest {
	r.microsoftGraphTeamsAppInstallation = &microsoftGraphTeamsAppInstallation
	return r
}

func (r ApiTeamsUpdateInstalledAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.TeamsUpdateInstalledAppsExecute(r)
}

/*
TeamsUpdateInstalledApps Update the navigation property installedApps in teams

The apps installed in this team.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamId key: id of team
 @param teamsAppInstallationId key: id of teamsAppInstallation
 @return ApiTeamsUpdateInstalledAppsRequest
*/
func (a *TeamsTeamsAppInstallationApiService) TeamsUpdateInstalledApps(ctx _context.Context, teamId string, teamsAppInstallationId string) ApiTeamsUpdateInstalledAppsRequest {
	return ApiTeamsUpdateInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		teamId: teamId,
		teamsAppInstallationId: teamsAppInstallationId,
	}
}

// Execute executes the request
func (a *TeamsTeamsAppInstallationApiService) TeamsUpdateInstalledAppsExecute(r ApiTeamsUpdateInstalledAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamsTeamsAppInstallationApiService.TeamsUpdateInstalledApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{team-id}/installedApps/{teamsAppInstallation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"team-id"+"}", _neturl.PathEscape(parameterToString(r.teamId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.teamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTeamsAppInstallation == nil {
		return nil, reportError("microsoftGraphTeamsAppInstallation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTeamsAppInstallation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
