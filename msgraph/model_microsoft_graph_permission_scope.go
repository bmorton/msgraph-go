/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphPermissionScope struct for MicrosoftGraphPermissionScope
type MicrosoftGraphPermissionScope struct {
	// A description of the delegated permissions, intended to be read by an administrator granting the permission on behalf of all users. This text appears in tenant-wide admin consent experiences.
	AdminConsentDescription NullableString `json:"adminConsentDescription,omitempty"`
	// The permission's title, intended to be read by an administrator granting the permission on behalf of all users.
	AdminConsentDisplayName NullableString `json:"adminConsentDisplayName,omitempty"`
	// Unique delegated permission identifier inside the collection of delegated permissions defined for a resource application.
	Id *string `json:"id,omitempty"`
	// When creating or updating a permission, this property must be set to true (which is the default). To delete a permission, this property must first be set to false.  At that point, in a subsequent call, the permission may be removed.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	Origin NullableString `json:"origin,omitempty"`
	// Specifies whether this delegated permission should be considered safe for non-admin users to consent to on behalf of themselves, or whether an administrator should be required for consent to the permissions. This will be the default behavior, but each customer can choose to customize the behavior in their organization (by allowing, restricting or limiting user consent to this delegated permission.)
	Type NullableString `json:"type,omitempty"`
	// A description of the delegated permissions, intended to be read by a user granting the permission on their own behalf. This text appears in consent experiences where the user is consenting only on behalf of themselves.
	UserConsentDescription NullableString `json:"userConsentDescription,omitempty"`
	// A title for the permission, intended to be read by a user granting the permission on their own behalf. This text appears in consent experiences where the user is consenting only on behalf of themselves.
	UserConsentDisplayName NullableString `json:"userConsentDisplayName,omitempty"`
	// Specifies the value to include in the scp (scope) claim in access tokens. Must not exceed 120 characters in length. Allowed characters are : ! # $ % & ' ( ) * + , - . / : ;  =  ? @ [ ] ^ + _  {  } ~, as well as characters in the ranges 0-9, A-Z and a-z. Any other character, including the space character, are not allowed. May not begin with ..
	Value NullableString `json:"value,omitempty"`
}

// NewMicrosoftGraphPermissionScope instantiates a new MicrosoftGraphPermissionScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphPermissionScope() *MicrosoftGraphPermissionScope {
	this := MicrosoftGraphPermissionScope{}
	return &this
}

// NewMicrosoftGraphPermissionScopeWithDefaults instantiates a new MicrosoftGraphPermissionScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphPermissionScopeWithDefaults() *MicrosoftGraphPermissionScope {
	this := MicrosoftGraphPermissionScope{}
	return &this
}

// GetAdminConsentDescription returns the AdminConsentDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPermissionScope) GetAdminConsentDescription() string {
	if o == nil || o.AdminConsentDescription.Get() == nil {
		var ret string
		return ret
	}
	return *o.AdminConsentDescription.Get()
}

// GetAdminConsentDescriptionOk returns a tuple with the AdminConsentDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPermissionScope) GetAdminConsentDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AdminConsentDescription.Get(), o.AdminConsentDescription.IsSet()
}

// HasAdminConsentDescription returns a boolean if a field has been set.
func (o *MicrosoftGraphPermissionScope) HasAdminConsentDescription() bool {
	if o != nil && o.AdminConsentDescription.IsSet() {
		return true
	}

	return false
}

// SetAdminConsentDescription gets a reference to the given NullableString and assigns it to the AdminConsentDescription field.
func (o *MicrosoftGraphPermissionScope) SetAdminConsentDescription(v string) {
	o.AdminConsentDescription.Set(&v)
}
// SetAdminConsentDescriptionNil sets the value for AdminConsentDescription to be an explicit nil
func (o *MicrosoftGraphPermissionScope) SetAdminConsentDescriptionNil() {
	o.AdminConsentDescription.Set(nil)
}

// UnsetAdminConsentDescription ensures that no value is present for AdminConsentDescription, not even an explicit nil
func (o *MicrosoftGraphPermissionScope) UnsetAdminConsentDescription() {
	o.AdminConsentDescription.Unset()
}

// GetAdminConsentDisplayName returns the AdminConsentDisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPermissionScope) GetAdminConsentDisplayName() string {
	if o == nil || o.AdminConsentDisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AdminConsentDisplayName.Get()
}

// GetAdminConsentDisplayNameOk returns a tuple with the AdminConsentDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPermissionScope) GetAdminConsentDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AdminConsentDisplayName.Get(), o.AdminConsentDisplayName.IsSet()
}

// HasAdminConsentDisplayName returns a boolean if a field has been set.
func (o *MicrosoftGraphPermissionScope) HasAdminConsentDisplayName() bool {
	if o != nil && o.AdminConsentDisplayName.IsSet() {
		return true
	}

	return false
}

// SetAdminConsentDisplayName gets a reference to the given NullableString and assigns it to the AdminConsentDisplayName field.
func (o *MicrosoftGraphPermissionScope) SetAdminConsentDisplayName(v string) {
	o.AdminConsentDisplayName.Set(&v)
}
// SetAdminConsentDisplayNameNil sets the value for AdminConsentDisplayName to be an explicit nil
func (o *MicrosoftGraphPermissionScope) SetAdminConsentDisplayNameNil() {
	o.AdminConsentDisplayName.Set(nil)
}

// UnsetAdminConsentDisplayName ensures that no value is present for AdminConsentDisplayName, not even an explicit nil
func (o *MicrosoftGraphPermissionScope) UnsetAdminConsentDisplayName() {
	o.AdminConsentDisplayName.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MicrosoftGraphPermissionScope) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPermissionScope) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphPermissionScope) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphPermissionScope) SetId(v string) {
	o.Id = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *MicrosoftGraphPermissionScope) GetIsEnabled() bool {
	if o == nil || o.IsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPermissionScope) GetIsEnabledOk() (*bool, bool) {
	if o == nil || o.IsEnabled == nil {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *MicrosoftGraphPermissionScope) HasIsEnabled() bool {
	if o != nil && o.IsEnabled != nil {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *MicrosoftGraphPermissionScope) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPermissionScope) GetOrigin() string {
	if o == nil || o.Origin.Get() == nil {
		var ret string
		return ret
	}
	return *o.Origin.Get()
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPermissionScope) GetOriginOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Origin.Get(), o.Origin.IsSet()
}

// HasOrigin returns a boolean if a field has been set.
func (o *MicrosoftGraphPermissionScope) HasOrigin() bool {
	if o != nil && o.Origin.IsSet() {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given NullableString and assigns it to the Origin field.
func (o *MicrosoftGraphPermissionScope) SetOrigin(v string) {
	o.Origin.Set(&v)
}
// SetOriginNil sets the value for Origin to be an explicit nil
func (o *MicrosoftGraphPermissionScope) SetOriginNil() {
	o.Origin.Set(nil)
}

// UnsetOrigin ensures that no value is present for Origin, not even an explicit nil
func (o *MicrosoftGraphPermissionScope) UnsetOrigin() {
	o.Origin.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPermissionScope) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPermissionScope) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *MicrosoftGraphPermissionScope) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *MicrosoftGraphPermissionScope) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *MicrosoftGraphPermissionScope) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *MicrosoftGraphPermissionScope) UnsetType() {
	o.Type.Unset()
}

// GetUserConsentDescription returns the UserConsentDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPermissionScope) GetUserConsentDescription() string {
	if o == nil || o.UserConsentDescription.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserConsentDescription.Get()
}

// GetUserConsentDescriptionOk returns a tuple with the UserConsentDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPermissionScope) GetUserConsentDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserConsentDescription.Get(), o.UserConsentDescription.IsSet()
}

// HasUserConsentDescription returns a boolean if a field has been set.
func (o *MicrosoftGraphPermissionScope) HasUserConsentDescription() bool {
	if o != nil && o.UserConsentDescription.IsSet() {
		return true
	}

	return false
}

// SetUserConsentDescription gets a reference to the given NullableString and assigns it to the UserConsentDescription field.
func (o *MicrosoftGraphPermissionScope) SetUserConsentDescription(v string) {
	o.UserConsentDescription.Set(&v)
}
// SetUserConsentDescriptionNil sets the value for UserConsentDescription to be an explicit nil
func (o *MicrosoftGraphPermissionScope) SetUserConsentDescriptionNil() {
	o.UserConsentDescription.Set(nil)
}

// UnsetUserConsentDescription ensures that no value is present for UserConsentDescription, not even an explicit nil
func (o *MicrosoftGraphPermissionScope) UnsetUserConsentDescription() {
	o.UserConsentDescription.Unset()
}

// GetUserConsentDisplayName returns the UserConsentDisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPermissionScope) GetUserConsentDisplayName() string {
	if o == nil || o.UserConsentDisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserConsentDisplayName.Get()
}

// GetUserConsentDisplayNameOk returns a tuple with the UserConsentDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPermissionScope) GetUserConsentDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserConsentDisplayName.Get(), o.UserConsentDisplayName.IsSet()
}

// HasUserConsentDisplayName returns a boolean if a field has been set.
func (o *MicrosoftGraphPermissionScope) HasUserConsentDisplayName() bool {
	if o != nil && o.UserConsentDisplayName.IsSet() {
		return true
	}

	return false
}

// SetUserConsentDisplayName gets a reference to the given NullableString and assigns it to the UserConsentDisplayName field.
func (o *MicrosoftGraphPermissionScope) SetUserConsentDisplayName(v string) {
	o.UserConsentDisplayName.Set(&v)
}
// SetUserConsentDisplayNameNil sets the value for UserConsentDisplayName to be an explicit nil
func (o *MicrosoftGraphPermissionScope) SetUserConsentDisplayNameNil() {
	o.UserConsentDisplayName.Set(nil)
}

// UnsetUserConsentDisplayName ensures that no value is present for UserConsentDisplayName, not even an explicit nil
func (o *MicrosoftGraphPermissionScope) UnsetUserConsentDisplayName() {
	o.UserConsentDisplayName.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPermissionScope) GetValue() string {
	if o == nil || o.Value.Get() == nil {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPermissionScope) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *MicrosoftGraphPermissionScope) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *MicrosoftGraphPermissionScope) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *MicrosoftGraphPermissionScope) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *MicrosoftGraphPermissionScope) UnsetValue() {
	o.Value.Unset()
}

func (o MicrosoftGraphPermissionScope) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdminConsentDescription.IsSet() {
		toSerialize["adminConsentDescription"] = o.AdminConsentDescription.Get()
	}
	if o.AdminConsentDisplayName.IsSet() {
		toSerialize["adminConsentDisplayName"] = o.AdminConsentDisplayName.Get()
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsEnabled != nil {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if o.Origin.IsSet() {
		toSerialize["origin"] = o.Origin.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.UserConsentDescription.IsSet() {
		toSerialize["userConsentDescription"] = o.UserConsentDescription.Get()
	}
	if o.UserConsentDisplayName.IsSet() {
		toSerialize["userConsentDisplayName"] = o.UserConsentDisplayName.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphPermissionScope struct {
	value *MicrosoftGraphPermissionScope
	isSet bool
}

func (v NullableMicrosoftGraphPermissionScope) Get() *MicrosoftGraphPermissionScope {
	return v.value
}

func (v *NullableMicrosoftGraphPermissionScope) Set(val *MicrosoftGraphPermissionScope) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPermissionScope) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPermissionScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPermissionScope(val *MicrosoftGraphPermissionScope) *NullableMicrosoftGraphPermissionScope {
	return &NullableMicrosoftGraphPermissionScope{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPermissionScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPermissionScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


