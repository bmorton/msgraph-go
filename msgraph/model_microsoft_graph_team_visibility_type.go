/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphTeamVisibilityType the model 'MicrosoftGraphTeamVisibilityType'
type MicrosoftGraphTeamVisibilityType string

// List of microsoft.graph.teamVisibilityType
const (
	PRIVATE MicrosoftGraphTeamVisibilityType = "private"
	PUBLIC MicrosoftGraphTeamVisibilityType = "public"
	HIDDEN_MEMBERSHIP MicrosoftGraphTeamVisibilityType = "hiddenMembership"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphTeamVisibilityType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphTeamVisibilityType enum
var AllowedMicrosoftGraphTeamVisibilityTypeEnumValues = []MicrosoftGraphTeamVisibilityType{
	"private",
	"public",
	"hiddenMembership",
	"unknownFutureValue",
}

func (v *MicrosoftGraphTeamVisibilityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphTeamVisibilityType(value)
	for _, existing := range AllowedMicrosoftGraphTeamVisibilityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphTeamVisibilityType", value)
}

// NewMicrosoftGraphTeamVisibilityTypeFromValue returns a pointer to a valid MicrosoftGraphTeamVisibilityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphTeamVisibilityTypeFromValue(v string) (*MicrosoftGraphTeamVisibilityType, error) {
	ev := MicrosoftGraphTeamVisibilityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphTeamVisibilityType: valid values are %v", v, AllowedMicrosoftGraphTeamVisibilityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphTeamVisibilityType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphTeamVisibilityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.teamVisibilityType value
func (v MicrosoftGraphTeamVisibilityType) Ptr() *MicrosoftGraphTeamVisibilityType {
	return &v
}

type NullableMicrosoftGraphTeamVisibilityType struct {
	value *MicrosoftGraphTeamVisibilityType
	isSet bool
}

func (v NullableMicrosoftGraphTeamVisibilityType) Get() *MicrosoftGraphTeamVisibilityType {
	return v.value
}

func (v *NullableMicrosoftGraphTeamVisibilityType) Set(val *MicrosoftGraphTeamVisibilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphTeamVisibilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphTeamVisibilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphTeamVisibilityType(val *MicrosoftGraphTeamVisibilityType) *NullableMicrosoftGraphTeamVisibilityType {
	return &NullableMicrosoftGraphTeamVisibilityType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphTeamVisibilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphTeamVisibilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

