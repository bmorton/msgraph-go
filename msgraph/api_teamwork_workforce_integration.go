/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// TeamworkWorkforceIntegrationApiService TeamworkWorkforceIntegrationApi service
type TeamworkWorkforceIntegrationApiService service

type ApiTeamworkCreateWorkforceIntegrationsRequest struct {
	ctx _context.Context
	ApiService *TeamworkWorkforceIntegrationApiService
	microsoftGraphWorkforceIntegration *MicrosoftGraphWorkforceIntegration
}

// New navigation property
func (r ApiTeamworkCreateWorkforceIntegrationsRequest) MicrosoftGraphWorkforceIntegration(microsoftGraphWorkforceIntegration MicrosoftGraphWorkforceIntegration) ApiTeamworkCreateWorkforceIntegrationsRequest {
	r.microsoftGraphWorkforceIntegration = &microsoftGraphWorkforceIntegration
	return r
}

func (r ApiTeamworkCreateWorkforceIntegrationsRequest) Execute() (MicrosoftGraphWorkforceIntegration, *_nethttp.Response, error) {
	return r.ApiService.TeamworkCreateWorkforceIntegrationsExecute(r)
}

/*
TeamworkCreateWorkforceIntegrations Create new navigation property to workforceIntegrations for teamwork

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTeamworkCreateWorkforceIntegrationsRequest
*/
func (a *TeamworkWorkforceIntegrationApiService) TeamworkCreateWorkforceIntegrations(ctx _context.Context) ApiTeamworkCreateWorkforceIntegrationsRequest {
	return ApiTeamworkCreateWorkforceIntegrationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkforceIntegration
func (a *TeamworkWorkforceIntegrationApiService) TeamworkCreateWorkforceIntegrationsExecute(r ApiTeamworkCreateWorkforceIntegrationsRequest) (MicrosoftGraphWorkforceIntegration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkforceIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamworkWorkforceIntegrationApiService.TeamworkCreateWorkforceIntegrations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teamwork/workforceIntegrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkforceIntegration == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkforceIntegration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkforceIntegration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamworkDeleteWorkforceIntegrationsRequest struct {
	ctx _context.Context
	ApiService *TeamworkWorkforceIntegrationApiService
	workforceIntegrationId string
	ifMatch *string
}

// ETag
func (r ApiTeamworkDeleteWorkforceIntegrationsRequest) IfMatch(ifMatch string) ApiTeamworkDeleteWorkforceIntegrationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiTeamworkDeleteWorkforceIntegrationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.TeamworkDeleteWorkforceIntegrationsExecute(r)
}

/*
TeamworkDeleteWorkforceIntegrations Delete navigation property workforceIntegrations for teamwork

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workforceIntegrationId key: id of workforceIntegration
 @return ApiTeamworkDeleteWorkforceIntegrationsRequest
*/
func (a *TeamworkWorkforceIntegrationApiService) TeamworkDeleteWorkforceIntegrations(ctx _context.Context, workforceIntegrationId string) ApiTeamworkDeleteWorkforceIntegrationsRequest {
	return ApiTeamworkDeleteWorkforceIntegrationsRequest{
		ApiService: a,
		ctx: ctx,
		workforceIntegrationId: workforceIntegrationId,
	}
}

// Execute executes the request
func (a *TeamworkWorkforceIntegrationApiService) TeamworkDeleteWorkforceIntegrationsExecute(r ApiTeamworkDeleteWorkforceIntegrationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamworkWorkforceIntegrationApiService.TeamworkDeleteWorkforceIntegrations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teamwork/workforceIntegrations/{workforceIntegration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"workforceIntegration-id"+"}", _neturl.PathEscape(parameterToString(r.workforceIntegrationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiTeamworkGetWorkforceIntegrationsRequest struct {
	ctx _context.Context
	ApiService *TeamworkWorkforceIntegrationApiService
	workforceIntegrationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiTeamworkGetWorkforceIntegrationsRequest) Select_(select_ []string) ApiTeamworkGetWorkforceIntegrationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiTeamworkGetWorkforceIntegrationsRequest) Expand(expand []string) ApiTeamworkGetWorkforceIntegrationsRequest {
	r.expand = &expand
	return r
}

func (r ApiTeamworkGetWorkforceIntegrationsRequest) Execute() (MicrosoftGraphWorkforceIntegration, *_nethttp.Response, error) {
	return r.ApiService.TeamworkGetWorkforceIntegrationsExecute(r)
}

/*
TeamworkGetWorkforceIntegrations Get workforceIntegrations from teamwork

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workforceIntegrationId key: id of workforceIntegration
 @return ApiTeamworkGetWorkforceIntegrationsRequest
*/
func (a *TeamworkWorkforceIntegrationApiService) TeamworkGetWorkforceIntegrations(ctx _context.Context, workforceIntegrationId string) ApiTeamworkGetWorkforceIntegrationsRequest {
	return ApiTeamworkGetWorkforceIntegrationsRequest{
		ApiService: a,
		ctx: ctx,
		workforceIntegrationId: workforceIntegrationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkforceIntegration
func (a *TeamworkWorkforceIntegrationApiService) TeamworkGetWorkforceIntegrationsExecute(r ApiTeamworkGetWorkforceIntegrationsRequest) (MicrosoftGraphWorkforceIntegration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkforceIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamworkWorkforceIntegrationApiService.TeamworkGetWorkforceIntegrations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teamwork/workforceIntegrations/{workforceIntegration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"workforceIntegration-id"+"}", _neturl.PathEscape(parameterToString(r.workforceIntegrationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamworkListWorkforceIntegrationsRequest struct {
	ctx _context.Context
	ApiService *TeamworkWorkforceIntegrationApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiTeamworkListWorkforceIntegrationsRequest) Top(top int32) ApiTeamworkListWorkforceIntegrationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiTeamworkListWorkforceIntegrationsRequest) Skip(skip int32) ApiTeamworkListWorkforceIntegrationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiTeamworkListWorkforceIntegrationsRequest) Search(search string) ApiTeamworkListWorkforceIntegrationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiTeamworkListWorkforceIntegrationsRequest) Filter(filter string) ApiTeamworkListWorkforceIntegrationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiTeamworkListWorkforceIntegrationsRequest) Count(count bool) ApiTeamworkListWorkforceIntegrationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiTeamworkListWorkforceIntegrationsRequest) Orderby(orderby []string) ApiTeamworkListWorkforceIntegrationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiTeamworkListWorkforceIntegrationsRequest) Select_(select_ []string) ApiTeamworkListWorkforceIntegrationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiTeamworkListWorkforceIntegrationsRequest) Expand(expand []string) ApiTeamworkListWorkforceIntegrationsRequest {
	r.expand = &expand
	return r
}

func (r ApiTeamworkListWorkforceIntegrationsRequest) Execute() (CollectionOfWorkforceIntegration, *_nethttp.Response, error) {
	return r.ApiService.TeamworkListWorkforceIntegrationsExecute(r)
}

/*
TeamworkListWorkforceIntegrations Get workforceIntegrations from teamwork

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiTeamworkListWorkforceIntegrationsRequest
*/
func (a *TeamworkWorkforceIntegrationApiService) TeamworkListWorkforceIntegrations(ctx _context.Context) ApiTeamworkListWorkforceIntegrationsRequest {
	return ApiTeamworkListWorkforceIntegrationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfWorkforceIntegration
func (a *TeamworkWorkforceIntegrationApiService) TeamworkListWorkforceIntegrationsExecute(r ApiTeamworkListWorkforceIntegrationsRequest) (CollectionOfWorkforceIntegration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkforceIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamworkWorkforceIntegrationApiService.TeamworkListWorkforceIntegrations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teamwork/workforceIntegrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTeamworkUpdateWorkforceIntegrationsRequest struct {
	ctx _context.Context
	ApiService *TeamworkWorkforceIntegrationApiService
	workforceIntegrationId string
	microsoftGraphWorkforceIntegration *MicrosoftGraphWorkforceIntegration
}

// New navigation property values
func (r ApiTeamworkUpdateWorkforceIntegrationsRequest) MicrosoftGraphWorkforceIntegration(microsoftGraphWorkforceIntegration MicrosoftGraphWorkforceIntegration) ApiTeamworkUpdateWorkforceIntegrationsRequest {
	r.microsoftGraphWorkforceIntegration = &microsoftGraphWorkforceIntegration
	return r
}

func (r ApiTeamworkUpdateWorkforceIntegrationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.TeamworkUpdateWorkforceIntegrationsExecute(r)
}

/*
TeamworkUpdateWorkforceIntegrations Update the navigation property workforceIntegrations in teamwork

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workforceIntegrationId key: id of workforceIntegration
 @return ApiTeamworkUpdateWorkforceIntegrationsRequest
*/
func (a *TeamworkWorkforceIntegrationApiService) TeamworkUpdateWorkforceIntegrations(ctx _context.Context, workforceIntegrationId string) ApiTeamworkUpdateWorkforceIntegrationsRequest {
	return ApiTeamworkUpdateWorkforceIntegrationsRequest{
		ApiService: a,
		ctx: ctx,
		workforceIntegrationId: workforceIntegrationId,
	}
}

// Execute executes the request
func (a *TeamworkWorkforceIntegrationApiService) TeamworkUpdateWorkforceIntegrationsExecute(r ApiTeamworkUpdateWorkforceIntegrationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamworkWorkforceIntegrationApiService.TeamworkUpdateWorkforceIntegrations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teamwork/workforceIntegrations/{workforceIntegration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"workforceIntegration-id"+"}", _neturl.PathEscape(parameterToString(r.workforceIntegrationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkforceIntegration == nil {
		return nil, reportError("microsoftGraphWorkforceIntegration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkforceIntegration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
