/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// Place struct for Place
type Place struct {
	// The street address of the place.
	Address AnyOfmicrosoftGraphPhysicalAddress `json:"address,omitempty"`
	// The name associated with the place.
	DisplayName *string `json:"displayName,omitempty"`
	// Specifies the place location in latitude, longitude and (optionally) altitude coordinates.
	GeoCoordinates AnyOfmicrosoftGraphOutlookGeoCoordinates `json:"geoCoordinates,omitempty"`
	// The phone number of the place.
	Phone NullableString `json:"phone,omitempty"`
}

// NewPlace instantiates a new Place object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlace() *Place {
	this := Place{}
	return &this
}

// NewPlaceWithDefaults instantiates a new Place object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaceWithDefaults() *Place {
	this := Place{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Place) GetAddress() AnyOfmicrosoftGraphPhysicalAddress {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPhysicalAddress
		return ret
	}
	return o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Place) GetAddressOk() (*AnyOfmicrosoftGraphPhysicalAddress, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return &o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Place) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given AnyOfmicrosoftGraphPhysicalAddress and assigns it to the Address field.
func (o *Place) SetAddress(v AnyOfmicrosoftGraphPhysicalAddress) {
	o.Address = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Place) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Place) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Place) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Place) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetGeoCoordinates returns the GeoCoordinates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Place) GetGeoCoordinates() AnyOfmicrosoftGraphOutlookGeoCoordinates {
	if o == nil  {
		var ret AnyOfmicrosoftGraphOutlookGeoCoordinates
		return ret
	}
	return o.GeoCoordinates
}

// GetGeoCoordinatesOk returns a tuple with the GeoCoordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Place) GetGeoCoordinatesOk() (*AnyOfmicrosoftGraphOutlookGeoCoordinates, bool) {
	if o == nil || o.GeoCoordinates == nil {
		return nil, false
	}
	return &o.GeoCoordinates, true
}

// HasGeoCoordinates returns a boolean if a field has been set.
func (o *Place) HasGeoCoordinates() bool {
	if o != nil && o.GeoCoordinates != nil {
		return true
	}

	return false
}

// SetGeoCoordinates gets a reference to the given AnyOfmicrosoftGraphOutlookGeoCoordinates and assigns it to the GeoCoordinates field.
func (o *Place) SetGeoCoordinates(v AnyOfmicrosoftGraphOutlookGeoCoordinates) {
	o.GeoCoordinates = v
}

// GetPhone returns the Phone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Place) GetPhone() string {
	if o == nil || o.Phone.Get() == nil {
		var ret string
		return ret
	}
	return *o.Phone.Get()
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Place) GetPhoneOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Phone.Get(), o.Phone.IsSet()
}

// HasPhone returns a boolean if a field has been set.
func (o *Place) HasPhone() bool {
	if o != nil && o.Phone.IsSet() {
		return true
	}

	return false
}

// SetPhone gets a reference to the given NullableString and assigns it to the Phone field.
func (o *Place) SetPhone(v string) {
	o.Phone.Set(&v)
}
// SetPhoneNil sets the value for Phone to be an explicit nil
func (o *Place) SetPhoneNil() {
	o.Phone.Set(nil)
}

// UnsetPhone ensures that no value is present for Phone, not even an explicit nil
func (o *Place) UnsetPhone() {
	o.Phone.Unset()
}

func (o Place) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.GeoCoordinates != nil {
		toSerialize["geoCoordinates"] = o.GeoCoordinates
	}
	if o.Phone.IsSet() {
		toSerialize["phone"] = o.Phone.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePlace struct {
	value *Place
	isSet bool
}

func (v NullablePlace) Get() *Place {
	return v.value
}

func (v *NullablePlace) Set(val *Place) {
	v.value = val
	v.isSet = true
}

func (v NullablePlace) IsSet() bool {
	return v.isSet
}

func (v *NullablePlace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlace(val *Place) *NullablePlace {
	return &NullablePlace{value: val, isSet: true}
}

func (v NullablePlace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


