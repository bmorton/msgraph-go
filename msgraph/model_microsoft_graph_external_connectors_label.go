/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphExternalConnectorsLabel the model 'MicrosoftGraphExternalConnectorsLabel'
type MicrosoftGraphExternalConnectorsLabel string

// List of microsoft.graph.externalConnectors.label
const (
	TITLE MicrosoftGraphExternalConnectorsLabel = "title"
	URL MicrosoftGraphExternalConnectorsLabel = "url"
	CREATED_BY MicrosoftGraphExternalConnectorsLabel = "createdBy"
	LAST_MODIFIED_BY MicrosoftGraphExternalConnectorsLabel = "lastModifiedBy"
	AUTHORS MicrosoftGraphExternalConnectorsLabel = "authors"
	CREATED_DATE_TIME MicrosoftGraphExternalConnectorsLabel = "createdDateTime"
	LAST_MODIFIED_DATE_TIME MicrosoftGraphExternalConnectorsLabel = "lastModifiedDateTime"
	FILE_NAME MicrosoftGraphExternalConnectorsLabel = "fileName"
	FILE_EXTENSION MicrosoftGraphExternalConnectorsLabel = "fileExtension"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphExternalConnectorsLabel = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphExternalConnectorsLabel enum
var AllowedMicrosoftGraphExternalConnectorsLabelEnumValues = []MicrosoftGraphExternalConnectorsLabel{
	"title",
	"url",
	"createdBy",
	"lastModifiedBy",
	"authors",
	"createdDateTime",
	"lastModifiedDateTime",
	"fileName",
	"fileExtension",
	"unknownFutureValue",
}

func (v *MicrosoftGraphExternalConnectorsLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphExternalConnectorsLabel(value)
	for _, existing := range AllowedMicrosoftGraphExternalConnectorsLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphExternalConnectorsLabel", value)
}

// NewMicrosoftGraphExternalConnectorsLabelFromValue returns a pointer to a valid MicrosoftGraphExternalConnectorsLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphExternalConnectorsLabelFromValue(v string) (*MicrosoftGraphExternalConnectorsLabel, error) {
	ev := MicrosoftGraphExternalConnectorsLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphExternalConnectorsLabel: valid values are %v", v, AllowedMicrosoftGraphExternalConnectorsLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphExternalConnectorsLabel) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphExternalConnectorsLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.externalConnectors.label value
func (v MicrosoftGraphExternalConnectorsLabel) Ptr() *MicrosoftGraphExternalConnectorsLabel {
	return &v
}

type NullableMicrosoftGraphExternalConnectorsLabel struct {
	value *MicrosoftGraphExternalConnectorsLabel
	isSet bool
}

func (v NullableMicrosoftGraphExternalConnectorsLabel) Get() *MicrosoftGraphExternalConnectorsLabel {
	return v.value
}

func (v *NullableMicrosoftGraphExternalConnectorsLabel) Set(val *MicrosoftGraphExternalConnectorsLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphExternalConnectorsLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphExternalConnectorsLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphExternalConnectorsLabel(val *MicrosoftGraphExternalConnectorsLabel) *NullableMicrosoftGraphExternalConnectorsLabel {
	return &NullableMicrosoftGraphExternalConnectorsLabel{value: val, isSet: true}
}

func (v NullableMicrosoftGraphExternalConnectorsLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphExternalConnectorsLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

