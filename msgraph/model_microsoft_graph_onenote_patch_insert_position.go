/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphOnenotePatchInsertPosition the model 'MicrosoftGraphOnenotePatchInsertPosition'
type MicrosoftGraphOnenotePatchInsertPosition string

// List of microsoft.graph.onenotePatchInsertPosition
const (
	AFTER MicrosoftGraphOnenotePatchInsertPosition = "After"
	BEFORE MicrosoftGraphOnenotePatchInsertPosition = "Before"
)

// All allowed values of MicrosoftGraphOnenotePatchInsertPosition enum
var AllowedMicrosoftGraphOnenotePatchInsertPositionEnumValues = []MicrosoftGraphOnenotePatchInsertPosition{
	"After",
	"Before",
}

func (v *MicrosoftGraphOnenotePatchInsertPosition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphOnenotePatchInsertPosition(value)
	for _, existing := range AllowedMicrosoftGraphOnenotePatchInsertPositionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphOnenotePatchInsertPosition", value)
}

// NewMicrosoftGraphOnenotePatchInsertPositionFromValue returns a pointer to a valid MicrosoftGraphOnenotePatchInsertPosition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphOnenotePatchInsertPositionFromValue(v string) (*MicrosoftGraphOnenotePatchInsertPosition, error) {
	ev := MicrosoftGraphOnenotePatchInsertPosition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphOnenotePatchInsertPosition: valid values are %v", v, AllowedMicrosoftGraphOnenotePatchInsertPositionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphOnenotePatchInsertPosition) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphOnenotePatchInsertPositionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.onenotePatchInsertPosition value
func (v MicrosoftGraphOnenotePatchInsertPosition) Ptr() *MicrosoftGraphOnenotePatchInsertPosition {
	return &v
}

type NullableMicrosoftGraphOnenotePatchInsertPosition struct {
	value *MicrosoftGraphOnenotePatchInsertPosition
	isSet bool
}

func (v NullableMicrosoftGraphOnenotePatchInsertPosition) Get() *MicrosoftGraphOnenotePatchInsertPosition {
	return v.value
}

func (v *NullableMicrosoftGraphOnenotePatchInsertPosition) Set(val *MicrosoftGraphOnenotePatchInsertPosition) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphOnenotePatchInsertPosition) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphOnenotePatchInsertPosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphOnenotePatchInsertPosition(val *MicrosoftGraphOnenotePatchInsertPosition) *NullableMicrosoftGraphOnenotePatchInsertPosition {
	return &NullableMicrosoftGraphOnenotePatchInsertPosition{value: val, isSet: true}
}

func (v NullableMicrosoftGraphOnenotePatchInsertPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphOnenotePatchInsertPosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

