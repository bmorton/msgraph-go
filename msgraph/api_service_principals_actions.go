/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ServicePrincipalsActionsApiService ServicePrincipalsActionsApi service
type ServicePrincipalsActionsApiService service

type ApiServicePrincipalsGetAvailableExtensionPropertiesRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsActionsApiService
	inlineObject723 *InlineObject723
}

func (r ApiServicePrincipalsGetAvailableExtensionPropertiesRequest) InlineObject723(inlineObject723 InlineObject723) ApiServicePrincipalsGetAvailableExtensionPropertiesRequest {
	r.inlineObject723 = &inlineObject723
	return r
}

func (r ApiServicePrincipalsGetAvailableExtensionPropertiesRequest) Execute() ([]MicrosoftGraphExtensionProperty, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsGetAvailableExtensionPropertiesExecute(r)
}

/*
ServicePrincipalsGetAvailableExtensionProperties Invoke action getAvailableExtensionProperties

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServicePrincipalsGetAvailableExtensionPropertiesRequest
*/
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsGetAvailableExtensionProperties(ctx _context.Context) ApiServicePrincipalsGetAvailableExtensionPropertiesRequest {
	return ApiServicePrincipalsGetAvailableExtensionPropertiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphExtensionProperty
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsGetAvailableExtensionPropertiesExecute(r ApiServicePrincipalsGetAvailableExtensionPropertiesRequest) ([]MicrosoftGraphExtensionProperty, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphExtensionProperty
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsActionsApiService.ServicePrincipalsGetAvailableExtensionProperties")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/microsoft.graph.getAvailableExtensionProperties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject723 == nil {
		return localVarReturnValue, nil, reportError("inlineObject723 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject723
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsGetByIdsRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsActionsApiService
	inlineObject724 *InlineObject724
}

func (r ApiServicePrincipalsGetByIdsRequest) InlineObject724(inlineObject724 InlineObject724) ApiServicePrincipalsGetByIdsRequest {
	r.inlineObject724 = &inlineObject724
	return r
}

func (r ApiServicePrincipalsGetByIdsRequest) Execute() ([]MicrosoftGraphDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsGetByIdsExecute(r)
}

/*
ServicePrincipalsGetByIds Invoke action getByIds

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServicePrincipalsGetByIdsRequest
*/
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsGetByIds(ctx _context.Context) ApiServicePrincipalsGetByIdsRequest {
	return ApiServicePrincipalsGetByIdsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []MicrosoftGraphDirectoryObject
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsGetByIdsExecute(r ApiServicePrincipalsGetByIdsRequest) ([]MicrosoftGraphDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MicrosoftGraphDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsActionsApiService.ServicePrincipalsGetByIds")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/microsoft.graph.getByIds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject724 == nil {
		return localVarReturnValue, nil, reportError("inlineObject724 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject724
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsServicePrincipalAddKeyRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsActionsApiService
	servicePrincipalId string
	inlineObject715 *InlineObject715
}

func (r ApiServicePrincipalsServicePrincipalAddKeyRequest) InlineObject715(inlineObject715 InlineObject715) ApiServicePrincipalsServicePrincipalAddKeyRequest {
	r.inlineObject715 = &inlineObject715
	return r
}

func (r ApiServicePrincipalsServicePrincipalAddKeyRequest) Execute() (MicrosoftGraphKeyCredential, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsServicePrincipalAddKeyExecute(r)
}

/*
ServicePrincipalsServicePrincipalAddKey Invoke action addKey

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @return ApiServicePrincipalsServicePrincipalAddKeyRequest
*/
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalAddKey(ctx _context.Context, servicePrincipalId string) ApiServicePrincipalsServicePrincipalAddKeyRequest {
	return ApiServicePrincipalsServicePrincipalAddKeyRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphKeyCredential
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalAddKeyExecute(r ApiServicePrincipalsServicePrincipalAddKeyRequest) (MicrosoftGraphKeyCredential, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphKeyCredential
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsActionsApiService.ServicePrincipalsServicePrincipalAddKey")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/microsoft.graph.addKey"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject715 == nil {
		return localVarReturnValue, nil, reportError("inlineObject715 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject715
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsServicePrincipalAddPasswordRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsActionsApiService
	servicePrincipalId string
	inlineObject716 *InlineObject716
}

func (r ApiServicePrincipalsServicePrincipalAddPasswordRequest) InlineObject716(inlineObject716 InlineObject716) ApiServicePrincipalsServicePrincipalAddPasswordRequest {
	r.inlineObject716 = &inlineObject716
	return r
}

func (r ApiServicePrincipalsServicePrincipalAddPasswordRequest) Execute() (MicrosoftGraphPasswordCredential, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsServicePrincipalAddPasswordExecute(r)
}

/*
ServicePrincipalsServicePrincipalAddPassword Invoke action addPassword

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @return ApiServicePrincipalsServicePrincipalAddPasswordRequest
*/
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalAddPassword(ctx _context.Context, servicePrincipalId string) ApiServicePrincipalsServicePrincipalAddPasswordRequest {
	return ApiServicePrincipalsServicePrincipalAddPasswordRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPasswordCredential
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalAddPasswordExecute(r ApiServicePrincipalsServicePrincipalAddPasswordRequest) (MicrosoftGraphPasswordCredential, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPasswordCredential
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsActionsApiService.ServicePrincipalsServicePrincipalAddPassword")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/microsoft.graph.addPassword"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject716 == nil {
		return localVarReturnValue, nil, reportError("inlineObject716 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject716
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsServicePrincipalCheckMemberGroupsRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsActionsApiService
	servicePrincipalId string
	inlineObject717 *InlineObject717
}

func (r ApiServicePrincipalsServicePrincipalCheckMemberGroupsRequest) InlineObject717(inlineObject717 InlineObject717) ApiServicePrincipalsServicePrincipalCheckMemberGroupsRequest {
	r.inlineObject717 = &inlineObject717
	return r
}

func (r ApiServicePrincipalsServicePrincipalCheckMemberGroupsRequest) Execute() ([]string, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsServicePrincipalCheckMemberGroupsExecute(r)
}

/*
ServicePrincipalsServicePrincipalCheckMemberGroups Invoke action checkMemberGroups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @return ApiServicePrincipalsServicePrincipalCheckMemberGroupsRequest
*/
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalCheckMemberGroups(ctx _context.Context, servicePrincipalId string) ApiServicePrincipalsServicePrincipalCheckMemberGroupsRequest {
	return ApiServicePrincipalsServicePrincipalCheckMemberGroupsRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
	}
}

// Execute executes the request
//  @return []string
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalCheckMemberGroupsExecute(r ApiServicePrincipalsServicePrincipalCheckMemberGroupsRequest) ([]string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsActionsApiService.ServicePrincipalsServicePrincipalCheckMemberGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/microsoft.graph.checkMemberGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject717 == nil {
		return localVarReturnValue, nil, reportError("inlineObject717 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject717
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsServicePrincipalCheckMemberObjectsRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsActionsApiService
	servicePrincipalId string
	inlineObject718 *InlineObject718
}

func (r ApiServicePrincipalsServicePrincipalCheckMemberObjectsRequest) InlineObject718(inlineObject718 InlineObject718) ApiServicePrincipalsServicePrincipalCheckMemberObjectsRequest {
	r.inlineObject718 = &inlineObject718
	return r
}

func (r ApiServicePrincipalsServicePrincipalCheckMemberObjectsRequest) Execute() ([]string, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsServicePrincipalCheckMemberObjectsExecute(r)
}

/*
ServicePrincipalsServicePrincipalCheckMemberObjects Invoke action checkMemberObjects

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @return ApiServicePrincipalsServicePrincipalCheckMemberObjectsRequest
*/
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalCheckMemberObjects(ctx _context.Context, servicePrincipalId string) ApiServicePrincipalsServicePrincipalCheckMemberObjectsRequest {
	return ApiServicePrincipalsServicePrincipalCheckMemberObjectsRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
	}
}

// Execute executes the request
//  @return []string
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalCheckMemberObjectsExecute(r ApiServicePrincipalsServicePrincipalCheckMemberObjectsRequest) ([]string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsActionsApiService.ServicePrincipalsServicePrincipalCheckMemberObjects")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/microsoft.graph.checkMemberObjects"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject718 == nil {
		return localVarReturnValue, nil, reportError("inlineObject718 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject718
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsServicePrincipalGetMemberGroupsRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsActionsApiService
	servicePrincipalId string
	inlineObject719 *InlineObject719
}

func (r ApiServicePrincipalsServicePrincipalGetMemberGroupsRequest) InlineObject719(inlineObject719 InlineObject719) ApiServicePrincipalsServicePrincipalGetMemberGroupsRequest {
	r.inlineObject719 = &inlineObject719
	return r
}

func (r ApiServicePrincipalsServicePrincipalGetMemberGroupsRequest) Execute() ([]string, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsServicePrincipalGetMemberGroupsExecute(r)
}

/*
ServicePrincipalsServicePrincipalGetMemberGroups Invoke action getMemberGroups

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @return ApiServicePrincipalsServicePrincipalGetMemberGroupsRequest
*/
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalGetMemberGroups(ctx _context.Context, servicePrincipalId string) ApiServicePrincipalsServicePrincipalGetMemberGroupsRequest {
	return ApiServicePrincipalsServicePrincipalGetMemberGroupsRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
	}
}

// Execute executes the request
//  @return []string
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalGetMemberGroupsExecute(r ApiServicePrincipalsServicePrincipalGetMemberGroupsRequest) ([]string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsActionsApiService.ServicePrincipalsServicePrincipalGetMemberGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/microsoft.graph.getMemberGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject719 == nil {
		return localVarReturnValue, nil, reportError("inlineObject719 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject719
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsServicePrincipalGetMemberObjectsRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsActionsApiService
	servicePrincipalId string
	inlineObject720 *InlineObject720
}

func (r ApiServicePrincipalsServicePrincipalGetMemberObjectsRequest) InlineObject720(inlineObject720 InlineObject720) ApiServicePrincipalsServicePrincipalGetMemberObjectsRequest {
	r.inlineObject720 = &inlineObject720
	return r
}

func (r ApiServicePrincipalsServicePrincipalGetMemberObjectsRequest) Execute() ([]string, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsServicePrincipalGetMemberObjectsExecute(r)
}

/*
ServicePrincipalsServicePrincipalGetMemberObjects Invoke action getMemberObjects

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @return ApiServicePrincipalsServicePrincipalGetMemberObjectsRequest
*/
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalGetMemberObjects(ctx _context.Context, servicePrincipalId string) ApiServicePrincipalsServicePrincipalGetMemberObjectsRequest {
	return ApiServicePrincipalsServicePrincipalGetMemberObjectsRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
	}
}

// Execute executes the request
//  @return []string
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalGetMemberObjectsExecute(r ApiServicePrincipalsServicePrincipalGetMemberObjectsRequest) ([]string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsActionsApiService.ServicePrincipalsServicePrincipalGetMemberObjects")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/microsoft.graph.getMemberObjects"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject720 == nil {
		return localVarReturnValue, nil, reportError("inlineObject720 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject720
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsServicePrincipalRemoveKeyRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsActionsApiService
	servicePrincipalId string
	inlineObject721 *InlineObject721
}

func (r ApiServicePrincipalsServicePrincipalRemoveKeyRequest) InlineObject721(inlineObject721 InlineObject721) ApiServicePrincipalsServicePrincipalRemoveKeyRequest {
	r.inlineObject721 = &inlineObject721
	return r
}

func (r ApiServicePrincipalsServicePrincipalRemoveKeyRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsServicePrincipalRemoveKeyExecute(r)
}

/*
ServicePrincipalsServicePrincipalRemoveKey Invoke action removeKey

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @return ApiServicePrincipalsServicePrincipalRemoveKeyRequest
*/
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalRemoveKey(ctx _context.Context, servicePrincipalId string) ApiServicePrincipalsServicePrincipalRemoveKeyRequest {
	return ApiServicePrincipalsServicePrincipalRemoveKeyRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
	}
}

// Execute executes the request
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalRemoveKeyExecute(r ApiServicePrincipalsServicePrincipalRemoveKeyRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsActionsApiService.ServicePrincipalsServicePrincipalRemoveKey")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/microsoft.graph.removeKey"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject721 == nil {
		return nil, reportError("inlineObject721 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject721
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiServicePrincipalsServicePrincipalRemovePasswordRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsActionsApiService
	servicePrincipalId string
	inlineObject722 *InlineObject722
}

func (r ApiServicePrincipalsServicePrincipalRemovePasswordRequest) InlineObject722(inlineObject722 InlineObject722) ApiServicePrincipalsServicePrincipalRemovePasswordRequest {
	r.inlineObject722 = &inlineObject722
	return r
}

func (r ApiServicePrincipalsServicePrincipalRemovePasswordRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsServicePrincipalRemovePasswordExecute(r)
}

/*
ServicePrincipalsServicePrincipalRemovePassword Invoke action removePassword

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @return ApiServicePrincipalsServicePrincipalRemovePasswordRequest
*/
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalRemovePassword(ctx _context.Context, servicePrincipalId string) ApiServicePrincipalsServicePrincipalRemovePasswordRequest {
	return ApiServicePrincipalsServicePrincipalRemovePasswordRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
	}
}

// Execute executes the request
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalRemovePasswordExecute(r ApiServicePrincipalsServicePrincipalRemovePasswordRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsActionsApiService.ServicePrincipalsServicePrincipalRemovePassword")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/microsoft.graph.removePassword"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject722 == nil {
		return nil, reportError("inlineObject722 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject722
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiServicePrincipalsServicePrincipalRestoreRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsActionsApiService
	servicePrincipalId string
}


func (r ApiServicePrincipalsServicePrincipalRestoreRequest) Execute() (AnyOfmicrosoftGraphDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsServicePrincipalRestoreExecute(r)
}

/*
ServicePrincipalsServicePrincipalRestore Invoke action restore

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param servicePrincipalId key: id of servicePrincipal
 @return ApiServicePrincipalsServicePrincipalRestoreRequest
*/
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalRestore(ctx _context.Context, servicePrincipalId string) ApiServicePrincipalsServicePrincipalRestoreRequest {
	return ApiServicePrincipalsServicePrincipalRestoreRequest{
		ApiService: a,
		ctx: ctx,
		servicePrincipalId: servicePrincipalId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphDirectoryObject
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsServicePrincipalRestoreExecute(r ApiServicePrincipalsServicePrincipalRestoreRequest) (AnyOfmicrosoftGraphDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsActionsApiService.ServicePrincipalsServicePrincipalRestore")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/{servicePrincipal-id}/microsoft.graph.restore"
	localVarPath = strings.Replace(localVarPath, "{"+"servicePrincipal-id"+"}", _neturl.PathEscape(parameterToString(r.servicePrincipalId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiServicePrincipalsValidatePropertiesRequest struct {
	ctx _context.Context
	ApiService *ServicePrincipalsActionsApiService
	inlineObject725 *InlineObject725
}

func (r ApiServicePrincipalsValidatePropertiesRequest) InlineObject725(inlineObject725 InlineObject725) ApiServicePrincipalsValidatePropertiesRequest {
	r.inlineObject725 = &inlineObject725
	return r
}

func (r ApiServicePrincipalsValidatePropertiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ServicePrincipalsValidatePropertiesExecute(r)
}

/*
ServicePrincipalsValidateProperties Invoke action validateProperties

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiServicePrincipalsValidatePropertiesRequest
*/
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsValidateProperties(ctx _context.Context) ApiServicePrincipalsValidatePropertiesRequest {
	return ApiServicePrincipalsValidatePropertiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ServicePrincipalsActionsApiService) ServicePrincipalsValidatePropertiesExecute(r ApiServicePrincipalsValidatePropertiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServicePrincipalsActionsApiService.ServicePrincipalsValidateProperties")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/servicePrincipals/microsoft.graph.validateProperties"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject725 == nil {
		return nil, reportError("inlineObject725 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject725
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
