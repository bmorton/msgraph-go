/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject1460 struct for InlineObject1460
type InlineObject1460 struct {
	Array AnyOfobject `json:"array,omitempty"`
	X AnyOfobject `json:"x,omitempty"`
	Significance AnyOfobject `json:"significance,omitempty"`
}

// NewInlineObject1460 instantiates a new InlineObject1460 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1460() *InlineObject1460 {
	this := InlineObject1460{}
	return &this
}

// NewInlineObject1460WithDefaults instantiates a new InlineObject1460 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1460WithDefaults() *InlineObject1460 {
	this := InlineObject1460{}
	return &this
}

// GetArray returns the Array field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1460) GetArray() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Array
}

// GetArrayOk returns a tuple with the Array field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1460) GetArrayOk() (*AnyOfobject, bool) {
	if o == nil || o.Array == nil {
		return nil, false
	}
	return &o.Array, true
}

// HasArray returns a boolean if a field has been set.
func (o *InlineObject1460) HasArray() bool {
	if o != nil && o.Array != nil {
		return true
	}

	return false
}

// SetArray gets a reference to the given AnyOfobject and assigns it to the Array field.
func (o *InlineObject1460) SetArray(v AnyOfobject) {
	o.Array = v
}

// GetX returns the X field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1460) GetX() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1460) GetXOk() (*AnyOfobject, bool) {
	if o == nil || o.X == nil {
		return nil, false
	}
	return &o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *InlineObject1460) HasX() bool {
	if o != nil && o.X != nil {
		return true
	}

	return false
}

// SetX gets a reference to the given AnyOfobject and assigns it to the X field.
func (o *InlineObject1460) SetX(v AnyOfobject) {
	o.X = v
}

// GetSignificance returns the Significance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1460) GetSignificance() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Significance
}

// GetSignificanceOk returns a tuple with the Significance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1460) GetSignificanceOk() (*AnyOfobject, bool) {
	if o == nil || o.Significance == nil {
		return nil, false
	}
	return &o.Significance, true
}

// HasSignificance returns a boolean if a field has been set.
func (o *InlineObject1460) HasSignificance() bool {
	if o != nil && o.Significance != nil {
		return true
	}

	return false
}

// SetSignificance gets a reference to the given AnyOfobject and assigns it to the Significance field.
func (o *InlineObject1460) SetSignificance(v AnyOfobject) {
	o.Significance = v
}

func (o InlineObject1460) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Array != nil {
		toSerialize["array"] = o.Array
	}
	if o.X != nil {
		toSerialize["x"] = o.X
	}
	if o.Significance != nil {
		toSerialize["significance"] = o.Significance
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1460 struct {
	value *InlineObject1460
	isSet bool
}

func (v NullableInlineObject1460) Get() *InlineObject1460 {
	return v.value
}

func (v *NullableInlineObject1460) Set(val *InlineObject1460) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1460) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1460) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1460(val *InlineObject1460) *NullableInlineObject1460 {
	return &NullableInlineObject1460{value: val, isSet: true}
}

func (v NullableInlineObject1460) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1460) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


