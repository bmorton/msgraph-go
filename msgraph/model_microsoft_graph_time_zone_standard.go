/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphTimeZoneStandard the model 'MicrosoftGraphTimeZoneStandard'
type MicrosoftGraphTimeZoneStandard string

// List of microsoft.graph.timeZoneStandard
const (
	WINDOWS MicrosoftGraphTimeZoneStandard = "windows"
	IANA MicrosoftGraphTimeZoneStandard = "iana"
)

// All allowed values of MicrosoftGraphTimeZoneStandard enum
var AllowedMicrosoftGraphTimeZoneStandardEnumValues = []MicrosoftGraphTimeZoneStandard{
	"windows",
	"iana",
}

func (v *MicrosoftGraphTimeZoneStandard) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphTimeZoneStandard(value)
	for _, existing := range AllowedMicrosoftGraphTimeZoneStandardEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphTimeZoneStandard", value)
}

// NewMicrosoftGraphTimeZoneStandardFromValue returns a pointer to a valid MicrosoftGraphTimeZoneStandard
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphTimeZoneStandardFromValue(v string) (*MicrosoftGraphTimeZoneStandard, error) {
	ev := MicrosoftGraphTimeZoneStandard(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphTimeZoneStandard: valid values are %v", v, AllowedMicrosoftGraphTimeZoneStandardEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphTimeZoneStandard) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphTimeZoneStandardEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.timeZoneStandard value
func (v MicrosoftGraphTimeZoneStandard) Ptr() *MicrosoftGraphTimeZoneStandard {
	return &v
}

type NullableMicrosoftGraphTimeZoneStandard struct {
	value *MicrosoftGraphTimeZoneStandard
	isSet bool
}

func (v NullableMicrosoftGraphTimeZoneStandard) Get() *MicrosoftGraphTimeZoneStandard {
	return v.value
}

func (v *NullableMicrosoftGraphTimeZoneStandard) Set(val *MicrosoftGraphTimeZoneStandard) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphTimeZoneStandard) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphTimeZoneStandard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphTimeZoneStandard(val *MicrosoftGraphTimeZoneStandard) *NullableMicrosoftGraphTimeZoneStandard {
	return &NullableMicrosoftGraphTimeZoneStandard{value: val, isSet: true}
}

func (v NullableMicrosoftGraphTimeZoneStandard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphTimeZoneStandard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

