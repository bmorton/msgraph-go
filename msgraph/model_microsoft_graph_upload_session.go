/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// MicrosoftGraphUploadSession struct for MicrosoftGraphUploadSession
type MicrosoftGraphUploadSession struct {
	// The date and time in UTC that the upload session will expire. The complete file must be uploaded before this expiration time is reached.
	ExpirationDateTime NullableTime `json:"expirationDateTime,omitempty"`
	// A collection of byte ranges that the server is missing for the file. These ranges are zero indexed and of the format 'start-end' (e.g. '0-26' to indicate the first 27 bytes of the file). When uploading files as Outlook attachments, instead of a collection of ranges, this property always indicates a single value '{start}', the location in the file where the next upload should begin.
	NextExpectedRanges *[]*string `json:"nextExpectedRanges,omitempty"`
	// The URL endpoint that accepts PUT requests for byte ranges of the file.
	UploadUrl NullableString `json:"uploadUrl,omitempty"`
}

// NewMicrosoftGraphUploadSession instantiates a new MicrosoftGraphUploadSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphUploadSession() *MicrosoftGraphUploadSession {
	this := MicrosoftGraphUploadSession{}
	return &this
}

// NewMicrosoftGraphUploadSessionWithDefaults instantiates a new MicrosoftGraphUploadSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphUploadSessionWithDefaults() *MicrosoftGraphUploadSession {
	this := MicrosoftGraphUploadSession{}
	return &this
}

// GetExpirationDateTime returns the ExpirationDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUploadSession) GetExpirationDateTime() time.Time {
	if o == nil || o.ExpirationDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDateTime.Get()
}

// GetExpirationDateTimeOk returns a tuple with the ExpirationDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUploadSession) GetExpirationDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpirationDateTime.Get(), o.ExpirationDateTime.IsSet()
}

// HasExpirationDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphUploadSession) HasExpirationDateTime() bool {
	if o != nil && o.ExpirationDateTime.IsSet() {
		return true
	}

	return false
}

// SetExpirationDateTime gets a reference to the given NullableTime and assigns it to the ExpirationDateTime field.
func (o *MicrosoftGraphUploadSession) SetExpirationDateTime(v time.Time) {
	o.ExpirationDateTime.Set(&v)
}
// SetExpirationDateTimeNil sets the value for ExpirationDateTime to be an explicit nil
func (o *MicrosoftGraphUploadSession) SetExpirationDateTimeNil() {
	o.ExpirationDateTime.Set(nil)
}

// UnsetExpirationDateTime ensures that no value is present for ExpirationDateTime, not even an explicit nil
func (o *MicrosoftGraphUploadSession) UnsetExpirationDateTime() {
	o.ExpirationDateTime.Unset()
}

// GetNextExpectedRanges returns the NextExpectedRanges field value if set, zero value otherwise.
func (o *MicrosoftGraphUploadSession) GetNextExpectedRanges() []*string {
	if o == nil || o.NextExpectedRanges == nil {
		var ret []*string
		return ret
	}
	return *o.NextExpectedRanges
}

// GetNextExpectedRangesOk returns a tuple with the NextExpectedRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUploadSession) GetNextExpectedRangesOk() (*[]*string, bool) {
	if o == nil || o.NextExpectedRanges == nil {
		return nil, false
	}
	return o.NextExpectedRanges, true
}

// HasNextExpectedRanges returns a boolean if a field has been set.
func (o *MicrosoftGraphUploadSession) HasNextExpectedRanges() bool {
	if o != nil && o.NextExpectedRanges != nil {
		return true
	}

	return false
}

// SetNextExpectedRanges gets a reference to the given []*string and assigns it to the NextExpectedRanges field.
func (o *MicrosoftGraphUploadSession) SetNextExpectedRanges(v []*string) {
	o.NextExpectedRanges = &v
}

// GetUploadUrl returns the UploadUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUploadSession) GetUploadUrl() string {
	if o == nil || o.UploadUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.UploadUrl.Get()
}

// GetUploadUrlOk returns a tuple with the UploadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUploadSession) GetUploadUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UploadUrl.Get(), o.UploadUrl.IsSet()
}

// HasUploadUrl returns a boolean if a field has been set.
func (o *MicrosoftGraphUploadSession) HasUploadUrl() bool {
	if o != nil && o.UploadUrl.IsSet() {
		return true
	}

	return false
}

// SetUploadUrl gets a reference to the given NullableString and assigns it to the UploadUrl field.
func (o *MicrosoftGraphUploadSession) SetUploadUrl(v string) {
	o.UploadUrl.Set(&v)
}
// SetUploadUrlNil sets the value for UploadUrl to be an explicit nil
func (o *MicrosoftGraphUploadSession) SetUploadUrlNil() {
	o.UploadUrl.Set(nil)
}

// UnsetUploadUrl ensures that no value is present for UploadUrl, not even an explicit nil
func (o *MicrosoftGraphUploadSession) UnsetUploadUrl() {
	o.UploadUrl.Unset()
}

func (o MicrosoftGraphUploadSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpirationDateTime.IsSet() {
		toSerialize["expirationDateTime"] = o.ExpirationDateTime.Get()
	}
	if o.NextExpectedRanges != nil {
		toSerialize["nextExpectedRanges"] = o.NextExpectedRanges
	}
	if o.UploadUrl.IsSet() {
		toSerialize["uploadUrl"] = o.UploadUrl.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphUploadSession struct {
	value *MicrosoftGraphUploadSession
	isSet bool
}

func (v NullableMicrosoftGraphUploadSession) Get() *MicrosoftGraphUploadSession {
	return v.value
}

func (v *NullableMicrosoftGraphUploadSession) Set(val *MicrosoftGraphUploadSession) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphUploadSession) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphUploadSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphUploadSession(val *MicrosoftGraphUploadSession) *NullableMicrosoftGraphUploadSession {
	return &NullableMicrosoftGraphUploadSession{value: val, isSet: true}
}

func (v NullableMicrosoftGraphUploadSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphUploadSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


