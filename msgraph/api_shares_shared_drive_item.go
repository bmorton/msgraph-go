/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// SharesSharedDriveItemApiService SharesSharedDriveItemApi service
type SharesSharedDriveItemApiService service

type ApiSharesSharedDriveItemCreateSharedDriveItemRequest struct {
	ctx _context.Context
	ApiService *SharesSharedDriveItemApiService
	microsoftGraphSharedDriveItem *MicrosoftGraphSharedDriveItem
}

// New entity
func (r ApiSharesSharedDriveItemCreateSharedDriveItemRequest) MicrosoftGraphSharedDriveItem(microsoftGraphSharedDriveItem MicrosoftGraphSharedDriveItem) ApiSharesSharedDriveItemCreateSharedDriveItemRequest {
	r.microsoftGraphSharedDriveItem = &microsoftGraphSharedDriveItem
	return r
}

func (r ApiSharesSharedDriveItemCreateSharedDriveItemRequest) Execute() (MicrosoftGraphSharedDriveItem, *_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemCreateSharedDriveItemExecute(r)
}

/*
SharesSharedDriveItemCreateSharedDriveItem Add new entity to shares

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSharesSharedDriveItemCreateSharedDriveItemRequest
*/
func (a *SharesSharedDriveItemApiService) SharesSharedDriveItemCreateSharedDriveItem(ctx _context.Context) ApiSharesSharedDriveItemCreateSharedDriveItemRequest {
	return ApiSharesSharedDriveItemCreateSharedDriveItemRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSharedDriveItem
func (a *SharesSharedDriveItemApiService) SharesSharedDriveItemCreateSharedDriveItemExecute(r ApiSharesSharedDriveItemCreateSharedDriveItemRequest) (MicrosoftGraphSharedDriveItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSharedDriveItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesSharedDriveItemApiService.SharesSharedDriveItemCreateSharedDriveItem")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSharedDriveItem == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSharedDriveItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSharedDriveItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemDeleteSharedDriveItemRequest struct {
	ctx _context.Context
	ApiService *SharesSharedDriveItemApiService
	sharedDriveItemId string
	ifMatch *string
}

// ETag
func (r ApiSharesSharedDriveItemDeleteSharedDriveItemRequest) IfMatch(ifMatch string) ApiSharesSharedDriveItemDeleteSharedDriveItemRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSharesSharedDriveItemDeleteSharedDriveItemRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemDeleteSharedDriveItemExecute(r)
}

/*
SharesSharedDriveItemDeleteSharedDriveItem Delete entity from shares

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @return ApiSharesSharedDriveItemDeleteSharedDriveItemRequest
*/
func (a *SharesSharedDriveItemApiService) SharesSharedDriveItemDeleteSharedDriveItem(ctx _context.Context, sharedDriveItemId string) ApiSharesSharedDriveItemDeleteSharedDriveItemRequest {
	return ApiSharesSharedDriveItemDeleteSharedDriveItemRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
	}
}

// Execute executes the request
func (a *SharesSharedDriveItemApiService) SharesSharedDriveItemDeleteSharedDriveItemExecute(r ApiSharesSharedDriveItemDeleteSharedDriveItemRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesSharedDriveItemApiService.SharesSharedDriveItemDeleteSharedDriveItem")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemGetSharedDriveItemRequest struct {
	ctx _context.Context
	ApiService *SharesSharedDriveItemApiService
	sharedDriveItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSharesSharedDriveItemGetSharedDriveItemRequest) Select_(select_ []string) ApiSharesSharedDriveItemGetSharedDriveItemRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSharesSharedDriveItemGetSharedDriveItemRequest) Expand(expand []string) ApiSharesSharedDriveItemGetSharedDriveItemRequest {
	r.expand = &expand
	return r
}

func (r ApiSharesSharedDriveItemGetSharedDriveItemRequest) Execute() (MicrosoftGraphSharedDriveItem, *_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemGetSharedDriveItemExecute(r)
}

/*
SharesSharedDriveItemGetSharedDriveItem Get entity from shares by key

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @return ApiSharesSharedDriveItemGetSharedDriveItemRequest
*/
func (a *SharesSharedDriveItemApiService) SharesSharedDriveItemGetSharedDriveItem(ctx _context.Context, sharedDriveItemId string) ApiSharesSharedDriveItemGetSharedDriveItemRequest {
	return ApiSharesSharedDriveItemGetSharedDriveItemRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSharedDriveItem
func (a *SharesSharedDriveItemApiService) SharesSharedDriveItemGetSharedDriveItemExecute(r ApiSharesSharedDriveItemGetSharedDriveItemRequest) (MicrosoftGraphSharedDriveItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSharedDriveItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesSharedDriveItemApiService.SharesSharedDriveItemGetSharedDriveItem")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemListSharedDriveItemRequest struct {
	ctx _context.Context
	ApiService *SharesSharedDriveItemApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiSharesSharedDriveItemListSharedDriveItemRequest) Top(top int32) ApiSharesSharedDriveItemListSharedDriveItemRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiSharesSharedDriveItemListSharedDriveItemRequest) Skip(skip int32) ApiSharesSharedDriveItemListSharedDriveItemRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiSharesSharedDriveItemListSharedDriveItemRequest) Search(search string) ApiSharesSharedDriveItemListSharedDriveItemRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiSharesSharedDriveItemListSharedDriveItemRequest) Filter(filter string) ApiSharesSharedDriveItemListSharedDriveItemRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiSharesSharedDriveItemListSharedDriveItemRequest) Count(count bool) ApiSharesSharedDriveItemListSharedDriveItemRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiSharesSharedDriveItemListSharedDriveItemRequest) Orderby(orderby []string) ApiSharesSharedDriveItemListSharedDriveItemRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiSharesSharedDriveItemListSharedDriveItemRequest) Select_(select_ []string) ApiSharesSharedDriveItemListSharedDriveItemRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSharesSharedDriveItemListSharedDriveItemRequest) Expand(expand []string) ApiSharesSharedDriveItemListSharedDriveItemRequest {
	r.expand = &expand
	return r
}

func (r ApiSharesSharedDriveItemListSharedDriveItemRequest) Execute() (CollectionOfSharedDriveItem, *_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemListSharedDriveItemExecute(r)
}

/*
SharesSharedDriveItemListSharedDriveItem Get entities from shares

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSharesSharedDriveItemListSharedDriveItemRequest
*/
func (a *SharesSharedDriveItemApiService) SharesSharedDriveItemListSharedDriveItem(ctx _context.Context) ApiSharesSharedDriveItemListSharedDriveItemRequest {
	return ApiSharesSharedDriveItemListSharedDriveItemRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfSharedDriveItem
func (a *SharesSharedDriveItemApiService) SharesSharedDriveItemListSharedDriveItemExecute(r ApiSharesSharedDriveItemListSharedDriveItemRequest) (CollectionOfSharedDriveItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSharedDriveItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesSharedDriveItemApiService.SharesSharedDriveItemListSharedDriveItem")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemUpdateSharedDriveItemRequest struct {
	ctx _context.Context
	ApiService *SharesSharedDriveItemApiService
	sharedDriveItemId string
	microsoftGraphSharedDriveItem *MicrosoftGraphSharedDriveItem
}

// New property values
func (r ApiSharesSharedDriveItemUpdateSharedDriveItemRequest) MicrosoftGraphSharedDriveItem(microsoftGraphSharedDriveItem MicrosoftGraphSharedDriveItem) ApiSharesSharedDriveItemUpdateSharedDriveItemRequest {
	r.microsoftGraphSharedDriveItem = &microsoftGraphSharedDriveItem
	return r
}

func (r ApiSharesSharedDriveItemUpdateSharedDriveItemRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemUpdateSharedDriveItemExecute(r)
}

/*
SharesSharedDriveItemUpdateSharedDriveItem Update entity in shares

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @return ApiSharesSharedDriveItemUpdateSharedDriveItemRequest
*/
func (a *SharesSharedDriveItemApiService) SharesSharedDriveItemUpdateSharedDriveItem(ctx _context.Context, sharedDriveItemId string) ApiSharesSharedDriveItemUpdateSharedDriveItemRequest {
	return ApiSharesSharedDriveItemUpdateSharedDriveItemRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
	}
}

// Execute executes the request
func (a *SharesSharedDriveItemApiService) SharesSharedDriveItemUpdateSharedDriveItemExecute(r ApiSharesSharedDriveItemUpdateSharedDriveItemRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesSharedDriveItemApiService.SharesSharedDriveItemUpdateSharedDriveItem")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSharedDriveItem == nil {
		return nil, reportError("microsoftGraphSharedDriveItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSharedDriveItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
