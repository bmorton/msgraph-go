/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphRoutingMode the model 'MicrosoftGraphRoutingMode'
type MicrosoftGraphRoutingMode string

// List of microsoft.graph.routingMode
const (
	ONE_TO_ONE MicrosoftGraphRoutingMode = "oneToOne"
	MULTICAST MicrosoftGraphRoutingMode = "multicast"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphRoutingMode = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphRoutingMode enum
var AllowedMicrosoftGraphRoutingModeEnumValues = []MicrosoftGraphRoutingMode{
	"oneToOne",
	"multicast",
	"unknownFutureValue",
}

func (v *MicrosoftGraphRoutingMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphRoutingMode(value)
	for _, existing := range AllowedMicrosoftGraphRoutingModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphRoutingMode", value)
}

// NewMicrosoftGraphRoutingModeFromValue returns a pointer to a valid MicrosoftGraphRoutingMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphRoutingModeFromValue(v string) (*MicrosoftGraphRoutingMode, error) {
	ev := MicrosoftGraphRoutingMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphRoutingMode: valid values are %v", v, AllowedMicrosoftGraphRoutingModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphRoutingMode) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphRoutingModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.routingMode value
func (v MicrosoftGraphRoutingMode) Ptr() *MicrosoftGraphRoutingMode {
	return &v
}

type NullableMicrosoftGraphRoutingMode struct {
	value *MicrosoftGraphRoutingMode
	isSet bool
}

func (v NullableMicrosoftGraphRoutingMode) Get() *MicrosoftGraphRoutingMode {
	return v.value
}

func (v *NullableMicrosoftGraphRoutingMode) Set(val *MicrosoftGraphRoutingMode) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphRoutingMode) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphRoutingMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphRoutingMode(val *MicrosoftGraphRoutingMode) *NullableMicrosoftGraphRoutingMode {
	return &NullableMicrosoftGraphRoutingMode{value: val, isSet: true}
}

func (v NullableMicrosoftGraphRoutingMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphRoutingMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

