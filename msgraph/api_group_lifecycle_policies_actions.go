/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// GroupLifecyclePoliciesActionsApiService GroupLifecyclePoliciesActionsApi service
type GroupLifecyclePoliciesActionsApiService service

type ApiGroupLifecyclePoliciesGroupLifecyclePolicyAddGroupRequest struct {
	ctx _context.Context
	ApiService *GroupLifecyclePoliciesActionsApiService
	groupLifecyclePolicyId string
	inlineObject147 *InlineObject147
}

func (r ApiGroupLifecyclePoliciesGroupLifecyclePolicyAddGroupRequest) InlineObject147(inlineObject147 InlineObject147) ApiGroupLifecyclePoliciesGroupLifecyclePolicyAddGroupRequest {
	r.inlineObject147 = &inlineObject147
	return r
}

func (r ApiGroupLifecyclePoliciesGroupLifecyclePolicyAddGroupRequest) Execute() (bool, *_nethttp.Response, error) {
	return r.ApiService.GroupLifecyclePoliciesGroupLifecyclePolicyAddGroupExecute(r)
}

/*
GroupLifecyclePoliciesGroupLifecyclePolicyAddGroup Invoke action addGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupLifecyclePolicyId key: id of groupLifecyclePolicy
 @return ApiGroupLifecyclePoliciesGroupLifecyclePolicyAddGroupRequest
*/
func (a *GroupLifecyclePoliciesActionsApiService) GroupLifecyclePoliciesGroupLifecyclePolicyAddGroup(ctx _context.Context, groupLifecyclePolicyId string) ApiGroupLifecyclePoliciesGroupLifecyclePolicyAddGroupRequest {
	return ApiGroupLifecyclePoliciesGroupLifecyclePolicyAddGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupLifecyclePolicyId: groupLifecyclePolicyId,
	}
}

// Execute executes the request
//  @return bool
func (a *GroupLifecyclePoliciesActionsApiService) GroupLifecyclePoliciesGroupLifecyclePolicyAddGroupExecute(r ApiGroupLifecyclePoliciesGroupLifecyclePolicyAddGroupRequest) (bool, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupLifecyclePoliciesActionsApiService.GroupLifecyclePoliciesGroupLifecyclePolicyAddGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groupLifecyclePolicies/{groupLifecyclePolicy-id}/microsoft.graph.addGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"groupLifecyclePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.groupLifecyclePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject147 == nil {
		return localVarReturnValue, nil, reportError("inlineObject147 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject147
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGroupLifecyclePoliciesGroupLifecyclePolicyRemoveGroupRequest struct {
	ctx _context.Context
	ApiService *GroupLifecyclePoliciesActionsApiService
	groupLifecyclePolicyId string
	inlineObject148 *InlineObject148
}

func (r ApiGroupLifecyclePoliciesGroupLifecyclePolicyRemoveGroupRequest) InlineObject148(inlineObject148 InlineObject148) ApiGroupLifecyclePoliciesGroupLifecyclePolicyRemoveGroupRequest {
	r.inlineObject148 = &inlineObject148
	return r
}

func (r ApiGroupLifecyclePoliciesGroupLifecyclePolicyRemoveGroupRequest) Execute() (bool, *_nethttp.Response, error) {
	return r.ApiService.GroupLifecyclePoliciesGroupLifecyclePolicyRemoveGroupExecute(r)
}

/*
GroupLifecyclePoliciesGroupLifecyclePolicyRemoveGroup Invoke action removeGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupLifecyclePolicyId key: id of groupLifecyclePolicy
 @return ApiGroupLifecyclePoliciesGroupLifecyclePolicyRemoveGroupRequest
*/
func (a *GroupLifecyclePoliciesActionsApiService) GroupLifecyclePoliciesGroupLifecyclePolicyRemoveGroup(ctx _context.Context, groupLifecyclePolicyId string) ApiGroupLifecyclePoliciesGroupLifecyclePolicyRemoveGroupRequest {
	return ApiGroupLifecyclePoliciesGroupLifecyclePolicyRemoveGroupRequest{
		ApiService: a,
		ctx: ctx,
		groupLifecyclePolicyId: groupLifecyclePolicyId,
	}
}

// Execute executes the request
//  @return bool
func (a *GroupLifecyclePoliciesActionsApiService) GroupLifecyclePoliciesGroupLifecyclePolicyRemoveGroupExecute(r ApiGroupLifecyclePoliciesGroupLifecyclePolicyRemoveGroupRequest) (bool, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GroupLifecyclePoliciesActionsApiService.GroupLifecyclePoliciesGroupLifecyclePolicyRemoveGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/groupLifecyclePolicies/{groupLifecyclePolicy-id}/microsoft.graph.removeGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"groupLifecyclePolicy-id"+"}", _neturl.PathEscape(parameterToString(r.groupLifecyclePolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject148 == nil {
		return localVarReturnValue, nil, reportError("inlineObject148 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject148
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
