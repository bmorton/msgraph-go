/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphTone the model 'MicrosoftGraphTone'
type MicrosoftGraphTone string

// List of microsoft.graph.tone
const (
	TONE0 MicrosoftGraphTone = "tone0"
	TONE1 MicrosoftGraphTone = "tone1"
	TONE2 MicrosoftGraphTone = "tone2"
	TONE3 MicrosoftGraphTone = "tone3"
	TONE4 MicrosoftGraphTone = "tone4"
	TONE5 MicrosoftGraphTone = "tone5"
	TONE6 MicrosoftGraphTone = "tone6"
	TONE7 MicrosoftGraphTone = "tone7"
	TONE8 MicrosoftGraphTone = "tone8"
	TONE9 MicrosoftGraphTone = "tone9"
	STAR MicrosoftGraphTone = "star"
	POUND MicrosoftGraphTone = "pound"
	A MicrosoftGraphTone = "a"
	B MicrosoftGraphTone = "b"
	C MicrosoftGraphTone = "c"
	D MicrosoftGraphTone = "d"
	FLASH MicrosoftGraphTone = "flash"
)

// All allowed values of MicrosoftGraphTone enum
var AllowedMicrosoftGraphToneEnumValues = []MicrosoftGraphTone{
	"tone0",
	"tone1",
	"tone2",
	"tone3",
	"tone4",
	"tone5",
	"tone6",
	"tone7",
	"tone8",
	"tone9",
	"star",
	"pound",
	"a",
	"b",
	"c",
	"d",
	"flash",
}

func (v *MicrosoftGraphTone) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphTone(value)
	for _, existing := range AllowedMicrosoftGraphToneEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphTone", value)
}

// NewMicrosoftGraphToneFromValue returns a pointer to a valid MicrosoftGraphTone
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphToneFromValue(v string) (*MicrosoftGraphTone, error) {
	ev := MicrosoftGraphTone(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphTone: valid values are %v", v, AllowedMicrosoftGraphToneEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphTone) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphToneEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.tone value
func (v MicrosoftGraphTone) Ptr() *MicrosoftGraphTone {
	return &v
}

type NullableMicrosoftGraphTone struct {
	value *MicrosoftGraphTone
	isSet bool
}

func (v NullableMicrosoftGraphTone) Get() *MicrosoftGraphTone {
	return v.value
}

func (v *NullableMicrosoftGraphTone) Set(val *MicrosoftGraphTone) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphTone) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphTone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphTone(val *MicrosoftGraphTone) *NullableMicrosoftGraphTone {
	return &NullableMicrosoftGraphTone{value: val, isSet: true}
}

func (v NullableMicrosoftGraphTone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphTone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

