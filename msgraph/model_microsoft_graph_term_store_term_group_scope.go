/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphTermStoreTermGroupScope the model 'MicrosoftGraphTermStoreTermGroupScope'
type MicrosoftGraphTermStoreTermGroupScope string

// List of microsoft.graph.termStore.termGroupScope
const (
	GLOBAL MicrosoftGraphTermStoreTermGroupScope = "global"
	SYSTEM MicrosoftGraphTermStoreTermGroupScope = "system"
	SITE_COLLECTION MicrosoftGraphTermStoreTermGroupScope = "siteCollection"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphTermStoreTermGroupScope = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphTermStoreTermGroupScope enum
var AllowedMicrosoftGraphTermStoreTermGroupScopeEnumValues = []MicrosoftGraphTermStoreTermGroupScope{
	"global",
	"system",
	"siteCollection",
	"unknownFutureValue",
}

func (v *MicrosoftGraphTermStoreTermGroupScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphTermStoreTermGroupScope(value)
	for _, existing := range AllowedMicrosoftGraphTermStoreTermGroupScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphTermStoreTermGroupScope", value)
}

// NewMicrosoftGraphTermStoreTermGroupScopeFromValue returns a pointer to a valid MicrosoftGraphTermStoreTermGroupScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphTermStoreTermGroupScopeFromValue(v string) (*MicrosoftGraphTermStoreTermGroupScope, error) {
	ev := MicrosoftGraphTermStoreTermGroupScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphTermStoreTermGroupScope: valid values are %v", v, AllowedMicrosoftGraphTermStoreTermGroupScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphTermStoreTermGroupScope) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphTermStoreTermGroupScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.termStore.termGroupScope value
func (v MicrosoftGraphTermStoreTermGroupScope) Ptr() *MicrosoftGraphTermStoreTermGroupScope {
	return &v
}

type NullableMicrosoftGraphTermStoreTermGroupScope struct {
	value *MicrosoftGraphTermStoreTermGroupScope
	isSet bool
}

func (v NullableMicrosoftGraphTermStoreTermGroupScope) Get() *MicrosoftGraphTermStoreTermGroupScope {
	return v.value
}

func (v *NullableMicrosoftGraphTermStoreTermGroupScope) Set(val *MicrosoftGraphTermStoreTermGroupScope) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphTermStoreTermGroupScope) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphTermStoreTermGroupScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphTermStoreTermGroupScope(val *MicrosoftGraphTermStoreTermGroupScope) *NullableMicrosoftGraphTermStoreTermGroupScope {
	return &NullableMicrosoftGraphTermStoreTermGroupScope{value: val, isSet: true}
}

func (v NullableMicrosoftGraphTermStoreTermGroupScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphTermStoreTermGroupScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

