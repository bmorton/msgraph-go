/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphPhoneType the model 'MicrosoftGraphPhoneType'
type MicrosoftGraphPhoneType string

// List of microsoft.graph.phoneType
const (
	HOME MicrosoftGraphPhoneType = "home"
	BUSINESS MicrosoftGraphPhoneType = "business"
	MOBILE MicrosoftGraphPhoneType = "mobile"
	OTHER MicrosoftGraphPhoneType = "other"
	ASSISTANT MicrosoftGraphPhoneType = "assistant"
	HOME_FAX MicrosoftGraphPhoneType = "homeFax"
	BUSINESS_FAX MicrosoftGraphPhoneType = "businessFax"
	OTHER_FAX MicrosoftGraphPhoneType = "otherFax"
	PAGER MicrosoftGraphPhoneType = "pager"
	RADIO MicrosoftGraphPhoneType = "radio"
)

// All allowed values of MicrosoftGraphPhoneType enum
var AllowedMicrosoftGraphPhoneTypeEnumValues = []MicrosoftGraphPhoneType{
	"home",
	"business",
	"mobile",
	"other",
	"assistant",
	"homeFax",
	"businessFax",
	"otherFax",
	"pager",
	"radio",
}

func (v *MicrosoftGraphPhoneType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphPhoneType(value)
	for _, existing := range AllowedMicrosoftGraphPhoneTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphPhoneType", value)
}

// NewMicrosoftGraphPhoneTypeFromValue returns a pointer to a valid MicrosoftGraphPhoneType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphPhoneTypeFromValue(v string) (*MicrosoftGraphPhoneType, error) {
	ev := MicrosoftGraphPhoneType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphPhoneType: valid values are %v", v, AllowedMicrosoftGraphPhoneTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphPhoneType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphPhoneTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.phoneType value
func (v MicrosoftGraphPhoneType) Ptr() *MicrosoftGraphPhoneType {
	return &v
}

type NullableMicrosoftGraphPhoneType struct {
	value *MicrosoftGraphPhoneType
	isSet bool
}

func (v NullableMicrosoftGraphPhoneType) Get() *MicrosoftGraphPhoneType {
	return v.value
}

func (v *NullableMicrosoftGraphPhoneType) Set(val *MicrosoftGraphPhoneType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPhoneType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPhoneType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPhoneType(val *MicrosoftGraphPhoneType) *NullableMicrosoftGraphPhoneType {
	return &NullableMicrosoftGraphPhoneType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPhoneType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPhoneType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

