/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"time"
)

// MicrosoftGraphPrinter struct for MicrosoftGraphPrinter
type MicrosoftGraphPrinter struct {
	// Read-only.
	Id *string `json:"id,omitempty"`
	// The capabilities of the printer/printerShare.
	Capabilities AnyOfmicrosoftGraphPrinterCapabilities `json:"capabilities,omitempty"`
	// The default print settings of printer/printerShare.
	Defaults AnyOfmicrosoftGraphPrinterDefaults `json:"defaults,omitempty"`
	// The name of the printer/printerShare.
	DisplayName *string `json:"displayName,omitempty"`
	// Whether the printer/printerShare is currently accepting new print jobs.
	IsAcceptingJobs NullableBool `json:"isAcceptingJobs,omitempty"`
	// The physical and/or organizational location of the printer/printerShare.
	Location AnyOfmicrosoftGraphPrinterLocation `json:"location,omitempty"`
	// The manufacturer of the printer/printerShare.
	Manufacturer NullableString `json:"manufacturer,omitempty"`
	// The model name of the printer/printerShare.
	Model NullableString `json:"model,omitempty"`
	Status *MicrosoftGraphPrinterStatus `json:"status,omitempty"`
	// The list of jobs that are queued for printing by the printer/printerShare.
	Jobs *[]MicrosoftGraphPrintJob `json:"jobs,omitempty"`
	// True if the printer has a physical device for printing. Read-only.
	HasPhysicalDevice *bool `json:"hasPhysicalDevice,omitempty"`
	// True if the printer is shared; false otherwise. Read-only.
	IsShared *bool `json:"isShared,omitempty"`
	// The most recent dateTimeOffset when a printer interacted with Universal Print. Read-only.
	LastSeenDateTime NullableTime `json:"lastSeenDateTime,omitempty"`
	// The DateTimeOffset when the printer was registered. Read-only.
	RegisteredDateTime *time.Time `json:"registeredDateTime,omitempty"`
	// The connectors that are associated with the printer.
	Connectors *[]MicrosoftGraphPrintConnector `json:"connectors,omitempty"`
	// The list of printerShares that are associated with the printer. Currently, only one printerShare can be associated with the printer. Read-only. Nullable.
	Shares *[]MicrosoftGraphPrinterShare `json:"shares,omitempty"`
	// A list of task triggers that are associated with the printer.
	TaskTriggers *[]MicrosoftGraphPrintTaskTrigger `json:"taskTriggers,omitempty"`
}

// NewMicrosoftGraphPrinter instantiates a new MicrosoftGraphPrinter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphPrinter() *MicrosoftGraphPrinter {
	this := MicrosoftGraphPrinter{}
	return &this
}

// NewMicrosoftGraphPrinterWithDefaults instantiates a new MicrosoftGraphPrinter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphPrinterWithDefaults() *MicrosoftGraphPrinter {
	this := MicrosoftGraphPrinter{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MicrosoftGraphPrinter) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrinter) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphPrinter) SetId(v string) {
	o.Id = &v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPrinter) GetCapabilities() AnyOfmicrosoftGraphPrinterCapabilities {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPrinterCapabilities
		return ret
	}
	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPrinter) GetCapabilitiesOk() (*AnyOfmicrosoftGraphPrinterCapabilities, bool) {
	if o == nil || o.Capabilities == nil {
		return nil, false
	}
	return &o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasCapabilities() bool {
	if o != nil && o.Capabilities != nil {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given AnyOfmicrosoftGraphPrinterCapabilities and assigns it to the Capabilities field.
func (o *MicrosoftGraphPrinter) SetCapabilities(v AnyOfmicrosoftGraphPrinterCapabilities) {
	o.Capabilities = v
}

// GetDefaults returns the Defaults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPrinter) GetDefaults() AnyOfmicrosoftGraphPrinterDefaults {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPrinterDefaults
		return ret
	}
	return o.Defaults
}

// GetDefaultsOk returns a tuple with the Defaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPrinter) GetDefaultsOk() (*AnyOfmicrosoftGraphPrinterDefaults, bool) {
	if o == nil || o.Defaults == nil {
		return nil, false
	}
	return &o.Defaults, true
}

// HasDefaults returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasDefaults() bool {
	if o != nil && o.Defaults != nil {
		return true
	}

	return false
}

// SetDefaults gets a reference to the given AnyOfmicrosoftGraphPrinterDefaults and assigns it to the Defaults field.
func (o *MicrosoftGraphPrinter) SetDefaults(v AnyOfmicrosoftGraphPrinterDefaults) {
	o.Defaults = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *MicrosoftGraphPrinter) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrinter) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *MicrosoftGraphPrinter) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetIsAcceptingJobs returns the IsAcceptingJobs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPrinter) GetIsAcceptingJobs() bool {
	if o == nil || o.IsAcceptingJobs.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAcceptingJobs.Get()
}

// GetIsAcceptingJobsOk returns a tuple with the IsAcceptingJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPrinter) GetIsAcceptingJobsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsAcceptingJobs.Get(), o.IsAcceptingJobs.IsSet()
}

// HasIsAcceptingJobs returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasIsAcceptingJobs() bool {
	if o != nil && o.IsAcceptingJobs.IsSet() {
		return true
	}

	return false
}

// SetIsAcceptingJobs gets a reference to the given NullableBool and assigns it to the IsAcceptingJobs field.
func (o *MicrosoftGraphPrinter) SetIsAcceptingJobs(v bool) {
	o.IsAcceptingJobs.Set(&v)
}
// SetIsAcceptingJobsNil sets the value for IsAcceptingJobs to be an explicit nil
func (o *MicrosoftGraphPrinter) SetIsAcceptingJobsNil() {
	o.IsAcceptingJobs.Set(nil)
}

// UnsetIsAcceptingJobs ensures that no value is present for IsAcceptingJobs, not even an explicit nil
func (o *MicrosoftGraphPrinter) UnsetIsAcceptingJobs() {
	o.IsAcceptingJobs.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPrinter) GetLocation() AnyOfmicrosoftGraphPrinterLocation {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPrinterLocation
		return ret
	}
	return o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPrinter) GetLocationOk() (*AnyOfmicrosoftGraphPrinterLocation, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return &o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given AnyOfmicrosoftGraphPrinterLocation and assigns it to the Location field.
func (o *MicrosoftGraphPrinter) SetLocation(v AnyOfmicrosoftGraphPrinterLocation) {
	o.Location = v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPrinter) GetManufacturer() string {
	if o == nil || o.Manufacturer.Get() == nil {
		var ret string
		return ret
	}
	return *o.Manufacturer.Get()
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPrinter) GetManufacturerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Manufacturer.Get(), o.Manufacturer.IsSet()
}

// HasManufacturer returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasManufacturer() bool {
	if o != nil && o.Manufacturer.IsSet() {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given NullableString and assigns it to the Manufacturer field.
func (o *MicrosoftGraphPrinter) SetManufacturer(v string) {
	o.Manufacturer.Set(&v)
}
// SetManufacturerNil sets the value for Manufacturer to be an explicit nil
func (o *MicrosoftGraphPrinter) SetManufacturerNil() {
	o.Manufacturer.Set(nil)
}

// UnsetManufacturer ensures that no value is present for Manufacturer, not even an explicit nil
func (o *MicrosoftGraphPrinter) UnsetManufacturer() {
	o.Manufacturer.Unset()
}

// GetModel returns the Model field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPrinter) GetModel() string {
	if o == nil || o.Model.Get() == nil {
		var ret string
		return ret
	}
	return *o.Model.Get()
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPrinter) GetModelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Model.Get(), o.Model.IsSet()
}

// HasModel returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasModel() bool {
	if o != nil && o.Model.IsSet() {
		return true
	}

	return false
}

// SetModel gets a reference to the given NullableString and assigns it to the Model field.
func (o *MicrosoftGraphPrinter) SetModel(v string) {
	o.Model.Set(&v)
}
// SetModelNil sets the value for Model to be an explicit nil
func (o *MicrosoftGraphPrinter) SetModelNil() {
	o.Model.Set(nil)
}

// UnsetModel ensures that no value is present for Model, not even an explicit nil
func (o *MicrosoftGraphPrinter) UnsetModel() {
	o.Model.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MicrosoftGraphPrinter) GetStatus() MicrosoftGraphPrinterStatus {
	if o == nil || o.Status == nil {
		var ret MicrosoftGraphPrinterStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrinter) GetStatusOk() (*MicrosoftGraphPrinterStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given MicrosoftGraphPrinterStatus and assigns it to the Status field.
func (o *MicrosoftGraphPrinter) SetStatus(v MicrosoftGraphPrinterStatus) {
	o.Status = &v
}

// GetJobs returns the Jobs field value if set, zero value otherwise.
func (o *MicrosoftGraphPrinter) GetJobs() []MicrosoftGraphPrintJob {
	if o == nil || o.Jobs == nil {
		var ret []MicrosoftGraphPrintJob
		return ret
	}
	return *o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrinter) GetJobsOk() (*[]MicrosoftGraphPrintJob, bool) {
	if o == nil || o.Jobs == nil {
		return nil, false
	}
	return o.Jobs, true
}

// HasJobs returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasJobs() bool {
	if o != nil && o.Jobs != nil {
		return true
	}

	return false
}

// SetJobs gets a reference to the given []MicrosoftGraphPrintJob and assigns it to the Jobs field.
func (o *MicrosoftGraphPrinter) SetJobs(v []MicrosoftGraphPrintJob) {
	o.Jobs = &v
}

// GetHasPhysicalDevice returns the HasPhysicalDevice field value if set, zero value otherwise.
func (o *MicrosoftGraphPrinter) GetHasPhysicalDevice() bool {
	if o == nil || o.HasPhysicalDevice == nil {
		var ret bool
		return ret
	}
	return *o.HasPhysicalDevice
}

// GetHasPhysicalDeviceOk returns a tuple with the HasPhysicalDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrinter) GetHasPhysicalDeviceOk() (*bool, bool) {
	if o == nil || o.HasPhysicalDevice == nil {
		return nil, false
	}
	return o.HasPhysicalDevice, true
}

// HasHasPhysicalDevice returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasHasPhysicalDevice() bool {
	if o != nil && o.HasPhysicalDevice != nil {
		return true
	}

	return false
}

// SetHasPhysicalDevice gets a reference to the given bool and assigns it to the HasPhysicalDevice field.
func (o *MicrosoftGraphPrinter) SetHasPhysicalDevice(v bool) {
	o.HasPhysicalDevice = &v
}

// GetIsShared returns the IsShared field value if set, zero value otherwise.
func (o *MicrosoftGraphPrinter) GetIsShared() bool {
	if o == nil || o.IsShared == nil {
		var ret bool
		return ret
	}
	return *o.IsShared
}

// GetIsSharedOk returns a tuple with the IsShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrinter) GetIsSharedOk() (*bool, bool) {
	if o == nil || o.IsShared == nil {
		return nil, false
	}
	return o.IsShared, true
}

// HasIsShared returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasIsShared() bool {
	if o != nil && o.IsShared != nil {
		return true
	}

	return false
}

// SetIsShared gets a reference to the given bool and assigns it to the IsShared field.
func (o *MicrosoftGraphPrinter) SetIsShared(v bool) {
	o.IsShared = &v
}

// GetLastSeenDateTime returns the LastSeenDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPrinter) GetLastSeenDateTime() time.Time {
	if o == nil || o.LastSeenDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastSeenDateTime.Get()
}

// GetLastSeenDateTimeOk returns a tuple with the LastSeenDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPrinter) GetLastSeenDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastSeenDateTime.Get(), o.LastSeenDateTime.IsSet()
}

// HasLastSeenDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasLastSeenDateTime() bool {
	if o != nil && o.LastSeenDateTime.IsSet() {
		return true
	}

	return false
}

// SetLastSeenDateTime gets a reference to the given NullableTime and assigns it to the LastSeenDateTime field.
func (o *MicrosoftGraphPrinter) SetLastSeenDateTime(v time.Time) {
	o.LastSeenDateTime.Set(&v)
}
// SetLastSeenDateTimeNil sets the value for LastSeenDateTime to be an explicit nil
func (o *MicrosoftGraphPrinter) SetLastSeenDateTimeNil() {
	o.LastSeenDateTime.Set(nil)
}

// UnsetLastSeenDateTime ensures that no value is present for LastSeenDateTime, not even an explicit nil
func (o *MicrosoftGraphPrinter) UnsetLastSeenDateTime() {
	o.LastSeenDateTime.Unset()
}

// GetRegisteredDateTime returns the RegisteredDateTime field value if set, zero value otherwise.
func (o *MicrosoftGraphPrinter) GetRegisteredDateTime() time.Time {
	if o == nil || o.RegisteredDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.RegisteredDateTime
}

// GetRegisteredDateTimeOk returns a tuple with the RegisteredDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrinter) GetRegisteredDateTimeOk() (*time.Time, bool) {
	if o == nil || o.RegisteredDateTime == nil {
		return nil, false
	}
	return o.RegisteredDateTime, true
}

// HasRegisteredDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasRegisteredDateTime() bool {
	if o != nil && o.RegisteredDateTime != nil {
		return true
	}

	return false
}

// SetRegisteredDateTime gets a reference to the given time.Time and assigns it to the RegisteredDateTime field.
func (o *MicrosoftGraphPrinter) SetRegisteredDateTime(v time.Time) {
	o.RegisteredDateTime = &v
}

// GetConnectors returns the Connectors field value if set, zero value otherwise.
func (o *MicrosoftGraphPrinter) GetConnectors() []MicrosoftGraphPrintConnector {
	if o == nil || o.Connectors == nil {
		var ret []MicrosoftGraphPrintConnector
		return ret
	}
	return *o.Connectors
}

// GetConnectorsOk returns a tuple with the Connectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrinter) GetConnectorsOk() (*[]MicrosoftGraphPrintConnector, bool) {
	if o == nil || o.Connectors == nil {
		return nil, false
	}
	return o.Connectors, true
}

// HasConnectors returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasConnectors() bool {
	if o != nil && o.Connectors != nil {
		return true
	}

	return false
}

// SetConnectors gets a reference to the given []MicrosoftGraphPrintConnector and assigns it to the Connectors field.
func (o *MicrosoftGraphPrinter) SetConnectors(v []MicrosoftGraphPrintConnector) {
	o.Connectors = &v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *MicrosoftGraphPrinter) GetShares() []MicrosoftGraphPrinterShare {
	if o == nil || o.Shares == nil {
		var ret []MicrosoftGraphPrinterShare
		return ret
	}
	return *o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrinter) GetSharesOk() (*[]MicrosoftGraphPrinterShare, bool) {
	if o == nil || o.Shares == nil {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasShares() bool {
	if o != nil && o.Shares != nil {
		return true
	}

	return false
}

// SetShares gets a reference to the given []MicrosoftGraphPrinterShare and assigns it to the Shares field.
func (o *MicrosoftGraphPrinter) SetShares(v []MicrosoftGraphPrinterShare) {
	o.Shares = &v
}

// GetTaskTriggers returns the TaskTriggers field value if set, zero value otherwise.
func (o *MicrosoftGraphPrinter) GetTaskTriggers() []MicrosoftGraphPrintTaskTrigger {
	if o == nil || o.TaskTriggers == nil {
		var ret []MicrosoftGraphPrintTaskTrigger
		return ret
	}
	return *o.TaskTriggers
}

// GetTaskTriggersOk returns a tuple with the TaskTriggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPrinter) GetTaskTriggersOk() (*[]MicrosoftGraphPrintTaskTrigger, bool) {
	if o == nil || o.TaskTriggers == nil {
		return nil, false
	}
	return o.TaskTriggers, true
}

// HasTaskTriggers returns a boolean if a field has been set.
func (o *MicrosoftGraphPrinter) HasTaskTriggers() bool {
	if o != nil && o.TaskTriggers != nil {
		return true
	}

	return false
}

// SetTaskTriggers gets a reference to the given []MicrosoftGraphPrintTaskTrigger and assigns it to the TaskTriggers field.
func (o *MicrosoftGraphPrinter) SetTaskTriggers(v []MicrosoftGraphPrintTaskTrigger) {
	o.TaskTriggers = &v
}

func (o MicrosoftGraphPrinter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Capabilities != nil {
		toSerialize["capabilities"] = o.Capabilities
	}
	if o.Defaults != nil {
		toSerialize["defaults"] = o.Defaults
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.IsAcceptingJobs.IsSet() {
		toSerialize["isAcceptingJobs"] = o.IsAcceptingJobs.Get()
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Manufacturer.IsSet() {
		toSerialize["manufacturer"] = o.Manufacturer.Get()
	}
	if o.Model.IsSet() {
		toSerialize["model"] = o.Model.Get()
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Jobs != nil {
		toSerialize["jobs"] = o.Jobs
	}
	if o.HasPhysicalDevice != nil {
		toSerialize["hasPhysicalDevice"] = o.HasPhysicalDevice
	}
	if o.IsShared != nil {
		toSerialize["isShared"] = o.IsShared
	}
	if o.LastSeenDateTime.IsSet() {
		toSerialize["lastSeenDateTime"] = o.LastSeenDateTime.Get()
	}
	if o.RegisteredDateTime != nil {
		toSerialize["registeredDateTime"] = o.RegisteredDateTime
	}
	if o.Connectors != nil {
		toSerialize["connectors"] = o.Connectors
	}
	if o.Shares != nil {
		toSerialize["shares"] = o.Shares
	}
	if o.TaskTriggers != nil {
		toSerialize["taskTriggers"] = o.TaskTriggers
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphPrinter struct {
	value *MicrosoftGraphPrinter
	isSet bool
}

func (v NullableMicrosoftGraphPrinter) Get() *MicrosoftGraphPrinter {
	return v.value
}

func (v *NullableMicrosoftGraphPrinter) Set(val *MicrosoftGraphPrinter) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPrinter) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPrinter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPrinter(val *MicrosoftGraphPrinter) *NullableMicrosoftGraphPrinter {
	return &NullableMicrosoftGraphPrinter{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPrinter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPrinter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


