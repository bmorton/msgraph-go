/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// RoleDefinition The Role Definition resource. The role definition is the foundation of role based access in Intune. The role combines an Intune resource such as a Mobile App and associated role permissions such as Create or Read for the resource. There are two types of roles, built-in and custom. Built-in roles cannot be modified. Both built-in roles and custom roles must have assignments to be enforced. Create custom roles if you want to define a role that allows any of the available resources and role permissions to be combined into a single role.
type RoleDefinition struct {
	// Description of the Role definition.
	Description NullableString `json:"description,omitempty"`
	// Display Name of the Role definition.
	DisplayName NullableString `json:"displayName,omitempty"`
	// Type of Role. Set to True if it is built-in, or set to False if it is a custom role definition.
	IsBuiltIn *bool `json:"isBuiltIn,omitempty"`
	// List of Role Permissions this role is allowed to perform. These must match the actionName that is defined as part of the rolePermission.
	RolePermissions *[]*AnyOfmicrosoftGraphRolePermission `json:"rolePermissions,omitempty"`
	// List of Role assignments for this role definition.
	RoleAssignments *[]MicrosoftGraphRoleAssignment `json:"roleAssignments,omitempty"`
}

// NewRoleDefinition instantiates a new RoleDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleDefinition() *RoleDefinition {
	this := RoleDefinition{}
	return &this
}

// NewRoleDefinitionWithDefaults instantiates a new RoleDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleDefinitionWithDefaults() *RoleDefinition {
	this := RoleDefinition{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoleDefinition) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoleDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *RoleDefinition) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *RoleDefinition) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *RoleDefinition) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *RoleDefinition) UnsetDescription() {
	o.Description.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoleDefinition) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoleDefinition) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *RoleDefinition) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *RoleDefinition) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *RoleDefinition) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *RoleDefinition) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetIsBuiltIn returns the IsBuiltIn field value if set, zero value otherwise.
func (o *RoleDefinition) GetIsBuiltIn() bool {
	if o == nil || o.IsBuiltIn == nil {
		var ret bool
		return ret
	}
	return *o.IsBuiltIn
}

// GetIsBuiltInOk returns a tuple with the IsBuiltIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDefinition) GetIsBuiltInOk() (*bool, bool) {
	if o == nil || o.IsBuiltIn == nil {
		return nil, false
	}
	return o.IsBuiltIn, true
}

// HasIsBuiltIn returns a boolean if a field has been set.
func (o *RoleDefinition) HasIsBuiltIn() bool {
	if o != nil && o.IsBuiltIn != nil {
		return true
	}

	return false
}

// SetIsBuiltIn gets a reference to the given bool and assigns it to the IsBuiltIn field.
func (o *RoleDefinition) SetIsBuiltIn(v bool) {
	o.IsBuiltIn = &v
}

// GetRolePermissions returns the RolePermissions field value if set, zero value otherwise.
func (o *RoleDefinition) GetRolePermissions() []*AnyOfmicrosoftGraphRolePermission {
	if o == nil || o.RolePermissions == nil {
		var ret []*AnyOfmicrosoftGraphRolePermission
		return ret
	}
	return *o.RolePermissions
}

// GetRolePermissionsOk returns a tuple with the RolePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDefinition) GetRolePermissionsOk() (*[]*AnyOfmicrosoftGraphRolePermission, bool) {
	if o == nil || o.RolePermissions == nil {
		return nil, false
	}
	return o.RolePermissions, true
}

// HasRolePermissions returns a boolean if a field has been set.
func (o *RoleDefinition) HasRolePermissions() bool {
	if o != nil && o.RolePermissions != nil {
		return true
	}

	return false
}

// SetRolePermissions gets a reference to the given []*AnyOfmicrosoftGraphRolePermission and assigns it to the RolePermissions field.
func (o *RoleDefinition) SetRolePermissions(v []*AnyOfmicrosoftGraphRolePermission) {
	o.RolePermissions = &v
}

// GetRoleAssignments returns the RoleAssignments field value if set, zero value otherwise.
func (o *RoleDefinition) GetRoleAssignments() []MicrosoftGraphRoleAssignment {
	if o == nil || o.RoleAssignments == nil {
		var ret []MicrosoftGraphRoleAssignment
		return ret
	}
	return *o.RoleAssignments
}

// GetRoleAssignmentsOk returns a tuple with the RoleAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDefinition) GetRoleAssignmentsOk() (*[]MicrosoftGraphRoleAssignment, bool) {
	if o == nil || o.RoleAssignments == nil {
		return nil, false
	}
	return o.RoleAssignments, true
}

// HasRoleAssignments returns a boolean if a field has been set.
func (o *RoleDefinition) HasRoleAssignments() bool {
	if o != nil && o.RoleAssignments != nil {
		return true
	}

	return false
}

// SetRoleAssignments gets a reference to the given []MicrosoftGraphRoleAssignment and assigns it to the RoleAssignments field.
func (o *RoleDefinition) SetRoleAssignments(v []MicrosoftGraphRoleAssignment) {
	o.RoleAssignments = &v
}

func (o RoleDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.IsBuiltIn != nil {
		toSerialize["isBuiltIn"] = o.IsBuiltIn
	}
	if o.RolePermissions != nil {
		toSerialize["rolePermissions"] = o.RolePermissions
	}
	if o.RoleAssignments != nil {
		toSerialize["roleAssignments"] = o.RoleAssignments
	}
	return json.Marshal(toSerialize)
}

type NullableRoleDefinition struct {
	value *RoleDefinition
	isSet bool
}

func (v NullableRoleDefinition) Get() *RoleDefinition {
	return v.value
}

func (v *NullableRoleDefinition) Set(val *RoleDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleDefinition(val *RoleDefinition) *NullableRoleDefinition {
	return &NullableRoleDefinition{value: val, isSet: true}
}

func (v NullableRoleDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


