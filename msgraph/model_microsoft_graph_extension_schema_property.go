/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphExtensionSchemaProperty struct for MicrosoftGraphExtensionSchemaProperty
type MicrosoftGraphExtensionSchemaProperty struct {
	// The name of the strongly-typed property defined as part of a schema extension.
	Name NullableString `json:"name,omitempty"`
	// The type of the property that is defined as part of a schema extension.  Allowed values are Binary, Boolean, DateTime, Integer or String.  See the table below for more details.
	Type NullableString `json:"type,omitempty"`
}

// NewMicrosoftGraphExtensionSchemaProperty instantiates a new MicrosoftGraphExtensionSchemaProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphExtensionSchemaProperty() *MicrosoftGraphExtensionSchemaProperty {
	this := MicrosoftGraphExtensionSchemaProperty{}
	return &this
}

// NewMicrosoftGraphExtensionSchemaPropertyWithDefaults instantiates a new MicrosoftGraphExtensionSchemaProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphExtensionSchemaPropertyWithDefaults() *MicrosoftGraphExtensionSchemaProperty {
	this := MicrosoftGraphExtensionSchemaProperty{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphExtensionSchemaProperty) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphExtensionSchemaProperty) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MicrosoftGraphExtensionSchemaProperty) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MicrosoftGraphExtensionSchemaProperty) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MicrosoftGraphExtensionSchemaProperty) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MicrosoftGraphExtensionSchemaProperty) UnsetName() {
	o.Name.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphExtensionSchemaProperty) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphExtensionSchemaProperty) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *MicrosoftGraphExtensionSchemaProperty) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *MicrosoftGraphExtensionSchemaProperty) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *MicrosoftGraphExtensionSchemaProperty) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *MicrosoftGraphExtensionSchemaProperty) UnsetType() {
	o.Type.Unset()
}

func (o MicrosoftGraphExtensionSchemaProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphExtensionSchemaProperty struct {
	value *MicrosoftGraphExtensionSchemaProperty
	isSet bool
}

func (v NullableMicrosoftGraphExtensionSchemaProperty) Get() *MicrosoftGraphExtensionSchemaProperty {
	return v.value
}

func (v *NullableMicrosoftGraphExtensionSchemaProperty) Set(val *MicrosoftGraphExtensionSchemaProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphExtensionSchemaProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphExtensionSchemaProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphExtensionSchemaProperty(val *MicrosoftGraphExtensionSchemaProperty) *NullableMicrosoftGraphExtensionSchemaProperty {
	return &NullableMicrosoftGraphExtensionSchemaProperty{value: val, isSet: true}
}

func (v NullableMicrosoftGraphExtensionSchemaProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphExtensionSchemaProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


