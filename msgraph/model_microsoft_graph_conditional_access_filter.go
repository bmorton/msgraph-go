/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphConditionalAccessFilter struct for MicrosoftGraphConditionalAccessFilter
type MicrosoftGraphConditionalAccessFilter struct {
	// Mode to use for the filter. Possible values are include or exclude.
	Mode AnyOfmicrosoftGraphFilterMode `json:"mode,omitempty"`
	// Rule syntax is similar to that used for membership rules for groups in Azure Active Directory (Azure AD). For details, see rules with multiple expressions
	Rule *string `json:"rule,omitempty"`
}

// NewMicrosoftGraphConditionalAccessFilter instantiates a new MicrosoftGraphConditionalAccessFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphConditionalAccessFilter() *MicrosoftGraphConditionalAccessFilter {
	this := MicrosoftGraphConditionalAccessFilter{}
	return &this
}

// NewMicrosoftGraphConditionalAccessFilterWithDefaults instantiates a new MicrosoftGraphConditionalAccessFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphConditionalAccessFilterWithDefaults() *MicrosoftGraphConditionalAccessFilter {
	this := MicrosoftGraphConditionalAccessFilter{}
	return &this
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphConditionalAccessFilter) GetMode() AnyOfmicrosoftGraphFilterMode {
	if o == nil  {
		var ret AnyOfmicrosoftGraphFilterMode
		return ret
	}
	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphConditionalAccessFilter) GetModeOk() (*AnyOfmicrosoftGraphFilterMode, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return &o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *MicrosoftGraphConditionalAccessFilter) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given AnyOfmicrosoftGraphFilterMode and assigns it to the Mode field.
func (o *MicrosoftGraphConditionalAccessFilter) SetMode(v AnyOfmicrosoftGraphFilterMode) {
	o.Mode = v
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *MicrosoftGraphConditionalAccessFilter) GetRule() string {
	if o == nil || o.Rule == nil {
		var ret string
		return ret
	}
	return *o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphConditionalAccessFilter) GetRuleOk() (*string, bool) {
	if o == nil || o.Rule == nil {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *MicrosoftGraphConditionalAccessFilter) HasRule() bool {
	if o != nil && o.Rule != nil {
		return true
	}

	return false
}

// SetRule gets a reference to the given string and assigns it to the Rule field.
func (o *MicrosoftGraphConditionalAccessFilter) SetRule(v string) {
	o.Rule = &v
}

func (o MicrosoftGraphConditionalAccessFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.Rule != nil {
		toSerialize["rule"] = o.Rule
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphConditionalAccessFilter struct {
	value *MicrosoftGraphConditionalAccessFilter
	isSet bool
}

func (v NullableMicrosoftGraphConditionalAccessFilter) Get() *MicrosoftGraphConditionalAccessFilter {
	return v.value
}

func (v *NullableMicrosoftGraphConditionalAccessFilter) Set(val *MicrosoftGraphConditionalAccessFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphConditionalAccessFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphConditionalAccessFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphConditionalAccessFilter(val *MicrosoftGraphConditionalAccessFilter) *NullableMicrosoftGraphConditionalAccessFilter {
	return &NullableMicrosoftGraphConditionalAccessFilter{value: val, isSet: true}
}

func (v NullableMicrosoftGraphConditionalAccessFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphConditionalAccessFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


