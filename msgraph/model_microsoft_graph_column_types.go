/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphColumnTypes the model 'MicrosoftGraphColumnTypes'
type MicrosoftGraphColumnTypes string

// List of microsoft.graph.columnTypes
const (
	NOTE MicrosoftGraphColumnTypes = "note"
	TEXT MicrosoftGraphColumnTypes = "text"
	CHOICE MicrosoftGraphColumnTypes = "choice"
	MULTICHOICE MicrosoftGraphColumnTypes = "multichoice"
	NUMBER MicrosoftGraphColumnTypes = "number"
	CURRENCY MicrosoftGraphColumnTypes = "currency"
	DATE_TIME MicrosoftGraphColumnTypes = "dateTime"
	LOOKUP MicrosoftGraphColumnTypes = "lookup"
	BOOLEAN MicrosoftGraphColumnTypes = "boolean"
	USER MicrosoftGraphColumnTypes = "user"
	URL MicrosoftGraphColumnTypes = "url"
	CALCULATED MicrosoftGraphColumnTypes = "calculated"
	LOCATION MicrosoftGraphColumnTypes = "location"
	GEOLOCATION MicrosoftGraphColumnTypes = "geolocation"
	TERM MicrosoftGraphColumnTypes = "term"
	MULTITERM MicrosoftGraphColumnTypes = "multiterm"
	THUMBNAIL MicrosoftGraphColumnTypes = "thumbnail"
	APPROVAL_STATUS MicrosoftGraphColumnTypes = "approvalStatus"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphColumnTypes = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphColumnTypes enum
var AllowedMicrosoftGraphColumnTypesEnumValues = []MicrosoftGraphColumnTypes{
	"note",
	"text",
	"choice",
	"multichoice",
	"number",
	"currency",
	"dateTime",
	"lookup",
	"boolean",
	"user",
	"url",
	"calculated",
	"location",
	"geolocation",
	"term",
	"multiterm",
	"thumbnail",
	"approvalStatus",
	"unknownFutureValue",
}

func (v *MicrosoftGraphColumnTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphColumnTypes(value)
	for _, existing := range AllowedMicrosoftGraphColumnTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphColumnTypes", value)
}

// NewMicrosoftGraphColumnTypesFromValue returns a pointer to a valid MicrosoftGraphColumnTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphColumnTypesFromValue(v string) (*MicrosoftGraphColumnTypes, error) {
	ev := MicrosoftGraphColumnTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphColumnTypes: valid values are %v", v, AllowedMicrosoftGraphColumnTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphColumnTypes) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphColumnTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.columnTypes value
func (v MicrosoftGraphColumnTypes) Ptr() *MicrosoftGraphColumnTypes {
	return &v
}

type NullableMicrosoftGraphColumnTypes struct {
	value *MicrosoftGraphColumnTypes
	isSet bool
}

func (v NullableMicrosoftGraphColumnTypes) Get() *MicrosoftGraphColumnTypes {
	return v.value
}

func (v *NullableMicrosoftGraphColumnTypes) Set(val *MicrosoftGraphColumnTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphColumnTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphColumnTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphColumnTypes(val *MicrosoftGraphColumnTypes) *NullableMicrosoftGraphColumnTypes {
	return &NullableMicrosoftGraphColumnTypes{value: val, isSet: true}
}

func (v NullableMicrosoftGraphColumnTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphColumnTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

