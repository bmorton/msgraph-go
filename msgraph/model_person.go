/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Person struct for Person
type Person struct {
	// The person's birthday.
	Birthday NullableString `json:"birthday,omitempty"`
	// The name of the person's company.
	CompanyName NullableString `json:"companyName,omitempty"`
	// The person's department.
	Department NullableString `json:"department,omitempty"`
	// The person's display name.
	DisplayName NullableString `json:"displayName,omitempty"`
	// The person's given name.
	GivenName NullableString `json:"givenName,omitempty"`
	// The instant message voice over IP (VOIP) session initiation protocol (SIP) address for the user. Read-only.
	ImAddress NullableString `json:"imAddress,omitempty"`
	// true if the user has flagged this person as a favorite.
	IsFavorite NullableBool `json:"isFavorite,omitempty"`
	// The person's job title.
	JobTitle NullableString `json:"jobTitle,omitempty"`
	// The location of the person's office.
	OfficeLocation NullableString `json:"officeLocation,omitempty"`
	// Free-form notes that the user has taken about this person.
	PersonNotes NullableString `json:"personNotes,omitempty"`
	// The type of person.
	PersonType AnyOfmicrosoftGraphPersonType `json:"personType,omitempty"`
	// The person's phone numbers.
	Phones *[]*AnyOfmicrosoftGraphPhone `json:"phones,omitempty"`
	// The person's addresses.
	PostalAddresses *[]*AnyOfmicrosoftGraphLocation `json:"postalAddresses,omitempty"`
	// The person's profession.
	Profession NullableString `json:"profession,omitempty"`
	// The person's email addresses.
	ScoredEmailAddresses *[]*AnyOfmicrosoftGraphScoredEmailAddress `json:"scoredEmailAddresses,omitempty"`
	// The person's surname.
	Surname NullableString `json:"surname,omitempty"`
	// The user principal name (UPN) of the person. The UPN is an Internet-style login name for the person based on the Internet standard RFC 822. By convention, this should map to the person's email name. The general format is alias@domain.
	UserPrincipalName NullableString `json:"userPrincipalName,omitempty"`
	// The person's websites.
	Websites *[]*AnyOfmicrosoftGraphWebsite `json:"websites,omitempty"`
	// The phonetic Japanese name of the person's company.
	YomiCompany NullableString `json:"yomiCompany,omitempty"`
}

// NewPerson instantiates a new Person object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerson() *Person {
	this := Person{}
	return &this
}

// NewPersonWithDefaults instantiates a new Person object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonWithDefaults() *Person {
	this := Person{}
	return &this
}

// GetBirthday returns the Birthday field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetBirthday() string {
	if o == nil || o.Birthday.Get() == nil {
		var ret string
		return ret
	}
	return *o.Birthday.Get()
}

// GetBirthdayOk returns a tuple with the Birthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetBirthdayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Birthday.Get(), o.Birthday.IsSet()
}

// HasBirthday returns a boolean if a field has been set.
func (o *Person) HasBirthday() bool {
	if o != nil && o.Birthday.IsSet() {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given NullableString and assigns it to the Birthday field.
func (o *Person) SetBirthday(v string) {
	o.Birthday.Set(&v)
}
// SetBirthdayNil sets the value for Birthday to be an explicit nil
func (o *Person) SetBirthdayNil() {
	o.Birthday.Set(nil)
}

// UnsetBirthday ensures that no value is present for Birthday, not even an explicit nil
func (o *Person) UnsetBirthday() {
	o.Birthday.Unset()
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetCompanyName() string {
	if o == nil || o.CompanyName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CompanyName.Get()
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetCompanyNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CompanyName.Get(), o.CompanyName.IsSet()
}

// HasCompanyName returns a boolean if a field has been set.
func (o *Person) HasCompanyName() bool {
	if o != nil && o.CompanyName.IsSet() {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given NullableString and assigns it to the CompanyName field.
func (o *Person) SetCompanyName(v string) {
	o.CompanyName.Set(&v)
}
// SetCompanyNameNil sets the value for CompanyName to be an explicit nil
func (o *Person) SetCompanyNameNil() {
	o.CompanyName.Set(nil)
}

// UnsetCompanyName ensures that no value is present for CompanyName, not even an explicit nil
func (o *Person) UnsetCompanyName() {
	o.CompanyName.Unset()
}

// GetDepartment returns the Department field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetDepartment() string {
	if o == nil || o.Department.Get() == nil {
		var ret string
		return ret
	}
	return *o.Department.Get()
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetDepartmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Department.Get(), o.Department.IsSet()
}

// HasDepartment returns a boolean if a field has been set.
func (o *Person) HasDepartment() bool {
	if o != nil && o.Department.IsSet() {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given NullableString and assigns it to the Department field.
func (o *Person) SetDepartment(v string) {
	o.Department.Set(&v)
}
// SetDepartmentNil sets the value for Department to be an explicit nil
func (o *Person) SetDepartmentNil() {
	o.Department.Set(nil)
}

// UnsetDepartment ensures that no value is present for Department, not even an explicit nil
func (o *Person) UnsetDepartment() {
	o.Department.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Person) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *Person) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *Person) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *Person) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetGivenName returns the GivenName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetGivenName() string {
	if o == nil || o.GivenName.Get() == nil {
		var ret string
		return ret
	}
	return *o.GivenName.Get()
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetGivenNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GivenName.Get(), o.GivenName.IsSet()
}

// HasGivenName returns a boolean if a field has been set.
func (o *Person) HasGivenName() bool {
	if o != nil && o.GivenName.IsSet() {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given NullableString and assigns it to the GivenName field.
func (o *Person) SetGivenName(v string) {
	o.GivenName.Set(&v)
}
// SetGivenNameNil sets the value for GivenName to be an explicit nil
func (o *Person) SetGivenNameNil() {
	o.GivenName.Set(nil)
}

// UnsetGivenName ensures that no value is present for GivenName, not even an explicit nil
func (o *Person) UnsetGivenName() {
	o.GivenName.Unset()
}

// GetImAddress returns the ImAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetImAddress() string {
	if o == nil || o.ImAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImAddress.Get()
}

// GetImAddressOk returns a tuple with the ImAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetImAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ImAddress.Get(), o.ImAddress.IsSet()
}

// HasImAddress returns a boolean if a field has been set.
func (o *Person) HasImAddress() bool {
	if o != nil && o.ImAddress.IsSet() {
		return true
	}

	return false
}

// SetImAddress gets a reference to the given NullableString and assigns it to the ImAddress field.
func (o *Person) SetImAddress(v string) {
	o.ImAddress.Set(&v)
}
// SetImAddressNil sets the value for ImAddress to be an explicit nil
func (o *Person) SetImAddressNil() {
	o.ImAddress.Set(nil)
}

// UnsetImAddress ensures that no value is present for ImAddress, not even an explicit nil
func (o *Person) UnsetImAddress() {
	o.ImAddress.Unset()
}

// GetIsFavorite returns the IsFavorite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetIsFavorite() bool {
	if o == nil || o.IsFavorite.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsFavorite.Get()
}

// GetIsFavoriteOk returns a tuple with the IsFavorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetIsFavoriteOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsFavorite.Get(), o.IsFavorite.IsSet()
}

// HasIsFavorite returns a boolean if a field has been set.
func (o *Person) HasIsFavorite() bool {
	if o != nil && o.IsFavorite.IsSet() {
		return true
	}

	return false
}

// SetIsFavorite gets a reference to the given NullableBool and assigns it to the IsFavorite field.
func (o *Person) SetIsFavorite(v bool) {
	o.IsFavorite.Set(&v)
}
// SetIsFavoriteNil sets the value for IsFavorite to be an explicit nil
func (o *Person) SetIsFavoriteNil() {
	o.IsFavorite.Set(nil)
}

// UnsetIsFavorite ensures that no value is present for IsFavorite, not even an explicit nil
func (o *Person) UnsetIsFavorite() {
	o.IsFavorite.Unset()
}

// GetJobTitle returns the JobTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetJobTitle() string {
	if o == nil || o.JobTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.JobTitle.Get()
}

// GetJobTitleOk returns a tuple with the JobTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetJobTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobTitle.Get(), o.JobTitle.IsSet()
}

// HasJobTitle returns a boolean if a field has been set.
func (o *Person) HasJobTitle() bool {
	if o != nil && o.JobTitle.IsSet() {
		return true
	}

	return false
}

// SetJobTitle gets a reference to the given NullableString and assigns it to the JobTitle field.
func (o *Person) SetJobTitle(v string) {
	o.JobTitle.Set(&v)
}
// SetJobTitleNil sets the value for JobTitle to be an explicit nil
func (o *Person) SetJobTitleNil() {
	o.JobTitle.Set(nil)
}

// UnsetJobTitle ensures that no value is present for JobTitle, not even an explicit nil
func (o *Person) UnsetJobTitle() {
	o.JobTitle.Unset()
}

// GetOfficeLocation returns the OfficeLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetOfficeLocation() string {
	if o == nil || o.OfficeLocation.Get() == nil {
		var ret string
		return ret
	}
	return *o.OfficeLocation.Get()
}

// GetOfficeLocationOk returns a tuple with the OfficeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetOfficeLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OfficeLocation.Get(), o.OfficeLocation.IsSet()
}

// HasOfficeLocation returns a boolean if a field has been set.
func (o *Person) HasOfficeLocation() bool {
	if o != nil && o.OfficeLocation.IsSet() {
		return true
	}

	return false
}

// SetOfficeLocation gets a reference to the given NullableString and assigns it to the OfficeLocation field.
func (o *Person) SetOfficeLocation(v string) {
	o.OfficeLocation.Set(&v)
}
// SetOfficeLocationNil sets the value for OfficeLocation to be an explicit nil
func (o *Person) SetOfficeLocationNil() {
	o.OfficeLocation.Set(nil)
}

// UnsetOfficeLocation ensures that no value is present for OfficeLocation, not even an explicit nil
func (o *Person) UnsetOfficeLocation() {
	o.OfficeLocation.Unset()
}

// GetPersonNotes returns the PersonNotes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetPersonNotes() string {
	if o == nil || o.PersonNotes.Get() == nil {
		var ret string
		return ret
	}
	return *o.PersonNotes.Get()
}

// GetPersonNotesOk returns a tuple with the PersonNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetPersonNotesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PersonNotes.Get(), o.PersonNotes.IsSet()
}

// HasPersonNotes returns a boolean if a field has been set.
func (o *Person) HasPersonNotes() bool {
	if o != nil && o.PersonNotes.IsSet() {
		return true
	}

	return false
}

// SetPersonNotes gets a reference to the given NullableString and assigns it to the PersonNotes field.
func (o *Person) SetPersonNotes(v string) {
	o.PersonNotes.Set(&v)
}
// SetPersonNotesNil sets the value for PersonNotes to be an explicit nil
func (o *Person) SetPersonNotesNil() {
	o.PersonNotes.Set(nil)
}

// UnsetPersonNotes ensures that no value is present for PersonNotes, not even an explicit nil
func (o *Person) UnsetPersonNotes() {
	o.PersonNotes.Unset()
}

// GetPersonType returns the PersonType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetPersonType() AnyOfmicrosoftGraphPersonType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPersonType
		return ret
	}
	return o.PersonType
}

// GetPersonTypeOk returns a tuple with the PersonType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetPersonTypeOk() (*AnyOfmicrosoftGraphPersonType, bool) {
	if o == nil || o.PersonType == nil {
		return nil, false
	}
	return &o.PersonType, true
}

// HasPersonType returns a boolean if a field has been set.
func (o *Person) HasPersonType() bool {
	if o != nil && o.PersonType != nil {
		return true
	}

	return false
}

// SetPersonType gets a reference to the given AnyOfmicrosoftGraphPersonType and assigns it to the PersonType field.
func (o *Person) SetPersonType(v AnyOfmicrosoftGraphPersonType) {
	o.PersonType = v
}

// GetPhones returns the Phones field value if set, zero value otherwise.
func (o *Person) GetPhones() []*AnyOfmicrosoftGraphPhone {
	if o == nil || o.Phones == nil {
		var ret []*AnyOfmicrosoftGraphPhone
		return ret
	}
	return *o.Phones
}

// GetPhonesOk returns a tuple with the Phones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetPhonesOk() (*[]*AnyOfmicrosoftGraphPhone, bool) {
	if o == nil || o.Phones == nil {
		return nil, false
	}
	return o.Phones, true
}

// HasPhones returns a boolean if a field has been set.
func (o *Person) HasPhones() bool {
	if o != nil && o.Phones != nil {
		return true
	}

	return false
}

// SetPhones gets a reference to the given []*AnyOfmicrosoftGraphPhone and assigns it to the Phones field.
func (o *Person) SetPhones(v []*AnyOfmicrosoftGraphPhone) {
	o.Phones = &v
}

// GetPostalAddresses returns the PostalAddresses field value if set, zero value otherwise.
func (o *Person) GetPostalAddresses() []*AnyOfmicrosoftGraphLocation {
	if o == nil || o.PostalAddresses == nil {
		var ret []*AnyOfmicrosoftGraphLocation
		return ret
	}
	return *o.PostalAddresses
}

// GetPostalAddressesOk returns a tuple with the PostalAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetPostalAddressesOk() (*[]*AnyOfmicrosoftGraphLocation, bool) {
	if o == nil || o.PostalAddresses == nil {
		return nil, false
	}
	return o.PostalAddresses, true
}

// HasPostalAddresses returns a boolean if a field has been set.
func (o *Person) HasPostalAddresses() bool {
	if o != nil && o.PostalAddresses != nil {
		return true
	}

	return false
}

// SetPostalAddresses gets a reference to the given []*AnyOfmicrosoftGraphLocation and assigns it to the PostalAddresses field.
func (o *Person) SetPostalAddresses(v []*AnyOfmicrosoftGraphLocation) {
	o.PostalAddresses = &v
}

// GetProfession returns the Profession field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetProfession() string {
	if o == nil || o.Profession.Get() == nil {
		var ret string
		return ret
	}
	return *o.Profession.Get()
}

// GetProfessionOk returns a tuple with the Profession field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetProfessionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Profession.Get(), o.Profession.IsSet()
}

// HasProfession returns a boolean if a field has been set.
func (o *Person) HasProfession() bool {
	if o != nil && o.Profession.IsSet() {
		return true
	}

	return false
}

// SetProfession gets a reference to the given NullableString and assigns it to the Profession field.
func (o *Person) SetProfession(v string) {
	o.Profession.Set(&v)
}
// SetProfessionNil sets the value for Profession to be an explicit nil
func (o *Person) SetProfessionNil() {
	o.Profession.Set(nil)
}

// UnsetProfession ensures that no value is present for Profession, not even an explicit nil
func (o *Person) UnsetProfession() {
	o.Profession.Unset()
}

// GetScoredEmailAddresses returns the ScoredEmailAddresses field value if set, zero value otherwise.
func (o *Person) GetScoredEmailAddresses() []*AnyOfmicrosoftGraphScoredEmailAddress {
	if o == nil || o.ScoredEmailAddresses == nil {
		var ret []*AnyOfmicrosoftGraphScoredEmailAddress
		return ret
	}
	return *o.ScoredEmailAddresses
}

// GetScoredEmailAddressesOk returns a tuple with the ScoredEmailAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetScoredEmailAddressesOk() (*[]*AnyOfmicrosoftGraphScoredEmailAddress, bool) {
	if o == nil || o.ScoredEmailAddresses == nil {
		return nil, false
	}
	return o.ScoredEmailAddresses, true
}

// HasScoredEmailAddresses returns a boolean if a field has been set.
func (o *Person) HasScoredEmailAddresses() bool {
	if o != nil && o.ScoredEmailAddresses != nil {
		return true
	}

	return false
}

// SetScoredEmailAddresses gets a reference to the given []*AnyOfmicrosoftGraphScoredEmailAddress and assigns it to the ScoredEmailAddresses field.
func (o *Person) SetScoredEmailAddresses(v []*AnyOfmicrosoftGraphScoredEmailAddress) {
	o.ScoredEmailAddresses = &v
}

// GetSurname returns the Surname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetSurname() string {
	if o == nil || o.Surname.Get() == nil {
		var ret string
		return ret
	}
	return *o.Surname.Get()
}

// GetSurnameOk returns a tuple with the Surname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetSurnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Surname.Get(), o.Surname.IsSet()
}

// HasSurname returns a boolean if a field has been set.
func (o *Person) HasSurname() bool {
	if o != nil && o.Surname.IsSet() {
		return true
	}

	return false
}

// SetSurname gets a reference to the given NullableString and assigns it to the Surname field.
func (o *Person) SetSurname(v string) {
	o.Surname.Set(&v)
}
// SetSurnameNil sets the value for Surname to be an explicit nil
func (o *Person) SetSurnameNil() {
	o.Surname.Set(nil)
}

// UnsetSurname ensures that no value is present for Surname, not even an explicit nil
func (o *Person) UnsetSurname() {
	o.Surname.Unset()
}

// GetUserPrincipalName returns the UserPrincipalName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetUserPrincipalName() string {
	if o == nil || o.UserPrincipalName.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserPrincipalName.Get()
}

// GetUserPrincipalNameOk returns a tuple with the UserPrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetUserPrincipalNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserPrincipalName.Get(), o.UserPrincipalName.IsSet()
}

// HasUserPrincipalName returns a boolean if a field has been set.
func (o *Person) HasUserPrincipalName() bool {
	if o != nil && o.UserPrincipalName.IsSet() {
		return true
	}

	return false
}

// SetUserPrincipalName gets a reference to the given NullableString and assigns it to the UserPrincipalName field.
func (o *Person) SetUserPrincipalName(v string) {
	o.UserPrincipalName.Set(&v)
}
// SetUserPrincipalNameNil sets the value for UserPrincipalName to be an explicit nil
func (o *Person) SetUserPrincipalNameNil() {
	o.UserPrincipalName.Set(nil)
}

// UnsetUserPrincipalName ensures that no value is present for UserPrincipalName, not even an explicit nil
func (o *Person) UnsetUserPrincipalName() {
	o.UserPrincipalName.Unset()
}

// GetWebsites returns the Websites field value if set, zero value otherwise.
func (o *Person) GetWebsites() []*AnyOfmicrosoftGraphWebsite {
	if o == nil || o.Websites == nil {
		var ret []*AnyOfmicrosoftGraphWebsite
		return ret
	}
	return *o.Websites
}

// GetWebsitesOk returns a tuple with the Websites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Person) GetWebsitesOk() (*[]*AnyOfmicrosoftGraphWebsite, bool) {
	if o == nil || o.Websites == nil {
		return nil, false
	}
	return o.Websites, true
}

// HasWebsites returns a boolean if a field has been set.
func (o *Person) HasWebsites() bool {
	if o != nil && o.Websites != nil {
		return true
	}

	return false
}

// SetWebsites gets a reference to the given []*AnyOfmicrosoftGraphWebsite and assigns it to the Websites field.
func (o *Person) SetWebsites(v []*AnyOfmicrosoftGraphWebsite) {
	o.Websites = &v
}

// GetYomiCompany returns the YomiCompany field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Person) GetYomiCompany() string {
	if o == nil || o.YomiCompany.Get() == nil {
		var ret string
		return ret
	}
	return *o.YomiCompany.Get()
}

// GetYomiCompanyOk returns a tuple with the YomiCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Person) GetYomiCompanyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.YomiCompany.Get(), o.YomiCompany.IsSet()
}

// HasYomiCompany returns a boolean if a field has been set.
func (o *Person) HasYomiCompany() bool {
	if o != nil && o.YomiCompany.IsSet() {
		return true
	}

	return false
}

// SetYomiCompany gets a reference to the given NullableString and assigns it to the YomiCompany field.
func (o *Person) SetYomiCompany(v string) {
	o.YomiCompany.Set(&v)
}
// SetYomiCompanyNil sets the value for YomiCompany to be an explicit nil
func (o *Person) SetYomiCompanyNil() {
	o.YomiCompany.Set(nil)
}

// UnsetYomiCompany ensures that no value is present for YomiCompany, not even an explicit nil
func (o *Person) UnsetYomiCompany() {
	o.YomiCompany.Unset()
}

func (o Person) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Birthday.IsSet() {
		toSerialize["birthday"] = o.Birthday.Get()
	}
	if o.CompanyName.IsSet() {
		toSerialize["companyName"] = o.CompanyName.Get()
	}
	if o.Department.IsSet() {
		toSerialize["department"] = o.Department.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.GivenName.IsSet() {
		toSerialize["givenName"] = o.GivenName.Get()
	}
	if o.ImAddress.IsSet() {
		toSerialize["imAddress"] = o.ImAddress.Get()
	}
	if o.IsFavorite.IsSet() {
		toSerialize["isFavorite"] = o.IsFavorite.Get()
	}
	if o.JobTitle.IsSet() {
		toSerialize["jobTitle"] = o.JobTitle.Get()
	}
	if o.OfficeLocation.IsSet() {
		toSerialize["officeLocation"] = o.OfficeLocation.Get()
	}
	if o.PersonNotes.IsSet() {
		toSerialize["personNotes"] = o.PersonNotes.Get()
	}
	if o.PersonType != nil {
		toSerialize["personType"] = o.PersonType
	}
	if o.Phones != nil {
		toSerialize["phones"] = o.Phones
	}
	if o.PostalAddresses != nil {
		toSerialize["postalAddresses"] = o.PostalAddresses
	}
	if o.Profession.IsSet() {
		toSerialize["profession"] = o.Profession.Get()
	}
	if o.ScoredEmailAddresses != nil {
		toSerialize["scoredEmailAddresses"] = o.ScoredEmailAddresses
	}
	if o.Surname.IsSet() {
		toSerialize["surname"] = o.Surname.Get()
	}
	if o.UserPrincipalName.IsSet() {
		toSerialize["userPrincipalName"] = o.UserPrincipalName.Get()
	}
	if o.Websites != nil {
		toSerialize["websites"] = o.Websites
	}
	if o.YomiCompany.IsSet() {
		toSerialize["yomiCompany"] = o.YomiCompany.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePerson struct {
	value *Person
	isSet bool
}

func (v NullablePerson) Get() *Person {
	return v.value
}

func (v *NullablePerson) Set(val *Person) {
	v.value = val
	v.isSet = true
}

func (v NullablePerson) IsSet() bool {
	return v.isSet
}

func (v *NullablePerson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerson(val *Person) *NullablePerson {
	return &NullablePerson{value: val, isSet: true}
}

func (v NullablePerson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


