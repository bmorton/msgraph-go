/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// SitesActionsApiService SitesActionsApi service
type SitesActionsApiService service

type ApiSitesAddRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	inlineObject844 *InlineObject844
}

func (r ApiSitesAddRequest) InlineObject844(inlineObject844 InlineObject844) ApiSitesAddRequest {
	r.inlineObject844 = &inlineObject844
	return r
}

func (r ApiSitesAddRequest) Execute() ([]*AnyOfmicrosoftGraphSite, *_nethttp.Response, error) {
	return r.ApiService.SitesAddExecute(r)
}

/*
SitesAdd Invoke action add

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSitesAddRequest
*/
func (a *SitesActionsApiService) SitesAdd(ctx _context.Context) ApiSitesAddRequest {
	return ApiSitesAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphSite
func (a *SitesActionsApiService) SitesAddExecute(r ApiSitesAddRequest) ([]*AnyOfmicrosoftGraphSite, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphSite
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesAdd")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/microsoft.graph.add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject844 == nil {
		return localVarReturnValue, nil, reportError("inlineObject844 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject844
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesRemoveRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	inlineObject845 *InlineObject845
}

func (r ApiSitesRemoveRequest) InlineObject845(inlineObject845 InlineObject845) ApiSitesRemoveRequest {
	r.inlineObject845 = &inlineObject845
	return r
}

func (r ApiSitesRemoveRequest) Execute() ([]*AnyOfmicrosoftGraphSite, *_nethttp.Response, error) {
	return r.ApiService.SitesRemoveExecute(r)
}

/*
SitesRemove Invoke action remove

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSitesRemoveRequest
*/
func (a *SitesActionsApiService) SitesRemove(ctx _context.Context) ApiSitesRemoveRequest {
	return ApiSitesRemoveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphSite
func (a *SitesActionsApiService) SitesRemoveExecute(r ApiSitesRemoveRequest) ([]*AnyOfmicrosoftGraphSite, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphSite
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesRemove")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/microsoft.graph.remove"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject845 == nil {
		return localVarReturnValue, nil, reportError("inlineObject845 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject845
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteContentTypesAddCopyRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	inlineObject738 *InlineObject738
}

func (r ApiSitesSiteContentTypesAddCopyRequest) InlineObject738(inlineObject738 InlineObject738) ApiSitesSiteContentTypesAddCopyRequest {
	r.inlineObject738 = &inlineObject738
	return r
}

func (r ApiSitesSiteContentTypesAddCopyRequest) Execute() (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteContentTypesAddCopyExecute(r)
}

/*
SitesSiteContentTypesAddCopy Invoke action addCopy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesSiteContentTypesAddCopyRequest
*/
func (a *SitesActionsApiService) SitesSiteContentTypesAddCopy(ctx _context.Context, siteId string) ApiSitesSiteContentTypesAddCopyRequest {
	return ApiSitesSiteContentTypesAddCopyRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphContentType
func (a *SitesActionsApiService) SitesSiteContentTypesAddCopyExecute(r ApiSitesSiteContentTypesAddCopyRequest) (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphContentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteContentTypesAddCopy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/contentTypes/microsoft.graph.addCopy"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject738 == nil {
		return localVarReturnValue, nil, reportError("inlineObject738 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject738
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteContentTypesContentTypeAssociateWithHubSitesRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	contentTypeId string
	inlineObject736 *InlineObject736
}

func (r ApiSitesSiteContentTypesContentTypeAssociateWithHubSitesRequest) InlineObject736(inlineObject736 InlineObject736) ApiSitesSiteContentTypesContentTypeAssociateWithHubSitesRequest {
	r.inlineObject736 = &inlineObject736
	return r
}

func (r ApiSitesSiteContentTypesContentTypeAssociateWithHubSitesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteContentTypesContentTypeAssociateWithHubSitesExecute(r)
}

/*
SitesSiteContentTypesContentTypeAssociateWithHubSites Invoke action associateWithHubSites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteContentTypesContentTypeAssociateWithHubSitesRequest
*/
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeAssociateWithHubSites(ctx _context.Context, siteId string, contentTypeId string) ApiSitesSiteContentTypesContentTypeAssociateWithHubSitesRequest {
	return ApiSitesSiteContentTypesContentTypeAssociateWithHubSitesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeAssociateWithHubSitesExecute(r ApiSitesSiteContentTypesContentTypeAssociateWithHubSitesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteContentTypesContentTypeAssociateWithHubSites")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/contentTypes/{contentType-id}/microsoft.graph.associateWithHubSites"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject736 == nil {
		return nil, reportError("inlineObject736 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject736
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteContentTypesContentTypeBaseAssociateWithHubSitesRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	contentTypeId string
	inlineObject733 *InlineObject733
}

func (r ApiSitesSiteContentTypesContentTypeBaseAssociateWithHubSitesRequest) InlineObject733(inlineObject733 InlineObject733) ApiSitesSiteContentTypesContentTypeBaseAssociateWithHubSitesRequest {
	r.inlineObject733 = &inlineObject733
	return r
}

func (r ApiSitesSiteContentTypesContentTypeBaseAssociateWithHubSitesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteContentTypesContentTypeBaseAssociateWithHubSitesExecute(r)
}

/*
SitesSiteContentTypesContentTypeBaseAssociateWithHubSites Invoke action associateWithHubSites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteContentTypesContentTypeBaseAssociateWithHubSitesRequest
*/
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeBaseAssociateWithHubSites(ctx _context.Context, siteId string, contentTypeId string) ApiSitesSiteContentTypesContentTypeBaseAssociateWithHubSitesRequest {
	return ApiSitesSiteContentTypesContentTypeBaseAssociateWithHubSitesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeBaseAssociateWithHubSitesExecute(r ApiSitesSiteContentTypesContentTypeBaseAssociateWithHubSitesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteContentTypesContentTypeBaseAssociateWithHubSites")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/contentTypes/{contentType-id}/base/microsoft.graph.associateWithHubSites"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject733 == nil {
		return nil, reportError("inlineObject733 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject733
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteContentTypesContentTypeBaseCopyToDefaultContentLocationRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	contentTypeId string
	inlineObject734 *InlineObject734
}

func (r ApiSitesSiteContentTypesContentTypeBaseCopyToDefaultContentLocationRequest) InlineObject734(inlineObject734 InlineObject734) ApiSitesSiteContentTypesContentTypeBaseCopyToDefaultContentLocationRequest {
	r.inlineObject734 = &inlineObject734
	return r
}

func (r ApiSitesSiteContentTypesContentTypeBaseCopyToDefaultContentLocationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteContentTypesContentTypeBaseCopyToDefaultContentLocationExecute(r)
}

/*
SitesSiteContentTypesContentTypeBaseCopyToDefaultContentLocation Invoke action copyToDefaultContentLocation

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteContentTypesContentTypeBaseCopyToDefaultContentLocationRequest
*/
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeBaseCopyToDefaultContentLocation(ctx _context.Context, siteId string, contentTypeId string) ApiSitesSiteContentTypesContentTypeBaseCopyToDefaultContentLocationRequest {
	return ApiSitesSiteContentTypesContentTypeBaseCopyToDefaultContentLocationRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeBaseCopyToDefaultContentLocationExecute(r ApiSitesSiteContentTypesContentTypeBaseCopyToDefaultContentLocationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteContentTypesContentTypeBaseCopyToDefaultContentLocation")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/contentTypes/{contentType-id}/base/microsoft.graph.copyToDefaultContentLocation"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject734 == nil {
		return nil, reportError("inlineObject734 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject734
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteContentTypesContentTypeBasePublishRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	contentTypeId string
}


func (r ApiSitesSiteContentTypesContentTypeBasePublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteContentTypesContentTypeBasePublishExecute(r)
}

/*
SitesSiteContentTypesContentTypeBasePublish Invoke action publish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteContentTypesContentTypeBasePublishRequest
*/
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeBasePublish(ctx _context.Context, siteId string, contentTypeId string) ApiSitesSiteContentTypesContentTypeBasePublishRequest {
	return ApiSitesSiteContentTypesContentTypeBasePublishRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeBasePublishExecute(r ApiSitesSiteContentTypesContentTypeBasePublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteContentTypesContentTypeBasePublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/contentTypes/{contentType-id}/base/microsoft.graph.publish"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteContentTypesContentTypeBaseTypesAddCopyRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	contentTypeId string
	inlineObject735 *InlineObject735
}

func (r ApiSitesSiteContentTypesContentTypeBaseTypesAddCopyRequest) InlineObject735(inlineObject735 InlineObject735) ApiSitesSiteContentTypesContentTypeBaseTypesAddCopyRequest {
	r.inlineObject735 = &inlineObject735
	return r
}

func (r ApiSitesSiteContentTypesContentTypeBaseTypesAddCopyRequest) Execute() (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteContentTypesContentTypeBaseTypesAddCopyExecute(r)
}

/*
SitesSiteContentTypesContentTypeBaseTypesAddCopy Invoke action addCopy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteContentTypesContentTypeBaseTypesAddCopyRequest
*/
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeBaseTypesAddCopy(ctx _context.Context, siteId string, contentTypeId string) ApiSitesSiteContentTypesContentTypeBaseTypesAddCopyRequest {
	return ApiSitesSiteContentTypesContentTypeBaseTypesAddCopyRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphContentType
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeBaseTypesAddCopyExecute(r ApiSitesSiteContentTypesContentTypeBaseTypesAddCopyRequest) (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphContentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteContentTypesContentTypeBaseTypesAddCopy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/contentTypes/{contentType-id}/baseTypes/microsoft.graph.addCopy"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject735 == nil {
		return localVarReturnValue, nil, reportError("inlineObject735 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject735
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteContentTypesContentTypeBaseUnpublishRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	contentTypeId string
}


func (r ApiSitesSiteContentTypesContentTypeBaseUnpublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteContentTypesContentTypeBaseUnpublishExecute(r)
}

/*
SitesSiteContentTypesContentTypeBaseUnpublish Invoke action unpublish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteContentTypesContentTypeBaseUnpublishRequest
*/
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeBaseUnpublish(ctx _context.Context, siteId string, contentTypeId string) ApiSitesSiteContentTypesContentTypeBaseUnpublishRequest {
	return ApiSitesSiteContentTypesContentTypeBaseUnpublishRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeBaseUnpublishExecute(r ApiSitesSiteContentTypesContentTypeBaseUnpublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteContentTypesContentTypeBaseUnpublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/contentTypes/{contentType-id}/base/microsoft.graph.unpublish"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	contentTypeId string
	inlineObject737 *InlineObject737
}

func (r ApiSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest) InlineObject737(inlineObject737 InlineObject737) ApiSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest {
	r.inlineObject737 = &inlineObject737
	return r
}

func (r ApiSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteContentTypesContentTypeCopyToDefaultContentLocationExecute(r)
}

/*
SitesSiteContentTypesContentTypeCopyToDefaultContentLocation Invoke action copyToDefaultContentLocation

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest
*/
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeCopyToDefaultContentLocation(ctx _context.Context, siteId string, contentTypeId string) ApiSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest {
	return ApiSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeCopyToDefaultContentLocationExecute(r ApiSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteContentTypesContentTypeCopyToDefaultContentLocation")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/contentTypes/{contentType-id}/microsoft.graph.copyToDefaultContentLocation"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject737 == nil {
		return nil, reportError("inlineObject737 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject737
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteContentTypesContentTypePublishRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	contentTypeId string
}


func (r ApiSitesSiteContentTypesContentTypePublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteContentTypesContentTypePublishExecute(r)
}

/*
SitesSiteContentTypesContentTypePublish Invoke action publish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteContentTypesContentTypePublishRequest
*/
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypePublish(ctx _context.Context, siteId string, contentTypeId string) ApiSitesSiteContentTypesContentTypePublishRequest {
	return ApiSitesSiteContentTypesContentTypePublishRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypePublishExecute(r ApiSitesSiteContentTypesContentTypePublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteContentTypesContentTypePublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/contentTypes/{contentType-id}/microsoft.graph.publish"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteContentTypesContentTypeUnpublishRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	contentTypeId string
}


func (r ApiSitesSiteContentTypesContentTypeUnpublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteContentTypesContentTypeUnpublishExecute(r)
}

/*
SitesSiteContentTypesContentTypeUnpublish Invoke action unpublish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteContentTypesContentTypeUnpublishRequest
*/
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeUnpublish(ctx _context.Context, siteId string, contentTypeId string) ApiSitesSiteContentTypesContentTypeUnpublishRequest {
	return ApiSitesSiteContentTypesContentTypeUnpublishRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteContentTypesContentTypeUnpublishExecute(r ApiSitesSiteContentTypesContentTypeUnpublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteContentTypesContentTypeUnpublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/contentTypes/{contentType-id}/microsoft.graph.unpublish"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteListsListContentTypesAddCopyRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	listId string
	inlineObject744 *InlineObject744
}

func (r ApiSitesSiteListsListContentTypesAddCopyRequest) InlineObject744(inlineObject744 InlineObject744) ApiSitesSiteListsListContentTypesAddCopyRequest {
	r.inlineObject744 = &inlineObject744
	return r
}

func (r ApiSitesSiteListsListContentTypesAddCopyRequest) Execute() (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteListsListContentTypesAddCopyExecute(r)
}

/*
SitesSiteListsListContentTypesAddCopy Invoke action addCopy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param listId key: id of list
 @return ApiSitesSiteListsListContentTypesAddCopyRequest
*/
func (a *SitesActionsApiService) SitesSiteListsListContentTypesAddCopy(ctx _context.Context, siteId string, listId string) ApiSitesSiteListsListContentTypesAddCopyRequest {
	return ApiSitesSiteListsListContentTypesAddCopyRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		listId: listId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphContentType
func (a *SitesActionsApiService) SitesSiteListsListContentTypesAddCopyExecute(r ApiSitesSiteListsListContentTypesAddCopyRequest) (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphContentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteListsListContentTypesAddCopy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/lists/{list-id}/contentTypes/microsoft.graph.addCopy"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"list-id"+"}", _neturl.PathEscape(parameterToString(r.listId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject744 == nil {
		return localVarReturnValue, nil, reportError("inlineObject744 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject744
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	listId string
	contentTypeId string
	inlineObject742 *InlineObject742
}

func (r ApiSitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest) InlineObject742(inlineObject742 InlineObject742) ApiSitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest {
	r.inlineObject742 = &inlineObject742
	return r
}

func (r ApiSitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteListsListContentTypesContentTypeAssociateWithHubSitesExecute(r)
}

/*
SitesSiteListsListContentTypesContentTypeAssociateWithHubSites Invoke action associateWithHubSites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param listId key: id of list
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest
*/
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeAssociateWithHubSites(ctx _context.Context, siteId string, listId string, contentTypeId string) ApiSitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest {
	return ApiSitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		listId: listId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeAssociateWithHubSitesExecute(r ApiSitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteListsListContentTypesContentTypeAssociateWithHubSites")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/lists/{list-id}/contentTypes/{contentType-id}/microsoft.graph.associateWithHubSites"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"list-id"+"}", _neturl.PathEscape(parameterToString(r.listId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject742 == nil {
		return nil, reportError("inlineObject742 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject742
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteListsListContentTypesContentTypeBaseAssociateWithHubSitesRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	listId string
	contentTypeId string
	inlineObject739 *InlineObject739
}

func (r ApiSitesSiteListsListContentTypesContentTypeBaseAssociateWithHubSitesRequest) InlineObject739(inlineObject739 InlineObject739) ApiSitesSiteListsListContentTypesContentTypeBaseAssociateWithHubSitesRequest {
	r.inlineObject739 = &inlineObject739
	return r
}

func (r ApiSitesSiteListsListContentTypesContentTypeBaseAssociateWithHubSitesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteListsListContentTypesContentTypeBaseAssociateWithHubSitesExecute(r)
}

/*
SitesSiteListsListContentTypesContentTypeBaseAssociateWithHubSites Invoke action associateWithHubSites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param listId key: id of list
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteListsListContentTypesContentTypeBaseAssociateWithHubSitesRequest
*/
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeBaseAssociateWithHubSites(ctx _context.Context, siteId string, listId string, contentTypeId string) ApiSitesSiteListsListContentTypesContentTypeBaseAssociateWithHubSitesRequest {
	return ApiSitesSiteListsListContentTypesContentTypeBaseAssociateWithHubSitesRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		listId: listId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeBaseAssociateWithHubSitesExecute(r ApiSitesSiteListsListContentTypesContentTypeBaseAssociateWithHubSitesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteListsListContentTypesContentTypeBaseAssociateWithHubSites")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/lists/{list-id}/contentTypes/{contentType-id}/base/microsoft.graph.associateWithHubSites"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"list-id"+"}", _neturl.PathEscape(parameterToString(r.listId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject739 == nil {
		return nil, reportError("inlineObject739 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject739
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteListsListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	listId string
	contentTypeId string
	inlineObject740 *InlineObject740
}

func (r ApiSitesSiteListsListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest) InlineObject740(inlineObject740 InlineObject740) ApiSitesSiteListsListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest {
	r.inlineObject740 = &inlineObject740
	return r
}

func (r ApiSitesSiteListsListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteListsListContentTypesContentTypeBaseCopyToDefaultContentLocationExecute(r)
}

/*
SitesSiteListsListContentTypesContentTypeBaseCopyToDefaultContentLocation Invoke action copyToDefaultContentLocation

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param listId key: id of list
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteListsListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest
*/
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeBaseCopyToDefaultContentLocation(ctx _context.Context, siteId string, listId string, contentTypeId string) ApiSitesSiteListsListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest {
	return ApiSitesSiteListsListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		listId: listId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeBaseCopyToDefaultContentLocationExecute(r ApiSitesSiteListsListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteListsListContentTypesContentTypeBaseCopyToDefaultContentLocation")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/lists/{list-id}/contentTypes/{contentType-id}/base/microsoft.graph.copyToDefaultContentLocation"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"list-id"+"}", _neturl.PathEscape(parameterToString(r.listId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject740 == nil {
		return nil, reportError("inlineObject740 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject740
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteListsListContentTypesContentTypeBasePublishRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	listId string
	contentTypeId string
}


func (r ApiSitesSiteListsListContentTypesContentTypeBasePublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteListsListContentTypesContentTypeBasePublishExecute(r)
}

/*
SitesSiteListsListContentTypesContentTypeBasePublish Invoke action publish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param listId key: id of list
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteListsListContentTypesContentTypeBasePublishRequest
*/
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeBasePublish(ctx _context.Context, siteId string, listId string, contentTypeId string) ApiSitesSiteListsListContentTypesContentTypeBasePublishRequest {
	return ApiSitesSiteListsListContentTypesContentTypeBasePublishRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		listId: listId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeBasePublishExecute(r ApiSitesSiteListsListContentTypesContentTypeBasePublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteListsListContentTypesContentTypeBasePublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/lists/{list-id}/contentTypes/{contentType-id}/base/microsoft.graph.publish"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"list-id"+"}", _neturl.PathEscape(parameterToString(r.listId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteListsListContentTypesContentTypeBaseTypesAddCopyRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	listId string
	contentTypeId string
	inlineObject741 *InlineObject741
}

func (r ApiSitesSiteListsListContentTypesContentTypeBaseTypesAddCopyRequest) InlineObject741(inlineObject741 InlineObject741) ApiSitesSiteListsListContentTypesContentTypeBaseTypesAddCopyRequest {
	r.inlineObject741 = &inlineObject741
	return r
}

func (r ApiSitesSiteListsListContentTypesContentTypeBaseTypesAddCopyRequest) Execute() (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteListsListContentTypesContentTypeBaseTypesAddCopyExecute(r)
}

/*
SitesSiteListsListContentTypesContentTypeBaseTypesAddCopy Invoke action addCopy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param listId key: id of list
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteListsListContentTypesContentTypeBaseTypesAddCopyRequest
*/
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeBaseTypesAddCopy(ctx _context.Context, siteId string, listId string, contentTypeId string) ApiSitesSiteListsListContentTypesContentTypeBaseTypesAddCopyRequest {
	return ApiSitesSiteListsListContentTypesContentTypeBaseTypesAddCopyRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		listId: listId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphContentType
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeBaseTypesAddCopyExecute(r ApiSitesSiteListsListContentTypesContentTypeBaseTypesAddCopyRequest) (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphContentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteListsListContentTypesContentTypeBaseTypesAddCopy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/lists/{list-id}/contentTypes/{contentType-id}/baseTypes/microsoft.graph.addCopy"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"list-id"+"}", _neturl.PathEscape(parameterToString(r.listId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject741 == nil {
		return localVarReturnValue, nil, reportError("inlineObject741 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject741
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteListsListContentTypesContentTypeBaseUnpublishRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	listId string
	contentTypeId string
}


func (r ApiSitesSiteListsListContentTypesContentTypeBaseUnpublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteListsListContentTypesContentTypeBaseUnpublishExecute(r)
}

/*
SitesSiteListsListContentTypesContentTypeBaseUnpublish Invoke action unpublish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param listId key: id of list
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteListsListContentTypesContentTypeBaseUnpublishRequest
*/
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeBaseUnpublish(ctx _context.Context, siteId string, listId string, contentTypeId string) ApiSitesSiteListsListContentTypesContentTypeBaseUnpublishRequest {
	return ApiSitesSiteListsListContentTypesContentTypeBaseUnpublishRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		listId: listId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeBaseUnpublishExecute(r ApiSitesSiteListsListContentTypesContentTypeBaseUnpublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteListsListContentTypesContentTypeBaseUnpublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/lists/{list-id}/contentTypes/{contentType-id}/base/microsoft.graph.unpublish"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"list-id"+"}", _neturl.PathEscape(parameterToString(r.listId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteListsListContentTypesContentTypeCopyToDefaultContentLocationRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	listId string
	contentTypeId string
	inlineObject743 *InlineObject743
}

func (r ApiSitesSiteListsListContentTypesContentTypeCopyToDefaultContentLocationRequest) InlineObject743(inlineObject743 InlineObject743) ApiSitesSiteListsListContentTypesContentTypeCopyToDefaultContentLocationRequest {
	r.inlineObject743 = &inlineObject743
	return r
}

func (r ApiSitesSiteListsListContentTypesContentTypeCopyToDefaultContentLocationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteListsListContentTypesContentTypeCopyToDefaultContentLocationExecute(r)
}

/*
SitesSiteListsListContentTypesContentTypeCopyToDefaultContentLocation Invoke action copyToDefaultContentLocation

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param listId key: id of list
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteListsListContentTypesContentTypeCopyToDefaultContentLocationRequest
*/
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeCopyToDefaultContentLocation(ctx _context.Context, siteId string, listId string, contentTypeId string) ApiSitesSiteListsListContentTypesContentTypeCopyToDefaultContentLocationRequest {
	return ApiSitesSiteListsListContentTypesContentTypeCopyToDefaultContentLocationRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		listId: listId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeCopyToDefaultContentLocationExecute(r ApiSitesSiteListsListContentTypesContentTypeCopyToDefaultContentLocationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteListsListContentTypesContentTypeCopyToDefaultContentLocation")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/lists/{list-id}/contentTypes/{contentType-id}/microsoft.graph.copyToDefaultContentLocation"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"list-id"+"}", _neturl.PathEscape(parameterToString(r.listId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject743 == nil {
		return nil, reportError("inlineObject743 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject743
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteListsListContentTypesContentTypePublishRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	listId string
	contentTypeId string
}


func (r ApiSitesSiteListsListContentTypesContentTypePublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteListsListContentTypesContentTypePublishExecute(r)
}

/*
SitesSiteListsListContentTypesContentTypePublish Invoke action publish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param listId key: id of list
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteListsListContentTypesContentTypePublishRequest
*/
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypePublish(ctx _context.Context, siteId string, listId string, contentTypeId string) ApiSitesSiteListsListContentTypesContentTypePublishRequest {
	return ApiSitesSiteListsListContentTypesContentTypePublishRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		listId: listId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypePublishExecute(r ApiSitesSiteListsListContentTypesContentTypePublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteListsListContentTypesContentTypePublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/lists/{list-id}/contentTypes/{contentType-id}/microsoft.graph.publish"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"list-id"+"}", _neturl.PathEscape(parameterToString(r.listId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteListsListContentTypesContentTypeUnpublishRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	listId string
	contentTypeId string
}


func (r ApiSitesSiteListsListContentTypesContentTypeUnpublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteListsListContentTypesContentTypeUnpublishExecute(r)
}

/*
SitesSiteListsListContentTypesContentTypeUnpublish Invoke action unpublish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param listId key: id of list
 @param contentTypeId key: id of contentType
 @return ApiSitesSiteListsListContentTypesContentTypeUnpublishRequest
*/
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeUnpublish(ctx _context.Context, siteId string, listId string, contentTypeId string) ApiSitesSiteListsListContentTypesContentTypeUnpublishRequest {
	return ApiSitesSiteListsListContentTypesContentTypeUnpublishRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		listId: listId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteListsListContentTypesContentTypeUnpublishExecute(r ApiSitesSiteListsListContentTypesContentTypeUnpublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteListsListContentTypesContentTypeUnpublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/lists/{list-id}/contentTypes/{contentType-id}/microsoft.graph.unpublish"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"list-id"+"}", _neturl.PathEscape(parameterToString(r.listId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteListsListItemsListItemVersionsListItemVersionRestoreVersionRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	listId string
	listItemId string
	listItemVersionId string
}


func (r ApiSitesSiteListsListItemsListItemVersionsListItemVersionRestoreVersionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteListsListItemsListItemVersionsListItemVersionRestoreVersionExecute(r)
}

/*
SitesSiteListsListItemsListItemVersionsListItemVersionRestoreVersion Invoke action restoreVersion

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param listId key: id of list
 @param listItemId key: id of listItem
 @param listItemVersionId key: id of listItemVersion
 @return ApiSitesSiteListsListItemsListItemVersionsListItemVersionRestoreVersionRequest
*/
func (a *SitesActionsApiService) SitesSiteListsListItemsListItemVersionsListItemVersionRestoreVersion(ctx _context.Context, siteId string, listId string, listItemId string, listItemVersionId string) ApiSitesSiteListsListItemsListItemVersionsListItemVersionRestoreVersionRequest {
	return ApiSitesSiteListsListItemsListItemVersionsListItemVersionRestoreVersionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		listId: listId,
		listItemId: listItemId,
		listItemVersionId: listItemVersionId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteListsListItemsListItemVersionsListItemVersionRestoreVersionExecute(r ApiSitesSiteListsListItemsListItemVersionsListItemVersionRestoreVersionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteListsListItemsListItemVersionsListItemVersionRestoreVersion")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/lists/{list-id}/items/{listItem-id}/versions/{listItemVersion-id}/microsoft.graph.restoreVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"list-id"+"}", _neturl.PathEscape(parameterToString(r.listId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"listItem-id"+"}", _neturl.PathEscape(parameterToString(r.listItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"listItemVersion-id"+"}", _neturl.PathEscape(parameterToString(r.listItemVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksGetNotebookFromWebUrlRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	inlineObject766 *InlineObject766
}

func (r ApiSitesSiteOnenoteNotebooksGetNotebookFromWebUrlRequest) InlineObject766(inlineObject766 InlineObject766) ApiSitesSiteOnenoteNotebooksGetNotebookFromWebUrlRequest {
	r.inlineObject766 = &inlineObject766
	return r
}

func (r ApiSitesSiteOnenoteNotebooksGetNotebookFromWebUrlRequest) Execute() (AnyOfmicrosoftGraphCopyNotebookModel, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksGetNotebookFromWebUrlExecute(r)
}

/*
SitesSiteOnenoteNotebooksGetNotebookFromWebUrl Invoke action getNotebookFromWebUrl

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @return ApiSitesSiteOnenoteNotebooksGetNotebookFromWebUrlRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksGetNotebookFromWebUrl(ctx _context.Context, siteId string) ApiSitesSiteOnenoteNotebooksGetNotebookFromWebUrlRequest {
	return ApiSitesSiteOnenoteNotebooksGetNotebookFromWebUrlRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphCopyNotebookModel
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksGetNotebookFromWebUrlExecute(r ApiSitesSiteOnenoteNotebooksGetNotebookFromWebUrlRequest) (AnyOfmicrosoftGraphCopyNotebookModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphCopyNotebookModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksGetNotebookFromWebUrl")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/microsoft.graph.getNotebookFromWebUrl"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject766 == nil {
		return localVarReturnValue, nil, reportError("inlineObject766 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject766
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	inlineObject745 *InlineObject745
}

func (r ApiSitesSiteOnenoteNotebooksNotebookCopyNotebookRequest) InlineObject745(inlineObject745 InlineObject745) ApiSitesSiteOnenoteNotebooksNotebookCopyNotebookRequest {
	r.inlineObject745 = &inlineObject745
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @return ApiSitesSiteOnenoteNotebooksNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookCopyNotebook(ctx _context.Context, siteId string, notebookId string) ApiSitesSiteOnenoteNotebooksNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteNotebooksNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject745 == nil {
		return localVarReturnValue, nil, reportError("inlineObject745 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject745
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	sectionGroupId string
	inlineObject746 *InlineObject746
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) InlineObject746(inlineObject746 InlineObject746) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest {
	r.inlineObject746 = &inlineObject746
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject746 == nil {
		return localVarReturnValue, nil, reportError("inlineObject746 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject746
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject747 *InlineObject747
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) InlineObject747(inlineObject747 InlineObject747) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject747 = &inlineObject747
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject747 == nil {
		return localVarReturnValue, nil, reportError("inlineObject747 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject747
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject748 *InlineObject748
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject748(inlineObject748 InlineObject748) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject748 = &inlineObject748
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject748 == nil {
		return localVarReturnValue, nil, reportError("inlineObject748 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject748
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject749 *InlineObject749
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) InlineObject749(inlineObject749 InlineObject749) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	r.inlineObject749 = &inlineObject749
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection Invoke action copyToSection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.copyToSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject749 == nil {
		return localVarReturnValue, nil, reportError("inlineObject749 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject749
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject750 *InlineObject750
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) InlineObject750(inlineObject750 InlineObject750) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	r.inlineObject750 = &inlineObject750
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent Invoke action onenotePatchContent

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.onenotePatchContent"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject750 == nil {
		return nil, reportError("inlineObject750 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject750
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject751 *InlineObject751
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) InlineObject751(inlineObject751 InlineObject751) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest {
	r.inlineObject751 = &inlineObject751
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject751 == nil {
		return localVarReturnValue, nil, reportError("inlineObject751 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject751
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject752 *InlineObject752
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) InlineObject752(inlineObject752 InlineObject752) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest {
	r.inlineObject752 = &inlineObject752
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject752 == nil {
		return localVarReturnValue, nil, reportError("inlineObject752 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject752
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject753 *InlineObject753
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) InlineObject753(inlineObject753 InlineObject753) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest {
	r.inlineObject753 = &inlineObject753
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject753 == nil {
		return localVarReturnValue, nil, reportError("inlineObject753 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject753
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject754 *InlineObject754
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest) InlineObject754(inlineObject754 InlineObject754) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	r.inlineObject754 = &inlineObject754
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebook(ctx _context.Context, siteId string, notebookId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject754 == nil {
		return localVarReturnValue, nil, reportError("inlineObject754 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject754
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	onenoteSectionId string
	inlineObject755 *InlineObject755
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToNotebookRequest) InlineObject755(inlineObject755 InlineObject755) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject755 = &inlineObject755
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject755 == nil {
		return localVarReturnValue, nil, reportError("inlineObject755 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject755
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	onenoteSectionId string
	inlineObject756 *InlineObject756
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject756(inlineObject756 InlineObject756) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject756 = &inlineObject756
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject756 == nil {
		return localVarReturnValue, nil, reportError("inlineObject756 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject756
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	inlineObject757 *InlineObject757
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) InlineObject757(inlineObject757 InlineObject757) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	r.inlineObject757 = &inlineObject757
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSection Invoke action copyToSection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSection(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.copyToSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject757 == nil {
		return localVarReturnValue, nil, reportError("inlineObject757 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject757
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	inlineObject758 *InlineObject758
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) InlineObject758(inlineObject758 InlineObject758) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	r.inlineObject758 = &inlineObject758
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent Invoke action onenotePatchContent

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.onenotePatchContent"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject758 == nil {
		return nil, reportError("inlineObject758 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject758
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	inlineObject759 *InlineObject759
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) InlineObject759(inlineObject759 InlineObject759) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest {
	r.inlineObject759 = &inlineObject759
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject759 == nil {
		return localVarReturnValue, nil, reportError("inlineObject759 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject759
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	inlineObject760 *InlineObject760
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) InlineObject760(inlineObject760 InlineObject760) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest {
	r.inlineObject760 = &inlineObject760
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject760 == nil {
		return localVarReturnValue, nil, reportError("inlineObject760 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject760
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenotePageId string
	inlineObject761 *InlineObject761
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) InlineObject761(inlineObject761 InlineObject761) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest {
	r.inlineObject761 = &inlineObject761
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject761 == nil {
		return localVarReturnValue, nil, reportError("inlineObject761 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject761
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	onenoteSectionId string
	inlineObject762 *InlineObject762
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest) InlineObject762(inlineObject762 InlineObject762) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	r.inlineObject762 = &inlineObject762
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentNotebookCopyNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject762 == nil {
		return localVarReturnValue, nil, reportError("inlineObject762 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject762
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	onenoteSectionId string
	inlineObject763 *InlineObject763
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest) InlineObject763(inlineObject763 InlineObject763) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest {
	r.inlineObject763 = &inlineObject763
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject763 == nil {
		return localVarReturnValue, nil, reportError("inlineObject763 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject763
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	inlineObject764 *InlineObject764
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) InlineObject764(inlineObject764 InlineObject764) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject764 = &inlineObject764
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject764 == nil {
		return localVarReturnValue, nil, reportError("inlineObject764 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject764
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	inlineObject765 *InlineObject765
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject765(inlineObject765 InlineObject765) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject765 = &inlineObject765
	return r
}

func (r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteNotebooksNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject765 == nil {
		return localVarReturnValue, nil, reportError("inlineObject765 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject765
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageCopyToSectionRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	inlineObject767 *InlineObject767
}

func (r ApiSitesSiteOnenotePagesOnenotePageCopyToSectionRequest) InlineObject767(inlineObject767 InlineObject767) ApiSitesSiteOnenotePagesOnenotePageCopyToSectionRequest {
	r.inlineObject767 = &inlineObject767
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageCopyToSectionRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageCopyToSectionExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageCopyToSection Invoke action copyToSection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenotePagesOnenotePageCopyToSectionRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageCopyToSection(ctx _context.Context, siteId string, onenotePageId string) ApiSitesSiteOnenotePagesOnenotePageCopyToSectionRequest {
	return ApiSitesSiteOnenotePagesOnenotePageCopyToSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageCopyToSectionExecute(r ApiSitesSiteOnenotePagesOnenotePageCopyToSectionRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageCopyToSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/microsoft.graph.copyToSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject767 == nil {
		return localVarReturnValue, nil, reportError("inlineObject767 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject767
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageOnenotePatchContentRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	inlineObject768 *InlineObject768
}

func (r ApiSitesSiteOnenotePagesOnenotePageOnenotePatchContentRequest) InlineObject768(inlineObject768 InlineObject768) ApiSitesSiteOnenotePagesOnenotePageOnenotePatchContentRequest {
	r.inlineObject768 = &inlineObject768
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageOnenotePatchContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageOnenotePatchContentExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageOnenotePatchContent Invoke action onenotePatchContent

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenotePagesOnenotePageOnenotePatchContentRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageOnenotePatchContent(ctx _context.Context, siteId string, onenotePageId string) ApiSitesSiteOnenotePagesOnenotePageOnenotePatchContentRequest {
	return ApiSitesSiteOnenotePagesOnenotePageOnenotePatchContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageOnenotePatchContentExecute(r ApiSitesSiteOnenotePagesOnenotePageOnenotePatchContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageOnenotePatchContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/microsoft.graph.onenotePatchContent"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject768 == nil {
		return nil, reportError("inlineObject768 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject768
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	inlineObject769 *InlineObject769
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookCopyNotebookRequest) InlineObject769(inlineObject769 InlineObject769) ApiSitesSiteOnenotePagesOnenotePageParentNotebookCopyNotebookRequest {
	r.inlineObject769 = &inlineObject769
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookCopyNotebook(ctx _context.Context, siteId string, onenotePageId string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject769 == nil {
		return localVarReturnValue, nil, reportError("inlineObject769 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject769
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	inlineObject770 *InlineObject770
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) InlineObject770(inlineObject770 InlineObject770) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest {
	r.inlineObject770 = &inlineObject770
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject770 == nil {
		return localVarReturnValue, nil, reportError("inlineObject770 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject770
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject771 *InlineObject771
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) InlineObject771(inlineObject771 InlineObject771) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject771 = &inlineObject771
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject771 == nil {
		return localVarReturnValue, nil, reportError("inlineObject771 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject771
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject772 *InlineObject772
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject772(inlineObject772 InlineObject772) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject772 = &inlineObject772
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject772 == nil {
		return localVarReturnValue, nil, reportError("inlineObject772 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject772
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	inlineObject773 *InlineObject773
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) InlineObject773(inlineObject773 InlineObject773) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	r.inlineObject773 = &inlineObject773
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection Invoke action copyToSection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}/microsoft.graph.copyToSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject773 == nil {
		return localVarReturnValue, nil, reportError("inlineObject773 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject773
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	inlineObject774 *InlineObject774
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) InlineObject774(inlineObject774 InlineObject774) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	r.inlineObject774 = &inlineObject774
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent Invoke action onenotePatchContent

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}/microsoft.graph.onenotePatchContent"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject774 == nil {
		return nil, reportError("inlineObject774 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject774
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject775 *InlineObject775
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest) InlineObject775(inlineObject775 InlineObject775) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	r.inlineObject775 = &inlineObject775
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject775 == nil {
		return localVarReturnValue, nil, reportError("inlineObject775 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject775
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	inlineObject776 *InlineObject776
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) InlineObject776(inlineObject776 InlineObject776) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject776 = &inlineObject776
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject776 == nil {
		return localVarReturnValue, nil, reportError("inlineObject776 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject776
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	inlineObject777 *InlineObject777
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject777(inlineObject777 InlineObject777) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject777 = &inlineObject777
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject777 == nil {
		return localVarReturnValue, nil, reportError("inlineObject777 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject777
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	inlineObject778 *InlineObject778
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) InlineObject778(inlineObject778 InlineObject778) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	r.inlineObject778 = &inlineObject778
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSection Invoke action copyToSection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSection(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}/microsoft.graph.copyToSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject778 == nil {
		return localVarReturnValue, nil, reportError("inlineObject778 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject778
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	inlineObject779 *InlineObject779
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) InlineObject779(inlineObject779 InlineObject779) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	r.inlineObject779 = &inlineObject779
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent Invoke action onenotePatchContent

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}/microsoft.graph.onenotePatchContent"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject779 == nil {
		return nil, reportError("inlineObject779 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject779
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	inlineObject780 *InlineObject780
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest) InlineObject780(inlineObject780 InlineObject780) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	r.inlineObject780 = &inlineObject780
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebook(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject780 == nil {
		return localVarReturnValue, nil, reportError("inlineObject780 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject780
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	inlineObject781 *InlineObject781
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest) InlineObject781(inlineObject781 InlineObject781) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest {
	r.inlineObject781 = &inlineObject781
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebook(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject781 == nil {
		return localVarReturnValue, nil, reportError("inlineObject781 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject781
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	inlineObject782 *InlineObject782
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) InlineObject782(inlineObject782 InlineObject782) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject782 = &inlineObject782
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject782 == nil {
		return localVarReturnValue, nil, reportError("inlineObject782 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject782
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	inlineObject783 *InlineObject783
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject783(inlineObject783 InlineObject783) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject783 = &inlineObject783
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentNotebookSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject783 == nil {
		return localVarReturnValue, nil, reportError("inlineObject783 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject783
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	inlineObject784 *InlineObject784
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToNotebookRequest) InlineObject784(inlineObject784 InlineObject784) ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToNotebookRequest {
	r.inlineObject784 = &inlineObject784
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionCopyToNotebook(ctx _context.Context, siteId string, onenotePageId string) ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionCopyToNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject784 == nil {
		return localVarReturnValue, nil, reportError("inlineObject784 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject784
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	inlineObject785 *InlineObject785
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToSectionGroupRequest) InlineObject785(inlineObject785 InlineObject785) ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToSectionGroupRequest {
	r.inlineObject785 = &inlineObject785
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenotePageId string) ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject785 == nil {
		return localVarReturnValue, nil, reportError("inlineObject785 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject785
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageCopyToSectionRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenotePageId1 string
	inlineObject786 *InlineObject786
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageCopyToSectionRequest) InlineObject786(inlineObject786 InlineObject786) ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageCopyToSectionRequest {
	r.inlineObject786 = &inlineObject786
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageCopyToSectionRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageCopyToSectionExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageCopyToSection Invoke action copyToSection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageCopyToSectionRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageCopyToSection(ctx _context.Context, siteId string, onenotePageId string, onenotePageId1 string) ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageCopyToSectionRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageCopyToSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageCopyToSectionExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageCopyToSectionRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageCopyToSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}/microsoft.graph.copyToSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject786 == nil {
		return localVarReturnValue, nil, reportError("inlineObject786 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject786
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageOnenotePatchContentRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenotePageId1 string
	inlineObject787 *InlineObject787
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageOnenotePatchContentRequest) InlineObject787(inlineObject787 InlineObject787) ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageOnenotePatchContentRequest {
	r.inlineObject787 = &inlineObject787
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageOnenotePatchContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageOnenotePatchContentExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageOnenotePatchContent Invoke action onenotePatchContent

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageOnenotePatchContentRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageOnenotePatchContent(ctx _context.Context, siteId string, onenotePageId string, onenotePageId1 string) ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageOnenotePatchContentRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageOnenotePatchContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageOnenotePatchContentExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageOnenotePatchContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionPagesOnenotePageOnenotePatchContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}/microsoft.graph.onenotePatchContent"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject787 == nil {
		return nil, reportError("inlineObject787 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject787
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	inlineObject788 *InlineObject788
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookCopyNotebookRequest) InlineObject788(inlineObject788 InlineObject788) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookCopyNotebookRequest {
	r.inlineObject788 = &inlineObject788
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookCopyNotebook(ctx _context.Context, siteId string, onenotePageId string) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject788 == nil {
		return localVarReturnValue, nil, reportError("inlineObject788 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject788
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	inlineObject789 *InlineObject789
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) InlineObject789(inlineObject789 InlineObject789) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest {
	r.inlineObject789 = &inlineObject789
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject789 == nil {
		return localVarReturnValue, nil, reportError("inlineObject789 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject789
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject790 *InlineObject790
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) InlineObject790(inlineObject790 InlineObject790) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject790 = &inlineObject790
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject790 == nil {
		return localVarReturnValue, nil, reportError("inlineObject790 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject790
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject791 *InlineObject791
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject791(inlineObject791 InlineObject791) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject791 = &inlineObject791
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject791 == nil {
		return localVarReturnValue, nil, reportError("inlineObject791 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject791
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	inlineObject792 *InlineObject792
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) InlineObject792(inlineObject792 InlineObject792) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject792 = &inlineObject792
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject792 == nil {
		return localVarReturnValue, nil, reportError("inlineObject792 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject792
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	inlineObject793 *InlineObject793
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject793(inlineObject793 InlineObject793) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject793 = &inlineObject793
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject793 == nil {
		return localVarReturnValue, nil, reportError("inlineObject793 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject793
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	inlineObject794 *InlineObject794
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookCopyNotebookRequest) InlineObject794(inlineObject794 InlineObject794) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookCopyNotebookRequest {
	r.inlineObject794 = &inlineObject794
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookCopyNotebook(ctx _context.Context, siteId string, onenotePageId string) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject794 == nil {
		return localVarReturnValue, nil, reportError("inlineObject794 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject794
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	inlineObject795 *InlineObject795
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) InlineObject795(inlineObject795 InlineObject795) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject795 = &inlineObject795
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject795 == nil {
		return localVarReturnValue, nil, reportError("inlineObject795 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject795
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	inlineObject796 *InlineObject796
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject796(inlineObject796 InlineObject796) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject796 = &inlineObject796
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject796 == nil {
		return localVarReturnValue, nil, reportError("inlineObject796 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject796
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	inlineObject797 *InlineObject797
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) InlineObject797(inlineObject797 InlineObject797) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject797 = &inlineObject797
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject797 == nil {
		return localVarReturnValue, nil, reportError("inlineObject797 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject797
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenotePageId string
	onenoteSectionId string
	inlineObject798 *InlineObject798
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject798(inlineObject798 InlineObject798) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject798 = &inlineObject798
	return r
}

func (r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenotePageId string, onenoteSectionId string) ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenotePagesOnenotePageParentSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject798 == nil {
		return localVarReturnValue, nil, reportError("inlineObject798 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject798
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	inlineObject799 *InlineObject799
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) InlineObject799(inlineObject799 InlineObject799) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookCopyNotebookRequest {
	r.inlineObject799 = &inlineObject799
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookCopyNotebook(ctx _context.Context, siteId string, sectionGroupId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject799 == nil {
		return localVarReturnValue, nil, reportError("inlineObject799 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject799
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject800 *InlineObject800
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) InlineObject800(inlineObject800 InlineObject800) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject800 = &inlineObject800
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject800 == nil {
		return localVarReturnValue, nil, reportError("inlineObject800 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject800
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject801 *InlineObject801
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject801(inlineObject801 InlineObject801) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject801 = &inlineObject801
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject801 == nil {
		return localVarReturnValue, nil, reportError("inlineObject801 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject801
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject802 *InlineObject802
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) InlineObject802(inlineObject802 InlineObject802) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	r.inlineObject802 = &inlineObject802
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSection Invoke action copyToSection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSection(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageCopyToSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.copyToSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject802 == nil {
		return localVarReturnValue, nil, reportError("inlineObject802 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject802
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject803 *InlineObject803
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) InlineObject803(inlineObject803 InlineObject803) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	r.inlineObject803 = &inlineObject803
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent Invoke action onenotePatchContent

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.onenotePatchContent"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject803 == nil {
		return nil, reportError("inlineObject803 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject803
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject804 *InlineObject804
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) InlineObject804(inlineObject804 InlineObject804) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest {
	r.inlineObject804 = &inlineObject804
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject804 == nil {
		return localVarReturnValue, nil, reportError("inlineObject804 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject804
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject805 *InlineObject805
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) InlineObject805(inlineObject805 InlineObject805) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest {
	r.inlineObject805 = &inlineObject805
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject805 == nil {
		return localVarReturnValue, nil, reportError("inlineObject805 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject805
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject806 *InlineObject806
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) InlineObject806(inlineObject806 InlineObject806) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest {
	r.inlineObject806 = &inlineObject806
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject806 == nil {
		return localVarReturnValue, nil, reportError("inlineObject806 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject806
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject807 *InlineObject807
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest) InlineObject807(inlineObject807 InlineObject807) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	r.inlineObject807 = &inlineObject807
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupParentNotebookSectionsOnenoteSectionParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject807 == nil {
		return localVarReturnValue, nil, reportError("inlineObject807 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject807
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject808 *InlineObject808
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) InlineObject808(inlineObject808 InlineObject808) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject808 = &inlineObject808
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject808 == nil {
		return localVarReturnValue, nil, reportError("inlineObject808 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject808
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject809 *InlineObject809
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject809(inlineObject809 InlineObject809) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject809 = &inlineObject809
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject809 == nil {
		return localVarReturnValue, nil, reportError("inlineObject809 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject809
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject810 *InlineObject810
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) InlineObject810(inlineObject810 InlineObject810) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	r.inlineObject810 = &inlineObject810
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection Invoke action copyToSection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.copyToSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject810 == nil {
		return localVarReturnValue, nil, reportError("inlineObject810 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject810
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject811 *InlineObject811
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) InlineObject811(inlineObject811 InlineObject811) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	r.inlineObject811 = &inlineObject811
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent Invoke action onenotePatchContent

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.onenotePatchContent"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject811 == nil {
		return nil, reportError("inlineObject811 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject811
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject812 *InlineObject812
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) InlineObject812(inlineObject812 InlineObject812) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest {
	r.inlineObject812 = &inlineObject812
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject812 == nil {
		return localVarReturnValue, nil, reportError("inlineObject812 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject812
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	inlineObject813 *InlineObject813
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) InlineObject813(inlineObject813 InlineObject813) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject813 = &inlineObject813
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject813 == nil {
		return localVarReturnValue, nil, reportError("inlineObject813 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject813
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	inlineObject814 *InlineObject814
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject814(inlineObject814 InlineObject814) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject814 = &inlineObject814
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject814 == nil {
		return localVarReturnValue, nil, reportError("inlineObject814 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject814
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject815 *InlineObject815
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) InlineObject815(inlineObject815 InlineObject815) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest {
	r.inlineObject815 = &inlineObject815
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject815 == nil {
		return localVarReturnValue, nil, reportError("inlineObject815 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject815
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	inlineObject816 *InlineObject816
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) InlineObject816(inlineObject816 InlineObject816) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest {
	r.inlineObject816 = &inlineObject816
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject816 == nil {
		return localVarReturnValue, nil, reportError("inlineObject816 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject816
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	inlineObject817 *InlineObject817
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest) InlineObject817(inlineObject817 InlineObject817) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	r.inlineObject817 = &inlineObject817
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject817 == nil {
		return localVarReturnValue, nil, reportError("inlineObject817 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject817
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	inlineObject818 *InlineObject818
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) InlineObject818(inlineObject818 InlineObject818) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject818 = &inlineObject818
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject818 == nil {
		return localVarReturnValue, nil, reportError("inlineObject818 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject818
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	inlineObject819 *InlineObject819
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject819(inlineObject819 InlineObject819) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject819 = &inlineObject819
	return r
}

func (r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject819 == nil {
		return localVarReturnValue, nil, reportError("inlineObject819 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject819
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	inlineObject820 *InlineObject820
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToNotebookRequest) InlineObject820(inlineObject820 InlineObject820) ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject820 = &inlineObject820
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject820 == nil {
		return localVarReturnValue, nil, reportError("inlineObject820 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject820
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	inlineObject821 *InlineObject821
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject821(inlineObject821 InlineObject821) ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject821 = &inlineObject821
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject821 == nil {
		return localVarReturnValue, nil, reportError("inlineObject821 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject821
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	inlineObject822 *InlineObject822
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) InlineObject822(inlineObject822 InlineObject822) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	r.inlineObject822 = &inlineObject822
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageCopyToSection Invoke action copyToSection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageCopyToSection(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageCopyToSectionExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageCopyToSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.copyToSection"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject822 == nil {
		return localVarReturnValue, nil, reportError("inlineObject822 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject822
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	inlineObject823 *InlineObject823
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) InlineObject823(inlineObject823 InlineObject823) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	r.inlineObject823 = &inlineObject823
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent Invoke action onenotePatchContent

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageOnenotePatchContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageOnenotePatchContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/microsoft.graph.onenotePatchContent"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject823 == nil {
		return nil, reportError("inlineObject823 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject823
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	inlineObject824 *InlineObject824
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) InlineObject824(inlineObject824 InlineObject824) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest {
	r.inlineObject824 = &inlineObject824
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject824 == nil {
		return localVarReturnValue, nil, reportError("inlineObject824 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject824
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	inlineObject825 *InlineObject825
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) InlineObject825(inlineObject825 InlineObject825) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest {
	r.inlineObject825 = &inlineObject825
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject825 == nil {
		return localVarReturnValue, nil, reportError("inlineObject825 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject825
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	inlineObject826 *InlineObject826
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) InlineObject826(inlineObject826 InlineObject826) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject826 = &inlineObject826
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject826 == nil {
		return localVarReturnValue, nil, reportError("inlineObject826 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject826
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	inlineObject827 *InlineObject827
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject827(inlineObject827 InlineObject827) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject827 = &inlineObject827
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject827 == nil {
		return localVarReturnValue, nil, reportError("inlineObject827 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject827
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	inlineObject828 *InlineObject828
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) InlineObject828(inlineObject828 InlineObject828) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject828 = &inlineObject828
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject828 == nil {
		return localVarReturnValue, nil, reportError("inlineObject828 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject828
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	inlineObject829 *InlineObject829
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject829(inlineObject829 InlineObject829) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject829 = &inlineObject829
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentNotebookSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject829 == nil {
		return localVarReturnValue, nil, reportError("inlineObject829 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject829
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	inlineObject830 *InlineObject830
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) InlineObject830(inlineObject830 InlineObject830) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest {
	r.inlineObject830 = &inlineObject830
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject830 == nil {
		return localVarReturnValue, nil, reportError("inlineObject830 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject830
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenotePageId string
	inlineObject831 *InlineObject831
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) InlineObject831(inlineObject831 InlineObject831) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest {
	r.inlineObject831 = &inlineObject831
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string, onenotePageId string) ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionPagesOnenotePageParentSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject831 == nil {
		return localVarReturnValue, nil, reportError("inlineObject831 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject831
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	inlineObject832 *InlineObject832
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookCopyNotebookRequest) InlineObject832(inlineObject832 InlineObject832) ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	r.inlineObject832 = &inlineObject832
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentNotebookCopyNotebook(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject832 == nil {
		return localVarReturnValue, nil, reportError("inlineObject832 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject832
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	inlineObject833 *InlineObject833
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) InlineObject833(inlineObject833 InlineObject833) ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest {
	r.inlineObject833 = &inlineObject833
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string) ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject833 == nil {
		return localVarReturnValue, nil, reportError("inlineObject833 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject833
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	inlineObject834 *InlineObject834
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) InlineObject834(inlineObject834 InlineObject834) ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject834 = &inlineObject834
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject834 == nil {
		return localVarReturnValue, nil, reportError("inlineObject834 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject834
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	inlineObject835 *InlineObject835
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject835(inlineObject835 InlineObject835) ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject835 = &inlineObject835
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionGroupsSectionGroupSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject835 == nil {
		return localVarReturnValue, nil, reportError("inlineObject835 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject835
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	inlineObject836 *InlineObject836
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) InlineObject836(inlineObject836 InlineObject836) ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject836 = &inlineObject836
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject836 == nil {
		return localVarReturnValue, nil, reportError("inlineObject836 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject836
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	inlineObject837 *InlineObject837
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject837(inlineObject837 InlineObject837) ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject837 = &inlineObject837
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionParentNotebookSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject837 == nil {
		return localVarReturnValue, nil, reportError("inlineObject837 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject837
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	inlineObject838 *InlineObject838
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest) InlineObject838(inlineObject838 InlineObject838) ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest {
	r.inlineObject838 = &inlineObject838
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebook Invoke action copyNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebook(ctx _context.Context, siteId string, onenoteSectionId string) ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookCopyNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/microsoft.graph.copyNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject838 == nil {
		return localVarReturnValue, nil, reportError("inlineObject838 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject838
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	inlineObject839 *InlineObject839
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) InlineObject839(inlineObject839 InlineObject839) ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject839 = &inlineObject839
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject839 == nil {
		return localVarReturnValue, nil, reportError("inlineObject839 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject839
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	inlineObject840 *InlineObject840
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject840(inlineObject840 InlineObject840) ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject840 = &inlineObject840
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupParentNotebookSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject840 == nil {
		return localVarReturnValue, nil, reportError("inlineObject840 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject840
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	inlineObject841 *InlineObject841
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) InlineObject841(inlineObject841 InlineObject841) ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	r.inlineObject841 = &inlineObject841
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebook Invoke action copyToNotebook

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebook(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebookRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}/microsoft.graph.copyToNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject841 == nil {
		return localVarReturnValue, nil, reportError("inlineObject841 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject841
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	onenoteSectionId string
	onenoteSectionId1 string
	inlineObject842 *InlineObject842
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) InlineObject842(inlineObject842 InlineObject842) ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	r.inlineObject842 = &inlineObject842
	return r
}

func (r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) Execute() (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r)
}

/*
SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroup Invoke action copyToSectionGroup

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest
*/
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroup(ctx _context.Context, siteId string, onenoteSectionId string, onenoteSectionId1 string) ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest {
	return ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphOnenoteOperation
func (a *SitesActionsApiService) SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupExecute(r ApiSitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroupRequest) (AnyOfmicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSiteOnenoteSectionsOnenoteSectionParentSectionGroupSectionsOnenoteSectionCopyToSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}/microsoft.graph.copyToSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject842 == nil {
		return localVarReturnValue, nil, reportError("inlineObject842 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject842
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSitesSitePermissionsPermissionGrantRequest struct {
	ctx _context.Context
	ApiService *SitesActionsApiService
	siteId string
	permissionId string
	inlineObject843 *InlineObject843
}

func (r ApiSitesSitePermissionsPermissionGrantRequest) InlineObject843(inlineObject843 InlineObject843) ApiSitesSitePermissionsPermissionGrantRequest {
	r.inlineObject843 = &inlineObject843
	return r
}

func (r ApiSitesSitePermissionsPermissionGrantRequest) Execute() ([]*AnyOfmicrosoftGraphPermission, *_nethttp.Response, error) {
	return r.ApiService.SitesSitePermissionsPermissionGrantExecute(r)
}

/*
SitesSitePermissionsPermissionGrant Invoke action grant

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param siteId key: id of site
 @param permissionId key: id of permission
 @return ApiSitesSitePermissionsPermissionGrantRequest
*/
func (a *SitesActionsApiService) SitesSitePermissionsPermissionGrant(ctx _context.Context, siteId string, permissionId string) ApiSitesSitePermissionsPermissionGrantRequest {
	return ApiSitesSitePermissionsPermissionGrantRequest{
		ApiService: a,
		ctx: ctx,
		siteId: siteId,
		permissionId: permissionId,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphPermission
func (a *SitesActionsApiService) SitesSitePermissionsPermissionGrantExecute(r ApiSitesSitePermissionsPermissionGrantRequest) ([]*AnyOfmicrosoftGraphPermission, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphPermission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SitesActionsApiService.SitesSitePermissionsPermissionGrant")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{site-id}/permissions/{permission-id}/microsoft.graph.grant"
	localVarPath = strings.Replace(localVarPath, "{"+"site-id"+"}", _neturl.PathEscape(parameterToString(r.siteId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"permission-id"+"}", _neturl.PathEscape(parameterToString(r.permissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject843 == nil {
		return localVarReturnValue, nil, reportError("inlineObject843 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject843
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
