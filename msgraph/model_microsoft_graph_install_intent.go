/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphInstallIntent Possible values for the install intent chosen by the admin.
type MicrosoftGraphInstallIntent string

// List of microsoft.graph.installIntent
const (
	AVAILABLE MicrosoftGraphInstallIntent = "available"
	REQUIRED MicrosoftGraphInstallIntent = "required"
	UNINSTALL MicrosoftGraphInstallIntent = "uninstall"
	AVAILABLE_WITHOUT_ENROLLMENT MicrosoftGraphInstallIntent = "availableWithoutEnrollment"
)

// All allowed values of MicrosoftGraphInstallIntent enum
var AllowedMicrosoftGraphInstallIntentEnumValues = []MicrosoftGraphInstallIntent{
	"available",
	"required",
	"uninstall",
	"availableWithoutEnrollment",
}

func (v *MicrosoftGraphInstallIntent) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphInstallIntent(value)
	for _, existing := range AllowedMicrosoftGraphInstallIntentEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphInstallIntent", value)
}

// NewMicrosoftGraphInstallIntentFromValue returns a pointer to a valid MicrosoftGraphInstallIntent
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphInstallIntentFromValue(v string) (*MicrosoftGraphInstallIntent, error) {
	ev := MicrosoftGraphInstallIntent(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphInstallIntent: valid values are %v", v, AllowedMicrosoftGraphInstallIntentEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphInstallIntent) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphInstallIntentEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.installIntent value
func (v MicrosoftGraphInstallIntent) Ptr() *MicrosoftGraphInstallIntent {
	return &v
}

type NullableMicrosoftGraphInstallIntent struct {
	value *MicrosoftGraphInstallIntent
	isSet bool
}

func (v NullableMicrosoftGraphInstallIntent) Get() *MicrosoftGraphInstallIntent {
	return v.value
}

func (v *NullableMicrosoftGraphInstallIntent) Set(val *MicrosoftGraphInstallIntent) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphInstallIntent) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphInstallIntent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphInstallIntent(val *MicrosoftGraphInstallIntent) *NullableMicrosoftGraphInstallIntent {
	return &NullableMicrosoftGraphInstallIntent{value: val, isSet: true}
}

func (v NullableMicrosoftGraphInstallIntent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphInstallIntent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

