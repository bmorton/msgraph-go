/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// MeOutlookUserApiService MeOutlookUserApi service
type MeOutlookUserApiService service

type ApiMeDeleteOutlookRequest struct {
	ctx _context.Context
	ApiService *MeOutlookUserApiService
	ifMatch *string
}

// ETag
func (r ApiMeDeleteOutlookRequest) IfMatch(ifMatch string) ApiMeDeleteOutlookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeDeleteOutlookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeDeleteOutlookExecute(r)
}

/*
MeDeleteOutlook Delete navigation property outlook for me

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeDeleteOutlookRequest
*/
func (a *MeOutlookUserApiService) MeDeleteOutlook(ctx _context.Context) ApiMeDeleteOutlookRequest {
	return ApiMeDeleteOutlookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MeOutlookUserApiService) MeDeleteOutlookExecute(r ApiMeDeleteOutlookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOutlookUserApiService.MeDeleteOutlook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/outlook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeGetOutlookRequest struct {
	ctx _context.Context
	ApiService *MeOutlookUserApiService
	select_ *[]string
}

// Select properties to be returned
func (r ApiMeGetOutlookRequest) Select_(select_ []string) ApiMeGetOutlookRequest {
	r.select_ = &select_
	return r
}

func (r ApiMeGetOutlookRequest) Execute() (MicrosoftGraphOutlookUser, *_nethttp.Response, error) {
	return r.ApiService.MeGetOutlookExecute(r)
}

/*
MeGetOutlook Get outlook from me

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeGetOutlookRequest
*/
func (a *MeOutlookUserApiService) MeGetOutlook(ctx _context.Context) ApiMeGetOutlookRequest {
	return ApiMeGetOutlookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOutlookUser
func (a *MeOutlookUserApiService) MeGetOutlookExecute(r ApiMeGetOutlookRequest) (MicrosoftGraphOutlookUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOutlookUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOutlookUserApiService.MeGetOutlook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/outlook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOutlookCreateMasterCategoriesRequest struct {
	ctx _context.Context
	ApiService *MeOutlookUserApiService
	microsoftGraphOutlookCategory *MicrosoftGraphOutlookCategory
}

// New navigation property
func (r ApiMeOutlookCreateMasterCategoriesRequest) MicrosoftGraphOutlookCategory(microsoftGraphOutlookCategory MicrosoftGraphOutlookCategory) ApiMeOutlookCreateMasterCategoriesRequest {
	r.microsoftGraphOutlookCategory = &microsoftGraphOutlookCategory
	return r
}

func (r ApiMeOutlookCreateMasterCategoriesRequest) Execute() (MicrosoftGraphOutlookCategory, *_nethttp.Response, error) {
	return r.ApiService.MeOutlookCreateMasterCategoriesExecute(r)
}

/*
MeOutlookCreateMasterCategories Create new navigation property to masterCategories for me

A list of categories defined for the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOutlookCreateMasterCategoriesRequest
*/
func (a *MeOutlookUserApiService) MeOutlookCreateMasterCategories(ctx _context.Context) ApiMeOutlookCreateMasterCategoriesRequest {
	return ApiMeOutlookCreateMasterCategoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOutlookCategory
func (a *MeOutlookUserApiService) MeOutlookCreateMasterCategoriesExecute(r ApiMeOutlookCreateMasterCategoriesRequest) (MicrosoftGraphOutlookCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOutlookCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOutlookUserApiService.MeOutlookCreateMasterCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/outlook/masterCategories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOutlookCategory == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOutlookCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOutlookCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOutlookDeleteMasterCategoriesRequest struct {
	ctx _context.Context
	ApiService *MeOutlookUserApiService
	outlookCategoryId string
	ifMatch *string
}

// ETag
func (r ApiMeOutlookDeleteMasterCategoriesRequest) IfMatch(ifMatch string) ApiMeOutlookDeleteMasterCategoriesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOutlookDeleteMasterCategoriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOutlookDeleteMasterCategoriesExecute(r)
}

/*
MeOutlookDeleteMasterCategories Delete navigation property masterCategories for me

A list of categories defined for the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outlookCategoryId key: id of outlookCategory
 @return ApiMeOutlookDeleteMasterCategoriesRequest
*/
func (a *MeOutlookUserApiService) MeOutlookDeleteMasterCategories(ctx _context.Context, outlookCategoryId string) ApiMeOutlookDeleteMasterCategoriesRequest {
	return ApiMeOutlookDeleteMasterCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		outlookCategoryId: outlookCategoryId,
	}
}

// Execute executes the request
func (a *MeOutlookUserApiService) MeOutlookDeleteMasterCategoriesExecute(r ApiMeOutlookDeleteMasterCategoriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOutlookUserApiService.MeOutlookDeleteMasterCategories")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/outlook/masterCategories/{outlookCategory-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outlookCategory-id"+"}", _neturl.PathEscape(parameterToString(r.outlookCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOutlookGetMasterCategoriesRequest struct {
	ctx _context.Context
	ApiService *MeOutlookUserApiService
	outlookCategoryId string
	select_ *[]string
}

// Select properties to be returned
func (r ApiMeOutlookGetMasterCategoriesRequest) Select_(select_ []string) ApiMeOutlookGetMasterCategoriesRequest {
	r.select_ = &select_
	return r
}

func (r ApiMeOutlookGetMasterCategoriesRequest) Execute() (MicrosoftGraphOutlookCategory, *_nethttp.Response, error) {
	return r.ApiService.MeOutlookGetMasterCategoriesExecute(r)
}

/*
MeOutlookGetMasterCategories Get masterCategories from me

A list of categories defined for the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outlookCategoryId key: id of outlookCategory
 @return ApiMeOutlookGetMasterCategoriesRequest
*/
func (a *MeOutlookUserApiService) MeOutlookGetMasterCategories(ctx _context.Context, outlookCategoryId string) ApiMeOutlookGetMasterCategoriesRequest {
	return ApiMeOutlookGetMasterCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		outlookCategoryId: outlookCategoryId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOutlookCategory
func (a *MeOutlookUserApiService) MeOutlookGetMasterCategoriesExecute(r ApiMeOutlookGetMasterCategoriesRequest) (MicrosoftGraphOutlookCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOutlookCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOutlookUserApiService.MeOutlookGetMasterCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/outlook/masterCategories/{outlookCategory-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outlookCategory-id"+"}", _neturl.PathEscape(parameterToString(r.outlookCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOutlookListMasterCategoriesRequest struct {
	ctx _context.Context
	ApiService *MeOutlookUserApiService
	top *int32
	skip *int32
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
}

// Show only the first n items
func (r ApiMeOutlookListMasterCategoriesRequest) Top(top int32) ApiMeOutlookListMasterCategoriesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOutlookListMasterCategoriesRequest) Skip(skip int32) ApiMeOutlookListMasterCategoriesRequest {
	r.skip = &skip
	return r
}
// Filter items by property values
func (r ApiMeOutlookListMasterCategoriesRequest) Filter(filter string) ApiMeOutlookListMasterCategoriesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOutlookListMasterCategoriesRequest) Count(count bool) ApiMeOutlookListMasterCategoriesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOutlookListMasterCategoriesRequest) Orderby(orderby []string) ApiMeOutlookListMasterCategoriesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOutlookListMasterCategoriesRequest) Select_(select_ []string) ApiMeOutlookListMasterCategoriesRequest {
	r.select_ = &select_
	return r
}

func (r ApiMeOutlookListMasterCategoriesRequest) Execute() (CollectionOfOutlookCategory, *_nethttp.Response, error) {
	return r.ApiService.MeOutlookListMasterCategoriesExecute(r)
}

/*
MeOutlookListMasterCategories Get masterCategories from me

A list of categories defined for the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOutlookListMasterCategoriesRequest
*/
func (a *MeOutlookUserApiService) MeOutlookListMasterCategories(ctx _context.Context) ApiMeOutlookListMasterCategoriesRequest {
	return ApiMeOutlookListMasterCategoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfOutlookCategory
func (a *MeOutlookUserApiService) MeOutlookListMasterCategoriesExecute(r ApiMeOutlookListMasterCategoriesRequest) (CollectionOfOutlookCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOutlookCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOutlookUserApiService.MeOutlookListMasterCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/outlook/masterCategories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOutlookUpdateMasterCategoriesRequest struct {
	ctx _context.Context
	ApiService *MeOutlookUserApiService
	outlookCategoryId string
	microsoftGraphOutlookCategory *MicrosoftGraphOutlookCategory
}

// New navigation property values
func (r ApiMeOutlookUpdateMasterCategoriesRequest) MicrosoftGraphOutlookCategory(microsoftGraphOutlookCategory MicrosoftGraphOutlookCategory) ApiMeOutlookUpdateMasterCategoriesRequest {
	r.microsoftGraphOutlookCategory = &microsoftGraphOutlookCategory
	return r
}

func (r ApiMeOutlookUpdateMasterCategoriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOutlookUpdateMasterCategoriesExecute(r)
}

/*
MeOutlookUpdateMasterCategories Update the navigation property masterCategories in me

A list of categories defined for the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outlookCategoryId key: id of outlookCategory
 @return ApiMeOutlookUpdateMasterCategoriesRequest
*/
func (a *MeOutlookUserApiService) MeOutlookUpdateMasterCategories(ctx _context.Context, outlookCategoryId string) ApiMeOutlookUpdateMasterCategoriesRequest {
	return ApiMeOutlookUpdateMasterCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		outlookCategoryId: outlookCategoryId,
	}
}

// Execute executes the request
func (a *MeOutlookUserApiService) MeOutlookUpdateMasterCategoriesExecute(r ApiMeOutlookUpdateMasterCategoriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOutlookUserApiService.MeOutlookUpdateMasterCategories")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/outlook/masterCategories/{outlookCategory-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outlookCategory-id"+"}", _neturl.PathEscape(parameterToString(r.outlookCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOutlookCategory == nil {
		return nil, reportError("microsoftGraphOutlookCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOutlookCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeUpdateOutlookRequest struct {
	ctx _context.Context
	ApiService *MeOutlookUserApiService
	microsoftGraphOutlookUser *MicrosoftGraphOutlookUser
}

// New navigation property values
func (r ApiMeUpdateOutlookRequest) MicrosoftGraphOutlookUser(microsoftGraphOutlookUser MicrosoftGraphOutlookUser) ApiMeUpdateOutlookRequest {
	r.microsoftGraphOutlookUser = &microsoftGraphOutlookUser
	return r
}

func (r ApiMeUpdateOutlookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeUpdateOutlookExecute(r)
}

/*
MeUpdateOutlook Update the navigation property outlook in me

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeUpdateOutlookRequest
*/
func (a *MeOutlookUserApiService) MeUpdateOutlook(ctx _context.Context) ApiMeUpdateOutlookRequest {
	return ApiMeUpdateOutlookRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MeOutlookUserApiService) MeUpdateOutlookExecute(r ApiMeUpdateOutlookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOutlookUserApiService.MeUpdateOutlook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/outlook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOutlookUser == nil {
		return nil, reportError("microsoftGraphOutlookUser is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOutlookUser
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
