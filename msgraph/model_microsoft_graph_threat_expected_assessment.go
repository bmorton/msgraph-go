/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphThreatExpectedAssessment the model 'MicrosoftGraphThreatExpectedAssessment'
type MicrosoftGraphThreatExpectedAssessment string

// List of microsoft.graph.threatExpectedAssessment
const (
	BLOCK MicrosoftGraphThreatExpectedAssessment = "block"
	UNBLOCK MicrosoftGraphThreatExpectedAssessment = "unblock"
)

// All allowed values of MicrosoftGraphThreatExpectedAssessment enum
var AllowedMicrosoftGraphThreatExpectedAssessmentEnumValues = []MicrosoftGraphThreatExpectedAssessment{
	"block",
	"unblock",
}

func (v *MicrosoftGraphThreatExpectedAssessment) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphThreatExpectedAssessment(value)
	for _, existing := range AllowedMicrosoftGraphThreatExpectedAssessmentEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphThreatExpectedAssessment", value)
}

// NewMicrosoftGraphThreatExpectedAssessmentFromValue returns a pointer to a valid MicrosoftGraphThreatExpectedAssessment
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphThreatExpectedAssessmentFromValue(v string) (*MicrosoftGraphThreatExpectedAssessment, error) {
	ev := MicrosoftGraphThreatExpectedAssessment(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphThreatExpectedAssessment: valid values are %v", v, AllowedMicrosoftGraphThreatExpectedAssessmentEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphThreatExpectedAssessment) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphThreatExpectedAssessmentEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.threatExpectedAssessment value
func (v MicrosoftGraphThreatExpectedAssessment) Ptr() *MicrosoftGraphThreatExpectedAssessment {
	return &v
}

type NullableMicrosoftGraphThreatExpectedAssessment struct {
	value *MicrosoftGraphThreatExpectedAssessment
	isSet bool
}

func (v NullableMicrosoftGraphThreatExpectedAssessment) Get() *MicrosoftGraphThreatExpectedAssessment {
	return v.value
}

func (v *NullableMicrosoftGraphThreatExpectedAssessment) Set(val *MicrosoftGraphThreatExpectedAssessment) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphThreatExpectedAssessment) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphThreatExpectedAssessment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphThreatExpectedAssessment(val *MicrosoftGraphThreatExpectedAssessment) *NullableMicrosoftGraphThreatExpectedAssessment {
	return &NullableMicrosoftGraphThreatExpectedAssessment{value: val, isSet: true}
}

func (v NullableMicrosoftGraphThreatExpectedAssessment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphThreatExpectedAssessment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

