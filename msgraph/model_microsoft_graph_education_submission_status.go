/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphEducationSubmissionStatus the model 'MicrosoftGraphEducationSubmissionStatus'
type MicrosoftGraphEducationSubmissionStatus string

// List of microsoft.graph.educationSubmissionStatus
const (
	WORKING MicrosoftGraphEducationSubmissionStatus = "working"
	SUBMITTED MicrosoftGraphEducationSubmissionStatus = "submitted"
	RELEASED MicrosoftGraphEducationSubmissionStatus = "released"
	RETURNED MicrosoftGraphEducationSubmissionStatus = "returned"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphEducationSubmissionStatus = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphEducationSubmissionStatus enum
var AllowedMicrosoftGraphEducationSubmissionStatusEnumValues = []MicrosoftGraphEducationSubmissionStatus{
	"working",
	"submitted",
	"released",
	"returned",
	"unknownFutureValue",
}

func (v *MicrosoftGraphEducationSubmissionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphEducationSubmissionStatus(value)
	for _, existing := range AllowedMicrosoftGraphEducationSubmissionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphEducationSubmissionStatus", value)
}

// NewMicrosoftGraphEducationSubmissionStatusFromValue returns a pointer to a valid MicrosoftGraphEducationSubmissionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphEducationSubmissionStatusFromValue(v string) (*MicrosoftGraphEducationSubmissionStatus, error) {
	ev := MicrosoftGraphEducationSubmissionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphEducationSubmissionStatus: valid values are %v", v, AllowedMicrosoftGraphEducationSubmissionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphEducationSubmissionStatus) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphEducationSubmissionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.educationSubmissionStatus value
func (v MicrosoftGraphEducationSubmissionStatus) Ptr() *MicrosoftGraphEducationSubmissionStatus {
	return &v
}

type NullableMicrosoftGraphEducationSubmissionStatus struct {
	value *MicrosoftGraphEducationSubmissionStatus
	isSet bool
}

func (v NullableMicrosoftGraphEducationSubmissionStatus) Get() *MicrosoftGraphEducationSubmissionStatus {
	return v.value
}

func (v *NullableMicrosoftGraphEducationSubmissionStatus) Set(val *MicrosoftGraphEducationSubmissionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphEducationSubmissionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphEducationSubmissionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphEducationSubmissionStatus(val *MicrosoftGraphEducationSubmissionStatus) *NullableMicrosoftGraphEducationSubmissionStatus {
	return &NullableMicrosoftGraphEducationSubmissionStatus{value: val, isSet: true}
}

func (v NullableMicrosoftGraphEducationSubmissionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphEducationSubmissionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

