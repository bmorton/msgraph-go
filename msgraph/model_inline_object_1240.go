/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject1240 struct for InlineObject1240
type InlineObject1240 struct {
	NumberS AnyOfobject `json:"numberS,omitempty"`
	Trials AnyOfobject `json:"trials,omitempty"`
	ProbabilityS AnyOfobject `json:"probabilityS,omitempty"`
	Cumulative AnyOfobject `json:"cumulative,omitempty"`
}

// NewInlineObject1240 instantiates a new InlineObject1240 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1240() *InlineObject1240 {
	this := InlineObject1240{}
	return &this
}

// NewInlineObject1240WithDefaults instantiates a new InlineObject1240 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1240WithDefaults() *InlineObject1240 {
	this := InlineObject1240{}
	return &this
}

// GetNumberS returns the NumberS field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1240) GetNumberS() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.NumberS
}

// GetNumberSOk returns a tuple with the NumberS field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1240) GetNumberSOk() (*AnyOfobject, bool) {
	if o == nil || o.NumberS == nil {
		return nil, false
	}
	return &o.NumberS, true
}

// HasNumberS returns a boolean if a field has been set.
func (o *InlineObject1240) HasNumberS() bool {
	if o != nil && o.NumberS != nil {
		return true
	}

	return false
}

// SetNumberS gets a reference to the given AnyOfobject and assigns it to the NumberS field.
func (o *InlineObject1240) SetNumberS(v AnyOfobject) {
	o.NumberS = v
}

// GetTrials returns the Trials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1240) GetTrials() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Trials
}

// GetTrialsOk returns a tuple with the Trials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1240) GetTrialsOk() (*AnyOfobject, bool) {
	if o == nil || o.Trials == nil {
		return nil, false
	}
	return &o.Trials, true
}

// HasTrials returns a boolean if a field has been set.
func (o *InlineObject1240) HasTrials() bool {
	if o != nil && o.Trials != nil {
		return true
	}

	return false
}

// SetTrials gets a reference to the given AnyOfobject and assigns it to the Trials field.
func (o *InlineObject1240) SetTrials(v AnyOfobject) {
	o.Trials = v
}

// GetProbabilityS returns the ProbabilityS field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1240) GetProbabilityS() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.ProbabilityS
}

// GetProbabilitySOk returns a tuple with the ProbabilityS field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1240) GetProbabilitySOk() (*AnyOfobject, bool) {
	if o == nil || o.ProbabilityS == nil {
		return nil, false
	}
	return &o.ProbabilityS, true
}

// HasProbabilityS returns a boolean if a field has been set.
func (o *InlineObject1240) HasProbabilityS() bool {
	if o != nil && o.ProbabilityS != nil {
		return true
	}

	return false
}

// SetProbabilityS gets a reference to the given AnyOfobject and assigns it to the ProbabilityS field.
func (o *InlineObject1240) SetProbabilityS(v AnyOfobject) {
	o.ProbabilityS = v
}

// GetCumulative returns the Cumulative field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1240) GetCumulative() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Cumulative
}

// GetCumulativeOk returns a tuple with the Cumulative field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1240) GetCumulativeOk() (*AnyOfobject, bool) {
	if o == nil || o.Cumulative == nil {
		return nil, false
	}
	return &o.Cumulative, true
}

// HasCumulative returns a boolean if a field has been set.
func (o *InlineObject1240) HasCumulative() bool {
	if o != nil && o.Cumulative != nil {
		return true
	}

	return false
}

// SetCumulative gets a reference to the given AnyOfobject and assigns it to the Cumulative field.
func (o *InlineObject1240) SetCumulative(v AnyOfobject) {
	o.Cumulative = v
}

func (o InlineObject1240) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumberS != nil {
		toSerialize["numberS"] = o.NumberS
	}
	if o.Trials != nil {
		toSerialize["trials"] = o.Trials
	}
	if o.ProbabilityS != nil {
		toSerialize["probabilityS"] = o.ProbabilityS
	}
	if o.Cumulative != nil {
		toSerialize["cumulative"] = o.Cumulative
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1240 struct {
	value *InlineObject1240
	isSet bool
}

func (v NullableInlineObject1240) Get() *InlineObject1240 {
	return v.value
}

func (v *NullableInlineObject1240) Set(val *InlineObject1240) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1240) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1240) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1240(val *InlineObject1240) *NullableInlineObject1240 {
	return &NullableInlineObject1240{value: val, isSet: true}
}

func (v NullableInlineObject1240) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1240) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


