/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService DeviceManagementDeviceCompliancePolicySettingStateSummaryApi service
type DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService service

type ApiDeviceManagementCreateDeviceCompliancePolicySettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService
	microsoftGraphDeviceCompliancePolicySettingStateSummary *MicrosoftGraphDeviceCompliancePolicySettingStateSummary
}

// New navigation property
func (r ApiDeviceManagementCreateDeviceCompliancePolicySettingStateSummariesRequest) MicrosoftGraphDeviceCompliancePolicySettingStateSummary(microsoftGraphDeviceCompliancePolicySettingStateSummary MicrosoftGraphDeviceCompliancePolicySettingStateSummary) ApiDeviceManagementCreateDeviceCompliancePolicySettingStateSummariesRequest {
	r.microsoftGraphDeviceCompliancePolicySettingStateSummary = &microsoftGraphDeviceCompliancePolicySettingStateSummary
	return r
}

func (r ApiDeviceManagementCreateDeviceCompliancePolicySettingStateSummariesRequest) Execute() (MicrosoftGraphDeviceCompliancePolicySettingStateSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementCreateDeviceCompliancePolicySettingStateSummariesExecute(r)
}

/*
DeviceManagementCreateDeviceCompliancePolicySettingStateSummaries Create new navigation property to deviceCompliancePolicySettingStateSummaries for deviceManagement

The summary states of compliance policy settings for this account.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementCreateDeviceCompliancePolicySettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementCreateDeviceCompliancePolicySettingStateSummaries(ctx _context.Context) ApiDeviceManagementCreateDeviceCompliancePolicySettingStateSummariesRequest {
	return ApiDeviceManagementCreateDeviceCompliancePolicySettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCompliancePolicySettingStateSummary
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementCreateDeviceCompliancePolicySettingStateSummariesExecute(r ApiDeviceManagementCreateDeviceCompliancePolicySettingStateSummariesRequest) (MicrosoftGraphDeviceCompliancePolicySettingStateSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCompliancePolicySettingStateSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService.DeviceManagementCreateDeviceCompliancePolicySettingStateSummaries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicySettingStateSummaries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCompliancePolicySettingStateSummary == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceCompliancePolicySettingStateSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCompliancePolicySettingStateSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeleteDeviceCompliancePolicySettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService
	deviceCompliancePolicySettingStateSummaryId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeleteDeviceCompliancePolicySettingStateSummariesRequest) IfMatch(ifMatch string) ApiDeviceManagementDeleteDeviceCompliancePolicySettingStateSummariesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeleteDeviceCompliancePolicySettingStateSummariesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeleteDeviceCompliancePolicySettingStateSummariesExecute(r)
}

/*
DeviceManagementDeleteDeviceCompliancePolicySettingStateSummaries Delete navigation property deviceCompliancePolicySettingStateSummaries for deviceManagement

The summary states of compliance policy settings for this account.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicySettingStateSummaryId key: id of deviceCompliancePolicySettingStateSummary
 @return ApiDeviceManagementDeleteDeviceCompliancePolicySettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementDeleteDeviceCompliancePolicySettingStateSummaries(ctx _context.Context, deviceCompliancePolicySettingStateSummaryId string) ApiDeviceManagementDeleteDeviceCompliancePolicySettingStateSummariesRequest {
	return ApiDeviceManagementDeleteDeviceCompliancePolicySettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicySettingStateSummaryId: deviceCompliancePolicySettingStateSummaryId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementDeleteDeviceCompliancePolicySettingStateSummariesExecute(r ApiDeviceManagementDeleteDeviceCompliancePolicySettingStateSummariesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService.DeviceManagementDeleteDeviceCompliancePolicySettingStateSummaries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicySettingStateSummaries/{deviceCompliancePolicySettingStateSummary-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicySettingStateSummary-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicySettingStateSummaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesCreateDeviceComplianceSettingStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService
	deviceCompliancePolicySettingStateSummaryId string
	microsoftGraphDeviceComplianceSettingState *MicrosoftGraphDeviceComplianceSettingState
}

// New navigation property
func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesCreateDeviceComplianceSettingStatesRequest) MicrosoftGraphDeviceComplianceSettingState(microsoftGraphDeviceComplianceSettingState MicrosoftGraphDeviceComplianceSettingState) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesCreateDeviceComplianceSettingStatesRequest {
	r.microsoftGraphDeviceComplianceSettingState = &microsoftGraphDeviceComplianceSettingState
	return r
}

func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesCreateDeviceComplianceSettingStatesRequest) Execute() (MicrosoftGraphDeviceComplianceSettingState, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePolicySettingStateSummariesCreateDeviceComplianceSettingStatesExecute(r)
}

/*
DeviceManagementDeviceCompliancePolicySettingStateSummariesCreateDeviceComplianceSettingStates Create new navigation property to deviceComplianceSettingStates for deviceManagement

Not yet documented

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicySettingStateSummaryId key: id of deviceCompliancePolicySettingStateSummary
 @return ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesCreateDeviceComplianceSettingStatesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementDeviceCompliancePolicySettingStateSummariesCreateDeviceComplianceSettingStates(ctx _context.Context, deviceCompliancePolicySettingStateSummaryId string) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesCreateDeviceComplianceSettingStatesRequest {
	return ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesCreateDeviceComplianceSettingStatesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicySettingStateSummaryId: deviceCompliancePolicySettingStateSummaryId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceComplianceSettingState
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementDeviceCompliancePolicySettingStateSummariesCreateDeviceComplianceSettingStatesExecute(r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesCreateDeviceComplianceSettingStatesRequest) (MicrosoftGraphDeviceComplianceSettingState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceComplianceSettingState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService.DeviceManagementDeviceCompliancePolicySettingStateSummariesCreateDeviceComplianceSettingStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicySettingStateSummaries/{deviceCompliancePolicySettingStateSummary-id}/deviceComplianceSettingStates"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicySettingStateSummary-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicySettingStateSummaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceComplianceSettingState == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceComplianceSettingState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceComplianceSettingState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesDeleteDeviceComplianceSettingStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService
	deviceCompliancePolicySettingStateSummaryId string
	deviceComplianceSettingStateId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesDeleteDeviceComplianceSettingStatesRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesDeleteDeviceComplianceSettingStatesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesDeleteDeviceComplianceSettingStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePolicySettingStateSummariesDeleteDeviceComplianceSettingStatesExecute(r)
}

/*
DeviceManagementDeviceCompliancePolicySettingStateSummariesDeleteDeviceComplianceSettingStates Delete navigation property deviceComplianceSettingStates for deviceManagement

Not yet documented

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicySettingStateSummaryId key: id of deviceCompliancePolicySettingStateSummary
 @param deviceComplianceSettingStateId key: id of deviceComplianceSettingState
 @return ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesDeleteDeviceComplianceSettingStatesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementDeviceCompliancePolicySettingStateSummariesDeleteDeviceComplianceSettingStates(ctx _context.Context, deviceCompliancePolicySettingStateSummaryId string, deviceComplianceSettingStateId string) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesDeleteDeviceComplianceSettingStatesRequest {
	return ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesDeleteDeviceComplianceSettingStatesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicySettingStateSummaryId: deviceCompliancePolicySettingStateSummaryId,
		deviceComplianceSettingStateId: deviceComplianceSettingStateId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementDeviceCompliancePolicySettingStateSummariesDeleteDeviceComplianceSettingStatesExecute(r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesDeleteDeviceComplianceSettingStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService.DeviceManagementDeviceCompliancePolicySettingStateSummariesDeleteDeviceComplianceSettingStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicySettingStateSummaries/{deviceCompliancePolicySettingStateSummary-id}/deviceComplianceSettingStates/{deviceComplianceSettingState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicySettingStateSummary-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicySettingStateSummaryId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceSettingState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceSettingStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService
	deviceCompliancePolicySettingStateSummaryId string
	deviceComplianceSettingStateId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStatesRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStatesRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStatesRequest) Execute() (MicrosoftGraphDeviceComplianceSettingState, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStatesExecute(r)
}

/*
DeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStates Get deviceComplianceSettingStates from deviceManagement

Not yet documented

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicySettingStateSummaryId key: id of deviceCompliancePolicySettingStateSummary
 @param deviceComplianceSettingStateId key: id of deviceComplianceSettingState
 @return ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStatesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStates(ctx _context.Context, deviceCompliancePolicySettingStateSummaryId string, deviceComplianceSettingStateId string) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStatesRequest {
	return ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStatesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicySettingStateSummaryId: deviceCompliancePolicySettingStateSummaryId,
		deviceComplianceSettingStateId: deviceComplianceSettingStateId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceComplianceSettingState
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStatesExecute(r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStatesRequest) (MicrosoftGraphDeviceComplianceSettingState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceComplianceSettingState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService.DeviceManagementDeviceCompliancePolicySettingStateSummariesGetDeviceComplianceSettingStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicySettingStateSummaries/{deviceCompliancePolicySettingStateSummary-id}/deviceComplianceSettingStates/{deviceComplianceSettingState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicySettingStateSummary-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicySettingStateSummaryId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceSettingState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceSettingStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService
	deviceCompliancePolicySettingStateSummaryId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest) Top(top int32) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest) Skip(skip int32) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest) Search(search string) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest) Filter(filter string) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest) Count(count bool) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest) Orderby(orderby []string) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest) Select_(select_ []string) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest) Expand(expand []string) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest) Execute() (CollectionOfDeviceComplianceSettingState, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesExecute(r)
}

/*
DeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStates Get deviceComplianceSettingStates from deviceManagement

Not yet documented

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicySettingStateSummaryId key: id of deviceCompliancePolicySettingStateSummary
 @return ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStates(ctx _context.Context, deviceCompliancePolicySettingStateSummaryId string) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest {
	return ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicySettingStateSummaryId: deviceCompliancePolicySettingStateSummaryId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceComplianceSettingState
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesExecute(r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStatesRequest) (CollectionOfDeviceComplianceSettingState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceComplianceSettingState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService.DeviceManagementDeviceCompliancePolicySettingStateSummariesListDeviceComplianceSettingStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicySettingStateSummaries/{deviceCompliancePolicySettingStateSummary-id}/deviceComplianceSettingStates"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicySettingStateSummary-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicySettingStateSummaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesUpdateDeviceComplianceSettingStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService
	deviceCompliancePolicySettingStateSummaryId string
	deviceComplianceSettingStateId string
	microsoftGraphDeviceComplianceSettingState *MicrosoftGraphDeviceComplianceSettingState
}

// New navigation property values
func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesUpdateDeviceComplianceSettingStatesRequest) MicrosoftGraphDeviceComplianceSettingState(microsoftGraphDeviceComplianceSettingState MicrosoftGraphDeviceComplianceSettingState) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesUpdateDeviceComplianceSettingStatesRequest {
	r.microsoftGraphDeviceComplianceSettingState = &microsoftGraphDeviceComplianceSettingState
	return r
}

func (r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesUpdateDeviceComplianceSettingStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceCompliancePolicySettingStateSummariesUpdateDeviceComplianceSettingStatesExecute(r)
}

/*
DeviceManagementDeviceCompliancePolicySettingStateSummariesUpdateDeviceComplianceSettingStates Update the navigation property deviceComplianceSettingStates in deviceManagement

Not yet documented

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicySettingStateSummaryId key: id of deviceCompliancePolicySettingStateSummary
 @param deviceComplianceSettingStateId key: id of deviceComplianceSettingState
 @return ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesUpdateDeviceComplianceSettingStatesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementDeviceCompliancePolicySettingStateSummariesUpdateDeviceComplianceSettingStates(ctx _context.Context, deviceCompliancePolicySettingStateSummaryId string, deviceComplianceSettingStateId string) ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesUpdateDeviceComplianceSettingStatesRequest {
	return ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesUpdateDeviceComplianceSettingStatesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicySettingStateSummaryId: deviceCompliancePolicySettingStateSummaryId,
		deviceComplianceSettingStateId: deviceComplianceSettingStateId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementDeviceCompliancePolicySettingStateSummariesUpdateDeviceComplianceSettingStatesExecute(r ApiDeviceManagementDeviceCompliancePolicySettingStateSummariesUpdateDeviceComplianceSettingStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService.DeviceManagementDeviceCompliancePolicySettingStateSummariesUpdateDeviceComplianceSettingStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicySettingStateSummaries/{deviceCompliancePolicySettingStateSummary-id}/deviceComplianceSettingStates/{deviceComplianceSettingState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicySettingStateSummary-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicySettingStateSummaryId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceComplianceSettingState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceComplianceSettingStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceComplianceSettingState == nil {
		return nil, reportError("microsoftGraphDeviceComplianceSettingState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceComplianceSettingState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementGetDeviceCompliancePolicySettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService
	deviceCompliancePolicySettingStateSummaryId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementGetDeviceCompliancePolicySettingStateSummariesRequest) Select_(select_ []string) ApiDeviceManagementGetDeviceCompliancePolicySettingStateSummariesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementGetDeviceCompliancePolicySettingStateSummariesRequest) Expand(expand []string) ApiDeviceManagementGetDeviceCompliancePolicySettingStateSummariesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementGetDeviceCompliancePolicySettingStateSummariesRequest) Execute() (MicrosoftGraphDeviceCompliancePolicySettingStateSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementGetDeviceCompliancePolicySettingStateSummariesExecute(r)
}

/*
DeviceManagementGetDeviceCompliancePolicySettingStateSummaries Get deviceCompliancePolicySettingStateSummaries from deviceManagement

The summary states of compliance policy settings for this account.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicySettingStateSummaryId key: id of deviceCompliancePolicySettingStateSummary
 @return ApiDeviceManagementGetDeviceCompliancePolicySettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementGetDeviceCompliancePolicySettingStateSummaries(ctx _context.Context, deviceCompliancePolicySettingStateSummaryId string) ApiDeviceManagementGetDeviceCompliancePolicySettingStateSummariesRequest {
	return ApiDeviceManagementGetDeviceCompliancePolicySettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicySettingStateSummaryId: deviceCompliancePolicySettingStateSummaryId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCompliancePolicySettingStateSummary
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementGetDeviceCompliancePolicySettingStateSummariesExecute(r ApiDeviceManagementGetDeviceCompliancePolicySettingStateSummariesRequest) (MicrosoftGraphDeviceCompliancePolicySettingStateSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCompliancePolicySettingStateSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService.DeviceManagementGetDeviceCompliancePolicySettingStateSummaries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicySettingStateSummaries/{deviceCompliancePolicySettingStateSummary-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicySettingStateSummary-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicySettingStateSummaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest) Top(top int32) ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest) Skip(skip int32) ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest) Search(search string) ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest) Filter(filter string) ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest) Count(count bool) ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest) Orderby(orderby []string) ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest) Select_(select_ []string) ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest) Expand(expand []string) ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest) Execute() (CollectionOfDeviceCompliancePolicySettingStateSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementListDeviceCompliancePolicySettingStateSummariesExecute(r)
}

/*
DeviceManagementListDeviceCompliancePolicySettingStateSummaries Get deviceCompliancePolicySettingStateSummaries from deviceManagement

The summary states of compliance policy settings for this account.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementListDeviceCompliancePolicySettingStateSummaries(ctx _context.Context) ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest {
	return ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceCompliancePolicySettingStateSummary
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementListDeviceCompliancePolicySettingStateSummariesExecute(r ApiDeviceManagementListDeviceCompliancePolicySettingStateSummariesRequest) (CollectionOfDeviceCompliancePolicySettingStateSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceCompliancePolicySettingStateSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService.DeviceManagementListDeviceCompliancePolicySettingStateSummaries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicySettingStateSummaries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementUpdateDeviceCompliancePolicySettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService
	deviceCompliancePolicySettingStateSummaryId string
	microsoftGraphDeviceCompliancePolicySettingStateSummary *MicrosoftGraphDeviceCompliancePolicySettingStateSummary
}

// New navigation property values
func (r ApiDeviceManagementUpdateDeviceCompliancePolicySettingStateSummariesRequest) MicrosoftGraphDeviceCompliancePolicySettingStateSummary(microsoftGraphDeviceCompliancePolicySettingStateSummary MicrosoftGraphDeviceCompliancePolicySettingStateSummary) ApiDeviceManagementUpdateDeviceCompliancePolicySettingStateSummariesRequest {
	r.microsoftGraphDeviceCompliancePolicySettingStateSummary = &microsoftGraphDeviceCompliancePolicySettingStateSummary
	return r
}

func (r ApiDeviceManagementUpdateDeviceCompliancePolicySettingStateSummariesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementUpdateDeviceCompliancePolicySettingStateSummariesExecute(r)
}

/*
DeviceManagementUpdateDeviceCompliancePolicySettingStateSummaries Update the navigation property deviceCompliancePolicySettingStateSummaries in deviceManagement

The summary states of compliance policy settings for this account.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceCompliancePolicySettingStateSummaryId key: id of deviceCompliancePolicySettingStateSummary
 @return ApiDeviceManagementUpdateDeviceCompliancePolicySettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementUpdateDeviceCompliancePolicySettingStateSummaries(ctx _context.Context, deviceCompliancePolicySettingStateSummaryId string) ApiDeviceManagementUpdateDeviceCompliancePolicySettingStateSummariesRequest {
	return ApiDeviceManagementUpdateDeviceCompliancePolicySettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
		deviceCompliancePolicySettingStateSummaryId: deviceCompliancePolicySettingStateSummaryId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService) DeviceManagementUpdateDeviceCompliancePolicySettingStateSummariesExecute(r ApiDeviceManagementUpdateDeviceCompliancePolicySettingStateSummariesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceCompliancePolicySettingStateSummaryApiService.DeviceManagementUpdateDeviceCompliancePolicySettingStateSummaries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceCompliancePolicySettingStateSummaries/{deviceCompliancePolicySettingStateSummary-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicySettingStateSummary-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicySettingStateSummaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCompliancePolicySettingStateSummary == nil {
		return nil, reportError("microsoftGraphDeviceCompliancePolicySettingStateSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCompliancePolicySettingStateSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
