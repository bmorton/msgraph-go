/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// InlineObject1285 struct for InlineObject1285
type InlineObject1285 struct {
	Year AnyOfobject `json:"year,omitempty"`
	Month AnyOfobject `json:"month,omitempty"`
	Day AnyOfobject `json:"day,omitempty"`
}

// NewInlineObject1285 instantiates a new InlineObject1285 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1285() *InlineObject1285 {
	this := InlineObject1285{}
	return &this
}

// NewInlineObject1285WithDefaults instantiates a new InlineObject1285 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1285WithDefaults() *InlineObject1285 {
	this := InlineObject1285{}
	return &this
}

// GetYear returns the Year field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1285) GetYear() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1285) GetYearOk() (*AnyOfobject, bool) {
	if o == nil || o.Year == nil {
		return nil, false
	}
	return &o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *InlineObject1285) HasYear() bool {
	if o != nil && o.Year != nil {
		return true
	}

	return false
}

// SetYear gets a reference to the given AnyOfobject and assigns it to the Year field.
func (o *InlineObject1285) SetYear(v AnyOfobject) {
	o.Year = v
}

// GetMonth returns the Month field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1285) GetMonth() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1285) GetMonthOk() (*AnyOfobject, bool) {
	if o == nil || o.Month == nil {
		return nil, false
	}
	return &o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *InlineObject1285) HasMonth() bool {
	if o != nil && o.Month != nil {
		return true
	}

	return false
}

// SetMonth gets a reference to the given AnyOfobject and assigns it to the Month field.
func (o *InlineObject1285) SetMonth(v AnyOfobject) {
	o.Month = v
}

// GetDay returns the Day field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1285) GetDay() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Day
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1285) GetDayOk() (*AnyOfobject, bool) {
	if o == nil || o.Day == nil {
		return nil, false
	}
	return &o.Day, true
}

// HasDay returns a boolean if a field has been set.
func (o *InlineObject1285) HasDay() bool {
	if o != nil && o.Day != nil {
		return true
	}

	return false
}

// SetDay gets a reference to the given AnyOfobject and assigns it to the Day field.
func (o *InlineObject1285) SetDay(v AnyOfobject) {
	o.Day = v
}

func (o InlineObject1285) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Year != nil {
		toSerialize["year"] = o.Year
	}
	if o.Month != nil {
		toSerialize["month"] = o.Month
	}
	if o.Day != nil {
		toSerialize["day"] = o.Day
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1285 struct {
	value *InlineObject1285
	isSet bool
}

func (v NullableInlineObject1285) Get() *InlineObject1285 {
	return v.value
}

func (v *NullableInlineObject1285) Set(val *InlineObject1285) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1285) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1285) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1285(val *InlineObject1285) *NullableInlineObject1285 {
	return &NullableInlineObject1285{value: val, isSet: true}
}

func (v NullableInlineObject1285) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1285) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


