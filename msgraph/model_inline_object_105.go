/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// InlineObject105 struct for InlineObject105
type InlineObject105 struct {
	UserPrincipalName NullableString `json:"userPrincipalName,omitempty"`
	AddressableUserName NullableString `json:"addressableUserName,omitempty"`
	GroupTag NullableString `json:"groupTag,omitempty"`
	DisplayName NullableString `json:"displayName,omitempty"`
}

// NewInlineObject105 instantiates a new InlineObject105 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject105() *InlineObject105 {
	this := InlineObject105{}
	return &this
}

// NewInlineObject105WithDefaults instantiates a new InlineObject105 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject105WithDefaults() *InlineObject105 {
	this := InlineObject105{}
	return &this
}

// GetUserPrincipalName returns the UserPrincipalName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject105) GetUserPrincipalName() string {
	if o == nil || o.UserPrincipalName.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserPrincipalName.Get()
}

// GetUserPrincipalNameOk returns a tuple with the UserPrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject105) GetUserPrincipalNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserPrincipalName.Get(), o.UserPrincipalName.IsSet()
}

// HasUserPrincipalName returns a boolean if a field has been set.
func (o *InlineObject105) HasUserPrincipalName() bool {
	if o != nil && o.UserPrincipalName.IsSet() {
		return true
	}

	return false
}

// SetUserPrincipalName gets a reference to the given NullableString and assigns it to the UserPrincipalName field.
func (o *InlineObject105) SetUserPrincipalName(v string) {
	o.UserPrincipalName.Set(&v)
}
// SetUserPrincipalNameNil sets the value for UserPrincipalName to be an explicit nil
func (o *InlineObject105) SetUserPrincipalNameNil() {
	o.UserPrincipalName.Set(nil)
}

// UnsetUserPrincipalName ensures that no value is present for UserPrincipalName, not even an explicit nil
func (o *InlineObject105) UnsetUserPrincipalName() {
	o.UserPrincipalName.Unset()
}

// GetAddressableUserName returns the AddressableUserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject105) GetAddressableUserName() string {
	if o == nil || o.AddressableUserName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AddressableUserName.Get()
}

// GetAddressableUserNameOk returns a tuple with the AddressableUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject105) GetAddressableUserNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AddressableUserName.Get(), o.AddressableUserName.IsSet()
}

// HasAddressableUserName returns a boolean if a field has been set.
func (o *InlineObject105) HasAddressableUserName() bool {
	if o != nil && o.AddressableUserName.IsSet() {
		return true
	}

	return false
}

// SetAddressableUserName gets a reference to the given NullableString and assigns it to the AddressableUserName field.
func (o *InlineObject105) SetAddressableUserName(v string) {
	o.AddressableUserName.Set(&v)
}
// SetAddressableUserNameNil sets the value for AddressableUserName to be an explicit nil
func (o *InlineObject105) SetAddressableUserNameNil() {
	o.AddressableUserName.Set(nil)
}

// UnsetAddressableUserName ensures that no value is present for AddressableUserName, not even an explicit nil
func (o *InlineObject105) UnsetAddressableUserName() {
	o.AddressableUserName.Unset()
}

// GetGroupTag returns the GroupTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject105) GetGroupTag() string {
	if o == nil || o.GroupTag.Get() == nil {
		var ret string
		return ret
	}
	return *o.GroupTag.Get()
}

// GetGroupTagOk returns a tuple with the GroupTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject105) GetGroupTagOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GroupTag.Get(), o.GroupTag.IsSet()
}

// HasGroupTag returns a boolean if a field has been set.
func (o *InlineObject105) HasGroupTag() bool {
	if o != nil && o.GroupTag.IsSet() {
		return true
	}

	return false
}

// SetGroupTag gets a reference to the given NullableString and assigns it to the GroupTag field.
func (o *InlineObject105) SetGroupTag(v string) {
	o.GroupTag.Set(&v)
}
// SetGroupTagNil sets the value for GroupTag to be an explicit nil
func (o *InlineObject105) SetGroupTagNil() {
	o.GroupTag.Set(nil)
}

// UnsetGroupTag ensures that no value is present for GroupTag, not even an explicit nil
func (o *InlineObject105) UnsetGroupTag() {
	o.GroupTag.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject105) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject105) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *InlineObject105) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *InlineObject105) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *InlineObject105) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *InlineObject105) UnsetDisplayName() {
	o.DisplayName.Unset()
}

func (o InlineObject105) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserPrincipalName.IsSet() {
		toSerialize["userPrincipalName"] = o.UserPrincipalName.Get()
	}
	if o.AddressableUserName.IsSet() {
		toSerialize["addressableUserName"] = o.AddressableUserName.Get()
	}
	if o.GroupTag.IsSet() {
		toSerialize["groupTag"] = o.GroupTag.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject105 struct {
	value *InlineObject105
	isSet bool
}

func (v NullableInlineObject105) Get() *InlineObject105 {
	return v.value
}

func (v *NullableInlineObject105) Set(val *InlineObject105) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject105) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject105) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject105(val *InlineObject105) *NullableInlineObject105 {
	return &NullableInlineObject105{value: val, isSet: true}
}

func (v NullableInlineObject105) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject105) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


