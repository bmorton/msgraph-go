/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphMessageActionFlag the model 'MicrosoftGraphMessageActionFlag'
type MicrosoftGraphMessageActionFlag string

// List of microsoft.graph.messageActionFlag
const (
	ANY MicrosoftGraphMessageActionFlag = "any"
	CALL MicrosoftGraphMessageActionFlag = "call"
	DO_NOT_FORWARD MicrosoftGraphMessageActionFlag = "doNotForward"
	FOLLOW_UP MicrosoftGraphMessageActionFlag = "followUp"
	FYI MicrosoftGraphMessageActionFlag = "fyi"
	FORWARD MicrosoftGraphMessageActionFlag = "forward"
	NO_RESPONSE_NECESSARY MicrosoftGraphMessageActionFlag = "noResponseNecessary"
	READ MicrosoftGraphMessageActionFlag = "read"
	REPLY MicrosoftGraphMessageActionFlag = "reply"
	REPLY_TO_ALL MicrosoftGraphMessageActionFlag = "replyToAll"
	REVIEW MicrosoftGraphMessageActionFlag = "review"
)

// All allowed values of MicrosoftGraphMessageActionFlag enum
var AllowedMicrosoftGraphMessageActionFlagEnumValues = []MicrosoftGraphMessageActionFlag{
	"any",
	"call",
	"doNotForward",
	"followUp",
	"fyi",
	"forward",
	"noResponseNecessary",
	"read",
	"reply",
	"replyToAll",
	"review",
}

func (v *MicrosoftGraphMessageActionFlag) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphMessageActionFlag(value)
	for _, existing := range AllowedMicrosoftGraphMessageActionFlagEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphMessageActionFlag", value)
}

// NewMicrosoftGraphMessageActionFlagFromValue returns a pointer to a valid MicrosoftGraphMessageActionFlag
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphMessageActionFlagFromValue(v string) (*MicrosoftGraphMessageActionFlag, error) {
	ev := MicrosoftGraphMessageActionFlag(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphMessageActionFlag: valid values are %v", v, AllowedMicrosoftGraphMessageActionFlagEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphMessageActionFlag) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphMessageActionFlagEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.messageActionFlag value
func (v MicrosoftGraphMessageActionFlag) Ptr() *MicrosoftGraphMessageActionFlag {
	return &v
}

type NullableMicrosoftGraphMessageActionFlag struct {
	value *MicrosoftGraphMessageActionFlag
	isSet bool
}

func (v NullableMicrosoftGraphMessageActionFlag) Get() *MicrosoftGraphMessageActionFlag {
	return v.value
}

func (v *NullableMicrosoftGraphMessageActionFlag) Set(val *MicrosoftGraphMessageActionFlag) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphMessageActionFlag) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphMessageActionFlag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphMessageActionFlag(val *MicrosoftGraphMessageActionFlag) *NullableMicrosoftGraphMessageActionFlag {
	return &NullableMicrosoftGraphMessageActionFlag{value: val, isSet: true}
}

func (v NullableMicrosoftGraphMessageActionFlag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphMessageActionFlag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

