/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphEducationUserRole the model 'MicrosoftGraphEducationUserRole'
type MicrosoftGraphEducationUserRole string

// List of microsoft.graph.educationUserRole
const (
	STUDENT MicrosoftGraphEducationUserRole = "student"
	TEACHER MicrosoftGraphEducationUserRole = "teacher"
	NONE MicrosoftGraphEducationUserRole = "none"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphEducationUserRole = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphEducationUserRole enum
var AllowedMicrosoftGraphEducationUserRoleEnumValues = []MicrosoftGraphEducationUserRole{
	"student",
	"teacher",
	"none",
	"unknownFutureValue",
}

func (v *MicrosoftGraphEducationUserRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphEducationUserRole(value)
	for _, existing := range AllowedMicrosoftGraphEducationUserRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphEducationUserRole", value)
}

// NewMicrosoftGraphEducationUserRoleFromValue returns a pointer to a valid MicrosoftGraphEducationUserRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphEducationUserRoleFromValue(v string) (*MicrosoftGraphEducationUserRole, error) {
	ev := MicrosoftGraphEducationUserRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphEducationUserRole: valid values are %v", v, AllowedMicrosoftGraphEducationUserRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphEducationUserRole) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphEducationUserRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.educationUserRole value
func (v MicrosoftGraphEducationUserRole) Ptr() *MicrosoftGraphEducationUserRole {
	return &v
}

type NullableMicrosoftGraphEducationUserRole struct {
	value *MicrosoftGraphEducationUserRole
	isSet bool
}

func (v NullableMicrosoftGraphEducationUserRole) Get() *MicrosoftGraphEducationUserRole {
	return v.value
}

func (v *NullableMicrosoftGraphEducationUserRole) Set(val *MicrosoftGraphEducationUserRole) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphEducationUserRole) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphEducationUserRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphEducationUserRole(val *MicrosoftGraphEducationUserRole) *NullableMicrosoftGraphEducationUserRole {
	return &NullableMicrosoftGraphEducationUserRole{value: val, isSet: true}
}

func (v NullableMicrosoftGraphEducationUserRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphEducationUserRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

