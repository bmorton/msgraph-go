/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject1477 struct for InlineObject1477
type InlineObject1477 struct {
	Numerator AnyOfobject `json:"numerator,omitempty"`
	Denominator AnyOfobject `json:"denominator,omitempty"`
}

// NewInlineObject1477 instantiates a new InlineObject1477 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1477() *InlineObject1477 {
	this := InlineObject1477{}
	return &this
}

// NewInlineObject1477WithDefaults instantiates a new InlineObject1477 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1477WithDefaults() *InlineObject1477 {
	this := InlineObject1477{}
	return &this
}

// GetNumerator returns the Numerator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1477) GetNumerator() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Numerator
}

// GetNumeratorOk returns a tuple with the Numerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1477) GetNumeratorOk() (*AnyOfobject, bool) {
	if o == nil || o.Numerator == nil {
		return nil, false
	}
	return &o.Numerator, true
}

// HasNumerator returns a boolean if a field has been set.
func (o *InlineObject1477) HasNumerator() bool {
	if o != nil && o.Numerator != nil {
		return true
	}

	return false
}

// SetNumerator gets a reference to the given AnyOfobject and assigns it to the Numerator field.
func (o *InlineObject1477) SetNumerator(v AnyOfobject) {
	o.Numerator = v
}

// GetDenominator returns the Denominator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1477) GetDenominator() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Denominator
}

// GetDenominatorOk returns a tuple with the Denominator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1477) GetDenominatorOk() (*AnyOfobject, bool) {
	if o == nil || o.Denominator == nil {
		return nil, false
	}
	return &o.Denominator, true
}

// HasDenominator returns a boolean if a field has been set.
func (o *InlineObject1477) HasDenominator() bool {
	if o != nil && o.Denominator != nil {
		return true
	}

	return false
}

// SetDenominator gets a reference to the given AnyOfobject and assigns it to the Denominator field.
func (o *InlineObject1477) SetDenominator(v AnyOfobject) {
	o.Denominator = v
}

func (o InlineObject1477) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Numerator != nil {
		toSerialize["numerator"] = o.Numerator
	}
	if o.Denominator != nil {
		toSerialize["denominator"] = o.Denominator
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1477 struct {
	value *InlineObject1477
	isSet bool
}

func (v NullableInlineObject1477) Get() *InlineObject1477 {
	return v.value
}

func (v *NullableInlineObject1477) Set(val *InlineObject1477) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1477) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1477) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1477(val *InlineObject1477) *NullableInlineObject1477 {
	return &NullableInlineObject1477{value: val, isSet: true}
}

func (v NullableInlineObject1477) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1477) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


