/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MicrosoftGraphPersistentBrowserSessionControl struct for MicrosoftGraphPersistentBrowserSessionControl
type MicrosoftGraphPersistentBrowserSessionControl struct {
	// Specifies whether the session control is enabled.
	IsEnabled NullableBool `json:"isEnabled,omitempty"`
	// Possible values are: always, never.
	Mode AnyOfmicrosoftGraphPersistentBrowserSessionMode `json:"mode,omitempty"`
}

// NewMicrosoftGraphPersistentBrowserSessionControl instantiates a new MicrosoftGraphPersistentBrowserSessionControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphPersistentBrowserSessionControl() *MicrosoftGraphPersistentBrowserSessionControl {
	this := MicrosoftGraphPersistentBrowserSessionControl{}
	return &this
}

// NewMicrosoftGraphPersistentBrowserSessionControlWithDefaults instantiates a new MicrosoftGraphPersistentBrowserSessionControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphPersistentBrowserSessionControlWithDefaults() *MicrosoftGraphPersistentBrowserSessionControl {
	this := MicrosoftGraphPersistentBrowserSessionControl{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPersistentBrowserSessionControl) GetIsEnabled() bool {
	if o == nil || o.IsEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsEnabled.Get()
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPersistentBrowserSessionControl) GetIsEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsEnabled.Get(), o.IsEnabled.IsSet()
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *MicrosoftGraphPersistentBrowserSessionControl) HasIsEnabled() bool {
	if o != nil && o.IsEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given NullableBool and assigns it to the IsEnabled field.
func (o *MicrosoftGraphPersistentBrowserSessionControl) SetIsEnabled(v bool) {
	o.IsEnabled.Set(&v)
}
// SetIsEnabledNil sets the value for IsEnabled to be an explicit nil
func (o *MicrosoftGraphPersistentBrowserSessionControl) SetIsEnabledNil() {
	o.IsEnabled.Set(nil)
}

// UnsetIsEnabled ensures that no value is present for IsEnabled, not even an explicit nil
func (o *MicrosoftGraphPersistentBrowserSessionControl) UnsetIsEnabled() {
	o.IsEnabled.Unset()
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPersistentBrowserSessionControl) GetMode() AnyOfmicrosoftGraphPersistentBrowserSessionMode {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPersistentBrowserSessionMode
		return ret
	}
	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPersistentBrowserSessionControl) GetModeOk() (*AnyOfmicrosoftGraphPersistentBrowserSessionMode, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return &o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *MicrosoftGraphPersistentBrowserSessionControl) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given AnyOfmicrosoftGraphPersistentBrowserSessionMode and assigns it to the Mode field.
func (o *MicrosoftGraphPersistentBrowserSessionControl) SetMode(v AnyOfmicrosoftGraphPersistentBrowserSessionMode) {
	o.Mode = v
}

func (o MicrosoftGraphPersistentBrowserSessionControl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsEnabled.IsSet() {
		toSerialize["isEnabled"] = o.IsEnabled.Get()
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphPersistentBrowserSessionControl struct {
	value *MicrosoftGraphPersistentBrowserSessionControl
	isSet bool
}

func (v NullableMicrosoftGraphPersistentBrowserSessionControl) Get() *MicrosoftGraphPersistentBrowserSessionControl {
	return v.value
}

func (v *NullableMicrosoftGraphPersistentBrowserSessionControl) Set(val *MicrosoftGraphPersistentBrowserSessionControl) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPersistentBrowserSessionControl) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPersistentBrowserSessionControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPersistentBrowserSessionControl(val *MicrosoftGraphPersistentBrowserSessionControl) *NullableMicrosoftGraphPersistentBrowserSessionControl {
	return &NullableMicrosoftGraphPersistentBrowserSessionControl{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPersistentBrowserSessionControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPersistentBrowserSessionControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


