/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// EducationEducationClassApiService EducationEducationClassApi service
type EducationEducationClassApiService service

type ApiEducationClassesAssignmentsCreateCategoriesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	microsoftGraphEducationCategory *MicrosoftGraphEducationCategory
}

// New navigation property
func (r ApiEducationClassesAssignmentsCreateCategoriesRequest) MicrosoftGraphEducationCategory(microsoftGraphEducationCategory MicrosoftGraphEducationCategory) ApiEducationClassesAssignmentsCreateCategoriesRequest {
	r.microsoftGraphEducationCategory = &microsoftGraphEducationCategory
	return r
}

func (r ApiEducationClassesAssignmentsCreateCategoriesRequest) Execute() (MicrosoftGraphEducationCategory, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsCreateCategoriesExecute(r)
}

/*
EducationClassesAssignmentsCreateCategories Create new navigation property to categories for education

When set, enables users to easily find assignments of a given type.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesAssignmentsCreateCategoriesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsCreateCategories(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesAssignmentsCreateCategoriesRequest {
	return ApiEducationClassesAssignmentsCreateCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationCategory
func (a *EducationEducationClassApiService) EducationClassesAssignmentsCreateCategoriesExecute(r ApiEducationClassesAssignmentsCreateCategoriesRequest) (MicrosoftGraphEducationCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsCreateCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/categories"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationCategory == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphEducationCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsCreateResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	microsoftGraphEducationAssignmentResource *MicrosoftGraphEducationAssignmentResource
}

// New navigation property
func (r ApiEducationClassesAssignmentsCreateResourcesRequest) MicrosoftGraphEducationAssignmentResource(microsoftGraphEducationAssignmentResource MicrosoftGraphEducationAssignmentResource) ApiEducationClassesAssignmentsCreateResourcesRequest {
	r.microsoftGraphEducationAssignmentResource = &microsoftGraphEducationAssignmentResource
	return r
}

func (r ApiEducationClassesAssignmentsCreateResourcesRequest) Execute() (MicrosoftGraphEducationAssignmentResource, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsCreateResourcesExecute(r)
}

/*
EducationClassesAssignmentsCreateResources Create new navigation property to resources for education

Learning objects that are associated with this assignment.  Only teachers can modify this list. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesAssignmentsCreateResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsCreateResources(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesAssignmentsCreateResourcesRequest {
	return ApiEducationClassesAssignmentsCreateResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationAssignmentResource
func (a *EducationEducationClassApiService) EducationClassesAssignmentsCreateResourcesExecute(r ApiEducationClassesAssignmentsCreateResourcesRequest) (MicrosoftGraphEducationAssignmentResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationAssignmentResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsCreateResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationAssignmentResource == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphEducationAssignmentResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationAssignmentResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsCreateSubmissionsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	microsoftGraphEducationSubmission *MicrosoftGraphEducationSubmission
}

// New navigation property
func (r ApiEducationClassesAssignmentsCreateSubmissionsRequest) MicrosoftGraphEducationSubmission(microsoftGraphEducationSubmission MicrosoftGraphEducationSubmission) ApiEducationClassesAssignmentsCreateSubmissionsRequest {
	r.microsoftGraphEducationSubmission = &microsoftGraphEducationSubmission
	return r
}

func (r ApiEducationClassesAssignmentsCreateSubmissionsRequest) Execute() (MicrosoftGraphEducationSubmission, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsCreateSubmissionsExecute(r)
}

/*
EducationClassesAssignmentsCreateSubmissions Create new navigation property to submissions for education

Once published, there is a submission object for each student representing their work and grade.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesAssignmentsCreateSubmissionsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsCreateSubmissions(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesAssignmentsCreateSubmissionsRequest {
	return ApiEducationClassesAssignmentsCreateSubmissionsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationSubmission
func (a *EducationEducationClassApiService) EducationClassesAssignmentsCreateSubmissionsExecute(r ApiEducationClassesAssignmentsCreateSubmissionsRequest) (MicrosoftGraphEducationSubmission, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationSubmission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsCreateSubmissions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationSubmission == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphEducationSubmission is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationSubmission
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsDeleteCategoriesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationCategoryId string
	ifMatch *string
}

// ETag
func (r ApiEducationClassesAssignmentsDeleteCategoriesRequest) IfMatch(ifMatch string) ApiEducationClassesAssignmentsDeleteCategoriesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiEducationClassesAssignmentsDeleteCategoriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsDeleteCategoriesExecute(r)
}

/*
EducationClassesAssignmentsDeleteCategories Delete navigation property categories for education

When set, enables users to easily find assignments of a given type.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationCategoryId key: id of educationCategory
 @return ApiEducationClassesAssignmentsDeleteCategoriesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsDeleteCategories(ctx _context.Context, educationClassId string, educationAssignmentId string, educationCategoryId string) ApiEducationClassesAssignmentsDeleteCategoriesRequest {
	return ApiEducationClassesAssignmentsDeleteCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationCategoryId: educationCategoryId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsDeleteCategoriesExecute(r ApiEducationClassesAssignmentsDeleteCategoriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsDeleteCategories")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/categories/{educationCategory-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationCategory-id"+"}", _neturl.PathEscape(parameterToString(r.educationCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsDeleteResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationAssignmentResourceId string
	ifMatch *string
}

// ETag
func (r ApiEducationClassesAssignmentsDeleteResourcesRequest) IfMatch(ifMatch string) ApiEducationClassesAssignmentsDeleteResourcesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiEducationClassesAssignmentsDeleteResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsDeleteResourcesExecute(r)
}

/*
EducationClassesAssignmentsDeleteResources Delete navigation property resources for education

Learning objects that are associated with this assignment.  Only teachers can modify this list. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationAssignmentResourceId key: id of educationAssignmentResource
 @return ApiEducationClassesAssignmentsDeleteResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsDeleteResources(ctx _context.Context, educationClassId string, educationAssignmentId string, educationAssignmentResourceId string) ApiEducationClassesAssignmentsDeleteResourcesRequest {
	return ApiEducationClassesAssignmentsDeleteResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationAssignmentResourceId: educationAssignmentResourceId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsDeleteResourcesExecute(r ApiEducationClassesAssignmentsDeleteResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsDeleteResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/resources/{educationAssignmentResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignmentResource-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsDeleteRubricRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	ifMatch *string
}

// ETag
func (r ApiEducationClassesAssignmentsDeleteRubricRequest) IfMatch(ifMatch string) ApiEducationClassesAssignmentsDeleteRubricRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiEducationClassesAssignmentsDeleteRubricRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsDeleteRubricExecute(r)
}

/*
EducationClassesAssignmentsDeleteRubric Delete navigation property rubric for education

When set, the grading rubric attached to this assignment.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesAssignmentsDeleteRubricRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsDeleteRubric(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesAssignmentsDeleteRubricRequest {
	return ApiEducationClassesAssignmentsDeleteRubricRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsDeleteRubricExecute(r ApiEducationClassesAssignmentsDeleteRubricRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsDeleteRubric")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/rubric"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsDeleteSubmissionsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	ifMatch *string
}

// ETag
func (r ApiEducationClassesAssignmentsDeleteSubmissionsRequest) IfMatch(ifMatch string) ApiEducationClassesAssignmentsDeleteSubmissionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiEducationClassesAssignmentsDeleteSubmissionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsDeleteSubmissionsExecute(r)
}

/*
EducationClassesAssignmentsDeleteSubmissions Delete navigation property submissions for education

Once published, there is a submission object for each student representing their work and grade.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @return ApiEducationClassesAssignmentsDeleteSubmissionsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsDeleteSubmissions(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string) ApiEducationClassesAssignmentsDeleteSubmissionsRequest {
	return ApiEducationClassesAssignmentsDeleteSubmissionsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsDeleteSubmissionsExecute(r ApiEducationClassesAssignmentsDeleteSubmissionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsDeleteSubmissions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsGetCategoriesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationCategoryId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiEducationClassesAssignmentsGetCategoriesRequest) Select_(select_ []string) ApiEducationClassesAssignmentsGetCategoriesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesAssignmentsGetCategoriesRequest) Expand(expand []string) ApiEducationClassesAssignmentsGetCategoriesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesAssignmentsGetCategoriesRequest) Execute() (MicrosoftGraphEducationCategory, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsGetCategoriesExecute(r)
}

/*
EducationClassesAssignmentsGetCategories Get categories from education

When set, enables users to easily find assignments of a given type.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationCategoryId key: id of educationCategory
 @return ApiEducationClassesAssignmentsGetCategoriesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsGetCategories(ctx _context.Context, educationClassId string, educationAssignmentId string, educationCategoryId string) ApiEducationClassesAssignmentsGetCategoriesRequest {
	return ApiEducationClassesAssignmentsGetCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationCategoryId: educationCategoryId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationCategory
func (a *EducationEducationClassApiService) EducationClassesAssignmentsGetCategoriesExecute(r ApiEducationClassesAssignmentsGetCategoriesRequest) (MicrosoftGraphEducationCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsGetCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/categories/{educationCategory-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationCategory-id"+"}", _neturl.PathEscape(parameterToString(r.educationCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsGetResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationAssignmentResourceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiEducationClassesAssignmentsGetResourcesRequest) Select_(select_ []string) ApiEducationClassesAssignmentsGetResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesAssignmentsGetResourcesRequest) Expand(expand []string) ApiEducationClassesAssignmentsGetResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesAssignmentsGetResourcesRequest) Execute() (MicrosoftGraphEducationAssignmentResource, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsGetResourcesExecute(r)
}

/*
EducationClassesAssignmentsGetResources Get resources from education

Learning objects that are associated with this assignment.  Only teachers can modify this list. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationAssignmentResourceId key: id of educationAssignmentResource
 @return ApiEducationClassesAssignmentsGetResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsGetResources(ctx _context.Context, educationClassId string, educationAssignmentId string, educationAssignmentResourceId string) ApiEducationClassesAssignmentsGetResourcesRequest {
	return ApiEducationClassesAssignmentsGetResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationAssignmentResourceId: educationAssignmentResourceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationAssignmentResource
func (a *EducationEducationClassApiService) EducationClassesAssignmentsGetResourcesExecute(r ApiEducationClassesAssignmentsGetResourcesRequest) (MicrosoftGraphEducationAssignmentResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationAssignmentResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsGetResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/resources/{educationAssignmentResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignmentResource-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsGetRubricRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiEducationClassesAssignmentsGetRubricRequest) Select_(select_ []string) ApiEducationClassesAssignmentsGetRubricRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesAssignmentsGetRubricRequest) Expand(expand []string) ApiEducationClassesAssignmentsGetRubricRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesAssignmentsGetRubricRequest) Execute() (MicrosoftGraphEducationRubric, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsGetRubricExecute(r)
}

/*
EducationClassesAssignmentsGetRubric Get rubric from education

When set, the grading rubric attached to this assignment.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesAssignmentsGetRubricRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsGetRubric(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesAssignmentsGetRubricRequest {
	return ApiEducationClassesAssignmentsGetRubricRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationRubric
func (a *EducationEducationClassApiService) EducationClassesAssignmentsGetRubricExecute(r ApiEducationClassesAssignmentsGetRubricRequest) (MicrosoftGraphEducationRubric, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationRubric
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsGetRubric")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/rubric"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsGetSubmissionsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiEducationClassesAssignmentsGetSubmissionsRequest) Select_(select_ []string) ApiEducationClassesAssignmentsGetSubmissionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesAssignmentsGetSubmissionsRequest) Expand(expand []string) ApiEducationClassesAssignmentsGetSubmissionsRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesAssignmentsGetSubmissionsRequest) Execute() (MicrosoftGraphEducationSubmission, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsGetSubmissionsExecute(r)
}

/*
EducationClassesAssignmentsGetSubmissions Get submissions from education

Once published, there is a submission object for each student representing their work and grade.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @return ApiEducationClassesAssignmentsGetSubmissionsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsGetSubmissions(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string) ApiEducationClassesAssignmentsGetSubmissionsRequest {
	return ApiEducationClassesAssignmentsGetSubmissionsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationSubmission
func (a *EducationEducationClassApiService) EducationClassesAssignmentsGetSubmissionsExecute(r ApiEducationClassesAssignmentsGetSubmissionsRequest) (MicrosoftGraphEducationSubmission, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationSubmission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsGetSubmissions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsListCategoriesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiEducationClassesAssignmentsListCategoriesRequest) Top(top int32) ApiEducationClassesAssignmentsListCategoriesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesAssignmentsListCategoriesRequest) Skip(skip int32) ApiEducationClassesAssignmentsListCategoriesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesAssignmentsListCategoriesRequest) Search(search string) ApiEducationClassesAssignmentsListCategoriesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesAssignmentsListCategoriesRequest) Filter(filter string) ApiEducationClassesAssignmentsListCategoriesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesAssignmentsListCategoriesRequest) Count(count bool) ApiEducationClassesAssignmentsListCategoriesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesAssignmentsListCategoriesRequest) Orderby(orderby []string) ApiEducationClassesAssignmentsListCategoriesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiEducationClassesAssignmentsListCategoriesRequest) Select_(select_ []string) ApiEducationClassesAssignmentsListCategoriesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesAssignmentsListCategoriesRequest) Expand(expand []string) ApiEducationClassesAssignmentsListCategoriesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesAssignmentsListCategoriesRequest) Execute() (CollectionOfEducationCategory, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsListCategoriesExecute(r)
}

/*
EducationClassesAssignmentsListCategories Get categories from education

When set, enables users to easily find assignments of a given type.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesAssignmentsListCategoriesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsListCategories(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesAssignmentsListCategoriesRequest {
	return ApiEducationClassesAssignmentsListCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
//  @return CollectionOfEducationCategory
func (a *EducationEducationClassApiService) EducationClassesAssignmentsListCategoriesExecute(r ApiEducationClassesAssignmentsListCategoriesRequest) (CollectionOfEducationCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfEducationCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsListCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/categories"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsListResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiEducationClassesAssignmentsListResourcesRequest) Top(top int32) ApiEducationClassesAssignmentsListResourcesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesAssignmentsListResourcesRequest) Skip(skip int32) ApiEducationClassesAssignmentsListResourcesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesAssignmentsListResourcesRequest) Search(search string) ApiEducationClassesAssignmentsListResourcesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesAssignmentsListResourcesRequest) Filter(filter string) ApiEducationClassesAssignmentsListResourcesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesAssignmentsListResourcesRequest) Count(count bool) ApiEducationClassesAssignmentsListResourcesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesAssignmentsListResourcesRequest) Orderby(orderby []string) ApiEducationClassesAssignmentsListResourcesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiEducationClassesAssignmentsListResourcesRequest) Select_(select_ []string) ApiEducationClassesAssignmentsListResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesAssignmentsListResourcesRequest) Expand(expand []string) ApiEducationClassesAssignmentsListResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesAssignmentsListResourcesRequest) Execute() (CollectionOfEducationAssignmentResource, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsListResourcesExecute(r)
}

/*
EducationClassesAssignmentsListResources Get resources from education

Learning objects that are associated with this assignment.  Only teachers can modify this list. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesAssignmentsListResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsListResources(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesAssignmentsListResourcesRequest {
	return ApiEducationClassesAssignmentsListResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
//  @return CollectionOfEducationAssignmentResource
func (a *EducationEducationClassApiService) EducationClassesAssignmentsListResourcesExecute(r ApiEducationClassesAssignmentsListResourcesRequest) (CollectionOfEducationAssignmentResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfEducationAssignmentResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsListResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsListSubmissionsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiEducationClassesAssignmentsListSubmissionsRequest) Top(top int32) ApiEducationClassesAssignmentsListSubmissionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesAssignmentsListSubmissionsRequest) Skip(skip int32) ApiEducationClassesAssignmentsListSubmissionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesAssignmentsListSubmissionsRequest) Search(search string) ApiEducationClassesAssignmentsListSubmissionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesAssignmentsListSubmissionsRequest) Filter(filter string) ApiEducationClassesAssignmentsListSubmissionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesAssignmentsListSubmissionsRequest) Count(count bool) ApiEducationClassesAssignmentsListSubmissionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesAssignmentsListSubmissionsRequest) Orderby(orderby []string) ApiEducationClassesAssignmentsListSubmissionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiEducationClassesAssignmentsListSubmissionsRequest) Select_(select_ []string) ApiEducationClassesAssignmentsListSubmissionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesAssignmentsListSubmissionsRequest) Expand(expand []string) ApiEducationClassesAssignmentsListSubmissionsRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesAssignmentsListSubmissionsRequest) Execute() (CollectionOfEducationSubmission, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsListSubmissionsExecute(r)
}

/*
EducationClassesAssignmentsListSubmissions Get submissions from education

Once published, there is a submission object for each student representing their work and grade.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesAssignmentsListSubmissionsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsListSubmissions(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesAssignmentsListSubmissionsRequest {
	return ApiEducationClassesAssignmentsListSubmissionsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
//  @return CollectionOfEducationSubmission
func (a *EducationEducationClassApiService) EducationClassesAssignmentsListSubmissionsExecute(r ApiEducationClassesAssignmentsListSubmissionsRequest) (CollectionOfEducationSubmission, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfEducationSubmission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsListSubmissions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsCreateOutcomesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	microsoftGraphEducationOutcome *MicrosoftGraphEducationOutcome
}

// New navigation property
func (r ApiEducationClassesAssignmentsSubmissionsCreateOutcomesRequest) MicrosoftGraphEducationOutcome(microsoftGraphEducationOutcome MicrosoftGraphEducationOutcome) ApiEducationClassesAssignmentsSubmissionsCreateOutcomesRequest {
	r.microsoftGraphEducationOutcome = &microsoftGraphEducationOutcome
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsCreateOutcomesRequest) Execute() (MicrosoftGraphEducationOutcome, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsCreateOutcomesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsCreateOutcomes Create new navigation property to outcomes for education

Read-Write. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @return ApiEducationClassesAssignmentsSubmissionsCreateOutcomesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsCreateOutcomes(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string) ApiEducationClassesAssignmentsSubmissionsCreateOutcomesRequest {
	return ApiEducationClassesAssignmentsSubmissionsCreateOutcomesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationOutcome
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsCreateOutcomesExecute(r ApiEducationClassesAssignmentsSubmissionsCreateOutcomesRequest) (MicrosoftGraphEducationOutcome, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationOutcome
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsCreateOutcomes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/outcomes"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationOutcome == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphEducationOutcome is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationOutcome
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsCreateResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	microsoftGraphEducationSubmissionResource *MicrosoftGraphEducationSubmissionResource
}

// New navigation property
func (r ApiEducationClassesAssignmentsSubmissionsCreateResourcesRequest) MicrosoftGraphEducationSubmissionResource(microsoftGraphEducationSubmissionResource MicrosoftGraphEducationSubmissionResource) ApiEducationClassesAssignmentsSubmissionsCreateResourcesRequest {
	r.microsoftGraphEducationSubmissionResource = &microsoftGraphEducationSubmissionResource
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsCreateResourcesRequest) Execute() (MicrosoftGraphEducationSubmissionResource, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsCreateResourcesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsCreateResources Create new navigation property to resources for education

Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @return ApiEducationClassesAssignmentsSubmissionsCreateResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsCreateResources(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string) ApiEducationClassesAssignmentsSubmissionsCreateResourcesRequest {
	return ApiEducationClassesAssignmentsSubmissionsCreateResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationSubmissionResource
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsCreateResourcesExecute(r ApiEducationClassesAssignmentsSubmissionsCreateResourcesRequest) (MicrosoftGraphEducationSubmissionResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationSubmissionResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsCreateResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationSubmissionResource == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphEducationSubmissionResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationSubmissionResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsCreateSubmittedResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	microsoftGraphEducationSubmissionResource *MicrosoftGraphEducationSubmissionResource
}

// New navigation property
func (r ApiEducationClassesAssignmentsSubmissionsCreateSubmittedResourcesRequest) MicrosoftGraphEducationSubmissionResource(microsoftGraphEducationSubmissionResource MicrosoftGraphEducationSubmissionResource) ApiEducationClassesAssignmentsSubmissionsCreateSubmittedResourcesRequest {
	r.microsoftGraphEducationSubmissionResource = &microsoftGraphEducationSubmissionResource
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsCreateSubmittedResourcesRequest) Execute() (MicrosoftGraphEducationSubmissionResource, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsCreateSubmittedResourcesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsCreateSubmittedResources Create new navigation property to submittedResources for education

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @return ApiEducationClassesAssignmentsSubmissionsCreateSubmittedResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsCreateSubmittedResources(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string) ApiEducationClassesAssignmentsSubmissionsCreateSubmittedResourcesRequest {
	return ApiEducationClassesAssignmentsSubmissionsCreateSubmittedResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationSubmissionResource
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsCreateSubmittedResourcesExecute(r ApiEducationClassesAssignmentsSubmissionsCreateSubmittedResourcesRequest) (MicrosoftGraphEducationSubmissionResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationSubmissionResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsCreateSubmittedResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/submittedResources"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationSubmissionResource == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphEducationSubmissionResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationSubmissionResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsDeleteOutcomesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	educationOutcomeId string
	ifMatch *string
}

// ETag
func (r ApiEducationClassesAssignmentsSubmissionsDeleteOutcomesRequest) IfMatch(ifMatch string) ApiEducationClassesAssignmentsSubmissionsDeleteOutcomesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsDeleteOutcomesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsDeleteOutcomesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsDeleteOutcomes Delete navigation property outcomes for education

Read-Write. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @param educationOutcomeId key: id of educationOutcome
 @return ApiEducationClassesAssignmentsSubmissionsDeleteOutcomesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsDeleteOutcomes(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string, educationOutcomeId string) ApiEducationClassesAssignmentsSubmissionsDeleteOutcomesRequest {
	return ApiEducationClassesAssignmentsSubmissionsDeleteOutcomesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
		educationOutcomeId: educationOutcomeId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsDeleteOutcomesExecute(r ApiEducationClassesAssignmentsSubmissionsDeleteOutcomesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsDeleteOutcomes")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/outcomes/{educationOutcome-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationOutcome-id"+"}", _neturl.PathEscape(parameterToString(r.educationOutcomeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsDeleteResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	educationSubmissionResourceId string
	ifMatch *string
}

// ETag
func (r ApiEducationClassesAssignmentsSubmissionsDeleteResourcesRequest) IfMatch(ifMatch string) ApiEducationClassesAssignmentsSubmissionsDeleteResourcesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsDeleteResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsDeleteResourcesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsDeleteResources Delete navigation property resources for education

Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @param educationSubmissionResourceId key: id of educationSubmissionResource
 @return ApiEducationClassesAssignmentsSubmissionsDeleteResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsDeleteResources(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string, educationSubmissionResourceId string) ApiEducationClassesAssignmentsSubmissionsDeleteResourcesRequest {
	return ApiEducationClassesAssignmentsSubmissionsDeleteResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
		educationSubmissionResourceId: educationSubmissionResourceId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsDeleteResourcesExecute(r ApiEducationClassesAssignmentsSubmissionsDeleteResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsDeleteResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/resources/{educationSubmissionResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmissionResource-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsDeleteSubmittedResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	educationSubmissionResourceId string
	ifMatch *string
}

// ETag
func (r ApiEducationClassesAssignmentsSubmissionsDeleteSubmittedResourcesRequest) IfMatch(ifMatch string) ApiEducationClassesAssignmentsSubmissionsDeleteSubmittedResourcesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsDeleteSubmittedResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsDeleteSubmittedResourcesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsDeleteSubmittedResources Delete navigation property submittedResources for education

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @param educationSubmissionResourceId key: id of educationSubmissionResource
 @return ApiEducationClassesAssignmentsSubmissionsDeleteSubmittedResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsDeleteSubmittedResources(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string, educationSubmissionResourceId string) ApiEducationClassesAssignmentsSubmissionsDeleteSubmittedResourcesRequest {
	return ApiEducationClassesAssignmentsSubmissionsDeleteSubmittedResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
		educationSubmissionResourceId: educationSubmissionResourceId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsDeleteSubmittedResourcesExecute(r ApiEducationClassesAssignmentsSubmissionsDeleteSubmittedResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsDeleteSubmittedResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/submittedResources/{educationSubmissionResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmissionResource-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsGetOutcomesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	educationOutcomeId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiEducationClassesAssignmentsSubmissionsGetOutcomesRequest) Select_(select_ []string) ApiEducationClassesAssignmentsSubmissionsGetOutcomesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesAssignmentsSubmissionsGetOutcomesRequest) Expand(expand []string) ApiEducationClassesAssignmentsSubmissionsGetOutcomesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsGetOutcomesRequest) Execute() (MicrosoftGraphEducationOutcome, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsGetOutcomesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsGetOutcomes Get outcomes from education

Read-Write. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @param educationOutcomeId key: id of educationOutcome
 @return ApiEducationClassesAssignmentsSubmissionsGetOutcomesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsGetOutcomes(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string, educationOutcomeId string) ApiEducationClassesAssignmentsSubmissionsGetOutcomesRequest {
	return ApiEducationClassesAssignmentsSubmissionsGetOutcomesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
		educationOutcomeId: educationOutcomeId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationOutcome
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsGetOutcomesExecute(r ApiEducationClassesAssignmentsSubmissionsGetOutcomesRequest) (MicrosoftGraphEducationOutcome, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationOutcome
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsGetOutcomes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/outcomes/{educationOutcome-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationOutcome-id"+"}", _neturl.PathEscape(parameterToString(r.educationOutcomeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsGetResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	educationSubmissionResourceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiEducationClassesAssignmentsSubmissionsGetResourcesRequest) Select_(select_ []string) ApiEducationClassesAssignmentsSubmissionsGetResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesAssignmentsSubmissionsGetResourcesRequest) Expand(expand []string) ApiEducationClassesAssignmentsSubmissionsGetResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsGetResourcesRequest) Execute() (MicrosoftGraphEducationSubmissionResource, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsGetResourcesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsGetResources Get resources from education

Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @param educationSubmissionResourceId key: id of educationSubmissionResource
 @return ApiEducationClassesAssignmentsSubmissionsGetResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsGetResources(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string, educationSubmissionResourceId string) ApiEducationClassesAssignmentsSubmissionsGetResourcesRequest {
	return ApiEducationClassesAssignmentsSubmissionsGetResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
		educationSubmissionResourceId: educationSubmissionResourceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationSubmissionResource
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsGetResourcesExecute(r ApiEducationClassesAssignmentsSubmissionsGetResourcesRequest) (MicrosoftGraphEducationSubmissionResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationSubmissionResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsGetResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/resources/{educationSubmissionResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmissionResource-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsGetSubmittedResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	educationSubmissionResourceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiEducationClassesAssignmentsSubmissionsGetSubmittedResourcesRequest) Select_(select_ []string) ApiEducationClassesAssignmentsSubmissionsGetSubmittedResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesAssignmentsSubmissionsGetSubmittedResourcesRequest) Expand(expand []string) ApiEducationClassesAssignmentsSubmissionsGetSubmittedResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsGetSubmittedResourcesRequest) Execute() (MicrosoftGraphEducationSubmissionResource, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsGetSubmittedResourcesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsGetSubmittedResources Get submittedResources from education

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @param educationSubmissionResourceId key: id of educationSubmissionResource
 @return ApiEducationClassesAssignmentsSubmissionsGetSubmittedResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsGetSubmittedResources(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string, educationSubmissionResourceId string) ApiEducationClassesAssignmentsSubmissionsGetSubmittedResourcesRequest {
	return ApiEducationClassesAssignmentsSubmissionsGetSubmittedResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
		educationSubmissionResourceId: educationSubmissionResourceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationSubmissionResource
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsGetSubmittedResourcesExecute(r ApiEducationClassesAssignmentsSubmissionsGetSubmittedResourcesRequest) (MicrosoftGraphEducationSubmissionResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationSubmissionResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsGetSubmittedResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/submittedResources/{educationSubmissionResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmissionResource-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest) Top(top int32) ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest) Skip(skip int32) ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest) Search(search string) ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest) Filter(filter string) ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest) Count(count bool) ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest) Orderby(orderby []string) ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest) Select_(select_ []string) ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest) Expand(expand []string) ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest) Execute() (CollectionOfEducationOutcome, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsListOutcomesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsListOutcomes Get outcomes from education

Read-Write. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @return ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsListOutcomes(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string) ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest {
	return ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
	}
}

// Execute executes the request
//  @return CollectionOfEducationOutcome
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsListOutcomesExecute(r ApiEducationClassesAssignmentsSubmissionsListOutcomesRequest) (CollectionOfEducationOutcome, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfEducationOutcome
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsListOutcomes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/outcomes"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsListResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiEducationClassesAssignmentsSubmissionsListResourcesRequest) Top(top int32) ApiEducationClassesAssignmentsSubmissionsListResourcesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesAssignmentsSubmissionsListResourcesRequest) Skip(skip int32) ApiEducationClassesAssignmentsSubmissionsListResourcesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesAssignmentsSubmissionsListResourcesRequest) Search(search string) ApiEducationClassesAssignmentsSubmissionsListResourcesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesAssignmentsSubmissionsListResourcesRequest) Filter(filter string) ApiEducationClassesAssignmentsSubmissionsListResourcesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesAssignmentsSubmissionsListResourcesRequest) Count(count bool) ApiEducationClassesAssignmentsSubmissionsListResourcesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesAssignmentsSubmissionsListResourcesRequest) Orderby(orderby []string) ApiEducationClassesAssignmentsSubmissionsListResourcesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiEducationClassesAssignmentsSubmissionsListResourcesRequest) Select_(select_ []string) ApiEducationClassesAssignmentsSubmissionsListResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesAssignmentsSubmissionsListResourcesRequest) Expand(expand []string) ApiEducationClassesAssignmentsSubmissionsListResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsListResourcesRequest) Execute() (CollectionOfEducationSubmissionResource, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsListResourcesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsListResources Get resources from education

Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @return ApiEducationClassesAssignmentsSubmissionsListResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsListResources(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string) ApiEducationClassesAssignmentsSubmissionsListResourcesRequest {
	return ApiEducationClassesAssignmentsSubmissionsListResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
	}
}

// Execute executes the request
//  @return CollectionOfEducationSubmissionResource
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsListResourcesExecute(r ApiEducationClassesAssignmentsSubmissionsListResourcesRequest) (CollectionOfEducationSubmissionResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfEducationSubmissionResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsListResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest) Top(top int32) ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest) Skip(skip int32) ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest) Search(search string) ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest) Filter(filter string) ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest) Count(count bool) ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest) Orderby(orderby []string) ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest) Select_(select_ []string) ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest) Expand(expand []string) ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest) Execute() (CollectionOfEducationSubmissionResource, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsListSubmittedResourcesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsListSubmittedResources Get submittedResources from education

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @return ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsListSubmittedResources(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string) ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest {
	return ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
	}
}

// Execute executes the request
//  @return CollectionOfEducationSubmissionResource
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsListSubmittedResourcesExecute(r ApiEducationClassesAssignmentsSubmissionsListSubmittedResourcesRequest) (CollectionOfEducationSubmissionResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfEducationSubmissionResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsListSubmittedResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/submittedResources"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsUpdateOutcomesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	educationOutcomeId string
	microsoftGraphEducationOutcome *MicrosoftGraphEducationOutcome
}

// New navigation property values
func (r ApiEducationClassesAssignmentsSubmissionsUpdateOutcomesRequest) MicrosoftGraphEducationOutcome(microsoftGraphEducationOutcome MicrosoftGraphEducationOutcome) ApiEducationClassesAssignmentsSubmissionsUpdateOutcomesRequest {
	r.microsoftGraphEducationOutcome = &microsoftGraphEducationOutcome
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsUpdateOutcomesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsUpdateOutcomesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsUpdateOutcomes Update the navigation property outcomes in education

Read-Write. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @param educationOutcomeId key: id of educationOutcome
 @return ApiEducationClassesAssignmentsSubmissionsUpdateOutcomesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsUpdateOutcomes(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string, educationOutcomeId string) ApiEducationClassesAssignmentsSubmissionsUpdateOutcomesRequest {
	return ApiEducationClassesAssignmentsSubmissionsUpdateOutcomesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
		educationOutcomeId: educationOutcomeId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsUpdateOutcomesExecute(r ApiEducationClassesAssignmentsSubmissionsUpdateOutcomesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsUpdateOutcomes")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/outcomes/{educationOutcome-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationOutcome-id"+"}", _neturl.PathEscape(parameterToString(r.educationOutcomeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationOutcome == nil {
		return nil, reportError("microsoftGraphEducationOutcome is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationOutcome
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsUpdateResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	educationSubmissionResourceId string
	microsoftGraphEducationSubmissionResource *MicrosoftGraphEducationSubmissionResource
}

// New navigation property values
func (r ApiEducationClassesAssignmentsSubmissionsUpdateResourcesRequest) MicrosoftGraphEducationSubmissionResource(microsoftGraphEducationSubmissionResource MicrosoftGraphEducationSubmissionResource) ApiEducationClassesAssignmentsSubmissionsUpdateResourcesRequest {
	r.microsoftGraphEducationSubmissionResource = &microsoftGraphEducationSubmissionResource
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsUpdateResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsUpdateResourcesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsUpdateResources Update the navigation property resources in education

Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @param educationSubmissionResourceId key: id of educationSubmissionResource
 @return ApiEducationClassesAssignmentsSubmissionsUpdateResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsUpdateResources(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string, educationSubmissionResourceId string) ApiEducationClassesAssignmentsSubmissionsUpdateResourcesRequest {
	return ApiEducationClassesAssignmentsSubmissionsUpdateResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
		educationSubmissionResourceId: educationSubmissionResourceId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsUpdateResourcesExecute(r ApiEducationClassesAssignmentsSubmissionsUpdateResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsUpdateResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/resources/{educationSubmissionResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmissionResource-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationSubmissionResource == nil {
		return nil, reportError("microsoftGraphEducationSubmissionResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationSubmissionResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsSubmissionsUpdateSubmittedResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	educationSubmissionResourceId string
	microsoftGraphEducationSubmissionResource *MicrosoftGraphEducationSubmissionResource
}

// New navigation property values
func (r ApiEducationClassesAssignmentsSubmissionsUpdateSubmittedResourcesRequest) MicrosoftGraphEducationSubmissionResource(microsoftGraphEducationSubmissionResource MicrosoftGraphEducationSubmissionResource) ApiEducationClassesAssignmentsSubmissionsUpdateSubmittedResourcesRequest {
	r.microsoftGraphEducationSubmissionResource = &microsoftGraphEducationSubmissionResource
	return r
}

func (r ApiEducationClassesAssignmentsSubmissionsUpdateSubmittedResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsSubmissionsUpdateSubmittedResourcesExecute(r)
}

/*
EducationClassesAssignmentsSubmissionsUpdateSubmittedResources Update the navigation property submittedResources in education

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @param educationSubmissionResourceId key: id of educationSubmissionResource
 @return ApiEducationClassesAssignmentsSubmissionsUpdateSubmittedResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsUpdateSubmittedResources(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string, educationSubmissionResourceId string) ApiEducationClassesAssignmentsSubmissionsUpdateSubmittedResourcesRequest {
	return ApiEducationClassesAssignmentsSubmissionsUpdateSubmittedResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
		educationSubmissionResourceId: educationSubmissionResourceId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsSubmissionsUpdateSubmittedResourcesExecute(r ApiEducationClassesAssignmentsSubmissionsUpdateSubmittedResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsSubmissionsUpdateSubmittedResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/submittedResources/{educationSubmissionResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmissionResource-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationSubmissionResource == nil {
		return nil, reportError("microsoftGraphEducationSubmissionResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationSubmissionResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsUpdateCategoriesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationCategoryId string
	microsoftGraphEducationCategory *MicrosoftGraphEducationCategory
}

// New navigation property values
func (r ApiEducationClassesAssignmentsUpdateCategoriesRequest) MicrosoftGraphEducationCategory(microsoftGraphEducationCategory MicrosoftGraphEducationCategory) ApiEducationClassesAssignmentsUpdateCategoriesRequest {
	r.microsoftGraphEducationCategory = &microsoftGraphEducationCategory
	return r
}

func (r ApiEducationClassesAssignmentsUpdateCategoriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsUpdateCategoriesExecute(r)
}

/*
EducationClassesAssignmentsUpdateCategories Update the navigation property categories in education

When set, enables users to easily find assignments of a given type.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationCategoryId key: id of educationCategory
 @return ApiEducationClassesAssignmentsUpdateCategoriesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsUpdateCategories(ctx _context.Context, educationClassId string, educationAssignmentId string, educationCategoryId string) ApiEducationClassesAssignmentsUpdateCategoriesRequest {
	return ApiEducationClassesAssignmentsUpdateCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationCategoryId: educationCategoryId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsUpdateCategoriesExecute(r ApiEducationClassesAssignmentsUpdateCategoriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsUpdateCategories")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/categories/{educationCategory-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationCategory-id"+"}", _neturl.PathEscape(parameterToString(r.educationCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationCategory == nil {
		return nil, reportError("microsoftGraphEducationCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsUpdateResourcesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationAssignmentResourceId string
	microsoftGraphEducationAssignmentResource *MicrosoftGraphEducationAssignmentResource
}

// New navigation property values
func (r ApiEducationClassesAssignmentsUpdateResourcesRequest) MicrosoftGraphEducationAssignmentResource(microsoftGraphEducationAssignmentResource MicrosoftGraphEducationAssignmentResource) ApiEducationClassesAssignmentsUpdateResourcesRequest {
	r.microsoftGraphEducationAssignmentResource = &microsoftGraphEducationAssignmentResource
	return r
}

func (r ApiEducationClassesAssignmentsUpdateResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsUpdateResourcesExecute(r)
}

/*
EducationClassesAssignmentsUpdateResources Update the navigation property resources in education

Learning objects that are associated with this assignment.  Only teachers can modify this list. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationAssignmentResourceId key: id of educationAssignmentResource
 @return ApiEducationClassesAssignmentsUpdateResourcesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsUpdateResources(ctx _context.Context, educationClassId string, educationAssignmentId string, educationAssignmentResourceId string) ApiEducationClassesAssignmentsUpdateResourcesRequest {
	return ApiEducationClassesAssignmentsUpdateResourcesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationAssignmentResourceId: educationAssignmentResourceId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsUpdateResourcesExecute(r ApiEducationClassesAssignmentsUpdateResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsUpdateResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/resources/{educationAssignmentResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignmentResource-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationAssignmentResource == nil {
		return nil, reportError("microsoftGraphEducationAssignmentResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationAssignmentResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsUpdateRubricRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	microsoftGraphEducationRubric *MicrosoftGraphEducationRubric
}

// New navigation property values
func (r ApiEducationClassesAssignmentsUpdateRubricRequest) MicrosoftGraphEducationRubric(microsoftGraphEducationRubric MicrosoftGraphEducationRubric) ApiEducationClassesAssignmentsUpdateRubricRequest {
	r.microsoftGraphEducationRubric = &microsoftGraphEducationRubric
	return r
}

func (r ApiEducationClassesAssignmentsUpdateRubricRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsUpdateRubricExecute(r)
}

/*
EducationClassesAssignmentsUpdateRubric Update the navigation property rubric in education

When set, the grading rubric attached to this assignment.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesAssignmentsUpdateRubricRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsUpdateRubric(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesAssignmentsUpdateRubricRequest {
	return ApiEducationClassesAssignmentsUpdateRubricRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsUpdateRubricExecute(r ApiEducationClassesAssignmentsUpdateRubricRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsUpdateRubric")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/rubric"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationRubric == nil {
		return nil, reportError("microsoftGraphEducationRubric is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationRubric
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesAssignmentsUpdateSubmissionsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
	microsoftGraphEducationSubmission *MicrosoftGraphEducationSubmission
}

// New navigation property values
func (r ApiEducationClassesAssignmentsUpdateSubmissionsRequest) MicrosoftGraphEducationSubmission(microsoftGraphEducationSubmission MicrosoftGraphEducationSubmission) ApiEducationClassesAssignmentsUpdateSubmissionsRequest {
	r.microsoftGraphEducationSubmission = &microsoftGraphEducationSubmission
	return r
}

func (r ApiEducationClassesAssignmentsUpdateSubmissionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesAssignmentsUpdateSubmissionsExecute(r)
}

/*
EducationClassesAssignmentsUpdateSubmissions Update the navigation property submissions in education

Once published, there is a submission object for each student representing their work and grade.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @return ApiEducationClassesAssignmentsUpdateSubmissionsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesAssignmentsUpdateSubmissions(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string) ApiEducationClassesAssignmentsUpdateSubmissionsRequest {
	return ApiEducationClassesAssignmentsUpdateSubmissionsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesAssignmentsUpdateSubmissionsExecute(r ApiEducationClassesAssignmentsUpdateSubmissionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesAssignmentsUpdateSubmissions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationSubmission == nil {
		return nil, reportError("microsoftGraphEducationSubmission is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationSubmission
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesCreateAssignmentCategoriesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	microsoftGraphEducationCategory *MicrosoftGraphEducationCategory
}

// New navigation property
func (r ApiEducationClassesCreateAssignmentCategoriesRequest) MicrosoftGraphEducationCategory(microsoftGraphEducationCategory MicrosoftGraphEducationCategory) ApiEducationClassesCreateAssignmentCategoriesRequest {
	r.microsoftGraphEducationCategory = &microsoftGraphEducationCategory
	return r
}

func (r ApiEducationClassesCreateAssignmentCategoriesRequest) Execute() (MicrosoftGraphEducationCategory, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesCreateAssignmentCategoriesExecute(r)
}

/*
EducationClassesCreateAssignmentCategories Create new navigation property to assignmentCategories for education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesCreateAssignmentCategoriesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesCreateAssignmentCategories(ctx _context.Context, educationClassId string) ApiEducationClassesCreateAssignmentCategoriesRequest {
	return ApiEducationClassesCreateAssignmentCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationCategory
func (a *EducationEducationClassApiService) EducationClassesCreateAssignmentCategoriesExecute(r ApiEducationClassesCreateAssignmentCategoriesRequest) (MicrosoftGraphEducationCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesCreateAssignmentCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignmentCategories"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationCategory == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphEducationCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesCreateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	microsoftGraphEducationAssignment *MicrosoftGraphEducationAssignment
}

// New navigation property
func (r ApiEducationClassesCreateAssignmentsRequest) MicrosoftGraphEducationAssignment(microsoftGraphEducationAssignment MicrosoftGraphEducationAssignment) ApiEducationClassesCreateAssignmentsRequest {
	r.microsoftGraphEducationAssignment = &microsoftGraphEducationAssignment
	return r
}

func (r ApiEducationClassesCreateAssignmentsRequest) Execute() (MicrosoftGraphEducationAssignment, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesCreateAssignmentsExecute(r)
}

/*
EducationClassesCreateAssignments Create new navigation property to assignments for education

All assignments associated with this class. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesCreateAssignmentsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesCreateAssignments(ctx _context.Context, educationClassId string) ApiEducationClassesCreateAssignmentsRequest {
	return ApiEducationClassesCreateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationAssignment
func (a *EducationEducationClassApiService) EducationClassesCreateAssignmentsExecute(r ApiEducationClassesCreateAssignmentsRequest) (MicrosoftGraphEducationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesCreateAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationAssignment == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphEducationAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesCreateRefMembersRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref value
func (r ApiEducationClassesCreateRefMembersRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiEducationClassesCreateRefMembersRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiEducationClassesCreateRefMembersRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesCreateRefMembersExecute(r)
}

/*
EducationClassesCreateRefMembers Create new navigation property ref to members for education

All users in the class. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesCreateRefMembersRequest
*/
func (a *EducationEducationClassApiService) EducationClassesCreateRefMembers(ctx _context.Context, educationClassId string) ApiEducationClassesCreateRefMembersRequest {
	return ApiEducationClassesCreateRefMembersRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *EducationEducationClassApiService) EducationClassesCreateRefMembersExecute(r ApiEducationClassesCreateRefMembersRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesCreateRefMembers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/members/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesCreateRefSchoolsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref value
func (r ApiEducationClassesCreateRefSchoolsRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiEducationClassesCreateRefSchoolsRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiEducationClassesCreateRefSchoolsRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesCreateRefSchoolsExecute(r)
}

/*
EducationClassesCreateRefSchools Create new navigation property ref to schools for education

All schools that this class is associated with. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesCreateRefSchoolsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesCreateRefSchools(ctx _context.Context, educationClassId string) ApiEducationClassesCreateRefSchoolsRequest {
	return ApiEducationClassesCreateRefSchoolsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *EducationEducationClassApiService) EducationClassesCreateRefSchoolsExecute(r ApiEducationClassesCreateRefSchoolsRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesCreateRefSchools")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/schools/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesCreateRefTeachersRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref value
func (r ApiEducationClassesCreateRefTeachersRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiEducationClassesCreateRefTeachersRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiEducationClassesCreateRefTeachersRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesCreateRefTeachersExecute(r)
}

/*
EducationClassesCreateRefTeachers Create new navigation property ref to teachers for education

All teachers in the class. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesCreateRefTeachersRequest
*/
func (a *EducationEducationClassApiService) EducationClassesCreateRefTeachers(ctx _context.Context, educationClassId string) ApiEducationClassesCreateRefTeachersRequest {
	return ApiEducationClassesCreateRefTeachersRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *EducationEducationClassApiService) EducationClassesCreateRefTeachersExecute(r ApiEducationClassesCreateRefTeachersRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesCreateRefTeachers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/teachers/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesDeleteAssignmentCategoriesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationCategoryId string
	ifMatch *string
}

// ETag
func (r ApiEducationClassesDeleteAssignmentCategoriesRequest) IfMatch(ifMatch string) ApiEducationClassesDeleteAssignmentCategoriesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiEducationClassesDeleteAssignmentCategoriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesDeleteAssignmentCategoriesExecute(r)
}

/*
EducationClassesDeleteAssignmentCategories Delete navigation property assignmentCategories for education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationCategoryId key: id of educationCategory
 @return ApiEducationClassesDeleteAssignmentCategoriesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesDeleteAssignmentCategories(ctx _context.Context, educationClassId string, educationCategoryId string) ApiEducationClassesDeleteAssignmentCategoriesRequest {
	return ApiEducationClassesDeleteAssignmentCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationCategoryId: educationCategoryId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesDeleteAssignmentCategoriesExecute(r ApiEducationClassesDeleteAssignmentCategoriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesDeleteAssignmentCategories")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignmentCategories/{educationCategory-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationCategory-id"+"}", _neturl.PathEscape(parameterToString(r.educationCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesDeleteAssignmentDefaultsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	ifMatch *string
}

// ETag
func (r ApiEducationClassesDeleteAssignmentDefaultsRequest) IfMatch(ifMatch string) ApiEducationClassesDeleteAssignmentDefaultsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiEducationClassesDeleteAssignmentDefaultsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesDeleteAssignmentDefaultsExecute(r)
}

/*
EducationClassesDeleteAssignmentDefaults Delete navigation property assignmentDefaults for education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesDeleteAssignmentDefaultsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesDeleteAssignmentDefaults(ctx _context.Context, educationClassId string) ApiEducationClassesDeleteAssignmentDefaultsRequest {
	return ApiEducationClassesDeleteAssignmentDefaultsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesDeleteAssignmentDefaultsExecute(r ApiEducationClassesDeleteAssignmentDefaultsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesDeleteAssignmentDefaults")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignmentDefaults"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesDeleteAssignmentSettingsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	ifMatch *string
}

// ETag
func (r ApiEducationClassesDeleteAssignmentSettingsRequest) IfMatch(ifMatch string) ApiEducationClassesDeleteAssignmentSettingsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiEducationClassesDeleteAssignmentSettingsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesDeleteAssignmentSettingsExecute(r)
}

/*
EducationClassesDeleteAssignmentSettings Delete navigation property assignmentSettings for education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesDeleteAssignmentSettingsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesDeleteAssignmentSettings(ctx _context.Context, educationClassId string) ApiEducationClassesDeleteAssignmentSettingsRequest {
	return ApiEducationClassesDeleteAssignmentSettingsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesDeleteAssignmentSettingsExecute(r ApiEducationClassesDeleteAssignmentSettingsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesDeleteAssignmentSettings")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignmentSettings"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesDeleteAssignmentsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	ifMatch *string
}

// ETag
func (r ApiEducationClassesDeleteAssignmentsRequest) IfMatch(ifMatch string) ApiEducationClassesDeleteAssignmentsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiEducationClassesDeleteAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesDeleteAssignmentsExecute(r)
}

/*
EducationClassesDeleteAssignments Delete navigation property assignments for education

All assignments associated with this class. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesDeleteAssignmentsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesDeleteAssignments(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesDeleteAssignmentsRequest {
	return ApiEducationClassesDeleteAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesDeleteAssignmentsExecute(r ApiEducationClassesDeleteAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesDeleteAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesDeleteRefGroupRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	ifMatch *string
}

// ETag
func (r ApiEducationClassesDeleteRefGroupRequest) IfMatch(ifMatch string) ApiEducationClassesDeleteRefGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiEducationClassesDeleteRefGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesDeleteRefGroupExecute(r)
}

/*
EducationClassesDeleteRefGroup Delete ref of navigation property group for education

The underlying Microsoft 365 group object.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesDeleteRefGroupRequest
*/
func (a *EducationEducationClassApiService) EducationClassesDeleteRefGroup(ctx _context.Context, educationClassId string) ApiEducationClassesDeleteRefGroupRequest {
	return ApiEducationClassesDeleteRefGroupRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesDeleteRefGroupExecute(r ApiEducationClassesDeleteRefGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesDeleteRefGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/group/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesGetAssignmentCategoriesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationCategoryId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiEducationClassesGetAssignmentCategoriesRequest) Select_(select_ []string) ApiEducationClassesGetAssignmentCategoriesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesGetAssignmentCategoriesRequest) Expand(expand []string) ApiEducationClassesGetAssignmentCategoriesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesGetAssignmentCategoriesRequest) Execute() (MicrosoftGraphEducationCategory, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesGetAssignmentCategoriesExecute(r)
}

/*
EducationClassesGetAssignmentCategories Get assignmentCategories from education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationCategoryId key: id of educationCategory
 @return ApiEducationClassesGetAssignmentCategoriesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesGetAssignmentCategories(ctx _context.Context, educationClassId string, educationCategoryId string) ApiEducationClassesGetAssignmentCategoriesRequest {
	return ApiEducationClassesGetAssignmentCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationCategoryId: educationCategoryId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationCategory
func (a *EducationEducationClassApiService) EducationClassesGetAssignmentCategoriesExecute(r ApiEducationClassesGetAssignmentCategoriesRequest) (MicrosoftGraphEducationCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesGetAssignmentCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignmentCategories/{educationCategory-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationCategory-id"+"}", _neturl.PathEscape(parameterToString(r.educationCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesGetAssignmentDefaultsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiEducationClassesGetAssignmentDefaultsRequest) Select_(select_ []string) ApiEducationClassesGetAssignmentDefaultsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesGetAssignmentDefaultsRequest) Expand(expand []string) ApiEducationClassesGetAssignmentDefaultsRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesGetAssignmentDefaultsRequest) Execute() (MicrosoftGraphEducationAssignmentDefaults, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesGetAssignmentDefaultsExecute(r)
}

/*
EducationClassesGetAssignmentDefaults Get assignmentDefaults from education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesGetAssignmentDefaultsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesGetAssignmentDefaults(ctx _context.Context, educationClassId string) ApiEducationClassesGetAssignmentDefaultsRequest {
	return ApiEducationClassesGetAssignmentDefaultsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationAssignmentDefaults
func (a *EducationEducationClassApiService) EducationClassesGetAssignmentDefaultsExecute(r ApiEducationClassesGetAssignmentDefaultsRequest) (MicrosoftGraphEducationAssignmentDefaults, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationAssignmentDefaults
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesGetAssignmentDefaults")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignmentDefaults"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesGetAssignmentSettingsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiEducationClassesGetAssignmentSettingsRequest) Select_(select_ []string) ApiEducationClassesGetAssignmentSettingsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesGetAssignmentSettingsRequest) Expand(expand []string) ApiEducationClassesGetAssignmentSettingsRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesGetAssignmentSettingsRequest) Execute() (MicrosoftGraphEducationAssignmentSettings, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesGetAssignmentSettingsExecute(r)
}

/*
EducationClassesGetAssignmentSettings Get assignmentSettings from education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesGetAssignmentSettingsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesGetAssignmentSettings(ctx _context.Context, educationClassId string) ApiEducationClassesGetAssignmentSettingsRequest {
	return ApiEducationClassesGetAssignmentSettingsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationAssignmentSettings
func (a *EducationEducationClassApiService) EducationClassesGetAssignmentSettingsExecute(r ApiEducationClassesGetAssignmentSettingsRequest) (MicrosoftGraphEducationAssignmentSettings, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationAssignmentSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesGetAssignmentSettings")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignmentSettings"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesGetAssignmentsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiEducationClassesGetAssignmentsRequest) Select_(select_ []string) ApiEducationClassesGetAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesGetAssignmentsRequest) Expand(expand []string) ApiEducationClassesGetAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesGetAssignmentsRequest) Execute() (MicrosoftGraphEducationAssignment, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesGetAssignmentsExecute(r)
}

/*
EducationClassesGetAssignments Get assignments from education

All assignments associated with this class. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesGetAssignmentsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesGetAssignments(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesGetAssignmentsRequest {
	return ApiEducationClassesGetAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationAssignment
func (a *EducationEducationClassApiService) EducationClassesGetAssignmentsExecute(r ApiEducationClassesGetAssignmentsRequest) (MicrosoftGraphEducationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesGetAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesGetGroupRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiEducationClassesGetGroupRequest) Select_(select_ []string) ApiEducationClassesGetGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesGetGroupRequest) Expand(expand []string) ApiEducationClassesGetGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesGetGroupRequest) Execute() (MicrosoftGraphGroup, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesGetGroupExecute(r)
}

/*
EducationClassesGetGroup Get group from education

The underlying Microsoft 365 group object.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesGetGroupRequest
*/
func (a *EducationEducationClassApiService) EducationClassesGetGroup(ctx _context.Context, educationClassId string) ApiEducationClassesGetGroupRequest {
	return ApiEducationClassesGetGroupRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphGroup
func (a *EducationEducationClassApiService) EducationClassesGetGroupExecute(r ApiEducationClassesGetGroupRequest) (MicrosoftGraphGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesGetGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/group"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesGetRefGroupRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
}


func (r ApiEducationClassesGetRefGroupRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesGetRefGroupExecute(r)
}

/*
EducationClassesGetRefGroup Get ref of group from education

The underlying Microsoft 365 group object.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesGetRefGroupRequest
*/
func (a *EducationEducationClassApiService) EducationClassesGetRefGroup(ctx _context.Context, educationClassId string) ApiEducationClassesGetRefGroupRequest {
	return ApiEducationClassesGetRefGroupRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return string
func (a *EducationEducationClassApiService) EducationClassesGetRefGroupExecute(r ApiEducationClassesGetRefGroupRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesGetRefGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/group/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesListAssignmentCategoriesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiEducationClassesListAssignmentCategoriesRequest) Top(top int32) ApiEducationClassesListAssignmentCategoriesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesListAssignmentCategoriesRequest) Skip(skip int32) ApiEducationClassesListAssignmentCategoriesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesListAssignmentCategoriesRequest) Search(search string) ApiEducationClassesListAssignmentCategoriesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesListAssignmentCategoriesRequest) Filter(filter string) ApiEducationClassesListAssignmentCategoriesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesListAssignmentCategoriesRequest) Count(count bool) ApiEducationClassesListAssignmentCategoriesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesListAssignmentCategoriesRequest) Orderby(orderby []string) ApiEducationClassesListAssignmentCategoriesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiEducationClassesListAssignmentCategoriesRequest) Select_(select_ []string) ApiEducationClassesListAssignmentCategoriesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesListAssignmentCategoriesRequest) Expand(expand []string) ApiEducationClassesListAssignmentCategoriesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesListAssignmentCategoriesRequest) Execute() (CollectionOfEducationCategory, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesListAssignmentCategoriesExecute(r)
}

/*
EducationClassesListAssignmentCategories Get assignmentCategories from education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesListAssignmentCategoriesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesListAssignmentCategories(ctx _context.Context, educationClassId string) ApiEducationClassesListAssignmentCategoriesRequest {
	return ApiEducationClassesListAssignmentCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return CollectionOfEducationCategory
func (a *EducationEducationClassApiService) EducationClassesListAssignmentCategoriesExecute(r ApiEducationClassesListAssignmentCategoriesRequest) (CollectionOfEducationCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfEducationCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesListAssignmentCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignmentCategories"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesListAssignmentsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiEducationClassesListAssignmentsRequest) Top(top int32) ApiEducationClassesListAssignmentsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesListAssignmentsRequest) Skip(skip int32) ApiEducationClassesListAssignmentsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesListAssignmentsRequest) Search(search string) ApiEducationClassesListAssignmentsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesListAssignmentsRequest) Filter(filter string) ApiEducationClassesListAssignmentsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesListAssignmentsRequest) Count(count bool) ApiEducationClassesListAssignmentsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesListAssignmentsRequest) Orderby(orderby []string) ApiEducationClassesListAssignmentsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiEducationClassesListAssignmentsRequest) Select_(select_ []string) ApiEducationClassesListAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesListAssignmentsRequest) Expand(expand []string) ApiEducationClassesListAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesListAssignmentsRequest) Execute() (CollectionOfEducationAssignment, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesListAssignmentsExecute(r)
}

/*
EducationClassesListAssignments Get assignments from education

All assignments associated with this class. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesListAssignmentsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesListAssignments(ctx _context.Context, educationClassId string) ApiEducationClassesListAssignmentsRequest {
	return ApiEducationClassesListAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return CollectionOfEducationAssignment
func (a *EducationEducationClassApiService) EducationClassesListAssignmentsExecute(r ApiEducationClassesListAssignmentsRequest) (CollectionOfEducationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfEducationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesListAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesListMembersRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiEducationClassesListMembersRequest) Top(top int32) ApiEducationClassesListMembersRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesListMembersRequest) Skip(skip int32) ApiEducationClassesListMembersRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesListMembersRequest) Search(search string) ApiEducationClassesListMembersRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesListMembersRequest) Filter(filter string) ApiEducationClassesListMembersRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesListMembersRequest) Count(count bool) ApiEducationClassesListMembersRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesListMembersRequest) Orderby(orderby []string) ApiEducationClassesListMembersRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiEducationClassesListMembersRequest) Select_(select_ []string) ApiEducationClassesListMembersRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesListMembersRequest) Expand(expand []string) ApiEducationClassesListMembersRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesListMembersRequest) Execute() (CollectionOfEducationUser, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesListMembersExecute(r)
}

/*
EducationClassesListMembers Get members from education

All users in the class. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesListMembersRequest
*/
func (a *EducationEducationClassApiService) EducationClassesListMembers(ctx _context.Context, educationClassId string) ApiEducationClassesListMembersRequest {
	return ApiEducationClassesListMembersRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return CollectionOfEducationUser
func (a *EducationEducationClassApiService) EducationClassesListMembersExecute(r ApiEducationClassesListMembersRequest) (CollectionOfEducationUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfEducationUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesListMembers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesListRefMembersRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
}

// Show only the first n items
func (r ApiEducationClassesListRefMembersRequest) Top(top int32) ApiEducationClassesListRefMembersRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesListRefMembersRequest) Skip(skip int32) ApiEducationClassesListRefMembersRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesListRefMembersRequest) Search(search string) ApiEducationClassesListRefMembersRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesListRefMembersRequest) Filter(filter string) ApiEducationClassesListRefMembersRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesListRefMembersRequest) Count(count bool) ApiEducationClassesListRefMembersRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesListRefMembersRequest) Orderby(orderby []string) ApiEducationClassesListRefMembersRequest {
	r.orderby = &orderby
	return r
}

func (r ApiEducationClassesListRefMembersRequest) Execute() (CollectionOfLinksOfEducationUser, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesListRefMembersExecute(r)
}

/*
EducationClassesListRefMembers Get ref of members from education

All users in the class. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesListRefMembersRequest
*/
func (a *EducationEducationClassApiService) EducationClassesListRefMembers(ctx _context.Context, educationClassId string) ApiEducationClassesListRefMembersRequest {
	return ApiEducationClassesListRefMembersRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return CollectionOfLinksOfEducationUser
func (a *EducationEducationClassApiService) EducationClassesListRefMembersExecute(r ApiEducationClassesListRefMembersRequest) (CollectionOfLinksOfEducationUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfLinksOfEducationUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesListRefMembers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/members/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesListRefSchoolsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
}

// Show only the first n items
func (r ApiEducationClassesListRefSchoolsRequest) Top(top int32) ApiEducationClassesListRefSchoolsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesListRefSchoolsRequest) Skip(skip int32) ApiEducationClassesListRefSchoolsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesListRefSchoolsRequest) Search(search string) ApiEducationClassesListRefSchoolsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesListRefSchoolsRequest) Filter(filter string) ApiEducationClassesListRefSchoolsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesListRefSchoolsRequest) Count(count bool) ApiEducationClassesListRefSchoolsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesListRefSchoolsRequest) Orderby(orderby []string) ApiEducationClassesListRefSchoolsRequest {
	r.orderby = &orderby
	return r
}

func (r ApiEducationClassesListRefSchoolsRequest) Execute() (CollectionOfLinksOfEducationSchool, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesListRefSchoolsExecute(r)
}

/*
EducationClassesListRefSchools Get ref of schools from education

All schools that this class is associated with. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesListRefSchoolsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesListRefSchools(ctx _context.Context, educationClassId string) ApiEducationClassesListRefSchoolsRequest {
	return ApiEducationClassesListRefSchoolsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return CollectionOfLinksOfEducationSchool
func (a *EducationEducationClassApiService) EducationClassesListRefSchoolsExecute(r ApiEducationClassesListRefSchoolsRequest) (CollectionOfLinksOfEducationSchool, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfLinksOfEducationSchool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesListRefSchools")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/schools/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesListRefTeachersRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
}

// Show only the first n items
func (r ApiEducationClassesListRefTeachersRequest) Top(top int32) ApiEducationClassesListRefTeachersRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesListRefTeachersRequest) Skip(skip int32) ApiEducationClassesListRefTeachersRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesListRefTeachersRequest) Search(search string) ApiEducationClassesListRefTeachersRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesListRefTeachersRequest) Filter(filter string) ApiEducationClassesListRefTeachersRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesListRefTeachersRequest) Count(count bool) ApiEducationClassesListRefTeachersRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesListRefTeachersRequest) Orderby(orderby []string) ApiEducationClassesListRefTeachersRequest {
	r.orderby = &orderby
	return r
}

func (r ApiEducationClassesListRefTeachersRequest) Execute() (CollectionOfLinksOfEducationUser, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesListRefTeachersExecute(r)
}

/*
EducationClassesListRefTeachers Get ref of teachers from education

All teachers in the class. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesListRefTeachersRequest
*/
func (a *EducationEducationClassApiService) EducationClassesListRefTeachers(ctx _context.Context, educationClassId string) ApiEducationClassesListRefTeachersRequest {
	return ApiEducationClassesListRefTeachersRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return CollectionOfLinksOfEducationUser
func (a *EducationEducationClassApiService) EducationClassesListRefTeachersExecute(r ApiEducationClassesListRefTeachersRequest) (CollectionOfLinksOfEducationUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfLinksOfEducationUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesListRefTeachers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/teachers/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesListSchoolsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiEducationClassesListSchoolsRequest) Top(top int32) ApiEducationClassesListSchoolsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesListSchoolsRequest) Skip(skip int32) ApiEducationClassesListSchoolsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesListSchoolsRequest) Search(search string) ApiEducationClassesListSchoolsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesListSchoolsRequest) Filter(filter string) ApiEducationClassesListSchoolsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesListSchoolsRequest) Count(count bool) ApiEducationClassesListSchoolsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesListSchoolsRequest) Orderby(orderby []string) ApiEducationClassesListSchoolsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiEducationClassesListSchoolsRequest) Select_(select_ []string) ApiEducationClassesListSchoolsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesListSchoolsRequest) Expand(expand []string) ApiEducationClassesListSchoolsRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesListSchoolsRequest) Execute() (CollectionOfEducationSchool, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesListSchoolsExecute(r)
}

/*
EducationClassesListSchools Get schools from education

All schools that this class is associated with. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesListSchoolsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesListSchools(ctx _context.Context, educationClassId string) ApiEducationClassesListSchoolsRequest {
	return ApiEducationClassesListSchoolsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return CollectionOfEducationSchool
func (a *EducationEducationClassApiService) EducationClassesListSchoolsExecute(r ApiEducationClassesListSchoolsRequest) (CollectionOfEducationSchool, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfEducationSchool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesListSchools")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/schools"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesListTeachersRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiEducationClassesListTeachersRequest) Top(top int32) ApiEducationClassesListTeachersRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationClassesListTeachersRequest) Skip(skip int32) ApiEducationClassesListTeachersRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationClassesListTeachersRequest) Search(search string) ApiEducationClassesListTeachersRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationClassesListTeachersRequest) Filter(filter string) ApiEducationClassesListTeachersRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationClassesListTeachersRequest) Count(count bool) ApiEducationClassesListTeachersRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationClassesListTeachersRequest) Orderby(orderby []string) ApiEducationClassesListTeachersRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiEducationClassesListTeachersRequest) Select_(select_ []string) ApiEducationClassesListTeachersRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationClassesListTeachersRequest) Expand(expand []string) ApiEducationClassesListTeachersRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationClassesListTeachersRequest) Execute() (CollectionOfEducationUser, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesListTeachersExecute(r)
}

/*
EducationClassesListTeachers Get teachers from education

All teachers in the class. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesListTeachersRequest
*/
func (a *EducationEducationClassApiService) EducationClassesListTeachers(ctx _context.Context, educationClassId string) ApiEducationClassesListTeachersRequest {
	return ApiEducationClassesListTeachersRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return CollectionOfEducationUser
func (a *EducationEducationClassApiService) EducationClassesListTeachersExecute(r ApiEducationClassesListTeachersRequest) (CollectionOfEducationUser, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfEducationUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesListTeachers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/teachers"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesUpdateAssignmentCategoriesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationCategoryId string
	microsoftGraphEducationCategory *MicrosoftGraphEducationCategory
}

// New navigation property values
func (r ApiEducationClassesUpdateAssignmentCategoriesRequest) MicrosoftGraphEducationCategory(microsoftGraphEducationCategory MicrosoftGraphEducationCategory) ApiEducationClassesUpdateAssignmentCategoriesRequest {
	r.microsoftGraphEducationCategory = &microsoftGraphEducationCategory
	return r
}

func (r ApiEducationClassesUpdateAssignmentCategoriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesUpdateAssignmentCategoriesExecute(r)
}

/*
EducationClassesUpdateAssignmentCategories Update the navigation property assignmentCategories in education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationCategoryId key: id of educationCategory
 @return ApiEducationClassesUpdateAssignmentCategoriesRequest
*/
func (a *EducationEducationClassApiService) EducationClassesUpdateAssignmentCategories(ctx _context.Context, educationClassId string, educationCategoryId string) ApiEducationClassesUpdateAssignmentCategoriesRequest {
	return ApiEducationClassesUpdateAssignmentCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationCategoryId: educationCategoryId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesUpdateAssignmentCategoriesExecute(r ApiEducationClassesUpdateAssignmentCategoriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesUpdateAssignmentCategories")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignmentCategories/{educationCategory-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationCategory-id"+"}", _neturl.PathEscape(parameterToString(r.educationCategoryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationCategory == nil {
		return nil, reportError("microsoftGraphEducationCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesUpdateAssignmentDefaultsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	microsoftGraphEducationAssignmentDefaults *MicrosoftGraphEducationAssignmentDefaults
}

// New navigation property values
func (r ApiEducationClassesUpdateAssignmentDefaultsRequest) MicrosoftGraphEducationAssignmentDefaults(microsoftGraphEducationAssignmentDefaults MicrosoftGraphEducationAssignmentDefaults) ApiEducationClassesUpdateAssignmentDefaultsRequest {
	r.microsoftGraphEducationAssignmentDefaults = &microsoftGraphEducationAssignmentDefaults
	return r
}

func (r ApiEducationClassesUpdateAssignmentDefaultsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesUpdateAssignmentDefaultsExecute(r)
}

/*
EducationClassesUpdateAssignmentDefaults Update the navigation property assignmentDefaults in education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesUpdateAssignmentDefaultsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesUpdateAssignmentDefaults(ctx _context.Context, educationClassId string) ApiEducationClassesUpdateAssignmentDefaultsRequest {
	return ApiEducationClassesUpdateAssignmentDefaultsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesUpdateAssignmentDefaultsExecute(r ApiEducationClassesUpdateAssignmentDefaultsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesUpdateAssignmentDefaults")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignmentDefaults"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationAssignmentDefaults == nil {
		return nil, reportError("microsoftGraphEducationAssignmentDefaults is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationAssignmentDefaults
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesUpdateAssignmentSettingsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	microsoftGraphEducationAssignmentSettings *MicrosoftGraphEducationAssignmentSettings
}

// New navigation property values
func (r ApiEducationClassesUpdateAssignmentSettingsRequest) MicrosoftGraphEducationAssignmentSettings(microsoftGraphEducationAssignmentSettings MicrosoftGraphEducationAssignmentSettings) ApiEducationClassesUpdateAssignmentSettingsRequest {
	r.microsoftGraphEducationAssignmentSettings = &microsoftGraphEducationAssignmentSettings
	return r
}

func (r ApiEducationClassesUpdateAssignmentSettingsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesUpdateAssignmentSettingsExecute(r)
}

/*
EducationClassesUpdateAssignmentSettings Update the navigation property assignmentSettings in education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesUpdateAssignmentSettingsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesUpdateAssignmentSettings(ctx _context.Context, educationClassId string) ApiEducationClassesUpdateAssignmentSettingsRequest {
	return ApiEducationClassesUpdateAssignmentSettingsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesUpdateAssignmentSettingsExecute(r ApiEducationClassesUpdateAssignmentSettingsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesUpdateAssignmentSettings")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignmentSettings"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationAssignmentSettings == nil {
		return nil, reportError("microsoftGraphEducationAssignmentSettings is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationAssignmentSettings
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesUpdateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	educationAssignmentId string
	microsoftGraphEducationAssignment *MicrosoftGraphEducationAssignment
}

// New navigation property values
func (r ApiEducationClassesUpdateAssignmentsRequest) MicrosoftGraphEducationAssignment(microsoftGraphEducationAssignment MicrosoftGraphEducationAssignment) ApiEducationClassesUpdateAssignmentsRequest {
	r.microsoftGraphEducationAssignment = &microsoftGraphEducationAssignment
	return r
}

func (r ApiEducationClassesUpdateAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesUpdateAssignmentsExecute(r)
}

/*
EducationClassesUpdateAssignments Update the navigation property assignments in education

All assignments associated with this class. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesUpdateAssignmentsRequest
*/
func (a *EducationEducationClassApiService) EducationClassesUpdateAssignments(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesUpdateAssignmentsRequest {
	return ApiEducationClassesUpdateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesUpdateAssignmentsExecute(r ApiEducationClassesUpdateAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesUpdateAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationAssignment == nil {
		return nil, reportError("microsoftGraphEducationAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationClassesUpdateRefGroupRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiEducationClassesUpdateRefGroupRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiEducationClassesUpdateRefGroupRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiEducationClassesUpdateRefGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationClassesUpdateRefGroupExecute(r)
}

/*
EducationClassesUpdateRefGroup Update the ref of navigation property group in education

The underlying Microsoft 365 group object.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationClassesUpdateRefGroupRequest
*/
func (a *EducationEducationClassApiService) EducationClassesUpdateRefGroup(ctx _context.Context, educationClassId string) ApiEducationClassesUpdateRefGroupRequest {
	return ApiEducationClassesUpdateRefGroupRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationClassesUpdateRefGroupExecute(r ApiEducationClassesUpdateRefGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationClassesUpdateRefGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/group/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationCreateClassesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	microsoftGraphEducationClass *MicrosoftGraphEducationClass
}

// New navigation property
func (r ApiEducationCreateClassesRequest) MicrosoftGraphEducationClass(microsoftGraphEducationClass MicrosoftGraphEducationClass) ApiEducationCreateClassesRequest {
	r.microsoftGraphEducationClass = &microsoftGraphEducationClass
	return r
}

func (r ApiEducationCreateClassesRequest) Execute() (MicrosoftGraphEducationClass, *_nethttp.Response, error) {
	return r.ApiService.EducationCreateClassesExecute(r)
}

/*
EducationCreateClasses Create new navigation property to classes for education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEducationCreateClassesRequest
*/
func (a *EducationEducationClassApiService) EducationCreateClasses(ctx _context.Context) ApiEducationCreateClassesRequest {
	return ApiEducationCreateClassesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationClass
func (a *EducationEducationClassApiService) EducationCreateClassesExecute(r ApiEducationCreateClassesRequest) (MicrosoftGraphEducationClass, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationClass
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationCreateClasses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationClass == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphEducationClass is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationClass
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationDeleteClassesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	ifMatch *string
}

// ETag
func (r ApiEducationDeleteClassesRequest) IfMatch(ifMatch string) ApiEducationDeleteClassesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiEducationDeleteClassesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationDeleteClassesExecute(r)
}

/*
EducationDeleteClasses Delete navigation property classes for education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationDeleteClassesRequest
*/
func (a *EducationEducationClassApiService) EducationDeleteClasses(ctx _context.Context, educationClassId string) ApiEducationDeleteClassesRequest {
	return ApiEducationDeleteClassesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationDeleteClassesExecute(r ApiEducationDeleteClassesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationDeleteClasses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEducationGetClassesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiEducationGetClassesRequest) Select_(select_ []string) ApiEducationGetClassesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationGetClassesRequest) Expand(expand []string) ApiEducationGetClassesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationGetClassesRequest) Execute() (MicrosoftGraphEducationClass, *_nethttp.Response, error) {
	return r.ApiService.EducationGetClassesExecute(r)
}

/*
EducationGetClasses Get classes from education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationGetClassesRequest
*/
func (a *EducationEducationClassApiService) EducationGetClasses(ctx _context.Context, educationClassId string) ApiEducationGetClassesRequest {
	return ApiEducationGetClassesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEducationClass
func (a *EducationEducationClassApiService) EducationGetClassesExecute(r ApiEducationGetClassesRequest) (MicrosoftGraphEducationClass, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEducationClass
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationGetClasses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationListClassesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiEducationListClassesRequest) Top(top int32) ApiEducationListClassesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiEducationListClassesRequest) Skip(skip int32) ApiEducationListClassesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiEducationListClassesRequest) Search(search string) ApiEducationListClassesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiEducationListClassesRequest) Filter(filter string) ApiEducationListClassesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiEducationListClassesRequest) Count(count bool) ApiEducationListClassesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiEducationListClassesRequest) Orderby(orderby []string) ApiEducationListClassesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiEducationListClassesRequest) Select_(select_ []string) ApiEducationListClassesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiEducationListClassesRequest) Expand(expand []string) ApiEducationListClassesRequest {
	r.expand = &expand
	return r
}

func (r ApiEducationListClassesRequest) Execute() (CollectionOfEducationClass, *_nethttp.Response, error) {
	return r.ApiService.EducationListClassesExecute(r)
}

/*
EducationListClasses Get classes from education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEducationListClassesRequest
*/
func (a *EducationEducationClassApiService) EducationListClasses(ctx _context.Context) ApiEducationListClassesRequest {
	return ApiEducationListClassesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfEducationClass
func (a *EducationEducationClassApiService) EducationListClassesExecute(r ApiEducationListClassesRequest) (CollectionOfEducationClass, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfEducationClass
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationListClasses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationUpdateClassesRequest struct {
	ctx _context.Context
	ApiService *EducationEducationClassApiService
	educationClassId string
	microsoftGraphEducationClass *MicrosoftGraphEducationClass
}

// New navigation property values
func (r ApiEducationUpdateClassesRequest) MicrosoftGraphEducationClass(microsoftGraphEducationClass MicrosoftGraphEducationClass) ApiEducationUpdateClassesRequest {
	r.microsoftGraphEducationClass = &microsoftGraphEducationClass
	return r
}

func (r ApiEducationUpdateClassesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EducationUpdateClassesExecute(r)
}

/*
EducationUpdateClasses Update the navigation property classes in education

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @return ApiEducationUpdateClassesRequest
*/
func (a *EducationEducationClassApiService) EducationUpdateClasses(ctx _context.Context, educationClassId string) ApiEducationUpdateClassesRequest {
	return ApiEducationUpdateClassesRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
	}
}

// Execute executes the request
func (a *EducationEducationClassApiService) EducationUpdateClassesExecute(r ApiEducationUpdateClassesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationEducationClassApiService.EducationUpdateClasses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEducationClass == nil {
		return nil, reportError("microsoftGraphEducationClass is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEducationClass
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
