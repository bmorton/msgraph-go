/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ReportsPrintUsageByPrinterApiService ReportsPrintUsageByPrinterApi service
type ReportsPrintUsageByPrinterApiService service

type ApiReportsCreateDailyPrintUsageByPrinterRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByPrinterApiService
	microsoftGraphPrintUsageByPrinter *MicrosoftGraphPrintUsageByPrinter
}

// New navigation property
func (r ApiReportsCreateDailyPrintUsageByPrinterRequest) MicrosoftGraphPrintUsageByPrinter(microsoftGraphPrintUsageByPrinter MicrosoftGraphPrintUsageByPrinter) ApiReportsCreateDailyPrintUsageByPrinterRequest {
	r.microsoftGraphPrintUsageByPrinter = &microsoftGraphPrintUsageByPrinter
	return r
}

func (r ApiReportsCreateDailyPrintUsageByPrinterRequest) Execute() (MicrosoftGraphPrintUsageByPrinter, *_nethttp.Response, error) {
	return r.ApiService.ReportsCreateDailyPrintUsageByPrinterExecute(r)
}

/*
ReportsCreateDailyPrintUsageByPrinter Create new navigation property to dailyPrintUsageByPrinter for reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsCreateDailyPrintUsageByPrinterRequest
*/
func (a *ReportsPrintUsageByPrinterApiService) ReportsCreateDailyPrintUsageByPrinter(ctx _context.Context) ApiReportsCreateDailyPrintUsageByPrinterRequest {
	return ApiReportsCreateDailyPrintUsageByPrinterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintUsageByPrinter
func (a *ReportsPrintUsageByPrinterApiService) ReportsCreateDailyPrintUsageByPrinterExecute(r ApiReportsCreateDailyPrintUsageByPrinterRequest) (MicrosoftGraphPrintUsageByPrinter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintUsageByPrinter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByPrinterApiService.ReportsCreateDailyPrintUsageByPrinter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/dailyPrintUsageByPrinter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintUsageByPrinter == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphPrintUsageByPrinter is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintUsageByPrinter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsCreateMonthlyPrintUsageByPrinterRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByPrinterApiService
	microsoftGraphPrintUsageByPrinter *MicrosoftGraphPrintUsageByPrinter
}

// New navigation property
func (r ApiReportsCreateMonthlyPrintUsageByPrinterRequest) MicrosoftGraphPrintUsageByPrinter(microsoftGraphPrintUsageByPrinter MicrosoftGraphPrintUsageByPrinter) ApiReportsCreateMonthlyPrintUsageByPrinterRequest {
	r.microsoftGraphPrintUsageByPrinter = &microsoftGraphPrintUsageByPrinter
	return r
}

func (r ApiReportsCreateMonthlyPrintUsageByPrinterRequest) Execute() (MicrosoftGraphPrintUsageByPrinter, *_nethttp.Response, error) {
	return r.ApiService.ReportsCreateMonthlyPrintUsageByPrinterExecute(r)
}

/*
ReportsCreateMonthlyPrintUsageByPrinter Create new navigation property to monthlyPrintUsageByPrinter for reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsCreateMonthlyPrintUsageByPrinterRequest
*/
func (a *ReportsPrintUsageByPrinterApiService) ReportsCreateMonthlyPrintUsageByPrinter(ctx _context.Context) ApiReportsCreateMonthlyPrintUsageByPrinterRequest {
	return ApiReportsCreateMonthlyPrintUsageByPrinterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintUsageByPrinter
func (a *ReportsPrintUsageByPrinterApiService) ReportsCreateMonthlyPrintUsageByPrinterExecute(r ApiReportsCreateMonthlyPrintUsageByPrinterRequest) (MicrosoftGraphPrintUsageByPrinter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintUsageByPrinter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByPrinterApiService.ReportsCreateMonthlyPrintUsageByPrinter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/monthlyPrintUsageByPrinter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintUsageByPrinter == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphPrintUsageByPrinter is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintUsageByPrinter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsDeleteDailyPrintUsageByPrinterRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByPrinterApiService
	printUsageByPrinterId string
	ifMatch *string
}

// ETag
func (r ApiReportsDeleteDailyPrintUsageByPrinterRequest) IfMatch(ifMatch string) ApiReportsDeleteDailyPrintUsageByPrinterRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiReportsDeleteDailyPrintUsageByPrinterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ReportsDeleteDailyPrintUsageByPrinterExecute(r)
}

/*
ReportsDeleteDailyPrintUsageByPrinter Delete navigation property dailyPrintUsageByPrinter for reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printUsageByPrinterId key: id of printUsageByPrinter
 @return ApiReportsDeleteDailyPrintUsageByPrinterRequest
*/
func (a *ReportsPrintUsageByPrinterApiService) ReportsDeleteDailyPrintUsageByPrinter(ctx _context.Context, printUsageByPrinterId string) ApiReportsDeleteDailyPrintUsageByPrinterRequest {
	return ApiReportsDeleteDailyPrintUsageByPrinterRequest{
		ApiService: a,
		ctx: ctx,
		printUsageByPrinterId: printUsageByPrinterId,
	}
}

// Execute executes the request
func (a *ReportsPrintUsageByPrinterApiService) ReportsDeleteDailyPrintUsageByPrinterExecute(r ApiReportsDeleteDailyPrintUsageByPrinterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByPrinterApiService.ReportsDeleteDailyPrintUsageByPrinter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/dailyPrintUsageByPrinter/{printUsageByPrinter-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printUsageByPrinter-id"+"}", _neturl.PathEscape(parameterToString(r.printUsageByPrinterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReportsDeleteMonthlyPrintUsageByPrinterRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByPrinterApiService
	printUsageByPrinterId string
	ifMatch *string
}

// ETag
func (r ApiReportsDeleteMonthlyPrintUsageByPrinterRequest) IfMatch(ifMatch string) ApiReportsDeleteMonthlyPrintUsageByPrinterRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiReportsDeleteMonthlyPrintUsageByPrinterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ReportsDeleteMonthlyPrintUsageByPrinterExecute(r)
}

/*
ReportsDeleteMonthlyPrintUsageByPrinter Delete navigation property monthlyPrintUsageByPrinter for reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printUsageByPrinterId key: id of printUsageByPrinter
 @return ApiReportsDeleteMonthlyPrintUsageByPrinterRequest
*/
func (a *ReportsPrintUsageByPrinterApiService) ReportsDeleteMonthlyPrintUsageByPrinter(ctx _context.Context, printUsageByPrinterId string) ApiReportsDeleteMonthlyPrintUsageByPrinterRequest {
	return ApiReportsDeleteMonthlyPrintUsageByPrinterRequest{
		ApiService: a,
		ctx: ctx,
		printUsageByPrinterId: printUsageByPrinterId,
	}
}

// Execute executes the request
func (a *ReportsPrintUsageByPrinterApiService) ReportsDeleteMonthlyPrintUsageByPrinterExecute(r ApiReportsDeleteMonthlyPrintUsageByPrinterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByPrinterApiService.ReportsDeleteMonthlyPrintUsageByPrinter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/monthlyPrintUsageByPrinter/{printUsageByPrinter-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printUsageByPrinter-id"+"}", _neturl.PathEscape(parameterToString(r.printUsageByPrinterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReportsGetDailyPrintUsageByPrinterRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByPrinterApiService
	printUsageByPrinterId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiReportsGetDailyPrintUsageByPrinterRequest) Select_(select_ []string) ApiReportsGetDailyPrintUsageByPrinterRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiReportsGetDailyPrintUsageByPrinterRequest) Expand(expand []string) ApiReportsGetDailyPrintUsageByPrinterRequest {
	r.expand = &expand
	return r
}

func (r ApiReportsGetDailyPrintUsageByPrinterRequest) Execute() (MicrosoftGraphPrintUsageByPrinter, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetDailyPrintUsageByPrinterExecute(r)
}

/*
ReportsGetDailyPrintUsageByPrinter Get dailyPrintUsageByPrinter from reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printUsageByPrinterId key: id of printUsageByPrinter
 @return ApiReportsGetDailyPrintUsageByPrinterRequest
*/
func (a *ReportsPrintUsageByPrinterApiService) ReportsGetDailyPrintUsageByPrinter(ctx _context.Context, printUsageByPrinterId string) ApiReportsGetDailyPrintUsageByPrinterRequest {
	return ApiReportsGetDailyPrintUsageByPrinterRequest{
		ApiService: a,
		ctx: ctx,
		printUsageByPrinterId: printUsageByPrinterId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintUsageByPrinter
func (a *ReportsPrintUsageByPrinterApiService) ReportsGetDailyPrintUsageByPrinterExecute(r ApiReportsGetDailyPrintUsageByPrinterRequest) (MicrosoftGraphPrintUsageByPrinter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintUsageByPrinter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByPrinterApiService.ReportsGetDailyPrintUsageByPrinter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/dailyPrintUsageByPrinter/{printUsageByPrinter-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printUsageByPrinter-id"+"}", _neturl.PathEscape(parameterToString(r.printUsageByPrinterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetMonthlyPrintUsageByPrinterRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByPrinterApiService
	printUsageByPrinterId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiReportsGetMonthlyPrintUsageByPrinterRequest) Select_(select_ []string) ApiReportsGetMonthlyPrintUsageByPrinterRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiReportsGetMonthlyPrintUsageByPrinterRequest) Expand(expand []string) ApiReportsGetMonthlyPrintUsageByPrinterRequest {
	r.expand = &expand
	return r
}

func (r ApiReportsGetMonthlyPrintUsageByPrinterRequest) Execute() (MicrosoftGraphPrintUsageByPrinter, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetMonthlyPrintUsageByPrinterExecute(r)
}

/*
ReportsGetMonthlyPrintUsageByPrinter Get monthlyPrintUsageByPrinter from reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printUsageByPrinterId key: id of printUsageByPrinter
 @return ApiReportsGetMonthlyPrintUsageByPrinterRequest
*/
func (a *ReportsPrintUsageByPrinterApiService) ReportsGetMonthlyPrintUsageByPrinter(ctx _context.Context, printUsageByPrinterId string) ApiReportsGetMonthlyPrintUsageByPrinterRequest {
	return ApiReportsGetMonthlyPrintUsageByPrinterRequest{
		ApiService: a,
		ctx: ctx,
		printUsageByPrinterId: printUsageByPrinterId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphPrintUsageByPrinter
func (a *ReportsPrintUsageByPrinterApiService) ReportsGetMonthlyPrintUsageByPrinterExecute(r ApiReportsGetMonthlyPrintUsageByPrinterRequest) (MicrosoftGraphPrintUsageByPrinter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphPrintUsageByPrinter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByPrinterApiService.ReportsGetMonthlyPrintUsageByPrinter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/monthlyPrintUsageByPrinter/{printUsageByPrinter-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printUsageByPrinter-id"+"}", _neturl.PathEscape(parameterToString(r.printUsageByPrinterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsListDailyPrintUsageByPrinterRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByPrinterApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiReportsListDailyPrintUsageByPrinterRequest) Top(top int32) ApiReportsListDailyPrintUsageByPrinterRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiReportsListDailyPrintUsageByPrinterRequest) Skip(skip int32) ApiReportsListDailyPrintUsageByPrinterRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiReportsListDailyPrintUsageByPrinterRequest) Search(search string) ApiReportsListDailyPrintUsageByPrinterRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiReportsListDailyPrintUsageByPrinterRequest) Filter(filter string) ApiReportsListDailyPrintUsageByPrinterRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiReportsListDailyPrintUsageByPrinterRequest) Count(count bool) ApiReportsListDailyPrintUsageByPrinterRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiReportsListDailyPrintUsageByPrinterRequest) Orderby(orderby []string) ApiReportsListDailyPrintUsageByPrinterRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiReportsListDailyPrintUsageByPrinterRequest) Select_(select_ []string) ApiReportsListDailyPrintUsageByPrinterRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiReportsListDailyPrintUsageByPrinterRequest) Expand(expand []string) ApiReportsListDailyPrintUsageByPrinterRequest {
	r.expand = &expand
	return r
}

func (r ApiReportsListDailyPrintUsageByPrinterRequest) Execute() (CollectionOfPrintUsageByPrinter, *_nethttp.Response, error) {
	return r.ApiService.ReportsListDailyPrintUsageByPrinterExecute(r)
}

/*
ReportsListDailyPrintUsageByPrinter Get dailyPrintUsageByPrinter from reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsListDailyPrintUsageByPrinterRequest
*/
func (a *ReportsPrintUsageByPrinterApiService) ReportsListDailyPrintUsageByPrinter(ctx _context.Context) ApiReportsListDailyPrintUsageByPrinterRequest {
	return ApiReportsListDailyPrintUsageByPrinterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfPrintUsageByPrinter
func (a *ReportsPrintUsageByPrinterApiService) ReportsListDailyPrintUsageByPrinterExecute(r ApiReportsListDailyPrintUsageByPrinterRequest) (CollectionOfPrintUsageByPrinter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfPrintUsageByPrinter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByPrinterApiService.ReportsListDailyPrintUsageByPrinter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/dailyPrintUsageByPrinter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsListMonthlyPrintUsageByPrinterRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByPrinterApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiReportsListMonthlyPrintUsageByPrinterRequest) Top(top int32) ApiReportsListMonthlyPrintUsageByPrinterRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiReportsListMonthlyPrintUsageByPrinterRequest) Skip(skip int32) ApiReportsListMonthlyPrintUsageByPrinterRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiReportsListMonthlyPrintUsageByPrinterRequest) Search(search string) ApiReportsListMonthlyPrintUsageByPrinterRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiReportsListMonthlyPrintUsageByPrinterRequest) Filter(filter string) ApiReportsListMonthlyPrintUsageByPrinterRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiReportsListMonthlyPrintUsageByPrinterRequest) Count(count bool) ApiReportsListMonthlyPrintUsageByPrinterRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiReportsListMonthlyPrintUsageByPrinterRequest) Orderby(orderby []string) ApiReportsListMonthlyPrintUsageByPrinterRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiReportsListMonthlyPrintUsageByPrinterRequest) Select_(select_ []string) ApiReportsListMonthlyPrintUsageByPrinterRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiReportsListMonthlyPrintUsageByPrinterRequest) Expand(expand []string) ApiReportsListMonthlyPrintUsageByPrinterRequest {
	r.expand = &expand
	return r
}

func (r ApiReportsListMonthlyPrintUsageByPrinterRequest) Execute() (CollectionOfPrintUsageByPrinter, *_nethttp.Response, error) {
	return r.ApiService.ReportsListMonthlyPrintUsageByPrinterExecute(r)
}

/*
ReportsListMonthlyPrintUsageByPrinter Get monthlyPrintUsageByPrinter from reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsListMonthlyPrintUsageByPrinterRequest
*/
func (a *ReportsPrintUsageByPrinterApiService) ReportsListMonthlyPrintUsageByPrinter(ctx _context.Context) ApiReportsListMonthlyPrintUsageByPrinterRequest {
	return ApiReportsListMonthlyPrintUsageByPrinterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfPrintUsageByPrinter
func (a *ReportsPrintUsageByPrinterApiService) ReportsListMonthlyPrintUsageByPrinterExecute(r ApiReportsListMonthlyPrintUsageByPrinterRequest) (CollectionOfPrintUsageByPrinter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfPrintUsageByPrinter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByPrinterApiService.ReportsListMonthlyPrintUsageByPrinter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/monthlyPrintUsageByPrinter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsUpdateDailyPrintUsageByPrinterRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByPrinterApiService
	printUsageByPrinterId string
	microsoftGraphPrintUsageByPrinter *MicrosoftGraphPrintUsageByPrinter
}

// New navigation property values
func (r ApiReportsUpdateDailyPrintUsageByPrinterRequest) MicrosoftGraphPrintUsageByPrinter(microsoftGraphPrintUsageByPrinter MicrosoftGraphPrintUsageByPrinter) ApiReportsUpdateDailyPrintUsageByPrinterRequest {
	r.microsoftGraphPrintUsageByPrinter = &microsoftGraphPrintUsageByPrinter
	return r
}

func (r ApiReportsUpdateDailyPrintUsageByPrinterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ReportsUpdateDailyPrintUsageByPrinterExecute(r)
}

/*
ReportsUpdateDailyPrintUsageByPrinter Update the navigation property dailyPrintUsageByPrinter in reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printUsageByPrinterId key: id of printUsageByPrinter
 @return ApiReportsUpdateDailyPrintUsageByPrinterRequest
*/
func (a *ReportsPrintUsageByPrinterApiService) ReportsUpdateDailyPrintUsageByPrinter(ctx _context.Context, printUsageByPrinterId string) ApiReportsUpdateDailyPrintUsageByPrinterRequest {
	return ApiReportsUpdateDailyPrintUsageByPrinterRequest{
		ApiService: a,
		ctx: ctx,
		printUsageByPrinterId: printUsageByPrinterId,
	}
}

// Execute executes the request
func (a *ReportsPrintUsageByPrinterApiService) ReportsUpdateDailyPrintUsageByPrinterExecute(r ApiReportsUpdateDailyPrintUsageByPrinterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByPrinterApiService.ReportsUpdateDailyPrintUsageByPrinter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/dailyPrintUsageByPrinter/{printUsageByPrinter-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printUsageByPrinter-id"+"}", _neturl.PathEscape(parameterToString(r.printUsageByPrinterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintUsageByPrinter == nil {
		return nil, reportError("microsoftGraphPrintUsageByPrinter is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintUsageByPrinter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReportsUpdateMonthlyPrintUsageByPrinterRequest struct {
	ctx _context.Context
	ApiService *ReportsPrintUsageByPrinterApiService
	printUsageByPrinterId string
	microsoftGraphPrintUsageByPrinter *MicrosoftGraphPrintUsageByPrinter
}

// New navigation property values
func (r ApiReportsUpdateMonthlyPrintUsageByPrinterRequest) MicrosoftGraphPrintUsageByPrinter(microsoftGraphPrintUsageByPrinter MicrosoftGraphPrintUsageByPrinter) ApiReportsUpdateMonthlyPrintUsageByPrinterRequest {
	r.microsoftGraphPrintUsageByPrinter = &microsoftGraphPrintUsageByPrinter
	return r
}

func (r ApiReportsUpdateMonthlyPrintUsageByPrinterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ReportsUpdateMonthlyPrintUsageByPrinterExecute(r)
}

/*
ReportsUpdateMonthlyPrintUsageByPrinter Update the navigation property monthlyPrintUsageByPrinter in reports

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printUsageByPrinterId key: id of printUsageByPrinter
 @return ApiReportsUpdateMonthlyPrintUsageByPrinterRequest
*/
func (a *ReportsPrintUsageByPrinterApiService) ReportsUpdateMonthlyPrintUsageByPrinter(ctx _context.Context, printUsageByPrinterId string) ApiReportsUpdateMonthlyPrintUsageByPrinterRequest {
	return ApiReportsUpdateMonthlyPrintUsageByPrinterRequest{
		ApiService: a,
		ctx: ctx,
		printUsageByPrinterId: printUsageByPrinterId,
	}
}

// Execute executes the request
func (a *ReportsPrintUsageByPrinterApiService) ReportsUpdateMonthlyPrintUsageByPrinterExecute(r ApiReportsUpdateMonthlyPrintUsageByPrinterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsPrintUsageByPrinterApiService.ReportsUpdateMonthlyPrintUsageByPrinter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/monthlyPrintUsageByPrinter/{printUsageByPrinter-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"printUsageByPrinter-id"+"}", _neturl.PathEscape(parameterToString(r.printUsageByPrinterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphPrintUsageByPrinter == nil {
		return nil, reportError("microsoftGraphPrintUsageByPrinter is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphPrintUsageByPrinter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
